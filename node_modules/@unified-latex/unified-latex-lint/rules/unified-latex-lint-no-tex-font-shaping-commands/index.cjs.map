{"version":3,"file":"index.cjs","sources":["../../../rules/unified-latex-lint-no-tex-font-shaping-commands/index.ts"],"sourcesContent":["import { lintRule } from \"unified-lint-rule\";\nimport { m } from \"@unified-latex/unified-latex-builder\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport * as Ast from \"@unified-latex/unified-latex-types\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nimport { replaceNodeDuringVisit } from \"@unified-latex/unified-latex-util-replace\";\n\nconst REPLACEMENTS: Record<string, string> = {\n    bf: \"bfseries\",\n    it: \"itshape\",\n    rm: \"rmfamily\",\n    sc: \"scshape\",\n    sf: \"sffamily\",\n    sl: \"slshape\",\n    tt: \"ttfamily\",\n};\n\nconst isReplaceable = match.createMacroMatcher(REPLACEMENTS);\n\ntype PluginOptions =\n    | {\n          /**\n           * Whether or not to fix the lint\n           *\n           * @type {boolean}\n           */\n          fix?: boolean;\n      }\n    | undefined;\n\nexport const DESCRIPTION = `## Lint Rule\n\nAvoid using TeX font changing commands like \\\\bf, \\\\it, etc. Prefer LaTeX \\\\bfseries, \\\\itshape, etc.. \n\nThis rule flags any usage of \\`${Object.keys(REPLACEMENTS)\n    .map((r) => printRaw(m(r)))\n    .join(\"` `\")}\\`\n\n### See\n\nCTAN l2tabuen Section 2.`;\n\nexport const unifiedLatexLintNoTexFontShapingCommands = lintRule<\n    Ast.Root,\n    PluginOptions\n>(\n    { origin: \"unified-latex-lint:no-tex-font-shaping-commands\" },\n    (tree, file, options) => {\n        visit(\n            tree,\n            (node, info) => {\n                const macroName = node.content;\n                file.message(\n                    `Replace \"${printRaw(node)}\" with \"${printRaw(\n                        m(REPLACEMENTS[macroName])\n                    )}\"`,\n                    node\n                );\n\n                if (options?.fix) {\n                    replaceNodeDuringVisit(m(REPLACEMENTS[macroName]), info);\n                }\n            },\n            { test: isReplaceable }\n        );\n    }\n);\n"],"names":["match","printRaw","m","lintRule","visit","replaceNodeDuringVisit"],"mappings":";;;;;;;;AAQA,MAAM,eAAuC;AAAA,EACzC,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AACR;AAEA,MAAM,gBAAgBA,sBAAM,MAAA,mBAAmB,YAAY;AAapD,MAAM,cAAc;AAAA;AAAA;AAAA;AAAA,iCAIM,OAAO,KAAK,YAAY,EACpD,IAAI,CAAC,MAAMC,kCAASC,oBAAAA,EAAE,CAAC,CAAC,CAAC,EACzB,KAAK,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAMT,MAAM,2CAA2CC,MAAA;AAAA,EAIpD,EAAE,QAAQ,kDAAkD;AAAA,EAC5D,CAAC,MAAM,MAAM,YAAY;AACrBC,0BAAA;AAAA,MACI;AAAA,MACA,CAAC,MAAM,SAAS;AACZ,cAAM,YAAY,KAAK;AAClB,aAAA;AAAA,UACD,YAAYH,yBAAA,SAAS,IAAI,CAAC,WAAWA,yBAAA;AAAA,YACjCC,sBAAE,aAAa,SAAS,CAAC;AAAA,UAC5B,CAAA;AAAA,UACD;AAAA,QAAA;AAGJ,YAAI,mCAAS,KAAK;AACdG,kCAAA,uBAAuBH,oBAAE,EAAA,aAAa,SAAS,CAAC,GAAG,IAAI;AAAA,QAC3D;AAAA,MACJ;AAAA,MACA,EAAE,MAAM,cAAc;AAAA,IAAA;AAAA,EAE9B;AACJ;;;"}