/**
 * Object exporting all available lints.
 */
export declare const lints: {
    unifiedLatexLintArgumentColorCommands: import('unified').Plugin<void[] | [({
        fix?: boolean;
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        fix?: boolean;
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintArgumentFontShapingCommands: import('unified').Plugin<void[] | [({
        fix?: boolean;
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        fix?: boolean;
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintConsistentInlineMath: import('unified').Plugin<void[] | [({
        preferredStyle: "tex" | "latex";
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        preferredStyle: "tex" | "latex";
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintNoDef: import('unified').Plugin<void[] | [[boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, undefined?] | undefined], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintNoPlaintextOperators: import('unified').Plugin<void[] | [({
        fix?: boolean;
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        fix?: boolean;
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintNoTexDisplayMath: import('unified').Plugin<void[] | [[boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, undefined?] | undefined], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintNoTexFontShapingCommands: import('unified').Plugin<void[] | [({
        fix?: boolean;
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        fix?: boolean;
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintObsoletePackages: import('unified').Plugin<void[] | [unknown], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
    unifiedLatexLintPreferSetlength: import('unified').Plugin<void[] | [({
        fix?: boolean;
    } | undefined) | [boolean | import('unified-lint-rule/lib').Label | import('unified-lint-rule/lib').Severity, ({
        fix?: boolean;
    } | undefined)?]], import('@unified-latex/unified-latex-types').Root, import('@unified-latex/unified-latex-types').Root>;
};
/**
 * ## What is this?
 *
 * Linting functions for `unified-latex` ASTs. Lints are found in the `rules/` subdirectory. Lints
 * that can be fixed accept an optional `{fix: boolean}` argument.
 *
 * ## When should I use this?
 *
 * If you are building a linter for LaTeX code.
 *
 */
//# sourceMappingURL=index.d.ts.map