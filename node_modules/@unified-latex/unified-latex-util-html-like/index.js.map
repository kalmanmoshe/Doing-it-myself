{"version":3,"file":"index.js","sources":["../libs/mangle.ts","../libs/builders.ts","../libs/extractors.ts"],"sourcesContent":["/**\n * Convert `tag` into an escaped macro name.\n */\nexport function tagName(tag: string): string {\n    return `html-tag:${tag}`;\n}\n\n/**\n * Convert `attribute` into an escaped macro name.\n */\nexport function attributeName(attribute: string): string {\n    return `html-attr:${attribute}`;\n}\n\n/**\n * Extract a tag name from an escaped macro name.\n */\nexport function getTagNameFromString(tagName: string): string {\n    const match = tagName.match(/:.*/);\n    if (match) {\n        return match[0].slice(1);\n    }\n    throw new Error(`Could not find tag name in ${tagName}`);\n}\n\n/**\n * Extract an attribute name from an escaped macro name.\n */\nexport function getAttributeNameFromString(tagName: string): string {\n    const match = tagName.match(/:.*/);\n    if (match) {\n        return match[0].slice(1);\n    }\n    throw new Error(`Could not find attribute name in ${tagName}`);\n}\n","import { arg, m } from \"@unified-latex/unified-latex-builder\";\nimport * as Ast from \"@unified-latex/unified-latex-types\";\nimport { attributeName, tagName } from \"./mangle\";\n\n/**\n * Make an html-like node storing `content`. The node is a macro and `content` as well\n * as any attributes can be extracted or further processed. Collisions are avoided with existing\n * macros because all macros are prefixed with `html-tag:` or `html-attribute:`, which contain\n * special characters that normal macros cannot have.\n */\nexport function htmlLike({\n    tag,\n    content,\n    attributes,\n}: {\n    tag: string;\n    content?: Ast.Node | Ast.Node[];\n    attributes?: object;\n}): Ast.Macro {\n    if (!content) {\n        content = [];\n    }\n    if (content && !Array.isArray(content)) {\n        content = [content];\n    }\n    attributes = attributes || {};\n    const attrs: Ast.Node[] = Object.entries(attributes).map(\n        ([name, value]) => {\n            value = JSON.stringify(value);\n            return m(attributeName(name), arg(value));\n        }\n    );\n\n    return m(tagName(tag), arg(attrs.concat(content)));\n}\n","import * as Ast from \"@unified-latex/unified-latex-types\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { getAttributeNameFromString, getTagNameFromString } from \"./mangle\";\n\n/**\n * Extract the contents/attributes/tag from an html-like macro.\n */\nexport function extractFromHtmlLike(macro: Ast.Macro): {\n    tag: string;\n    attributes: Record<string, string | number | boolean | object>;\n    content: Ast.Node[];\n} {\n    if (!isHtmlLikeTag(macro)) {\n        throw new Error(\n            \"Attempting to extract html contents from a node that is not html-like.\"\n        );\n    }\n    const args = macro.args || [];\n    if (args.length > 1) {\n        throw new Error(\n            `html-like macros should have 0 or 1 args, but ${args.length} found`\n        );\n    }\n    const argContent = args.length > 0 ? args[0].content : [];\n\n    const tag = getTagNameFromString(macro.content);\n    const attributes: Record<string, string | number | boolean | object> = {};\n    let i = 0;\n    for (; i < argContent.length; i++) {\n        const node = argContent[i];\n        if (isHtmlLikeAttribute(node)) {\n            const attrName = getAttributeNameFromString(node.content);\n            let attrValue: string | boolean | number | object = true;\n            if (node.args && node.args.length > 0) {\n                attrValue = JSON.parse(printRaw(node.args[0].content));\n            }\n            attributes[attrName] = attrValue;\n            continue;\n        }\n        break;\n    }\n\n    return { tag, attributes, content: argContent.slice(i) };\n}\n\n/**\n * Determine whether the node is an html-like macro.\n */\nexport function isHtmlLike(node: any): node is Ast.Macro {\n    return match.macro(node) && node.content.startsWith(\"html-\");\n}\n\n/**\n * Determine whether the node is an html-like macro for a tag.\n */\nexport function isHtmlLikeTag(node: any): node is Ast.Macro {\n    return match.macro(node) && node.content.startsWith(\"html-tag:\");\n}\n\n/**\n * Determine whether the node is an html-like macro for an attribute.\n */\nexport function isHtmlLikeAttribute(node: any): node is Ast.Macro {\n    return match.macro(node) && node.content.startsWith(\"html-attr:\");\n}\n"],"names":["tagName","match"],"mappings":";;;AAGO,SAAS,QAAQ,KAAqB;AACzC,SAAO,YAAY,GAAG;AAC1B;AAKO,SAAS,cAAc,WAA2B;AACrD,SAAO,aAAa,SAAS;AACjC;AAKO,SAAS,qBAAqBA,UAAyB;AACpD,QAAAC,SAAQD,SAAQ,MAAM,KAAK;AACjC,MAAIC,QAAO;AACP,WAAOA,OAAM,CAAC,EAAE,MAAM,CAAC;AAAA,EAC3B;AACA,QAAM,IAAI,MAAM,8BAA8BD,QAAO,EAAE;AAC3D;AAKO,SAAS,2BAA2BA,UAAyB;AAC1D,QAAAC,SAAQD,SAAQ,MAAM,KAAK;AACjC,MAAIC,QAAO;AACP,WAAOA,OAAM,CAAC,EAAE,MAAM,CAAC;AAAA,EAC3B;AACA,QAAM,IAAI,MAAM,oCAAoCD,QAAO,EAAE;AACjE;ACxBO,SAAS,SAAS;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACJ,GAIc;AACV,MAAI,CAAC,SAAS;AACV,cAAU,CAAA;AAAA,EACd;AACA,MAAI,WAAW,CAAC,MAAM,QAAQ,OAAO,GAAG;AACpC,cAAU,CAAC,OAAO;AAAA,EACtB;AACA,eAAa,cAAc;AAC3B,QAAM,QAAoB,OAAO,QAAQ,UAAU,EAAE;AAAA,IACjD,CAAC,CAAC,MAAM,KAAK,MAAM;AACP,cAAA,KAAK,UAAU,KAAK;AAC5B,aAAO,EAAE,cAAc,IAAI,GAAG,IAAI,KAAK,CAAC;AAAA,IAC5C;AAAA,EAAA;AAGG,SAAA,EAAE,QAAQ,GAAG,GAAG,IAAI,MAAM,OAAO,OAAO,CAAC,CAAC;AACrD;AC1BO,SAAS,oBAAoB,OAIlC;AACM,MAAA,CAAC,cAAc,KAAK,GAAG;AACvB,UAAM,IAAI;AAAA,MACN;AAAA,IAAA;AAAA,EAER;AACM,QAAA,OAAO,MAAM,QAAQ;AACvB,MAAA,KAAK,SAAS,GAAG;AACjB,UAAM,IAAI;AAAA,MACN,iDAAiD,KAAK,MAAM;AAAA,IAAA;AAAA,EAEpE;AACM,QAAA,aAAa,KAAK,SAAS,IAAI,KAAK,CAAC,EAAE,UAAU;AAEjD,QAAA,MAAM,qBAAqB,MAAM,OAAO;AAC9C,QAAM,aAAiE,CAAA;AACvE,MAAI,IAAI;AACD,SAAA,IAAI,WAAW,QAAQ,KAAK;AACzB,UAAA,OAAO,WAAW,CAAC;AACrB,QAAA,oBAAoB,IAAI,GAAG;AACrB,YAAA,WAAW,2BAA2B,KAAK,OAAO;AACxD,UAAI,YAAgD;AACpD,UAAI,KAAK,QAAQ,KAAK,KAAK,SAAS,GAAG;AACvB,oBAAA,KAAK,MAAM,SAAS,KAAK,KAAK,CAAC,EAAE,OAAO,CAAC;AAAA,MACzD;AACA,iBAAW,QAAQ,IAAI;AACvB;AAAA,IACJ;AACA;AAAA,EACJ;AAEA,SAAO,EAAE,KAAK,YAAY,SAAS,WAAW,MAAM,CAAC;AACzD;AAKO,SAAS,WAAW,MAA8B;AACrD,SAAO,MAAM,MAAM,IAAI,KAAK,KAAK,QAAQ,WAAW,OAAO;AAC/D;AAKO,SAAS,cAAc,MAA8B;AACxD,SAAO,MAAM,MAAM,IAAI,KAAK,KAAK,QAAQ,WAAW,WAAW;AACnE;AAKO,SAAS,oBAAoB,MAA8B;AAC9D,SAAO,MAAM,MAAM,IAAI,KAAK,KAAK,QAAQ,WAAW,YAAY;AACpE;"}