{"version":3,"file":"index.cjs","sources":["../libs/ligature-lookup.ts","../libs/parse.ts","../libs/expand-unicode-ligatures.ts"],"sourcesContent":["import * as Ast from \"@unified-latex/unified-latex-types\";\nimport unicodeLigatures from \"./ligature-macros.json\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\n\nfunction makeString(content: string): Ast.String {\n    return { type: \"string\", content };\n}\n\nconst mappedLigatures: [string, Ast.String][] = unicodeLigatures.map(\n    ([macro, str]) => [macro, makeString(str)]\n);\n\nconst SUBSTITUTION_MAP: Map<string, Ast.String> = new Map([\n    // We cannot use the basic lookup to replace a `\\ ` macro, since it\n    // may be confused with a macro that has no arguments. We will replace this\n    // macro manually.\n    //[\"\\\\ \", makeString(\" \")],\n    [\"\\\\,\", makeString(\"\\u2009\")],\n    [\"\\\\thinspace\", makeString(\"\\u2009\")],\n    [\"\\\\:\", makeString(\"\\u2005\")],\n    [\"\\\\>\", makeString(\"\\u2005\")],\n    [\"\\\\medspace\", makeString(\"\\u2005\")],\n    // There's no exact unicode versions of `\\medspace` or `\\thickspace`, so we approximate\n    [\"\\\\;\", makeString(\"\\u2005\")],\n    [\"\\\\thickspace\", makeString(\"\\u2005\")],\n    [\"\\\\enspace\", makeString(\"\\u2002\")],\n    [\"\\\\quad\", makeString(\"\\u2003\")],\n    [\"\\\\qquad\", makeString(\"\\u2003\\u2003\")],\n    // Marks the punctuation as ending a sentence; no substitute.\n    [\"\\\\@\", makeString(\"\")],\n    // Italic correction; no substitute\n    [\"\\\\/\", makeString(\"\")],\n    // Non-breaking space\n    [\"~\", makeString(\"\\u00A0\")],\n    [\"- - -\", makeString(\"—\")],\n    [\"- -\", makeString(\"–\")],\n    [\"` `\", makeString(\"“\")],\n    ['\"', makeString(\"”\")],\n    [\"' '\", makeString(\"”\")],\n    [\"`\", makeString(\"‘\")],\n    [\"'\", makeString(\"’\")],\n    [\"< <\", makeString(\"«\")],\n    [\"> >\", makeString(\"»\")],\n    [\"\\\\$\", makeString(\"$\")],\n    [\"\\\\%\", makeString(\"%\")],\n    [\"\\\\_\", makeString(\"_\")],\n    [\"\\\\&\", makeString(\"&\")],\n    [\"\\\\#\", makeString(\"#\")],\n    [\"\\\\{\", makeString(\"{\")],\n    [\"\\\\}\", makeString(\"}\")],\n    [\"\\\\P\", makeString(\"¶\")],\n    [\"\\\\S\", makeString(\"§\")],\n    [\"\\\\dots\", makeString(\"…\")],\n    [\"\\\\ldots\", makeString(\"…\")],\n    [\"\\\\pounds\", makeString(\"£\")],\n    [\"\\\\copyright\", makeString(\"©\")],\n    ...mappedLigatures,\n]);\n\n/**\n * Hash a sequence of nodes for quick lookup. This function assumes\n * that a space character does not appear in the content of any of the nodes.\n */\nfunction hashNodes(nodes: (Ast.Macro | Ast.String)[]): string {\n    return nodes\n        .map((node) => (match.macro(node) ? `\\\\${node.content}` : node.content))\n        .join(\" \");\n}\n\nfunction isMacroOrStringArray(\n    nodes: Ast.Node[]\n): nodes is (Ast.Macro | Ast.String)[] {\n    return nodes.some((node) => match.macro(node) || match.string(node));\n}\n\n/**\n * Map a sequence of nodes to its corresponding unicode ligature. E.g.,\n * `---` will be converted to `–` (an em-dash).\n *\n * This function assumes that `nodes` is a pure token stream with all whitespace\n * removed and an surrogate letters popped from their groups. (e.g. `\\: o` and `\\:{o}`\n * should be normalized to `[\"\\:\", \"o\"]` before calling this function.)\n */\nexport function ligatureToUnicode(nodes: Ast.Node[]): Ast.String | null {\n    if (!isMacroOrStringArray(nodes)) {\n        return null;\n    }\n    if (\n        nodes.length === 1 &&\n        match.macro(nodes[0], \" \") &&\n        nodes[0].escapeToken == null\n    ) {\n        // In this case we are the `\\ ` macro. This cannot be handled by the hash-lookup method,\n        // so we handle it manually.\n        return makeString(\" \");\n    }\n    return SUBSTITUTION_MAP.get(hashNodes(nodes)) || null;\n}\n","import * as Ast from \"@unified-latex/unified-latex-types\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport {\n    decorateArrayForPegjs,\n    LigaturesPegParser,\n} from \"@unified-latex/unified-latex-util-pegjs\";\nimport { ligatureToUnicode } from \"./ligature-lookup\";\n\nexport function createMatchers() {\n    return {\n        isMacro: match.anyMacro,\n        isWhitespace: match.whitespace,\n        isRecognized: (nodes: Ast.Node[], whitespaceAllowed = false) => {\n            // If the first argument is a macro, the second token may be wrapped in a group.\n            // In this case we want to unwrap the group\n            const nodesToTest = [...nodes];\n            if (nodes.length === 2 && match.macro(nodes[0])) {\n                const arg = nodes[1];\n                if (match.group(arg) && arg.content.length === 1) {\n                    nodesToTest[1] = arg.content[0];\n                }\n\n                // whitespace directly after one-letter macros like `\\o` should\n                // be skipped\n                if (nodes[0].content.length === 1 && nodesToTest[1].type === 'whitespace') {\n                    nodesToTest.length = 1\n                }\n            }\n            return ligatureToUnicode(nodesToTest);\n        },\n        isSplitable: (node: Ast.Node) =>\n            match.anyString(node) && node.content.length > 1,\n        split: (node: Ast.String) => [\n            { type: \"string\", content: node.content.charAt(0) },\n            { type: \"string\", content: node.content.slice(1) },\n        ],\n    };\n}\n\n/**\n * Parse for recognized ligatures like `---` and `\\:o`, etc. These are\n * replaced with string nodes with the appropriate unicode character subbed in.\n */\nexport function parseLigatures(ast: Ast.Node[]): Ast.Node[] {\n    if (!Array.isArray(ast)) {\n        throw new Error(\"You must pass an array of nodes\");\n    }\n    // We need to at functions to `nodes` so that it imitates\n    // a Javascript string. Because we're mutating, make a copy first\n    ast = decorateArrayForPegjs([...ast]);\n    // matchers are passed in via the second argument (the `options` argument)\n    // so they are available from within the Pegjs grammar.\n    return LigaturesPegParser.parse(ast, createMatchers());\n}\n","import * as Ast from \"@unified-latex/unified-latex-types\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nimport { parseLigatures } from \"./parse\";\n\n/**\n * Turn all ligatures into their unicode equivalent. For example,\n * `---` -> an em-dash and `\\^o` to `ô`. This only applies in non-math mode,\n * since programs like katex will process math ligatures.\n */\nexport function expandUnicodeLigatures(tree: Ast.Ast) {\n    visit(\n        tree,\n        (nodes, info) => {\n            // KaTeX/MathJax will process ligatures in math mode. This includes\n            // ligatures in `\\text{...}` macros inside of math mode. So, avoid\n            // processing them in this case.\n            if (info.context.inMathMode || info.context.hasMathModeAncestor) {\n                return;\n            }\n\n            const parsed = parseLigatures(nodes);\n            nodes.length = 0;\n            nodes.push(...parsed);\n        },\n        { includeArrays: true, test: Array.isArray }\n    );\n}\n"],"names":["match","decorateArrayForPegjs","LigaturesPegParser","visit"],"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"}