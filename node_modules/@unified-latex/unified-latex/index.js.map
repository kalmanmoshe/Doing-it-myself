{"version":3,"file":"index.js","sources":["../libs/unified-latex.ts"],"sourcesContent":["import { unified } from \"unified\";\nimport * as Ast from \"@unified-latex/unified-latex-types\";\nimport {\n    unifiedLatexAstComplier,\n    unifiedLatexFromString,\n    PluginOptions as ParserPluginOptions,\n} from \"@unified-latex/unified-latex-util-parse\";\nimport {\n    unifiedLatexStringCompiler,\n    PluginOptions as StringCompilerPluginOptions,\n} from \"@unified-latex/unified-latex-util-to-string\";\n\n/**\n * Use `unified()` to a string to an `Ast.Ast` and then pretty-print it.\n */\nexport const processLatexViaUnified = (\n    options?: StringCompilerPluginOptions & ParserPluginOptions\n) => {\n    return unified()\n        .use(unifiedLatexFromString, options)\n        .use(\n            unifiedLatexStringCompiler,\n            Object.assign({ pretty: true }, options)\n        );\n};\n\n/**\n * Use `unified()` to a string to an `Ast.Ast` and then return it. This function\n * will not print/pretty-print the `Ast.Ast` back to a string.\n */\nexport const processLatexToAstViaUnified = () => {\n    return unified().use(unifiedLatexFromString).use(unifiedLatexAstComplier);\n};\n"],"names":[],"mappings":";;;AAea,MAAA,yBAAyB,CAClC,YACC;AACD,SAAO,QAAQ,EACV,IAAI,wBAAwB,OAAO,EACnC;AAAA,IACG;AAAA,IACA,OAAO,OAAO,EAAE,QAAQ,KAAA,GAAQ,OAAO;AAAA,EAAA;AAEnD;AAMO,MAAM,8BAA8B,MAAM;AAC7C,SAAO,QAAU,EAAA,IAAI,sBAAsB,EAAE,IAAI,uBAAuB;AAC5E;"}