import * as Ast from "../../unified-latex-types";
/**
 * Finds patterns matching TeX glue in `nodes`. A pretty-formatted version
 * of the glue is returned along with information about how many nodes were consumed.
 *
 * The return object consists of
 *   * `printedGlue` - the pretty-printed version of the glue
 *   * `endIndex` - the index in `nodes` where the glue string terminates
 *   * `partialSliceLen` - how far into the `Ast.String` node the glue string finished. For example `1ptXX` would parse as `1pt`, and the parsing would terminate partway through the string node.
 */
export declare function findGlue(nodes: (Ast.Node | Ast.Argument)[], startIndex: number): {
    printedGlue: Ast.Node[];
    endIndex: number;
    partialSliceLen: number;
} | null;
/**
 * Extract glue from a list of nodes returning a node array with
 * properly formatted glue as well as start/end indices where the glue was
 * "sliced out" of `nodes`.
 *
 * Sometimes glue may end in the middle of a string node. If this happens, the
 * string node is split and the second half is returned in the `trailingStrings` array.
 */
export declare function extractFormattedGlue(nodes: (Ast.Node | Ast.Argument)[], startIndex: number): {
    glue: Ast.Node[];
    span: {
        start: number;
        end: number;
    };
    trailingStrings: Ast.String[];
} | null;
