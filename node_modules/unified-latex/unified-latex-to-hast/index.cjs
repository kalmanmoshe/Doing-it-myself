/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/color-name/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/color-name/index.js ***!
  \**********************************************/
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/color-string/index.js":
/*!************************************************!*\
  !*** ../../node_modules/color-string/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
var colorNames = __webpack_require__(/*! color-name */ "../../node_modules/color-name/index.js");
var swizzle = __webpack_require__(/*! simple-swizzle */ "../../node_modules/simple-swizzle/index.js");
var hasOwnProperty = Object.hasOwnProperty;

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ "../../node_modules/color/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/color/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const colorString = __webpack_require__(/*! color-string */ "../../node_modules/color-string/index.js");
const convert = __webpack_require__(/*! color-convert */ "../../node_modules/color/node_modules/color-convert/index.js");

const skippedModels = [
	// To be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// Gray conflicts with some method names, and has its own method defined.
	'gray',

	// Shouldn't really be in color-convert either...
	'hex',
];

const hashedModelKeys = {};
for (const model of Object.keys(convert)) {
	hashedModelKeys[[...convert[model].labels].sort().join('')] = model;
}

const limiters = {};

function Color(object, model) {
	if (!(this instanceof Color)) {
		return new Color(object, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	let i;
	let channels;

	if (object == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (object instanceof Color) {
		this.model = object.model;
		this.color = [...object.color];
		this.valpha = object.valpha;
	} else if (typeof object === 'string') {
		const result = colorString.get(object);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + object);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (object.length > 0) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		const newArray = Array.prototype.slice.call(object, 0, channels);
		this.color = zeroArray(newArray, channels);
		this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;
	} else if (typeof object === 'number') {
		// This is always RGB - can be converted later on.
		this.model = 'rgb';
		this.color = [
			(object >> 16) & 0xFF,
			(object >> 8) & 0xFF,
			object & 0xFF,
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		const keys = Object.keys(object);
		if ('alpha' in object) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;
		}

		const hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(object));
		}

		this.model = hashedModelKeys[hashedKeys];

		const {labels} = convert[this.model];
		const color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(object[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// Perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			const limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString() {
		return this.string();
	},

	toJSON() {
		return this[this.model]();
	},

	string(places) {
		let self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to[self.model](args);
	},

	percentString(places) {
		const self = this.rgb().round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to.rgb.percent(args);
	},

	array() {
		return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
	},

	object() {
		const result = {};
		const {channels} = convert[this.model];
		const {labels} = convert[this.model];

		for (let i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray() {
		const rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject() {
		const rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round(places) {
		places = Math.max(places || 0, 0);
		return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
	},

	alpha(value) {
		if (value !== undefined) {
			return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
		}

		return this.valpha;
	},

	// Rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(95.047)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(108.833)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return convert[this.model].keyword(this.color);
	},

	hex(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	hexa(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		const rgbArray = this.rgb().round().color;

		let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
		if (alphaHex.length === 1) {
			alphaHex = '0' + alphaHex;
		}

		return colorString.to.hex(rgbArray) + alphaHex;
	},

	rgbNumber() {
		const rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity() {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		const rgb = this.rgb().color;

		const lum = [];
		for (const [i, element] of rgb.entries()) {
			const chan = element / 255;
			lum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast(color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		const lum1 = this.luminosity();
		const lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level(color2) {
		// https://www.w3.org/TR/WCAG/#contrast-enhanced
		const contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark() {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		const rgb = this.rgb().color;
		const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;
		return yiq < 128;
	},

	isLight() {
		return !this.isDark();
	},

	negate() {
		const rgb = this.rgb();
		for (let i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}

		return rgb;
	},

	lighten(ratio) {
		const hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken(ratio) {
		const hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten(ratio) {
		const hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken(ratio) {
		const hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale() {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		const rgb = this.rgb().color;
		const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(value, value, value);
	},

	fade(ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer(ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate(degrees) {
		const hsl = this.hsl();
		let hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix(mixinColor, weight) {
		// Ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}

		const color1 = mixinColor.rgb();
		const color2 = this.rgb();
		const p = weight === undefined ? 0.5 : weight;

		const w = 2 * p - 1;
		const a = color1.alpha() - color2.alpha();

		const w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;
		const w2 = 1 - w1;

		return Color.rgb(
			w1 * color1.red() + w2 * color2.red(),
			w1 * color1.green() + w2 * color2.green(),
			w1 * color1.blue() + w2 * color2.blue(),
			color1.alpha() * p + color2.alpha() * (1 - p));
	},
};

// Model conversion methods and static constructors
for (const model of Object.keys(convert)) {
	if (skippedModels.includes(model)) {
		continue;
	}

	const {channels} = convert[model];

	// Conversion methods
	Color.prototype[model] = function (...args) {
		if (this.model === model) {
			return new Color(this);
		}

		if (args.length > 0) {
			return new Color(args, model);
		}

		return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
	};

	// 'static' construction methods
	Color[model] = function (...args) {
		let color = args[0];
		if (typeof color === 'number') {
			color = zeroArray(args, channels);
		}

		return new Color(color, model);
	};
}

function roundTo(number, places) {
	return Number(number.toFixed(places));
}

function roundToPlace(places) {
	return function (number) {
		return roundTo(number, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	for (const m of model) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	}

	model = model[0];

	return function (value) {
		let result;

		if (value !== undefined) {
			if (modifier) {
				value = modifier(value);
			}

			result = this[model]();
			result.color[channel] = value;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(value) {
	return Array.isArray(value) ? value : [value];
}

function zeroArray(array, length) {
	for (let i = 0; i < length; i++) {
		if (typeof array[i] !== 'number') {
			array[i] = 0;
		}
	}

	return array;
}

module.exports = Color;


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/conversions.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/conversions.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __webpack_require__(/*! color-name */ "../../node_modules/color/node_modules/color-name/index.js");

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/index.js":
/*!********************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color/node_modules/color-convert/conversions.js");
const route = __webpack_require__(/*! ./route */ "../../node_modules/color/node_modules/color-convert/route.js");

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/route.js":
/*!********************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/route.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color/node_modules/color-convert/conversions.js");

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ "../../node_modules/color/node_modules/color-name/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-name/index.js ***!
  \*****************************************************************/
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/cssesc/cssesc.js":
/*!*******************************************!*\
  !*** ../../node_modules/cssesc/cssesc.js ***!
  \*******************************************/
/***/ ((module) => {

/*! https://mths.be/cssesc v3.0.0 by @mathias */


var object = {};
var hasOwnProperty = object.hasOwnProperty;
var merge = function merge(options, defaults) {
	if (!options) {
		return defaults;
	}
	var result = {};
	for (var key in defaults) {
		// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since
		// only recognized option names are used.
		result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];
	}
	return result;
};

var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
var regexAlwaysEscape = /['"\\]/;
var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;

// https://mathiasbynens.be/notes/css-escapes#css
var cssesc = function cssesc(string, options) {
	options = merge(options, cssesc.options);
	if (options.quotes != 'single' && options.quotes != 'double') {
		options.quotes = 'single';
	}
	var quote = options.quotes == 'double' ? '"' : '\'';
	var isIdentifier = options.isIdentifier;

	var firstChar = string.charAt(0);
	var output = '';
	var counter = 0;
	var length = string.length;
	while (counter < length) {
		var character = string.charAt(counter++);
		var codePoint = character.charCodeAt();
		var value = void 0;
		// If it’s not a printable ASCII character…
		if (codePoint < 0x20 || codePoint > 0x7E) {
			if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {
				// It’s a high surrogate, and there is a next character.
				var extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// next character is low surrogate
					codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
				} else {
					// It’s an unmatched surrogate; only append this code unit, in case
					// the next code unit is the high surrogate of a surrogate pair.
					counter--;
				}
			}
			value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
		} else {
			if (options.escapeEverything) {
				if (regexAnySingleEscape.test(character)) {
					value = '\\' + character;
				} else {
					value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
				}
			} else if (/[\t\n\f\r\x0B]/.test(character)) {
				value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
			} else if (character == '\\' || !isIdentifier && (character == '"' && quote == character || character == '\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
				value = '\\' + character;
			} else {
				value = character;
			}
		}
		output += value;
	}

	if (isIdentifier) {
		if (/^-[-\d]/.test(output)) {
			output = '\\-' + output.slice(1);
		} else if (/\d/.test(firstChar)) {
			output = '\\3' + firstChar + ' ' + output.slice(1);
		}
	}

	// Remove spaces after `\HEX` escapes that are not followed by a hex digit,
	// since they’re redundant. Note that this is only possible if the escape
	// sequence isn’t preceded by an odd number of backslashes.
	output = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {
		if ($1 && $1.length % 2) {
			// It’s not safe to remove the space, so don’t.
			return $0;
		}
		// Strip the space.
		return ($1 || '') + $2;
	});

	if (!isIdentifier && options.wrap) {
		return quote + output + quote;
	}
	return output;
};

// Expose default options (so they can be overridden globally).
cssesc.options = {
	'escapeEverything': false,
	'isIdentifier': false,
	'quotes': 'single',
	'wrap': false
};

cssesc.version = '3.0.0';

module.exports = cssesc;


/***/ }),

/***/ "../../node_modules/extend/index.js":
/*!******************************************!*\
  !*** ../../node_modules/extend/index.js ***!
  \******************************************/
/***/ ((module) => {



var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) { /**/ }

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
	if (defineProperty && options.name === '__proto__') {
		defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
	} else {
		target[options.name] = options.newValue;
	}
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
	if (name === '__proto__') {
		if (!hasOwn.call(obj, name)) {
			return void 0;
		} else if (gOPD) {
			// In early versions of node, obj['__proto__'] is buggy when obj has
			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
			return gOPD(obj, name).value;
		}
	}

	return obj[name];
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = getProperty(target, name);
				copy = getProperty(options, name);

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						setProperty(target, { name: name, newValue: copy });
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


/***/ }),

/***/ "../../node_modules/is-arrayish/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/is-arrayish/index.js ***!
  \***********************************************/
/***/ ((module) => {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ }),

/***/ "../../node_modules/is-buffer/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/is-buffer/index.js ***!
  \*********************************************/
/***/ ((module) => {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

module.exports = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/align-environment.pegjs":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/align-environment.pegjs ***!
  \*******************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function() { return []; },
      peg$c1 = function(x) { return { cells: [], colSeps: [], ...x }; },
      peg$c2 = function(rowItems, rowSep, trailingComment) {
                  return { ...rowItems, rowSep, trailingComment };
              },
      peg$c3 = function(rowItems, trailingComment) {
                  return { ...rowItems, rowSep: null, trailingComment };
              },
      peg$c4 = function(x) { return x; },
      peg$c5 = function(x) {
                  return {
                      cells: [],
                      colSeps: [],
                      rowSep: null,
                      trailingComment: x,
                  };
              },
      peg$c6 = peg$anyExpectation(),
      peg$c7 = function(x) {
                  return x;
              },
      peg$c8 = function(colSep, cell) { return { colSep, cell }; },
      peg$c9 = function(colSep) { return { colSep }; },
      peg$c10 = function(a, b) { return processRow(a, b); },
      peg$c11 = function(b) { return processRow(null, b); },
      peg$c12 = function(tok) { return options.isSameLineComment(tok); },
      peg$c13 = function(tok) { return tok; },
      peg$c14 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c15 = function(tok) { return options.isWhitespace(tok); },
      peg$c16 = function(tok) { return options.isRowSep(tok); },
      peg$c17 = function(tok) { return options.isColSep(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsecomment_only_line();
    if (s1 === peg$FAILED) {
      s1 = peg$parserow_with_end();
      if (s1 === peg$FAILED) {
        s1 = peg$parserow_without_end();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment_only_line();
        if (s1 === peg$FAILED) {
          s1 = peg$parserow_with_end();
          if (s1 === peg$FAILED) {
            s1 = peg$parserow_without_end();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserow_with_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parserow_items();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c1(s2);
    }
    s1 = s2;
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_sep();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_without_end() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parserow_items();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parserow_sep();
    if (s2 === peg$FAILED) {
      s2 = peg$parsecol_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetrailing_comment();
        if (s2 === peg$FAILED) {
          s2 = peg$parseown_line_comment();
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecell() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetoken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseseparated_cell() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecol_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecell();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecol_sep();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserow_items() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecell();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseseparated_cell();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseseparated_cell();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseseparated_cell();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseseparated_cell();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c12(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c15(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c16(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecol_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c17(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function processRow(leadCell, otherCells) {
          const cells = [leadCell || []];
          const seps = [];
          for (const x of otherCells) {
              cells.push(x.cell || []);
              seps.push(x.colSep);
          }
          return { cells, colSeps: seps };
      }

      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(
                  options,
                  createMatchers(["\\", "hline", "cr"], ["&"])
              );
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/ligatures.pegjs":
/*!***********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/ligatures.pegjs ***!
  \***********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(e) {
                  // We may have inserted nested arrays.
                  // Flatten everything before we're done and remove any
                  // resitual `null`s
                  return [].concat(...e).filter((n) => !!n);
              },
      peg$c2 = function() { return []; },
      peg$c3 = function(toks) { return options.isRecognized(toks); },
      peg$c4 = function(toks) {
                  return options.isRecognized(toks);
              },
      peg$c5 = function(tok1, tok2) {
                      const split = options.split(tok2);
                      return options.isRecognized([tok1, split[0]]);
                  },
      peg$c6 = function(tok1, tok2) {
                  const split = options.split(tok2);
                  return [options.isRecognized([tok1, split[0]]), split[1]];
              },
      peg$c7 = function(tok1, tok2) { return options.isRecognized([tok1, tok2]); },
      peg$c8 = function(tok1, tok2) {
                  return options.isRecognized([tok1, tok2]);
              },
      peg$c9 = function(tok) { return options.isRecognized([tok]); },
      peg$c10 = function(tok) {
                  return options.isRecognized([tok]);
              },
      peg$c11 = function(tok) { return options.isMacro(tok); },
      peg$c12 = function(tok) { return tok; },
      peg$c13 = function(tok) { return options.isWhitespace(tok); },
      peg$c14 = function(tok) { return options.isSplitable(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetriple_ligature();
    if (s2 === peg$FAILED) {
      s2 = peg$parsedouble_ligature();
      if (s2 === peg$FAILED) {
        s2 = peg$parsemono_ligature();
        if (s2 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c0); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetriple_ligature();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedouble_ligature();
          if (s2 === peg$FAILED) {
            s2 = peg$parsemono_ligature();
            if (s2 === peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c0); }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetriple_ligature() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_ligature() {
    var s0;

    s0 = peg$parsedouble_macro_ligature();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedouble_macro_ligature_extracted();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedouble_char_ligature();
      }
    }

    return s0;
  }

  function peg$parsedouble_macro_ligature_extracted() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemacro();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesplitable();
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c5(s1, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_macro_ligature() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemacro();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c7(s1, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_char_ligature() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemono_ligature() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c9(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemacro() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c11(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c13(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesplitable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(options, {
                  isMacro: (node) => node.type === "macro",
                  isWhitespace: (node) => node.type === "whitespace",
                  isRecognized: (nodes) => {
                      if (
                          nodes.length == 2 &&
                          nodes[0].content === "^" &&
                          nodes[1].content === "o"
                      ) {
                          return { type: "string", content: "ô" };
                      }

                      return null;
                  },
                  isSplitable: (node) =>
                      node.type === "string" && node.content.length > 1,
                  split: (node) => [
                      { type: "string", content: node.content.charAt(0) },
                      { type: "string", content: node.content.slice(1) },
                  ],
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs ***!
  \*********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(e) {
                  // We may have inserted nested arrays.
                  // Flatten everything before we're done and remove any
                  // resitual `null`s
                  return [].concat(...e).filter((n) => !!n);
              },
      peg$c2 = function() { return []; },
      peg$c3 = function(tok) { return options.isHash(tok); },
      peg$c4 = function(tok) { return tok; },
      peg$c5 = function(tok) { return options.isNumber(tok); },
      peg$c6 = function() { return { type: "string", content: "#" }; },
      peg$c7 = function(num) {
                  const split = options.splitNumber(num);
                  return [{ type: "hash_number", number: split.number }, split.rest];
              },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedouble_hash();
    if (s2 === peg$FAILED) {
      s2 = peg$parsehash_number();
      if (s2 === peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedouble_hash();
        if (s2 === peg$FAILED) {
          s2 = peg$parsehash_number();
          if (s2 === peg$FAILED) {
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c0); }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsehash() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c5(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_hash() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsehash();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsehash();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehash_number() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsehash();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isHash) {
          try {
              Object.assign(options, {
                  isHash: (node) =>
                      node.type === "string" && node.content === "#",
                  isNumber: (node) =>
                      node.type === "string" && 0 < +node.content.charAt(0),
                  splitNumber: (node) => {
                      const number = +node.content.charAt(0);
                      if (node.content.length > 1) {
                          return {
                              number,
                              rest: {
                                  type: "string",
                                  content: node.content.slice(1),
                              },
                          };
                      }
                      return { number };
                  },
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/pgfkeys.pegjs":
/*!*********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/pgfkeys.pegjs ***!
  \*********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function() { return []; },
      peg$c1 = function(x) { return x; },
      peg$c2 = function(rowItems, trailingComment) {
                  return {
                      itemParts: [],
                      ...rowItems,
                      trailingComment,
                      trailingComma: true,
                  };
              },
      peg$c3 = function(rowItems, trailingComment) {
                  return { ...rowItems, trailingComment };
              },
      peg$c4 = function(a, b) { return processItem(a, b); },
      peg$c5 = function(b) { return processItem(null, b); },
      peg$c6 = function(cell) { return { cell }; },
      peg$c7 = function() { return {}; },
      peg$c8 = function(part) { return part; },
      peg$c9 = function(space, x) {
                  return {
                      trailingComment: x,
                      leadingParbreak: space.parbreak > 0,
                  };
              },
      peg$c10 = peg$anyExpectation(),
      peg$c11 = function(list) {
                  return {
                      whitespace: list.filter((x) => options.isWhitespace(x)).length,
                      parbreak: list.filter((x) => options.isParbreak(x)).length,
                  };
              },
      peg$c12 = function(tok) { return options.isSameLineComment(tok); },
      peg$c13 = function(tok) { return tok; },
      peg$c14 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c15 = function(tok) { return options.isWhitespace(tok); },
      peg$c16 = function(tok) { return options.isParbreak(tok); },
      peg$c17 = function(tok) { return options.isComma(tok); },
      peg$c18 = function(tok) { return options.isEquals(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = [];
    s1 = peg$parsecomment_only_line();
    if (s1 === peg$FAILED) {
      s1 = peg$parseitem_with_end();
      if (s1 === peg$FAILED) {
        s1 = peg$parseitem_without_end();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment_only_line();
        if (s1 === peg$FAILED) {
          s1 = peg$parseitem_with_end();
          if (s1 === peg$FAILED) {
            s1 = peg$parseitem_without_end();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseitem() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetoken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseitem_sep();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_with_end() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_items();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespace_or_parbreaks();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitem_sep();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsewhitespace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsewhitespace();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetrailing_comment();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsewhitespace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsewhitespace();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_without_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_items();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_items() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseitem_part();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseseparated_part();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseseparated_part();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseseparated_part();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseseparated_part();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseseparated_part() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseparbreak();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseparbreak();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequals();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseparbreak();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseparbreak();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitem_part();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseparbreak();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseparbreak();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequals();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseitem_part() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsenon_whitespace_non_parbreak_token();
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsewhitespace();
        if (s5 === peg$FAILED) {
          s5 = peg$parseparbreak();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = [];
          s9 = peg$parsewhitespace();
          if (s9 === peg$FAILED) {
            s9 = peg$parseparbreak();
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parsewhitespace();
            if (s9 === peg$FAILED) {
              s9 = peg$parseparbreak();
            }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parsenon_whitespace_non_parbreak_token();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 !== peg$FAILED) {
            peg$currPos = s6;
            s6 = void 0;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenon_whitespace_non_parbreak_token();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsewhitespace();
            if (s5 === peg$FAILED) {
              s5 = peg$parseparbreak();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$currPos;
              s8 = [];
              s9 = peg$parsewhitespace();
              if (s9 === peg$FAILED) {
                s9 = peg$parseparbreak();
              }
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsewhitespace();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseparbreak();
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsenon_whitespace_non_parbreak_token();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              peg$silentFails--;
              if (s7 !== peg$FAILED) {
                peg$currPos = s6;
                s6 = void 0;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsenon_token();
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = void 0;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenon_whitespace_non_parbreak_token() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsewhitespace();
    if (s3 === peg$FAILED) {
      s3 = peg$parseparbreak();
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = void 0;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsetoken();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenon_token() {
    var s0;

    s0 = peg$parseitem_sep();
    if (s0 === peg$FAILED) {
      s0 = peg$parseequals();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrailing_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$parseown_line_comment();
        }
      }
    }

    return s0;
  }

  function peg$parsewhitespace_or_parbreaks() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    if (s2 === peg$FAILED) {
      s2 = peg$parseparbreak();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseparbreak();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c12(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c15(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparbreak() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c16(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c17(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequals() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c18(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function processItem(leadCell, otherCells) {
          const cells = [leadCell || []];
          for (const x of otherCells) {
              cells.push(x.cell || []);
          }
          return { itemParts: cells };
      }

      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(
                  options,
                  createMatchers(["\\", "hline", "cr"], ["&"])
              );
              Object.assign(options, {
                  isComma(node) {
                      return node.type === "string" && node.content === ",";
                  },
                  isEquals(node) {
                      return node.type === "string" && node.content === "=";
                  },
                  isParbreak(node) {
                      return node.type === "parbreak";
                  },
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/systeme-environment.pegjs":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/systeme-environment.pegjs ***!
  \*********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function(a, b) { return a.concat(b ? b : []); },
      peg$c1 = function() { return []; },
      peg$c2 = peg$otherExpectation("partial item"),
      peg$c3 = function(a, b, c) { return a.concat(b, c); },
      peg$c4 = peg$otherExpectation("item"),
      peg$c5 = function(op, a, b, c) {
                  return { type: "item", op, variable: b, content: a.concat(b, c) };
              },
      peg$c6 = function(op, a) {
                  return { type: "item", op, variable: null, content: a };
              },
      peg$c7 = function(line, sep, comment) {
                  return { ...line, sep: [].concat(sep), trailingComment: comment };
              },
      peg$c8 = function(line, comment) {
                  return { ...line, trailingComment: comment };
              },
      peg$c9 = peg$anyExpectation(),
      peg$c10 = function(eq, ann) {
                  return {
                      type: "line",
                      equation: eq,
                      annotation: ann,
                      sep: null,
                  };
              },
      peg$c11 = function(at, ann) {
                  return at ? { type: "annotation", marker: at, content: ann } : null;
              },
      peg$c12 = peg$otherExpectation("equation"),
      peg$c13 = function(left, eq, right) {
                  return { type: "equation", left, right, equals: eq };
              },
      peg$c14 = peg$otherExpectation("trailing comment"),
      peg$c15 = function(x) { return x; },
      peg$c16 = peg$otherExpectation("comment only line"),
      peg$c17 = function(x) {
                  return {
                      type: "line",
                      trailingComment: x,
                  };
              },
      peg$c18 = function(v, s) { return [v].concat(s ? s : []); },
      peg$c19 = peg$otherExpectation("non-var token"),
      peg$c20 = function(t) { return t; },
      peg$c21 = peg$otherExpectation("token"),
      peg$c22 = peg$otherExpectation("same line comment"),
      peg$c23 = function(tok) { return options.isSameLineComment(tok); },
      peg$c24 = function(tok) { return tok; },
      peg$c25 = peg$otherExpectation("own line comment"),
      peg$c26 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c27 = function(tok) { return options.isWhitespace(tok); },
      peg$c28 = peg$otherExpectation(","),
      peg$c29 = function(tok) { return options.isSep(tok); },
      peg$c30 = peg$otherExpectation("@"),
      peg$c31 = function(tok) { return options.isAt(tok); },
      peg$c32 = peg$otherExpectation("variable token"),
      peg$c33 = function(tok) { return options.isVar(tok); },
      peg$c34 = peg$otherExpectation("+/-"),
      peg$c35 = function(tok) { return options.isOperation(tok); },
      peg$c36 = peg$otherExpectation("="),
      peg$c37 = function(tok) { return options.isEquals(tok); },
      peg$c38 = function(tok) { return options.isSubscript(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment_only_line();
    if (s2 === peg$FAILED) {
      s2 = peg$parseline_with_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parsepartial_line_with_comment();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment_only_line();
      if (s2 === peg$FAILED) {
        s2 = peg$parseline_with_sep();
        if (s2 === peg$FAILED) {
          s2 = peg$parsepartial_line_with_comment();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseline_without_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parseEOL();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepartial_item() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenon_var_token();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenon_var_token();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsevar();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsetoken();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsetoken();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseitem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperation();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenon_var_token();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenon_var_token();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevar();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsetoken();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsetoken();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseoperation();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsenon_var_token();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsenon_var_token();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parseline_with_sep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseline_without_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesep();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartial_line_with_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseline_without_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline_without_sep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = void 0;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseannotation();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseannotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseat();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenon_sep_token();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenon_sep_token();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequation() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseitem();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseitem();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequals();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsetoken();
        if (s4 === peg$FAILED) {
          s4 = peg$parseoperation();
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsetoken();
          if (s4 === peg$FAILED) {
            s4 = peg$parseoperation();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parsevar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevar_token();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubscript();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenon_var_token() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsevar();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetoken();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsenon_sep_token() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsesep();
    if (s2 === peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 === peg$FAILED) {
        s2 = peg$parseown_line_comment();
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsesep();
    if (s2 === peg$FAILED) {
      s2 = peg$parseat();
      if (s2 === peg$FAILED) {
        s2 = peg$parseoperation();
        if (s2 === peg$FAILED) {
          s2 = peg$parseequals();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetrailing_comment();
            if (s2 === peg$FAILED) {
              s2 = peg$parseown_line_comment();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c23(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c26(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c27(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesep() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c29(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }

    return s0;
  }

  function peg$parseat() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c31(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }

    return s0;
  }

  function peg$parsevar_token() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c33(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    return s0;
  }

  function peg$parseoperation() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c35(s2);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseequals() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c37(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c38(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(options, {
                  isSep: (node) => node.type === "string" && node.content === ",",
                  isVar: (node) =>
                      node.type === "string" && node.content.match(/[a-zA-Z]/),
                  isOperation: (node) =>
                      node.type === "string" && node.content.match(/[+-]/),
                  isEquals: (node) =>
                      node.type === "string" && node.content === "=",
                  isAt: (node) => node.type === "string" && node.content === "@",
                  isSubscript: (node) => node.content === "_",
                  isWhitespace: (node) => node.type === "whitespace",
                  isSameLineComment: (node) =>
                      node.type === "comment" && node.sameline,
                  isOwnLineComment: (node) =>
                      node.type === "comment" && !node.sameline,
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/tabular-spec.pegjs":
/*!**************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/tabular-spec.pegjs ***!
  \**************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function(c) { return c; },
      peg$c1 = function(cols) { return cols; },
      peg$c2 = function() { return []; },
      peg$c3 = function(divs1, start, a, end, divs2) {
                  return {
                      type: "column",
                      pre_dividers: divs1,
                      post_dividers: divs2,
                      before_start_code: start,
                      before_end_code: end,
                      alignment: a,
                  };
              },
      peg$c4 = function() {
                          return {
                              type: "vert_divider",
                          };
                      },
      peg$c5 = function(b, g) {
                          return {
                              type: "bang_divider",
                              content: g[0].content,
                          };
                      },
      peg$c6 = function(g) {
                          return {
                              type: "at_divider",
                              content: g[0].content,
                          };
                      },
      peg$c7 = function(div) { return div; },
      peg$c8 = peg$otherExpectation("decl_start"),
      peg$c9 = function(g) { return { type: "decl_code", code: g[0].content }; },
      peg$c10 = peg$otherExpectation("decl_end"),
      peg$c11 = function() { return { type: "alignment", alignment: "left" }; },
      peg$c12 = function() { return { type: "alignment", alignment: "center" }; },
      peg$c13 = function() { return { type: "alignment", alignment: "right" }; },
      peg$c14 = function() { return { type: "alignment", alignment: "X" }; },
      peg$c15 = function() { return "top"; },
      peg$c16 = function() { return "default"; },
      peg$c17 = function() { return "bottom"; },
      peg$c18 = function(a, g) {
                  return {
                      type: "alignment",
                      alignment: "parbox",
                      baseline: a,
                      size: g[0].content,
                  };
              },
      peg$c19 = function(g1, g2) {
                  return {
                      type: "alignment",
                      alignment: "parbox",
                      baseline: g1[0].content,
                      size: g2[0].content,
                  };
              },
      peg$c20 = peg$otherExpectation("vert"),
      peg$c21 = peg$anyExpectation(),
      peg$c22 = function(tok) { return options.matchChar(tok, "|"); },
      peg$c23 = peg$otherExpectation("l"),
      peg$c24 = function(tok) { return options.matchChar(tok, "l"); },
      peg$c25 = peg$otherExpectation("r"),
      peg$c26 = function(tok) { return options.matchChar(tok, "r"); },
      peg$c27 = peg$otherExpectation("c"),
      peg$c28 = function(tok) { return options.matchChar(tok, "c"); },
      peg$c29 = peg$otherExpectation("p"),
      peg$c30 = function(tok) { return options.matchChar(tok, "p"); },
      peg$c31 = peg$otherExpectation("m"),
      peg$c32 = function(tok) { return options.matchChar(tok, "m"); },
      peg$c33 = peg$otherExpectation("b"),
      peg$c34 = function(tok) { return options.matchChar(tok, "b"); },
      peg$c35 = peg$otherExpectation("w"),
      peg$c36 = function(tok) { return options.matchChar(tok, "w"); },
      peg$c37 = peg$otherExpectation("W"),
      peg$c38 = function(tok) { return options.matchChar(tok, "W"); },
      peg$c39 = peg$otherExpectation("X"),
      peg$c40 = function(tok) { return options.matchChar(tok, "X"); },
      peg$c41 = peg$otherExpectation("!"),
      peg$c42 = function(tok) { return options.matchChar(tok, "!"); },
      peg$c43 = peg$otherExpectation("@"),
      peg$c44 = function(tok) { return options.matchChar(tok, "@"); },
      peg$c45 = peg$otherExpectation("<"),
      peg$c46 = function(tok) { return options.matchChar(tok, "<"); },
      peg$c47 = peg$otherExpectation(">"),
      peg$c48 = function(tok) { return options.matchChar(tok, ">"); },
      peg$c49 = peg$otherExpectation("group"),
      peg$c50 = function(tok) { return options.isGroup(tok); },
      peg$c51 = peg$otherExpectation("whitespace"),
      peg$c52 = function(tok) { return options.isWhitespace(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsecolumn();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c0(s3);
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecolumn();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c0(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecolumn() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecolumn_divider();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecolumn_divider();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedecl_start();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsealignment();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedecl_end();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsecolumn_divider();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsecolumn_divider();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1, s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolumn_divider() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsevert();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c4();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsebang();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsegroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c5(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseat();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsegroup();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c6(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecl_start() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegreater();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parsedecl_end() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseless();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsealignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parser();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseX();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsep();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c15();
            }
            s1 = s2;
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parsem();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c16();
              }
              s1 = s2;
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseb();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c17();
                }
                s1 = s2;
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsegroup();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c18(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsew();
              if (s1 === peg$FAILED) {
                s1 = peg$parseW();
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse_();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsegroup();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parse_();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parse_();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsegroup();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c19(s3, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevert() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c22(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parsel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c24(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parser() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c26(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parsec() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c28(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parsep() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c30(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    return s0;
  }

  function peg$parsem() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c32(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }

    return s0;
  }

  function peg$parseb() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c34(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    return s0;
  }

  function peg$parsew() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c36(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseW() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c38(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }

    return s0;
  }

  function peg$parseX() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c40(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }

    return s0;
  }

  function peg$parsebang() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c42(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parseat() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c44(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    return s0;
  }

  function peg$parseless() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c46(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }

    return s0;
  }

  function peg$parsegreater() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c48(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsegroup() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c50(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c52(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isHash) {
          try {
              Object.assign(options, {
                  matchChar: (node, char) =>
                      node.type === "string" && node.content === char,
                  isGroup: (node) => node.type === "group",
                  isWhitespace: (node) => node.type === "whitespace",
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/tex-glue.pegjs":
/*!**********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/tex-glue.pegjs ***!
  \**********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { root: peg$parseroot },
      peg$startRuleFunction  = peg$parseroot,

      peg$c0 = function(b, st, sh) {
                          // Only return the non-null glue items
                          return {
                              type: "glue",
                              fixed: b,
                              stretchable: st,
                              shrinkable: sh,
                              position: location(),
                          };
                      },
      peg$c1 = peg$anyExpectation(),
      peg$c2 = function(glue) { return glue; },
      peg$c3 = function(n, u) { return { type: "dim", value: n, unit: u }; },
      peg$c4 = "plus",
      peg$c5 = peg$literalExpectation("plus", false),
      peg$c6 = function(n, u) {
                  return { type: "dim", value: n, unit: u };
              },
      peg$c7 = "minus",
      peg$c8 = peg$literalExpectation("minus", false),
      peg$c9 = "pt",
      peg$c10 = peg$literalExpectation("pt", false),
      peg$c11 = "mm",
      peg$c12 = peg$literalExpectation("mm", false),
      peg$c13 = "cm",
      peg$c14 = peg$literalExpectation("cm", false),
      peg$c15 = "in",
      peg$c16 = peg$literalExpectation("in", false),
      peg$c17 = "ex",
      peg$c18 = peg$literalExpectation("ex", false),
      peg$c19 = "em",
      peg$c20 = peg$literalExpectation("em", false),
      peg$c21 = "bp",
      peg$c22 = peg$literalExpectation("bp", false),
      peg$c23 = "pc",
      peg$c24 = peg$literalExpectation("pc", false),
      peg$c25 = "dd",
      peg$c26 = peg$literalExpectation("dd", false),
      peg$c27 = "cc",
      peg$c28 = peg$literalExpectation("cc", false),
      peg$c29 = "nd",
      peg$c30 = peg$literalExpectation("nd", false),
      peg$c31 = "nc",
      peg$c32 = peg$literalExpectation("nc", false),
      peg$c33 = "sp",
      peg$c34 = peg$literalExpectation("sp", false),
      peg$c35 = "filll",
      peg$c36 = peg$literalExpectation("filll", false),
      peg$c37 = "fill",
      peg$c38 = peg$literalExpectation("fill", false),
      peg$c39 = "fil",
      peg$c40 = peg$literalExpectation("fil", false),
      peg$c41 = peg$otherExpectation("number"),
      peg$c42 = /^[0-9]/,
      peg$c43 = peg$classExpectation([["0", "9"]], false, false),
      peg$c44 = ".",
      peg$c45 = peg$literalExpectation(".", false),
      peg$c46 = function(n) { return parseFloat(n); },
      peg$c47 = "+",
      peg$c48 = peg$literalExpectation("+", false),
      peg$c49 = "-",
      peg$c50 = peg$literalExpectation("-", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseroot() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsebase();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsestretchable();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseshrinkable();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2, s3, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebase() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestretchable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserubber_unit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshrinkable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserubber_unit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunit() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s0 = peg$c11;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c13) {
          s0 = peg$c13;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c15) {
            s0 = peg$c15;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s0 = peg$c17;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c19) {
                s0 = peg$c19;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c21) {
                  s0 = peg$c21;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c23) {
                    s0 = peg$c23;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c25) {
                      s0 = peg$c25;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c27) {
                        s0 = peg$c27;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c29) {
                          s0 = peg$c29;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c30); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c31) {
                            s0 = peg$c31;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c33) {
                              s0 = peg$c33;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserubber_unit() {
    var s0;

    s0 = peg$parseunit();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c37) {
          s0 = peg$c37;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c39) {
            s0 = peg$c39;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsesign();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = [];
      if (peg$c42.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
      }
      if (s5 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c44;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$c42.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$c42.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = [];
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c42.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c46(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parsesign() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c47;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c49;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs":
/*!********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs ***!
  \********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(m) { return m; },
      peg$c1 = peg$anyExpectation(),
      peg$c2 = function(a) { return { type: "invalid_spec", content: a }; },
      peg$c3 = ";",
      peg$c4 = peg$literalExpectation(";", false),
      peg$c5 = function(f, c) { return c; },
      peg$c6 = function(f, r) {
                  return { type: "color_set", content: [f].concat(r) };
              },
      peg$c7 = ",",
      peg$c8 = peg$literalExpectation(",", false),
      peg$c9 = function(n, s) {
                  return { type: "color_set_item", name: n, spec_list: s };
              },
      peg$c10 = peg$otherExpectation("model list"),
      peg$c11 = ":",
      peg$c12 = peg$literalExpectation(":", false),
      peg$c13 = function(c, m) {
                  return { type: "model_list", contents: m, core_model: c };
              },
      peg$c14 = function(m) {
                  return { type: "model_list", contents: m, core_model: null };
              },
      peg$c15 = "/",
      peg$c16 = peg$literalExpectation("/", false),
      peg$c17 = function(m, a) { return a; },
      peg$c18 = function(m, r) { return [m].concat(r); },
      peg$c19 = peg$otherExpectation("model"),
      peg$c20 = peg$otherExpectation("color spec list"),
      peg$c21 = function(s, a) { return a; },
      peg$c22 = function(s, r) {
                  return { type: "spec_list", content: [s].concat(r) };
              },
      peg$c23 = peg$otherExpectation("color spec"),
      peg$c24 = function(c) {
                  return { type: "hex_spec", content: [c] };
              },
      peg$c25 = function(c, d) { return d; },
      peg$c26 = function(c, r) {
                  return { type: "num_spec", content: r ? [c].concat(r) : [c] };
              },
      peg$c27 = peg$otherExpectation("color"),
      peg$c28 = function(c, fs) {
                  return { type: "color", color: c, functions: fs };
              },
      peg$c29 = peg$otherExpectation("function expression"),
      peg$c30 = ">",
      peg$c31 = peg$literalExpectation(">", false),
      peg$c32 = function(f, n) { return n; },
      peg$c33 = function(f, args) {
                  return { type: "function", name: f, args };
              },
      peg$c34 = peg$otherExpectation("function"),
      peg$c35 = peg$otherExpectation("extended expression"),
      peg$c36 = function(core, d, e, es) {
                  return {
                      type: "extended_expr",
                      core_model: core,
                      div: d,
                      expressions: [e].concat(es),
                  };
              },
      peg$c37 = function(core, e, es) {
                  return {
                      type: "extended_expr",
                      core_model: core,
                      div: null,
                      expressions: [e].concat(es),
                  };
              },
      peg$c38 = function(e, d) {
                  return { type: "weighted_expr", color: e, weight: d };
              },
      peg$c39 = function(e) { return e; },
      peg$c40 = peg$otherExpectation("core model"),
      peg$c41 = peg$otherExpectation("expr"),
      peg$c42 = function(p, n, e, po) {
                  return {
                      type: "expr",
                      prefix: p,
                      name: n,
                      mix_expr: e,
                      postfix: po,
                  };
              },
      peg$c43 = "!",
      peg$c44 = peg$literalExpectation("!", false),
      peg$c45 = function(p, n) {
                  return { type: "complete_mix", mix_percent: p, name: n };
              },
      peg$c46 = function(p) { return { type: "partial_mix", mix_percent: p }; },
      peg$c47 = peg$otherExpectation("mix expr"),
      peg$c48 = function(c, p) { return c.concat(p || []); },
      peg$c49 = peg$otherExpectation("name"),
      peg$c50 = ".",
      peg$c51 = peg$literalExpectation(".", false),
      peg$c52 = /^[a-zA-Z0-9]/,
      peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
      peg$c54 = peg$otherExpectation("postfix"),
      peg$c55 = "!![",
      peg$c56 = peg$literalExpectation("!![", false),
      peg$c57 = "]",
      peg$c58 = peg$literalExpectation("]", false),
      peg$c59 = function(n) { return { type: "postfix", num: n }; },
      peg$c60 = "!!",
      peg$c61 = peg$literalExpectation("!!", false),
      peg$c62 = function(p) { return { type: "postfix", plusses: p }; },
      peg$c63 = peg$otherExpectation("prefix"),
      peg$c64 = peg$otherExpectation("plus"),
      peg$c65 = "+",
      peg$c66 = peg$literalExpectation("+", false),
      peg$c67 = peg$otherExpectation("minus"),
      peg$c68 = "-",
      peg$c69 = peg$literalExpectation("-", false),
      peg$c70 = peg$otherExpectation("num"),
      peg$c71 = /^[0-9]/,
      peg$c72 = peg$classExpectation([["0", "9"]], false, false),
      peg$c73 = function(n) { return parseInt(n, 10); },
      peg$c74 = peg$otherExpectation("positive float"),
      peg$c75 = function(n) { return parseFloat(n); },
      peg$c76 = peg$otherExpectation("divisor"),
      peg$c77 = function(n) { return n; },
      peg$c78 = function(n) { return -n; },
      peg$c79 = peg$otherExpectation("int"),
      peg$c80 = function(m, n) { return m ? -n : n; },
      peg$c81 = peg$otherExpectation("whitespace"),
      peg$c82 = /^[ \t\n\r]/,
      peg$c83 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
      peg$c84 = /^[0-9a-fA-F]/,
      peg$c85 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c86 = function(h) { return h.toUpperCase(); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsespec();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsespec_list();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecolor();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEOL();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsemodel_list();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOL();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c0(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecolor_set_spec();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEOL();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              s2 = [];
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (input.length > peg$currPos) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
              } else {
                s1 = s2;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$parseEOL();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecolor_set_spec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecolor_set_item();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecolor_set_item();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c5(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c3;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecolor_set_item();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c5(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolor_set_item() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsename();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespec_list();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodel_list() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecore_model();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemodel_list_tail();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemodel_list_tail();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsemodel_list_tail() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemodel();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemodel();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c17(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemodel();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c17(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodel() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsecore_model();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsespec_list() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsespec();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsespec();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c21(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespec();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c21(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parsespec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsehex();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsehex();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsehex();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsehex();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsehex();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsehex();
              if (s8 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6, s7, s8];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c24(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedec();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c7;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedec();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c25(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedec();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c25(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsesp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedec();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c25(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parsesp();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedec();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c25(s1, s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          } else {
            s2 = peg$FAILED;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parsecolor() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecolor_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsefunc_expr();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsefunc_expr();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parsecolor_expr() {
    var s0;

    s0 = peg$parseext_expr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsename();
      }
    }

    return s0;
  }

  function peg$parsefunc_expr() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefunction();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseint();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c32(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseint();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c32(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    return s0;
  }

  function peg$parsefunction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsename();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseext_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecore_model();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsediv();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c11;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseweighted_expr();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseadditional_weighted_expr();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseadditional_weighted_expr();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s1, s3, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecore_model();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c11;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseweighted_expr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseadditional_weighted_expr();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseadditional_weighted_expr();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseweighted_expr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedec();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c38(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditional_weighted_expr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseweighted_expr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecore_model() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsename();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseprefix();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemix_expr();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepostfix();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c42(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parsecomplete_mix() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepct();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartial_mix() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepct();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemix_expr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomplete_mix();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomplete_mix();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepartial_mix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsename() {
    var s0, s1, s2;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c50;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }

    return s0;
  }

  function peg$parsepostfix() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c57;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c59(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseplus();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseplus();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parseprefix() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseminus();
    if (s0 === peg$FAILED) {
      s0 = null;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c65;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    return s0;
  }

  function peg$parseminus() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c68;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c68;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parsenum() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }

    return s0;
  }

  function peg$parsepct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s3 = input.substring(s3, peg$currPos);
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c50;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$currPos;
        s8 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s9 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s9 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
        }
        if (s8 !== peg$FAILED) {
          s7 = input.substring(s7, peg$currPos);
        } else {
          s7 = s8;
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c50;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parsediv() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsepct();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }

    return s0;
  }

  function peg$parsedec() {
    var s0, s1, s2;

    s0 = peg$parsepct();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepct();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c68;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepct();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c82.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c82.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1;

    s0 = [];
    if (peg$c82.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehex() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c84.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c86(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs":
/*!****************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs ***!
  \****************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { args_spec_list: peg$parseargs_spec_list },
      peg$startRuleFunction  = peg$parseargs_spec_list,

      peg$c0 = function(x) { return x; },
      peg$c1 = function(spec) { return spec; },
      peg$c2 = "+",
      peg$c3 = peg$literalExpectation("+", false),
      peg$c4 = function(spec) {
                  return spec;
              },
      peg$c5 = "v",
      peg$c6 = peg$literalExpectation("v", false),
      peg$c7 = peg$anyExpectation(),
      peg$c8 = function(openBrace) {
                  return createNode("verbatim", { openBrace, closeBrace: openBrace });
              },
      peg$c9 = "b",
      peg$c10 = peg$literalExpectation("b", false),
      peg$c11 = function() { return createNode("body"); },
      peg$c12 = "!",
      peg$c13 = peg$literalExpectation("!", false),
      peg$c14 = function(leading_bang, spec) {
                  return leading_bang ? { ...spec, noLeadingWhitespace: true } : spec;
              },
      peg$c15 = "D",
      peg$c16 = peg$literalExpectation("D", false),
      peg$c17 = function(braceSpec, defaultArg) {
                  return createNode("optional", { ...braceSpec, defaultArg });
              },
      peg$c18 = "d",
      peg$c19 = peg$literalExpectation("d", false),
      peg$c20 = function(braceSpec) { return createNode("optional", braceSpec); },
      peg$c21 = "s",
      peg$c22 = peg$literalExpectation("s", false),
      peg$c23 = function() { return createNode("optionalStar"); },
      peg$c24 = "O",
      peg$c25 = peg$literalExpectation("O", false),
      peg$c26 = function(g) { return createNode("optional", { defaultArg: g }); },
      peg$c27 = "o",
      peg$c28 = peg$literalExpectation("o", false),
      peg$c29 = function() { return createNode("optional"); },
      peg$c30 = "e",
      peg$c31 = peg$literalExpectation("e", false),
      peg$c32 = function(args) {
                  return createNode("embellishment", {
                      embellishmentTokens: args.content,
                  });
              },
      peg$c33 = "E",
      peg$c34 = peg$literalExpectation("E", false),
      peg$c35 = function(args, g) {
                  return createNode("embellishment", {
                      embellishmentTokens: args.content,
                      defaultArg: g,
                  });
              },
      peg$c36 = "t",
      peg$c37 = peg$literalExpectation("t", false),
      peg$c38 = function(tok) { return createNode("optionalToken", { token: tok }); },
      peg$c39 = "R",
      peg$c40 = peg$literalExpectation("R", false),
      peg$c41 = function(braceSpec, defaultArg) {
                  return createNode("mandatory", { ...braceSpec, defaultArg });
              },
      peg$c42 = "r",
      peg$c43 = peg$literalExpectation("r", false),
      peg$c44 = function(braceSpec) { return createNode("mandatory", braceSpec); },
      peg$c45 = "m",
      peg$c46 = peg$literalExpectation("m", false),
      peg$c47 = function() { return createNode("mandatory"); },
      peg$c48 = function(openBrace, closeBrace) {
                  return { openBrace, closeBrace };
              },
      peg$c49 = "{",
      peg$c50 = peg$literalExpectation("{", false),
      peg$c51 = "}",
      peg$c52 = peg$literalExpectation("}", false),
      peg$c53 = function(content) {
                  return { type: "group", content: content };
              },
      peg$c54 = function() { return ""; },
      peg$c55 = " ",
      peg$c56 = peg$literalExpectation(" ", false),
      peg$c57 = "\n",
      peg$c58 = peg$literalExpectation("\n", false),
      peg$c59 = "\r",
      peg$c60 = peg$literalExpectation("\r", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseargs_spec_list() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsewhitespace();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsearg_spec();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c0(s4);
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsearg_spec();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c0(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhitespace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearg_spec() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptional();
      if (s2 === peg$FAILED) {
        s2 = peg$parsemandatory();
        if (s2 === peg$FAILED) {
          s2 = peg$parseverbatim();
          if (s2 === peg$FAILED) {
            s2 = peg$parserequired();
            if (s2 === peg$FAILED) {
              s2 = peg$parsebody();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseverbatim() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebody() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoptional() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptional_star();
      if (s2 === peg$FAILED) {
        s2 = peg$parseoptional_standard();
        if (s2 === peg$FAILED) {
          s2 = peg$parseoptional_delimited();
          if (s2 === peg$FAILED) {
            s2 = peg$parseoptional_embellishment();
            if (s2 === peg$FAILED) {
              s2 = peg$parseoptional_token();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptional_delimited() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 68) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebrace_spec();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebraced_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 100) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebrace_spec();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptional_star() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoptional_standard() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 79) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebraced_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 111) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoptional_embellishment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 101) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebraced_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 69) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebraced_group();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebraced_group();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptional_token() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserequired() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 82) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebrace_spec();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebraced_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c41(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 114) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebrace_spec();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemandatory() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebrace_spec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsewhitespace_token();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsewhitespace_token();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebraced_group() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c49;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c51;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = void 0;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        peg$silentFails++;
        s7 = peg$parsebraced_group();
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = void 0;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parsebraced_group();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c51;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$parsebraced_group();
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parsebraced_group();
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c53(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace_token();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace_token();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewhitespace_token() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c55;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c57;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c59;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
      }
    }

    return s0;
  }


      const DEFAULT_OPTIONS = {
          optional: { openBrace: "[", closeBrace: "]" },
          mandatory: { openBrace: "{", closeBrace: "}" },
      };
      function createNode(type, options) {
          const computedOptions = DEFAULT_OPTIONS[type] || {};
          return { type, ...computedOptions, ...options };
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/latex.pegjs":
/*!*******************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/latex.pegjs ***!
  \*******************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { document: peg$parsedocument, math: peg$parsemath },
      peg$startRuleFunction  = peg$parsedocument,

      peg$c0 = peg$otherExpectation("document"),
      peg$c1 = function(content) { return createNode("root", { content }); },
      peg$c2 = peg$otherExpectation("math"),
      peg$c3 = peg$otherExpectation("token"),
      peg$c4 = function(t) { return t; },
      peg$c5 = function(eq) {
                  return createNode("inlinemath", { content: eq });
              },
      peg$c6 = peg$anyExpectation(),
      peg$c7 = function(s) { return createNode("string", { content: s }); },
      peg$c8 = peg$otherExpectation("parbreak"),
      peg$c9 = function() { return createNode("parbreak"); },
      peg$c10 = peg$otherExpectation("math token"),
      peg$c11 = function(x) { return x; },
      peg$c12 = function() {
                  return createNode("macro", { content: "^", escapeToken: "" });
              },
      peg$c13 = function() {
                  return createNode("macro", { content: "_", escapeToken: "" });
              },
      peg$c14 = peg$otherExpectation("nonchar token"),
      peg$c15 = "%",
      peg$c16 = peg$literalExpectation("%", false),
      peg$c17 = peg$otherExpectation("whitespace"),
      peg$c18 = function() {
                  return createNode("whitespace");
              },
      peg$c19 = peg$otherExpectation("number"),
      peg$c20 = ".",
      peg$c21 = peg$literalExpectation(".", false),
      peg$c22 = function(a, b) { return a.join("") + "." + b.join(""); },
      peg$c23 = function(b) { return "." + b.join(""); },
      peg$c24 = function(a) { return a.join("") + "."; },
      peg$c25 = peg$otherExpectation("special macro"),
      peg$c26 = "verb*",
      peg$c27 = peg$literalExpectation("verb*", false),
      peg$c28 = "verb",
      peg$c29 = peg$literalExpectation("verb", false),
      peg$c30 = function(env, e, end) { return end == e; },
      peg$c31 = function(env, e, x) { return x; },
      peg$c32 = function(env, e, x, end) { return end == e; },
      peg$c33 = function(env, e, x) {
                  return createNode("verb", {
                      env: env,
                      escape: e,
                      content: x.join(""),
                  });
              },
      peg$c34 = function(x) { return createNode("displaymath", { content: x }); },
      peg$c35 = function(x) { return createNode("inlinemath", { content: x }); },
      peg$c36 = peg$otherExpectation("verbatim environment"),
      peg$c37 = function(env, end_env) { return compare_env({ content: [env] }, end_env); },
      peg$c38 = function(env, x) { return x; },
      peg$c39 = function(env, body) {
                  return createNode("verbatim", {
                      env: env,
                      content: body.join(""),
                  });
              },
      peg$c40 = "verbatim*",
      peg$c41 = peg$literalExpectation("verbatim*", false),
      peg$c42 = "verbatim",
      peg$c43 = peg$literalExpectation("verbatim", false),
      peg$c44 = "filecontents*",
      peg$c45 = peg$literalExpectation("filecontents*", false),
      peg$c46 = "filecontents",
      peg$c47 = peg$literalExpectation("filecontents", false),
      peg$c48 = "comment",
      peg$c49 = peg$literalExpectation("comment", false),
      peg$c50 = "lstlisting",
      peg$c51 = peg$literalExpectation("lstlisting", false),
      peg$c52 = peg$otherExpectation("macro"),
      peg$c53 = function(n) { return n.join(""); },
      peg$c54 = function(n) { return n; },
      peg$c55 = function(m) {
                  return createNode("macro", { content: m });
              },
      peg$c56 = peg$otherExpectation("group"),
      peg$c57 = function(c) { return c; },
      peg$c58 = function(x) {
                  return createNode("group", { content: x });
              },
      peg$c59 = function(g) { return text().slice(1, -1); },
      peg$c60 = peg$otherExpectation("environment"),
      peg$c61 = function(env, env_comment, end_env) { return compare_env(env, end_env); },
      peg$c62 = function(env, env_comment, x) { return x; },
      peg$c63 = function(env, env_comment, body) {
                  return createNode("environment", {
                      env,
                      content: env_comment ? [env_comment, ...body] : body,
                  });
              },
      peg$c64 = peg$otherExpectation("math environment"),
      peg$c65 = function(env, env_comment, end_env) { return compare_env({ content: [env] }, end_env); },
      peg$c66 = function(env, env_comment, body) {
                  return createNode("mathenv", {
                      env: env,
                      content: env_comment ? [env_comment, ...body] : body,
                  });
              },
      peg$c67 = peg$otherExpectation("math group"),
      peg$c68 = "[",
      peg$c69 = peg$literalExpectation("[", false),
      peg$c70 = "]",
      peg$c71 = peg$literalExpectation("]", false),
      peg$c72 = "(",
      peg$c73 = peg$literalExpectation("(", false),
      peg$c74 = ")",
      peg$c75 = peg$literalExpectation(")", false),
      peg$c76 = "begin",
      peg$c77 = peg$literalExpectation("begin", false),
      peg$c78 = "end",
      peg$c79 = peg$literalExpectation("end", false),
      peg$c80 = "equation*",
      peg$c81 = peg$literalExpectation("equation*", false),
      peg$c82 = "equation",
      peg$c83 = peg$literalExpectation("equation", false),
      peg$c84 = "align*",
      peg$c85 = peg$literalExpectation("align*", false),
      peg$c86 = "align",
      peg$c87 = peg$literalExpectation("align", false),
      peg$c88 = "alignat*",
      peg$c89 = peg$literalExpectation("alignat*", false),
      peg$c90 = "alignat",
      peg$c91 = peg$literalExpectation("alignat", false),
      peg$c92 = "gather*",
      peg$c93 = peg$literalExpectation("gather*", false),
      peg$c94 = "gather",
      peg$c95 = peg$literalExpectation("gather", false),
      peg$c96 = "multline*",
      peg$c97 = peg$literalExpectation("multline*", false),
      peg$c98 = "multline",
      peg$c99 = peg$literalExpectation("multline", false),
      peg$c100 = "flalign*",
      peg$c101 = peg$literalExpectation("flalign*", false),
      peg$c102 = "flalign",
      peg$c103 = peg$literalExpectation("flalign", false),
      peg$c104 = "split",
      peg$c105 = peg$literalExpectation("split", false),
      peg$c106 = "math",
      peg$c107 = peg$literalExpectation("math", false),
      peg$c108 = "displaymath",
      peg$c109 = peg$literalExpectation("displaymath", false),
      peg$c110 = function(e) { return createNode("string", { content: e }); },
      peg$c111 = peg$otherExpectation("escape"),
      peg$c112 = "\\",
      peg$c113 = peg$literalExpectation("\\", false),
      peg$c114 = function() { return createNode("string", { content: "\\" }); },
      peg$c115 = "{",
      peg$c116 = peg$literalExpectation("{", false),
      peg$c117 = "}",
      peg$c118 = peg$literalExpectation("}", false),
      peg$c119 = "$",
      peg$c120 = peg$literalExpectation("$", false),
      peg$c121 = "&",
      peg$c122 = peg$literalExpectation("&", false),
      peg$c123 = peg$otherExpectation("newline"),
      peg$c124 = "\r",
      peg$c125 = peg$literalExpectation("\r", false),
      peg$c126 = "\n",
      peg$c127 = peg$literalExpectation("\n", false),
      peg$c128 = "\r\n",
      peg$c129 = peg$literalExpectation("\r\n", false),
      peg$c130 = "#",
      peg$c131 = peg$literalExpectation("#", false),
      peg$c132 = "^",
      peg$c133 = peg$literalExpectation("^", false),
      peg$c134 = "_",
      peg$c135 = peg$literalExpectation("_", false),
      peg$c136 = "\0",
      peg$c137 = peg$literalExpectation("\0", false),
      peg$c138 = /^[ \t]/,
      peg$c139 = peg$classExpectation([" ", "\t"], false, false),
      peg$c140 = function() { return " "; },
      peg$c141 = peg$otherExpectation("letter"),
      peg$c142 = /^[a-zA-Z]/,
      peg$c143 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c144 = peg$otherExpectation("digit"),
      peg$c145 = /^[0-9]/,
      peg$c146 = peg$classExpectation([["0", "9"]], false, false),
      peg$c147 = peg$otherExpectation("punctuation"),
      peg$c148 = /^[.,;:\-*\/()!?=+<>[\]`'"~]/,
      peg$c149 = peg$classExpectation([".", ",", ";", ":", "-", "*", "/", "(", ")", "!", "?", "=", "+", "<", ">", "[", "]", "`", "'", "\"", "~"], false, false),
      peg$c150 = function(p) {
                  return createNode("string", { content: p });
              },
      peg$c151 = peg$otherExpectation("full comment"),
      peg$c152 = function(leading_sp, comment) {
                  return createNode("comment", {
                      ...comment,
                      sameline: false,
                      leadingWhitespace: leading_sp.length > 0,
                  });
              },
      peg$c153 = function(spaces, x) {
                  return createNode("comment", {
                      ...x,
                      sameline: true,
                      leadingWhitespace: spaces.length > 0,
                  });
              },
      peg$c154 = peg$otherExpectation("comment"),
      peg$c155 = function(c) {
                  return { content: c.join(""), suffixParbreak: true };
              },
      peg$c156 = function(c) { return { content: c.join("") }; },
      peg$c157 = function() {
                  var loc = location();
                  return loc.start.column === 1;
              },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsedocument() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetoken();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }

    return s0;
  }

  function peg$parsemath() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsemath_token();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsemath_token();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$parsespecial_macro();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefull_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegroup();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemath_shift();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parsemath_shift();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemath_token();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c4(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  peg$silentFails++;
                  s5 = peg$parsemath_shift();
                  peg$silentFails--;
                  if (s5 === peg$FAILED) {
                    s4 = void 0;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsemath_token();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c4(s5);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsemath_shift();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c5(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsealignment_tab();
              if (s0 === peg$FAILED) {
                s0 = peg$parseparbreak();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemacro_parameter();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenumber();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsewhitespace();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsepunctuation();
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$currPos;
                            s2 = [];
                            s3 = peg$currPos;
                            s4 = peg$currPos;
                            peg$silentFails++;
                            s5 = peg$parsenonchar_token();
                            peg$silentFails--;
                            if (s5 === peg$FAILED) {
                              s4 = void 0;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                              }
                              if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                              } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                            if (s3 !== peg$FAILED) {
                              while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$currPos;
                                s4 = peg$currPos;
                                peg$silentFails++;
                                s5 = peg$parsenonchar_token();
                                peg$silentFails--;
                                if (s5 === peg$FAILED) {
                                  s4 = void 0;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                if (s4 !== peg$FAILED) {
                                  if (input.length > peg$currPos) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s4 = [s4, s5];
                                    s3 = s4;
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$FAILED;
                                }
                              }
                            } else {
                              s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = input.substring(s1, peg$currPos);
                            } else {
                              s1 = s2;
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c7(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsebegin_group();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseend_group();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsemath_shift();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parseparbreak() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsesp();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsesp();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenl();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parsesp();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parsesp();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenl();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parsesp();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsesp();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsenl();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsesp();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsesp();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parsecomment_start();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsesp();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenl();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parsesp();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsesp();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenl();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parsesp();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsesp();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenl();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c9();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parsemath_token() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$parsespecial_macro();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefull_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewhitespace();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewhitespace();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsegroup();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewhitespace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewhitespace();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsealignment_tab();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsewhitespace();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsewhitespace();
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c11(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsewhitespace();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsewhitespace();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsemacro_parameter();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parsewhitespace();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsewhitespace();
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c11(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsewhitespace();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsewhitespace();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesuperscript();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsewhitespace();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsewhitespace();
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c12();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsewhitespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsewhitespace();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesubscript();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parsewhitespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsewhitespace();
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c13();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsewhitespace();
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.length > peg$currPos) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c7(s1);
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsenonchar_token() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseescape();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c15;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsebegin_group();
        if (s0 === peg$FAILED) {
          s0 = peg$parseend_group();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemath_shift();
            if (s0 === peg$FAILED) {
              s0 = peg$parsealignment_tab();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenl();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemacro_parameter();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsesp();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsepunctuation();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseEOF();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsenl();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesp();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsesp();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenl();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsecomment_start();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parsenl();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = [];
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesp();
          }
        } else {
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c18();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenum();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c20;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsenum();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsenum();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c22(s2, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenum();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsenum();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c23(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsenum();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsenum();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c24(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsespecial_macro() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s2 = peg$c26;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s2 = peg$c28;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          if (input.length > peg$currPos) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s9 = peg$c30(s2, s3, s8);
            if (s9) {
              s9 = void 0;
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c31(s2, s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s9 = peg$c30(s2, s3, s8);
              if (s9) {
                s9 = void 0;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c31(s2, s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s7 = peg$c32(s2, s3, s4, s6);
              if (s7) {
                s7 = void 0;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c33(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseverbatim_environment();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebegin_display_math();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseend_display_math();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemath_token();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c11(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseend_display_math();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemath_token();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c11(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseend_display_math();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsebegin_inline_math();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseend_inline_math();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemath_token();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c11(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseend_inline_math();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemath_token();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c11(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseend_inline_math();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemath_shift();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsemath_shift();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$currPos;
                s7 = peg$parsemath_shift();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsemath_shift();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsemath_token();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c11(s6);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  peg$silentFails++;
                  s6 = peg$currPos;
                  s7 = peg$parsemath_shift();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsemath_shift();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsemath_token();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c11(s6);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsemath_shift();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsemath_shift();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c34(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsemath_environment();
              if (s0 === peg$FAILED) {
                s0 = peg$parseenvironment();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parseverbatim_environment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseverbatim_env_name();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseend_group();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$currPos;
            s9 = peg$parseend_env();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsegroup();
              if (s10 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s11 = peg$c37(s3, s10);
                if (s11) {
                  s11 = void 0;
                } else {
                  s11 = peg$FAILED;
                }
                if (s11 !== peg$FAILED) {
                  s9 = [s9, s10, s11];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = void 0;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c38(s3, s8);
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$currPos;
              s9 = peg$parseend_env();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsegroup();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s11 = peg$c37(s3, s10);
                  if (s11) {
                    s11 = void 0;
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = void 0;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c38(s3, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseend_env();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebegin_group();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseverbatim_env_name();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseend_group();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c39(s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseverbatim_env_name() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c46) {
            s0 = peg$c46;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c48) {
              s0 = peg$c48;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c50) {
                s0 = peg$c50;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemacro() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseescape();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsechar();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsechar();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c53(s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseescape();
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c54(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c55(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parsegroup() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_group();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseend_group();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetoken();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseend_group();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetoken();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    return s0;
  }

  function peg$parsegroup_contents_as_string() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsegroup();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c59(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseenvironment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup_contents_as_string();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesameline_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = peg$parseend_env();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsegroup_contents_as_string();
            if (s9 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s10 = peg$c61(s2, s3, s9);
              if (s10) {
                s10 = void 0;
              } else {
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetoken();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c62(s2, s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            s8 = peg$parseend_env();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsegroup_contents_as_string();
              if (s9 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s10 = peg$c61(s2, s3, s9);
                if (s10) {
                  s10 = void 0;
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetoken();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c62(s2, s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_env();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsegroup_contents_as_string();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c63(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parsemath_environment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemath_env_name();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseend_group();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesameline_comment();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$currPos;
              s10 = peg$parseend_env();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsegroup();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s12 = peg$c65(s3, s5, s11);
                  if (s12) {
                    s12 = void 0;
                  } else {
                    s12 = peg$FAILED;
                  }
                  if (s12 !== peg$FAILED) {
                    s10 = [s10, s11, s12];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = void 0;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsemath_token();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c62(s3, s5, s9);
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$currPos;
                s10 = peg$parseend_env();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsegroup();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s12 = peg$c65(s3, s5, s11);
                    if (s12) {
                      s12 = void 0;
                    } else {
                      s12 = peg$FAILED;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = void 0;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsemath_token();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c62(s3, s5, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_env();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsebegin_group();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsemath_env_name();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseend_group();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c66(s3, s5, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    return s0;
  }

  function peg$parsemath_group() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_group();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseend_group();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemath_token();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseend_group();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemath_token();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parsebegin_display_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c68;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_display_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c70;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_inline_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c72;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_inline_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 41) {
        s2 = peg$c74;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_env() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c76) {
        s2 = peg$c76;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_env() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c78) {
        s2 = peg$c78;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemath_env_name() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c82) {
        s1 = peg$c82;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c84) {
          s1 = peg$c84;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c86) {
            s1 = peg$c86;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c88) {
              s1 = peg$c88;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c90) {
                s1 = peg$c90;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c92) {
                  s1 = peg$c92;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c94) {
                    s1 = peg$c94;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c96) {
                      s1 = peg$c96;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c97); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c98) {
                        s1 = peg$c98;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c100) {
                          s1 = peg$c100;
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c102) {
                            s1 = peg$c102;
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c104) {
                              s1 = peg$c104;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c105); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c106) {
                                s1 = peg$c106;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c107); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 11) === peg$c108) {
                                  s1 = peg$c108;
                                  peg$currPos += 11;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c110(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseescape() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c112;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c114();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }

    return s0;
  }

  function peg$parsebegin_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c115;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseend_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c117;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemath_shift() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c119;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsealignment_tab() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c121;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenl() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 13) {
      s2 = peg$c124;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c126;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 13) {
        s0 = peg$c124;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c128) {
          s0 = peg$c128;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }

    return s0;
  }

  function peg$parsemacro_parameter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c130;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesuperscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c132;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c134;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseignore() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 0) {
      s0 = peg$c136;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c138.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c138.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c140();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c142.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parsenum() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c145.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }

    return s0;
  }

  function peg$parsepunctuation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c148.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c150(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }

    return s0;
  }

  function peg$parsecomment_start() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parsefull_comment() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseownline_comment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesameline_comment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseownline_comment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsesp();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsesp();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenl();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseleading_sp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomment();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c152(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesameline_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesp();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsesp();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c153(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecomment_start();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsenl();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenl();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseparbreak();
        peg$silentFails--;
        if (s4 !== peg$FAILED) {
          peg$currPos = s3;
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c155(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment_start();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenl();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsenl();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsenl();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parsecomment_start();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsenl();
            if (s3 === peg$FAILED) {
              s3 = peg$parseEOF();
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c156(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }

    return s0;
  }

  function peg$parseleading_sp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsestart_of_line();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesp();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsestart_of_line() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$c157();
    if (s0) {
      s0 = void 0;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function toString(e) {
          if (typeof e === "string") {
              return e;
          }
          if (typeof e.content === "string") {
              return e.content;
          }
          if (e && e.type === "whitespace") {
              return " ";
          }
          return e;
      }

      function compare_env(g1, g2) {
          const g1Name =
              typeof g1 === "string" ? g1 : g1.content.map(toString).join("");
          const g2Name =
              typeof g2 === "string" ? g2 : g2.content.map(toString).join("");
          return g1Name === g2Name;
      }

      function createNode(type, extra = {}) {
          return { type, ...extra, position: location() };
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "../../node_modules/prettier/doc.js":
/*!******************************************!*\
  !*** ../../node_modules/prettier/doc.js ***!
  \******************************************/
/***/ ((module) => {

(function (factory) {
  if (true) {
    module.exports = factory();
  } else { var root; }
})(function() {
  "use strict";
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // dist/doc.js
  var require_doc = __commonJS({
    "dist/doc.js"(exports, module) {
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __esm = (fn, res) => function __init() {
        return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
      };
      var __commonJS2 = (cb, mod) => function __require() {
        return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = {
          exports: {}
        }).exports, mod), mod.exports;
      };
      var init_define_process = __esm({
        "<define:process>"() {
        }
      });
      var require_doc_builders = __commonJS2({
        "src/document/doc-builders.js"(exports2, module2) {
          "use strict";
          init_define_process();
          function concat(parts) {
            if (false) {}
            return {
              type: "concat",
              parts
            };
          }
          function indent(contents) {
            if (false) {}
            return {
              type: "indent",
              contents
            };
          }
          function align(widthOrString, contents) {
            if (false) {}
            return {
              type: "align",
              contents,
              n: widthOrString
            };
          }
          function group(contents) {
            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (false) {}
            return {
              type: "group",
              id: opts.id,
              contents,
              break: Boolean(opts.shouldBreak),
              expandedStates: opts.expandedStates
            };
          }
          function dedentToRoot(contents) {
            return align(Number.NEGATIVE_INFINITY, contents);
          }
          function markAsRoot(contents) {
            return align({
              type: "root"
            }, contents);
          }
          function dedent(contents) {
            return align(-1, contents);
          }
          function conditionalGroup(states, opts) {
            return group(states[0], Object.assign(Object.assign({}, opts), {}, {
              expandedStates: states
            }));
          }
          function fill(parts) {
            if (false) {}
            return {
              type: "fill",
              parts
            };
          }
          function ifBreak(breakContents, flatContents) {
            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            if (false) {}
            return {
              type: "if-break",
              breakContents,
              flatContents,
              groupId: opts.groupId
            };
          }
          function indentIfBreak(contents, opts) {
            return {
              type: "indent-if-break",
              contents,
              groupId: opts.groupId,
              negate: opts.negate
            };
          }
          function lineSuffix(contents) {
            if (false) {}
            return {
              type: "line-suffix",
              contents
            };
          }
          var lineSuffixBoundary = {
            type: "line-suffix-boundary"
          };
          var breakParent = {
            type: "break-parent"
          };
          var trim = {
            type: "trim"
          };
          var hardlineWithoutBreakParent = {
            type: "line",
            hard: true
          };
          var literallineWithoutBreakParent = {
            type: "line",
            hard: true,
            literal: true
          };
          var line = {
            type: "line"
          };
          var softline = {
            type: "line",
            soft: true
          };
          var hardline = concat([hardlineWithoutBreakParent, breakParent]);
          var literalline = concat([literallineWithoutBreakParent, breakParent]);
          var cursor = {
            type: "cursor",
            placeholder: Symbol("cursor")
          };
          function join(sep, arr) {
            const res = [];
            for (let i = 0; i < arr.length; i++) {
              if (i !== 0) {
                res.push(sep);
              }
              res.push(arr[i]);
            }
            return concat(res);
          }
          function addAlignmentToDoc(doc, size, tabWidth) {
            let aligned = doc;
            if (size > 0) {
              for (let i = 0; i < Math.floor(size / tabWidth); ++i) {
                aligned = indent(aligned);
              }
              aligned = align(size % tabWidth, aligned);
              aligned = align(Number.NEGATIVE_INFINITY, aligned);
            }
            return aligned;
          }
          function label(label2, contents) {
            return {
              type: "label",
              label: label2,
              contents
            };
          }
          module2.exports = {
            concat,
            join,
            line,
            softline,
            hardline,
            literalline,
            group,
            conditionalGroup,
            fill,
            lineSuffix,
            lineSuffixBoundary,
            cursor,
            breakParent,
            ifBreak,
            trim,
            indent,
            indentIfBreak,
            align,
            addAlignmentToDoc,
            markAsRoot,
            dedentToRoot,
            dedent,
            hardlineWithoutBreakParent,
            literallineWithoutBreakParent,
            label
          };
        }
      });
      var require_end_of_line = __commonJS2({
        "src/common/end-of-line.js"(exports2, module2) {
          "use strict";
          init_define_process();
          function guessEndOfLine(text) {
            const index = text.indexOf("\r");
            if (index >= 0) {
              return text.charAt(index + 1) === "\n" ? "crlf" : "cr";
            }
            return "lf";
          }
          function convertEndOfLineToChars(value) {
            switch (value) {
              case "cr":
                return "\r";
              case "crlf":
                return "\r\n";
              default:
                return "\n";
            }
          }
          function countEndOfLineChars(text, eol) {
            let regex;
            switch (eol) {
              case "\n":
                regex = /\n/g;
                break;
              case "\r":
                regex = /\r/g;
                break;
              case "\r\n":
                regex = /\r\n/g;
                break;
              default:
                throw new Error('Unexpected "eol" '.concat(JSON.stringify(eol), "."));
            }
            const endOfLines = text.match(regex);
            return endOfLines ? endOfLines.length : 0;
          }
          function normalizeEndOfLine(text) {
            return text.replace(/\r\n?/g, "\n");
          }
          module2.exports = {
            guessEndOfLine,
            convertEndOfLineToChars,
            countEndOfLineChars,
            normalizeEndOfLine
          };
        }
      });
      var require_get_last = __commonJS2({
        "src/utils/get-last.js"(exports2, module2) {
          "use strict";
          init_define_process();
          var getLast = (arr) => arr[arr.length - 1];
          module2.exports = getLast;
        }
      });
      var require_string_width = __commonJS2({
        "vendors/string-width.js"(exports2, module2) {
          init_define_process();
          var __create = Object.create;
          var __defProp = Object.defineProperty;
          var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
          var __getOwnPropNames22 = Object.getOwnPropertyNames;
          var __getProtoOf = Object.getPrototypeOf;
          var __hasOwnProp = Object.prototype.hasOwnProperty;
          var __commonJS22 = (cb, mod) => function __require() {
            return mod || (0, cb[__getOwnPropNames22(cb)[0]])((mod = {
              exports: {}
            }).exports, mod), mod.exports;
          };
          var __export = (target, all) => {
            for (var name in all)
              __defProp(target, name, {
                get: all[name],
                enumerable: true
              });
          };
          var __copyProps = (to, from, except, desc) => {
            if (from && typeof from === "object" || typeof from === "function") {
              for (let key of __getOwnPropNames22(from))
                if (!__hasOwnProp.call(to, key) && key !== except)
                  __defProp(to, key, {
                    get: () => from[key],
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                  });
            }
            return to;
          };
          var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
            value: mod,
            enumerable: true
          }) : target, mod));
          var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", {
            value: true
          }), mod);
          var require_emoji_regex = __commonJS22({
            "node_modules/emoji-regex/index.js"(exports3, module22) {
              "use strict";
              module22.exports = function() {
                return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
              };
            }
          });
          var string_width_exports = {};
          __export(string_width_exports, {
            default: () => stringWidth
          });
          module2.exports = __toCommonJS(string_width_exports);
          function ansiRegex() {
            let {
              onlyFirst = false
            } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
            return new RegExp(pattern, onlyFirst ? void 0 : "g");
          }
          function stripAnsi(string) {
            if (typeof string !== "string") {
              throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
            }
            return string.replace(ansiRegex(), "");
          }
          function isFullwidthCodePoint(codePoint) {
            if (!Number.isInteger(codePoint)) {
              return false;
            }
            return codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141);
          }
          var import_emoji_regex = __toESM(require_emoji_regex(), 1);
          function stringWidth(string) {
            if (typeof string !== "string" || string.length === 0) {
              return 0;
            }
            string = stripAnsi(string);
            if (string.length === 0) {
              return 0;
            }
            string = string.replace((0, import_emoji_regex.default)(), "  ");
            let width = 0;
            for (let index = 0; index < string.length; index++) {
              const codePoint = string.codePointAt(index);
              if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {
                continue;
              }
              if (codePoint >= 768 && codePoint <= 879) {
                continue;
              }
              if (codePoint > 65535) {
                index++;
              }
              width += isFullwidthCodePoint(codePoint) ? 2 : 1;
            }
            return width;
          }
        }
      });
      var require_get_string_width = __commonJS2({
        "src/utils/get-string-width.js"(exports2, module2) {
          "use strict";
          init_define_process();
          var stringWidth = require_string_width().default;
          var notAsciiRegex = /[^\x20-\x7F]/;
          function getStringWidth(text) {
            if (!text) {
              return 0;
            }
            if (!notAsciiRegex.test(text)) {
              return text.length;
            }
            return stringWidth(text);
          }
          module2.exports = getStringWidth;
        }
      });
      var require_doc_utils = __commonJS2({
        "src/document/doc-utils.js"(exports2, module2) {
          "use strict";
          init_define_process();
          var getLast = require_get_last();
          var {
            literalline,
            join
          } = require_doc_builders();
          var isConcat = (doc) => Array.isArray(doc) || doc && doc.type === "concat";
          var getDocParts = (doc) => {
            if (Array.isArray(doc)) {
              return doc;
            }
            if (doc.type !== "concat" && doc.type !== "fill") {
              throw new Error("Expect doc type to be `concat` or `fill`.");
            }
            return doc.parts;
          };
          var traverseDocOnExitStackMarker = {};
          function traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {
            const docsStack = [doc];
            while (docsStack.length > 0) {
              const doc2 = docsStack.pop();
              if (doc2 === traverseDocOnExitStackMarker) {
                onExit(docsStack.pop());
                continue;
              }
              if (onExit) {
                docsStack.push(doc2, traverseDocOnExitStackMarker);
              }
              if (!onEnter || onEnter(doc2) !== false) {
                if (isConcat(doc2) || doc2.type === "fill") {
                  const parts = getDocParts(doc2);
                  for (let ic = parts.length, i = ic - 1; i >= 0; --i) {
                    docsStack.push(parts[i]);
                  }
                } else if (doc2.type === "if-break") {
                  if (doc2.flatContents) {
                    docsStack.push(doc2.flatContents);
                  }
                  if (doc2.breakContents) {
                    docsStack.push(doc2.breakContents);
                  }
                } else if (doc2.type === "group" && doc2.expandedStates) {
                  if (shouldTraverseConditionalGroups) {
                    for (let ic = doc2.expandedStates.length, i = ic - 1; i >= 0; --i) {
                      docsStack.push(doc2.expandedStates[i]);
                    }
                  } else {
                    docsStack.push(doc2.contents);
                  }
                } else if (doc2.contents) {
                  docsStack.push(doc2.contents);
                }
              }
            }
          }
          function mapDoc(doc, cb) {
            const mapped = /* @__PURE__ */ new Map();
            return rec(doc);
            function rec(doc2) {
              if (mapped.has(doc2)) {
                return mapped.get(doc2);
              }
              const result = process2(doc2);
              mapped.set(doc2, result);
              return result;
            }
            function process2(doc2) {
              if (Array.isArray(doc2)) {
                return cb(doc2.map(rec));
              }
              if (doc2.type === "concat" || doc2.type === "fill") {
                const parts = doc2.parts.map(rec);
                return cb(Object.assign(Object.assign({}, doc2), {}, {
                  parts
                }));
              }
              if (doc2.type === "if-break") {
                const breakContents = doc2.breakContents && rec(doc2.breakContents);
                const flatContents = doc2.flatContents && rec(doc2.flatContents);
                return cb(Object.assign(Object.assign({}, doc2), {}, {
                  breakContents,
                  flatContents
                }));
              }
              if (doc2.type === "group" && doc2.expandedStates) {
                const expandedStates = doc2.expandedStates.map(rec);
                const contents = expandedStates[0];
                return cb(Object.assign(Object.assign({}, doc2), {}, {
                  contents,
                  expandedStates
                }));
              }
              if (doc2.contents) {
                const contents = rec(doc2.contents);
                return cb(Object.assign(Object.assign({}, doc2), {}, {
                  contents
                }));
              }
              return cb(doc2);
            }
          }
          function findInDoc(doc, fn, defaultValue) {
            let result = defaultValue;
            let hasStopped = false;
            function findInDocOnEnterFn(doc2) {
              const maybeResult = fn(doc2);
              if (maybeResult !== void 0) {
                hasStopped = true;
                result = maybeResult;
              }
              if (hasStopped) {
                return false;
              }
            }
            traverseDoc(doc, findInDocOnEnterFn);
            return result;
          }
          function willBreakFn(doc) {
            if (doc.type === "group" && doc.break) {
              return true;
            }
            if (doc.type === "line" && doc.hard) {
              return true;
            }
            if (doc.type === "break-parent") {
              return true;
            }
          }
          function willBreak(doc) {
            return findInDoc(doc, willBreakFn, false);
          }
          function breakParentGroup(groupStack) {
            if (groupStack.length > 0) {
              const parentGroup = getLast(groupStack);
              if (!parentGroup.expandedStates && !parentGroup.break) {
                parentGroup.break = "propagated";
              }
            }
            return null;
          }
          function propagateBreaks(doc) {
            const alreadyVisitedSet = /* @__PURE__ */ new Set();
            const groupStack = [];
            function propagateBreaksOnEnterFn(doc2) {
              if (doc2.type === "break-parent") {
                breakParentGroup(groupStack);
              }
              if (doc2.type === "group") {
                groupStack.push(doc2);
                if (alreadyVisitedSet.has(doc2)) {
                  return false;
                }
                alreadyVisitedSet.add(doc2);
              }
            }
            function propagateBreaksOnExitFn(doc2) {
              if (doc2.type === "group") {
                const group = groupStack.pop();
                if (group.break) {
                  breakParentGroup(groupStack);
                }
              }
            }
            traverseDoc(doc, propagateBreaksOnEnterFn, propagateBreaksOnExitFn, true);
          }
          function removeLinesFn(doc) {
            if (doc.type === "line" && !doc.hard) {
              return doc.soft ? "" : " ";
            }
            if (doc.type === "if-break") {
              return doc.flatContents || "";
            }
            return doc;
          }
          function removeLines(doc) {
            return mapDoc(doc, removeLinesFn);
          }
          var isHardline = (doc, nextDoc) => doc && doc.type === "line" && doc.hard && nextDoc && nextDoc.type === "break-parent";
          function stripDocTrailingHardlineFromDoc(doc) {
            if (!doc) {
              return doc;
            }
            if (isConcat(doc) || doc.type === "fill") {
              const parts = getDocParts(doc);
              while (parts.length > 1 && isHardline(...parts.slice(-2))) {
                parts.length -= 2;
              }
              if (parts.length > 0) {
                const lastPart = stripDocTrailingHardlineFromDoc(getLast(parts));
                parts[parts.length - 1] = lastPart;
              }
              return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {
                parts
              });
            }
            switch (doc.type) {
              case "align":
              case "indent":
              case "indent-if-break":
              case "group":
              case "line-suffix":
              case "label": {
                const contents = stripDocTrailingHardlineFromDoc(doc.contents);
                return Object.assign(Object.assign({}, doc), {}, {
                  contents
                });
              }
              case "if-break": {
                const breakContents = stripDocTrailingHardlineFromDoc(doc.breakContents);
                const flatContents = stripDocTrailingHardlineFromDoc(doc.flatContents);
                return Object.assign(Object.assign({}, doc), {}, {
                  breakContents,
                  flatContents
                });
              }
            }
            return doc;
          }
          function stripTrailingHardline(doc) {
            return stripDocTrailingHardlineFromDoc(cleanDoc(doc));
          }
          function cleanDocFn(doc) {
            switch (doc.type) {
              case "fill":
                if (doc.parts.every((part) => part === "")) {
                  return "";
                }
                break;
              case "group":
                if (!doc.contents && !doc.id && !doc.break && !doc.expandedStates) {
                  return "";
                }
                if (doc.contents.type === "group" && doc.contents.id === doc.id && doc.contents.break === doc.break && doc.contents.expandedStates === doc.expandedStates) {
                  return doc.contents;
                }
                break;
              case "align":
              case "indent":
              case "indent-if-break":
              case "line-suffix":
                if (!doc.contents) {
                  return "";
                }
                break;
              case "if-break":
                if (!doc.flatContents && !doc.breakContents) {
                  return "";
                }
                break;
            }
            if (!isConcat(doc)) {
              return doc;
            }
            const parts = [];
            for (const part of getDocParts(doc)) {
              if (!part) {
                continue;
              }
              const [currentPart, ...restParts] = isConcat(part) ? getDocParts(part) : [part];
              if (typeof currentPart === "string" && typeof getLast(parts) === "string") {
                parts[parts.length - 1] += currentPart;
              } else {
                parts.push(currentPart);
              }
              parts.push(...restParts);
            }
            if (parts.length === 0) {
              return "";
            }
            if (parts.length === 1) {
              return parts[0];
            }
            return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {
              parts
            });
          }
          function cleanDoc(doc) {
            return mapDoc(doc, (currentDoc) => cleanDocFn(currentDoc));
          }
          function normalizeParts(parts) {
            const newParts = [];
            const restParts = parts.filter(Boolean);
            while (restParts.length > 0) {
              const part = restParts.shift();
              if (!part) {
                continue;
              }
              if (isConcat(part)) {
                restParts.unshift(...getDocParts(part));
                continue;
              }
              if (newParts.length > 0 && typeof getLast(newParts) === "string" && typeof part === "string") {
                newParts[newParts.length - 1] += part;
                continue;
              }
              newParts.push(part);
            }
            return newParts;
          }
          function normalizeDoc(doc) {
            return mapDoc(doc, (currentDoc) => {
              if (Array.isArray(currentDoc)) {
                return normalizeParts(currentDoc);
              }
              if (!currentDoc.parts) {
                return currentDoc;
              }
              return Object.assign(Object.assign({}, currentDoc), {}, {
                parts: normalizeParts(currentDoc.parts)
              });
            });
          }
          function replaceEndOfLine(doc) {
            return mapDoc(doc, (currentDoc) => typeof currentDoc === "string" && currentDoc.includes("\n") ? replaceTextEndOfLine(currentDoc) : currentDoc);
          }
          function replaceTextEndOfLine(text) {
            let replacement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : literalline;
            return join(replacement, text.split("\n")).parts;
          }
          function canBreakFn(doc) {
            if (doc.type === "line") {
              return true;
            }
          }
          function canBreak(doc) {
            return findInDoc(doc, canBreakFn, false);
          }
          module2.exports = {
            isConcat,
            getDocParts,
            willBreak,
            traverseDoc,
            findInDoc,
            mapDoc,
            propagateBreaks,
            removeLines,
            stripTrailingHardline,
            normalizeParts,
            normalizeDoc,
            cleanDoc,
            replaceTextEndOfLine,
            replaceEndOfLine,
            canBreak
          };
        }
      });
      var require_doc_printer = __commonJS2({
        "src/document/doc-printer.js"(exports2, module2) {
          "use strict";
          init_define_process();
          var {
            convertEndOfLineToChars
          } = require_end_of_line();
          var getLast = require_get_last();
          var getStringWidth = require_get_string_width();
          var {
            fill,
            cursor,
            indent
          } = require_doc_builders();
          var {
            isConcat,
            getDocParts
          } = require_doc_utils();
          var groupModeMap;
          var MODE_BREAK = 1;
          var MODE_FLAT = 2;
          function rootIndent() {
            return {
              value: "",
              length: 0,
              queue: []
            };
          }
          function makeIndent(ind, options) {
            return generateInd(ind, {
              type: "indent"
            }, options);
          }
          function makeAlign(indent2, widthOrDoc, options) {
            if (widthOrDoc === Number.NEGATIVE_INFINITY) {
              return indent2.root || rootIndent();
            }
            if (widthOrDoc < 0) {
              return generateInd(indent2, {
                type: "dedent"
              }, options);
            }
            if (!widthOrDoc) {
              return indent2;
            }
            if (widthOrDoc.type === "root") {
              return Object.assign(Object.assign({}, indent2), {}, {
                root: indent2
              });
            }
            const alignType = typeof widthOrDoc === "string" ? "stringAlign" : "numberAlign";
            return generateInd(indent2, {
              type: alignType,
              n: widthOrDoc
            }, options);
          }
          function generateInd(ind, newPart, options) {
            const queue = newPart.type === "dedent" ? ind.queue.slice(0, -1) : [...ind.queue, newPart];
            let value = "";
            let length = 0;
            let lastTabs = 0;
            let lastSpaces = 0;
            for (const part of queue) {
              switch (part.type) {
                case "indent":
                  flush();
                  if (options.useTabs) {
                    addTabs(1);
                  } else {
                    addSpaces(options.tabWidth);
                  }
                  break;
                case "stringAlign":
                  flush();
                  value += part.n;
                  length += part.n.length;
                  break;
                case "numberAlign":
                  lastTabs += 1;
                  lastSpaces += part.n;
                  break;
                default:
                  throw new Error("Unexpected type '".concat(part.type, "'"));
              }
            }
            flushSpaces();
            return Object.assign(Object.assign({}, ind), {}, {
              value,
              length,
              queue
            });
            function addTabs(count) {
              value += "	".repeat(count);
              length += options.tabWidth * count;
            }
            function addSpaces(count) {
              value += " ".repeat(count);
              length += count;
            }
            function flush() {
              if (options.useTabs) {
                flushTabs();
              } else {
                flushSpaces();
              }
            }
            function flushTabs() {
              if (lastTabs > 0) {
                addTabs(lastTabs);
              }
              resetLast();
            }
            function flushSpaces() {
              if (lastSpaces > 0) {
                addSpaces(lastSpaces);
              }
              resetLast();
            }
            function resetLast() {
              lastTabs = 0;
              lastSpaces = 0;
            }
          }
          function trim(out) {
            if (out.length === 0) {
              return 0;
            }
            let trimCount = 0;
            while (out.length > 0 && typeof getLast(out) === "string" && /^[\t ]*$/.test(getLast(out))) {
              trimCount += out.pop().length;
            }
            if (out.length > 0 && typeof getLast(out) === "string") {
              const trimmed = getLast(out).replace(/[\t ]*$/, "");
              trimCount += getLast(out).length - trimmed.length;
              out[out.length - 1] = trimmed;
            }
            return trimCount;
          }
          function fits(next, restCommands, width, options, hasLineSuffix, mustBeFlat) {
            let restIdx = restCommands.length;
            const cmds = [next];
            const out = [];
            while (width >= 0) {
              if (cmds.length === 0) {
                if (restIdx === 0) {
                  return true;
                }
                cmds.push(restCommands[restIdx - 1]);
                restIdx--;
                continue;
              }
              const [ind, mode, doc] = cmds.pop();
              if (typeof doc === "string") {
                out.push(doc);
                width -= getStringWidth(doc);
              } else if (isConcat(doc)) {
                const parts = getDocParts(doc);
                for (let i = parts.length - 1; i >= 0; i--) {
                  cmds.push([ind, mode, parts[i]]);
                }
              } else {
                switch (doc.type) {
                  case "indent":
                    cmds.push([makeIndent(ind, options), mode, doc.contents]);
                    break;
                  case "align":
                    cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);
                    break;
                  case "trim":
                    width += trim(out);
                    break;
                  case "group": {
                    if (mustBeFlat && doc.break) {
                      return false;
                    }
                    const groupMode = doc.break ? MODE_BREAK : mode;
                    cmds.push([ind, groupMode, doc.expandedStates && groupMode === MODE_BREAK ? getLast(doc.expandedStates) : doc.contents]);
                    if (doc.id) {
                      groupModeMap[doc.id] = groupMode;
                    }
                    break;
                  }
                  case "fill":
                    for (let i = doc.parts.length - 1; i >= 0; i--) {
                      cmds.push([ind, mode, doc.parts[i]]);
                    }
                    break;
                  case "if-break":
                  case "indent-if-break": {
                    const groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;
                    if (groupMode === MODE_BREAK) {
                      const breakContents = doc.type === "if-break" ? doc.breakContents : doc.negate ? doc.contents : indent(doc.contents);
                      if (breakContents) {
                        cmds.push([ind, mode, breakContents]);
                      }
                    }
                    if (groupMode === MODE_FLAT) {
                      const flatContents = doc.type === "if-break" ? doc.flatContents : doc.negate ? indent(doc.contents) : doc.contents;
                      if (flatContents) {
                        cmds.push([ind, mode, flatContents]);
                      }
                    }
                    break;
                  }
                  case "line":
                    switch (mode) {
                      case MODE_FLAT:
                        if (!doc.hard) {
                          if (!doc.soft) {
                            out.push(" ");
                            width -= 1;
                          }
                          break;
                        }
                        return true;
                      case MODE_BREAK:
                        return true;
                    }
                    break;
                  case "line-suffix":
                    hasLineSuffix = true;
                    break;
                  case "line-suffix-boundary":
                    if (hasLineSuffix) {
                      return false;
                    }
                    break;
                  case "label":
                    cmds.push([ind, mode, doc.contents]);
                    break;
                }
              }
            }
            return false;
          }
          function printDocToString(doc, options) {
            groupModeMap = {};
            const width = options.printWidth;
            const newLine = convertEndOfLineToChars(options.endOfLine);
            let pos = 0;
            const cmds = [[rootIndent(), MODE_BREAK, doc]];
            const out = [];
            let shouldRemeasure = false;
            let lineSuffix = [];
            while (cmds.length > 0) {
              const [ind, mode, doc2] = cmds.pop();
              if (typeof doc2 === "string") {
                const formatted = newLine !== "\n" ? doc2.replace(/\n/g, newLine) : doc2;
                out.push(formatted);
                pos += getStringWidth(formatted);
              } else if (isConcat(doc2)) {
                const parts = getDocParts(doc2);
                for (let i = parts.length - 1; i >= 0; i--) {
                  cmds.push([ind, mode, parts[i]]);
                }
              } else {
                switch (doc2.type) {
                  case "cursor":
                    out.push(cursor.placeholder);
                    break;
                  case "indent":
                    cmds.push([makeIndent(ind, options), mode, doc2.contents]);
                    break;
                  case "align":
                    cmds.push([makeAlign(ind, doc2.n, options), mode, doc2.contents]);
                    break;
                  case "trim":
                    pos -= trim(out);
                    break;
                  case "group":
                    switch (mode) {
                      case MODE_FLAT:
                        if (!shouldRemeasure) {
                          cmds.push([ind, doc2.break ? MODE_BREAK : MODE_FLAT, doc2.contents]);
                          break;
                        }
                      case MODE_BREAK: {
                        shouldRemeasure = false;
                        const next = [ind, MODE_FLAT, doc2.contents];
                        const rem = width - pos;
                        const hasLineSuffix = lineSuffix.length > 0;
                        if (!doc2.break && fits(next, cmds, rem, options, hasLineSuffix)) {
                          cmds.push(next);
                        } else {
                          if (doc2.expandedStates) {
                            const mostExpanded = getLast(doc2.expandedStates);
                            if (doc2.break) {
                              cmds.push([ind, MODE_BREAK, mostExpanded]);
                              break;
                            } else {
                              for (let i = 1; i < doc2.expandedStates.length + 1; i++) {
                                if (i >= doc2.expandedStates.length) {
                                  cmds.push([ind, MODE_BREAK, mostExpanded]);
                                  break;
                                } else {
                                  const state = doc2.expandedStates[i];
                                  const cmd = [ind, MODE_FLAT, state];
                                  if (fits(cmd, cmds, rem, options, hasLineSuffix)) {
                                    cmds.push(cmd);
                                    break;
                                  }
                                }
                              }
                            }
                          } else {
                            cmds.push([ind, MODE_BREAK, doc2.contents]);
                          }
                        }
                        break;
                      }
                    }
                    if (doc2.id) {
                      groupModeMap[doc2.id] = getLast(cmds)[1];
                    }
                    break;
                  case "fill": {
                    const rem = width - pos;
                    const {
                      parts
                    } = doc2;
                    if (parts.length === 0) {
                      break;
                    }
                    const [content, whitespace] = parts;
                    const contentFlatCmd = [ind, MODE_FLAT, content];
                    const contentBreakCmd = [ind, MODE_BREAK, content];
                    const contentFits = fits(contentFlatCmd, [], rem, options, lineSuffix.length > 0, true);
                    if (parts.length === 1) {
                      if (contentFits) {
                        cmds.push(contentFlatCmd);
                      } else {
                        cmds.push(contentBreakCmd);
                      }
                      break;
                    }
                    const whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];
                    const whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];
                    if (parts.length === 2) {
                      if (contentFits) {
                        cmds.push(whitespaceFlatCmd, contentFlatCmd);
                      } else {
                        cmds.push(whitespaceBreakCmd, contentBreakCmd);
                      }
                      break;
                    }
                    parts.splice(0, 2);
                    const remainingCmd = [ind, mode, fill(parts)];
                    const secondContent = parts[0];
                    const firstAndSecondContentFlatCmd = [ind, MODE_FLAT, [content, whitespace, secondContent]];
                    const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, options, lineSuffix.length > 0, true);
                    if (firstAndSecondContentFits) {
                      cmds.push(remainingCmd, whitespaceFlatCmd, contentFlatCmd);
                    } else if (contentFits) {
                      cmds.push(remainingCmd, whitespaceBreakCmd, contentFlatCmd);
                    } else {
                      cmds.push(remainingCmd, whitespaceBreakCmd, contentBreakCmd);
                    }
                    break;
                  }
                  case "if-break":
                  case "indent-if-break": {
                    const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] : mode;
                    if (groupMode === MODE_BREAK) {
                      const breakContents = doc2.type === "if-break" ? doc2.breakContents : doc2.negate ? doc2.contents : indent(doc2.contents);
                      if (breakContents) {
                        cmds.push([ind, mode, breakContents]);
                      }
                    }
                    if (groupMode === MODE_FLAT) {
                      const flatContents = doc2.type === "if-break" ? doc2.flatContents : doc2.negate ? indent(doc2.contents) : doc2.contents;
                      if (flatContents) {
                        cmds.push([ind, mode, flatContents]);
                      }
                    }
                    break;
                  }
                  case "line-suffix":
                    lineSuffix.push([ind, mode, doc2.contents]);
                    break;
                  case "line-suffix-boundary":
                    if (lineSuffix.length > 0) {
                      cmds.push([ind, mode, {
                        type: "line",
                        hard: true
                      }]);
                    }
                    break;
                  case "line":
                    switch (mode) {
                      case MODE_FLAT:
                        if (!doc2.hard) {
                          if (!doc2.soft) {
                            out.push(" ");
                            pos += 1;
                          }
                          break;
                        } else {
                          shouldRemeasure = true;
                        }
                      case MODE_BREAK:
                        if (lineSuffix.length > 0) {
                          cmds.push([ind, mode, doc2], ...lineSuffix.reverse());
                          lineSuffix = [];
                          break;
                        }
                        if (doc2.literal) {
                          if (ind.root) {
                            out.push(newLine, ind.root.value);
                            pos = ind.root.length;
                          } else {
                            out.push(newLine);
                            pos = 0;
                          }
                        } else {
                          pos -= trim(out);
                          out.push(newLine + ind.value);
                          pos = ind.length;
                        }
                        break;
                    }
                    break;
                  case "label":
                    cmds.push([ind, mode, doc2.contents]);
                    break;
                  default:
                }
              }
              if (cmds.length === 0 && lineSuffix.length > 0) {
                cmds.push(...lineSuffix.reverse());
                lineSuffix = [];
              }
            }
            const cursorPlaceholderIndex = out.indexOf(cursor.placeholder);
            if (cursorPlaceholderIndex !== -1) {
              const otherCursorPlaceholderIndex = out.indexOf(cursor.placeholder, cursorPlaceholderIndex + 1);
              const beforeCursor = out.slice(0, cursorPlaceholderIndex).join("");
              const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join("");
              const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join("");
              return {
                formatted: beforeCursor + aroundCursor + afterCursor,
                cursorNodeStart: beforeCursor.length,
                cursorNodeText: aroundCursor
              };
            }
            return {
              formatted: out.join("")
            };
          }
          module2.exports = {
            printDocToString
          };
        }
      });
      var require_doc_debug = __commonJS2({
        "src/document/doc-debug.js"(exports2, module2) {
          "use strict";
          init_define_process();
          var {
            isConcat,
            getDocParts
          } = require_doc_utils();
          function flattenDoc(doc) {
            if (!doc) {
              return "";
            }
            if (isConcat(doc)) {
              const res = [];
              for (const part of getDocParts(doc)) {
                if (isConcat(part)) {
                  res.push(...flattenDoc(part).parts);
                } else {
                  const flattened = flattenDoc(part);
                  if (flattened !== "") {
                    res.push(flattened);
                  }
                }
              }
              return {
                type: "concat",
                parts: res
              };
            }
            if (doc.type === "if-break") {
              return Object.assign(Object.assign({}, doc), {}, {
                breakContents: flattenDoc(doc.breakContents),
                flatContents: flattenDoc(doc.flatContents)
              });
            }
            if (doc.type === "group") {
              return Object.assign(Object.assign({}, doc), {}, {
                contents: flattenDoc(doc.contents),
                expandedStates: doc.expandedStates && doc.expandedStates.map(flattenDoc)
              });
            }
            if (doc.type === "fill") {
              return {
                type: "fill",
                parts: doc.parts.map(flattenDoc)
              };
            }
            if (doc.contents) {
              return Object.assign(Object.assign({}, doc), {}, {
                contents: flattenDoc(doc.contents)
              });
            }
            return doc;
          }
          function printDocToDebug(doc) {
            const printedSymbols = /* @__PURE__ */ Object.create(null);
            const usedKeysForSymbols = /* @__PURE__ */ new Set();
            return printDoc(flattenDoc(doc));
            function printDoc(doc2, index, parentParts) {
              if (typeof doc2 === "string") {
                return JSON.stringify(doc2);
              }
              if (isConcat(doc2)) {
                const printed = getDocParts(doc2).map(printDoc).filter(Boolean);
                return printed.length === 1 ? printed[0] : "[".concat(printed.join(", "), "]");
              }
              if (doc2.type === "line") {
                const withBreakParent = Array.isArray(parentParts) && parentParts[index + 1] && parentParts[index + 1].type === "break-parent";
                if (doc2.literal) {
                  return withBreakParent ? "literalline" : "literallineWithoutBreakParent";
                }
                if (doc2.hard) {
                  return withBreakParent ? "hardline" : "hardlineWithoutBreakParent";
                }
                if (doc2.soft) {
                  return "softline";
                }
                return "line";
              }
              if (doc2.type === "break-parent") {
                const afterHardline = Array.isArray(parentParts) && parentParts[index - 1] && parentParts[index - 1].type === "line" && parentParts[index - 1].hard;
                return afterHardline ? void 0 : "breakParent";
              }
              if (doc2.type === "trim") {
                return "trim";
              }
              if (doc2.type === "indent") {
                return "indent(" + printDoc(doc2.contents) + ")";
              }
              if (doc2.type === "align") {
                return doc2.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + printDoc(doc2.contents) + ")" : doc2.n < 0 ? "dedent(" + printDoc(doc2.contents) + ")" : doc2.n.type === "root" ? "markAsRoot(" + printDoc(doc2.contents) + ")" : "align(" + JSON.stringify(doc2.n) + ", " + printDoc(doc2.contents) + ")";
              }
              if (doc2.type === "if-break") {
                return "ifBreak(" + printDoc(doc2.breakContents) + (doc2.flatContents ? ", " + printDoc(doc2.flatContents) : "") + (doc2.groupId ? (!doc2.flatContents ? ', ""' : "") + ", { groupId: ".concat(printGroupId(doc2.groupId), " }") : "") + ")";
              }
              if (doc2.type === "indent-if-break") {
                const optionsParts = [];
                if (doc2.negate) {
                  optionsParts.push("negate: true");
                }
                if (doc2.groupId) {
                  optionsParts.push("groupId: ".concat(printGroupId(doc2.groupId)));
                }
                const options = optionsParts.length > 0 ? ", { ".concat(optionsParts.join(", "), " }") : "";
                return "indentIfBreak(".concat(printDoc(doc2.contents)).concat(options, ")");
              }
              if (doc2.type === "group") {
                const optionsParts = [];
                if (doc2.break && doc2.break !== "propagated") {
                  optionsParts.push("shouldBreak: true");
                }
                if (doc2.id) {
                  optionsParts.push("id: ".concat(printGroupId(doc2.id)));
                }
                const options = optionsParts.length > 0 ? ", { ".concat(optionsParts.join(", "), " }") : "";
                if (doc2.expandedStates) {
                  return "conditionalGroup([".concat(doc2.expandedStates.map((part) => printDoc(part)).join(","), "]").concat(options, ")");
                }
                return "group(".concat(printDoc(doc2.contents)).concat(options, ")");
              }
              if (doc2.type === "fill") {
                return "fill([".concat(doc2.parts.map((part) => printDoc(part)).join(", "), "])");
              }
              if (doc2.type === "line-suffix") {
                return "lineSuffix(" + printDoc(doc2.contents) + ")";
              }
              if (doc2.type === "line-suffix-boundary") {
                return "lineSuffixBoundary";
              }
              if (doc2.type === "label") {
                return "label(".concat(JSON.stringify(doc2.label), ", ").concat(printDoc(doc2.contents), ")");
              }
              throw new Error("Unknown doc type " + doc2.type);
            }
            function printGroupId(id) {
              if (typeof id !== "symbol") {
                return JSON.stringify(String(id));
              }
              if (id in printedSymbols) {
                return printedSymbols[id];
              }
              const prefix = String(id).slice(7, -1) || "symbol";
              for (let counter = 0; ; counter++) {
                const key = prefix + (counter > 0 ? " #".concat(counter) : "");
                if (!usedKeysForSymbols.has(key)) {
                  usedKeysForSymbols.add(key);
                  return printedSymbols[id] = "Symbol.for(".concat(JSON.stringify(key), ")");
                }
              }
            }
          }
          module2.exports = {
            printDocToDebug
          };
        }
      });
      init_define_process();
      module.exports = {
        builders: require_doc_builders(),
        printer: require_doc_printer(),
        utils: require_doc_utils(),
        debug: require_doc_debug()
      };
    }
  });
  "use strict";
  return require_doc();
});

/***/ }),

/***/ "../../node_modules/prettier/standalone.js":
/*!*************************************************!*\
  !*** ../../node_modules/prettier/standalone.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(e){if(true)module.exports=e();else { var f; }})(function(){"use strict";var be=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports);var Ye=be((yg,ru)=>{var er=function(e){return e&&e.Math==Math&&e};ru.exports=er(typeof globalThis=="object"&&globalThis)||er(typeof window=="object"&&window)||er(typeof self=="object"&&self)||er(typeof __webpack_require__.g=="object"&&__webpack_require__.g)||function(){return this}()||Function("return this")()});var ft=be((hg,nu)=>{nu.exports=function(e){try{return!!e()}catch{return!0}}});var ht=be((Cg,uu)=>{var vo=ft();uu.exports=!vo(function(){return Object.defineProperty({},1,{get:function(){return 7}})[1]!=7})});var tr=be((Eg,su)=>{var Fo=ft();su.exports=!Fo(function(){var e=function(){}.bind();return typeof e!="function"||e.hasOwnProperty("prototype")})});var Ct=be((vg,au)=>{var Ao=tr(),rr=Function.prototype.call;au.exports=Ao?rr.bind(rr):function(){return rr.apply(rr,arguments)}});var lu=be(cu=>{"use strict";var iu={}.propertyIsEnumerable,ou=Object.getOwnPropertyDescriptor,So=ou&&!iu.call({1:2},1);cu.f=So?function(n){var t=ou(this,n);return!!t&&t.enumerable}:iu});var nr=be((Ag,pu)=>{pu.exports=function(e,n){return{enumerable:!(e&1),configurable:!(e&2),writable:!(e&4),value:n}}});var at=be((Sg,mu)=>{var fu=tr(),Du=Function.prototype,xo=Du.bind,Lr=Du.call,bo=fu&&xo.bind(Lr,Lr);mu.exports=fu?function(e){return e&&bo(e)}:function(e){return e&&function(){return Lr.apply(e,arguments)}}});var ur=be((xg,gu)=>{var du=at(),To=du({}.toString),Bo=du("".slice);gu.exports=function(e){return Bo(To(e),8,-1)}});var hu=be((bg,yu)=>{var No=Ye(),wo=at(),_o=ft(),Po=ur(),Or=No.Object,Io=wo("".split);yu.exports=_o(function(){return!Or("z").propertyIsEnumerable(0)})?function(e){return Po(e)=="String"?Io(e,""):Or(e)}:Or});var jr=be((Tg,Cu)=>{var ko=Ye(),Lo=ko.TypeError;Cu.exports=function(e){if(e==null)throw Lo("Can't call method on "+e);return e}});var sr=be((Bg,Eu)=>{var Oo=hu(),jo=jr();Eu.exports=function(e){return Oo(jo(e))}});var it=be((Ng,vu)=>{vu.exports=function(e){return typeof e=="function"}});var Et=be((wg,Fu)=>{var qo=it();Fu.exports=function(e){return typeof e=="object"?e!==null:qo(e)}});var Mt=be((_g,Au)=>{var qr=Ye(),Mo=it(),Ro=function(e){return Mo(e)?e:void 0};Au.exports=function(e,n){return arguments.length<2?Ro(qr[e]):qr[e]&&qr[e][n]}});var Mr=be((Pg,Su)=>{var Vo=at();Su.exports=Vo({}.isPrototypeOf)});var bu=be((Ig,xu)=>{var Wo=Mt();xu.exports=Wo("navigator","userAgent")||""});var Iu=be((kg,Pu)=>{var _u=Ye(),Rr=bu(),Tu=_u.process,Bu=_u.Deno,Nu=Tu&&Tu.versions||Bu&&Bu.version,wu=Nu&&Nu.v8,lt,ar;wu&&(lt=wu.split("."),ar=lt[0]>0&&lt[0]<4?1:+(lt[0]+lt[1]));!ar&&Rr&&(lt=Rr.match(/Edge\/(\d+)/),(!lt||lt[1]>=74)&&(lt=Rr.match(/Chrome\/(\d+)/),lt&&(ar=+lt[1])));Pu.exports=ar});var Vr=be((Lg,Lu)=>{var ku=Iu(),$o=ft();Lu.exports=!!Object.getOwnPropertySymbols&&!$o(function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&ku&&ku<41})});var Wr=be((Og,Ou)=>{var Ho=Vr();Ou.exports=Ho&&!Symbol.sham&&typeof Symbol.iterator=="symbol"});var $r=be((jg,ju)=>{var Go=Ye(),Jo=Mt(),Uo=it(),zo=Mr(),Xo=Wr(),Ko=Go.Object;ju.exports=Xo?function(e){return typeof e=="symbol"}:function(e){var n=Jo("Symbol");return Uo(n)&&zo(n.prototype,Ko(e))}});var ir=be((qg,qu)=>{var Yo=Ye(),Qo=Yo.String;qu.exports=function(e){try{return Qo(e)}catch{return"Object"}}});var Rt=be((Mg,Mu)=>{var Zo=Ye(),ec=it(),tc=ir(),rc=Zo.TypeError;Mu.exports=function(e){if(ec(e))return e;throw rc(tc(e)+" is not a function")}});var or=be((Rg,Ru)=>{var nc=Rt();Ru.exports=function(e,n){var t=e[n];return t==null?void 0:nc(t)}});var Wu=be((Vg,Vu)=>{var uc=Ye(),Hr=Ct(),Gr=it(),Jr=Et(),sc=uc.TypeError;Vu.exports=function(e,n){var t,s;if(n==="string"&&Gr(t=e.toString)&&!Jr(s=Hr(t,e))||Gr(t=e.valueOf)&&!Jr(s=Hr(t,e))||n!=="string"&&Gr(t=e.toString)&&!Jr(s=Hr(t,e)))return s;throw sc("Can't convert object to primitive value")}});var Hu=be((Wg,$u)=>{$u.exports=!1});var cr=be(($g,Ju)=>{var Gu=Ye(),ac=Object.defineProperty;Ju.exports=function(e,n){try{ac(Gu,e,{value:n,configurable:!0,writable:!0})}catch{Gu[e]=n}return n}});var lr=be((Hg,zu)=>{var ic=Ye(),oc=cr(),Uu="__core-js_shared__",cc=ic[Uu]||oc(Uu,{});zu.exports=cc});var Ur=be((Gg,Ku)=>{var lc=Hu(),Xu=lr();(Ku.exports=function(e,n){return Xu[e]||(Xu[e]=n!==void 0?n:{})})("versions",[]).push({version:"3.21.1",mode:lc?"pure":"global",copyright:"\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})});var pr=be((Jg,Yu)=>{var pc=Ye(),fc=jr(),Dc=pc.Object;Yu.exports=function(e){return Dc(fc(e))}});var mt=be((Ug,Qu)=>{var mc=at(),dc=pr(),gc=mc({}.hasOwnProperty);Qu.exports=Object.hasOwn||function(n,t){return gc(dc(n),t)}});var zr=be((zg,Zu)=>{var yc=at(),hc=0,Cc=Math.random(),Ec=yc(1 .toString);Zu.exports=function(e){return"Symbol("+(e===void 0?"":e)+")_"+Ec(++hc+Cc,36)}});var Ft=be((Xg,us)=>{var vc=Ye(),Fc=Ur(),es=mt(),Ac=zr(),ts=Vr(),ns=Wr(),Tt=Fc("wks"),vt=vc.Symbol,rs=vt&&vt.for,Sc=ns?vt:vt&&vt.withoutSetter||Ac;us.exports=function(e){if(!es(Tt,e)||!(ts||typeof Tt[e]=="string")){var n="Symbol."+e;ts&&es(vt,e)?Tt[e]=vt[e]:ns&&rs?Tt[e]=rs(n):Tt[e]=Sc(n)}return Tt[e]}});var os=be((Kg,is)=>{var xc=Ye(),bc=Ct(),ss=Et(),as=$r(),Tc=or(),Bc=Wu(),Nc=Ft(),wc=xc.TypeError,_c=Nc("toPrimitive");is.exports=function(e,n){if(!ss(e)||as(e))return e;var t=Tc(e,_c),s;if(t){if(n===void 0&&(n="default"),s=bc(t,e,n),!ss(s)||as(s))return s;throw wc("Can't convert object to primitive value")}return n===void 0&&(n="number"),Bc(e,n)}});var fr=be((Yg,cs)=>{var Pc=os(),Ic=$r();cs.exports=function(e){var n=Pc(e,"string");return Ic(n)?n:n+""}});var fs=be((Qg,ps)=>{var kc=Ye(),ls=Et(),Xr=kc.document,Lc=ls(Xr)&&ls(Xr.createElement);ps.exports=function(e){return Lc?Xr.createElement(e):{}}});var Kr=be((Zg,Ds)=>{var Oc=ht(),jc=ft(),qc=fs();Ds.exports=!Oc&&!jc(function(){return Object.defineProperty(qc("div"),"a",{get:function(){return 7}}).a!=7})});var Yr=be(ds=>{var Mc=ht(),Rc=Ct(),Vc=lu(),Wc=nr(),$c=sr(),Hc=fr(),Gc=mt(),Jc=Kr(),ms=Object.getOwnPropertyDescriptor;ds.f=Mc?ms:function(n,t){if(n=$c(n),t=Hc(t),Jc)try{return ms(n,t)}catch{}if(Gc(n,t))return Wc(!Rc(Vc.f,n,t),n[t])}});var ys=be((t0,gs)=>{var Uc=ht(),zc=ft();gs.exports=Uc&&zc(function(){return Object.defineProperty(function(){},"prototype",{value:42,writable:!1}).prototype!=42})});var Bt=be((r0,Cs)=>{var hs=Ye(),Xc=Et(),Kc=hs.String,Yc=hs.TypeError;Cs.exports=function(e){if(Xc(e))return e;throw Yc(Kc(e)+" is not an object")}});var mr=be(vs=>{var Qc=Ye(),Zc=ht(),el=Kr(),tl=ys(),Dr=Bt(),Es=fr(),rl=Qc.TypeError,Qr=Object.defineProperty,nl=Object.getOwnPropertyDescriptor,Zr="enumerable",en="configurable",tn="writable";vs.f=Zc?tl?function(n,t,s){if(Dr(n),t=Es(t),Dr(s),typeof n=="function"&&t==="prototype"&&"value"in s&&tn in s&&!s[tn]){var i=nl(n,t);i&&i[tn]&&(n[t]=s.value,s={configurable:en in s?s[en]:i[en],enumerable:Zr in s?s[Zr]:i[Zr],writable:!1})}return Qr(n,t,s)}:Qr:function(n,t,s){if(Dr(n),t=Es(t),Dr(s),el)try{return Qr(n,t,s)}catch{}if("get"in s||"set"in s)throw rl("Accessors not supported");return"value"in s&&(n[t]=s.value),n}});var dr=be((u0,Fs)=>{var ul=ht(),sl=mr(),al=nr();Fs.exports=ul?function(e,n,t){return sl.f(e,n,al(1,t))}:function(e,n,t){return e[n]=t,e}});var gr=be((s0,As)=>{var il=at(),ol=it(),rn=lr(),cl=il(Function.toString);ol(rn.inspectSource)||(rn.inspectSource=function(e){return cl(e)});As.exports=rn.inspectSource});var bs=be((a0,xs)=>{var ll=Ye(),pl=it(),fl=gr(),Ss=ll.WeakMap;xs.exports=pl(Ss)&&/native code/.test(fl(Ss))});var Ns=be((i0,Bs)=>{var Dl=Ur(),ml=zr(),Ts=Dl("keys");Bs.exports=function(e){return Ts[e]||(Ts[e]=ml(e))}});var nn=be((o0,ws)=>{ws.exports={}});var Os=be((c0,Ls)=>{var dl=bs(),ks=Ye(),un=at(),gl=Et(),yl=dr(),sn=mt(),an=lr(),hl=Ns(),Cl=nn(),_s="Object already initialized",cn=ks.TypeError,El=ks.WeakMap,yr,Vt,hr,vl=function(e){return hr(e)?Vt(e):yr(e,{})},Fl=function(e){return function(n){var t;if(!gl(n)||(t=Vt(n)).type!==e)throw cn("Incompatible receiver, "+e+" required");return t}};dl||an.state?(dt=an.state||(an.state=new El),Ps=un(dt.get),on=un(dt.has),Is=un(dt.set),yr=function(e,n){if(on(dt,e))throw new cn(_s);return n.facade=e,Is(dt,e,n),n},Vt=function(e){return Ps(dt,e)||{}},hr=function(e){return on(dt,e)}):(At=hl("state"),Cl[At]=!0,yr=function(e,n){if(sn(e,At))throw new cn(_s);return n.facade=e,yl(e,At,n),n},Vt=function(e){return sn(e,At)?e[At]:{}},hr=function(e){return sn(e,At)});var dt,Ps,on,Is,At;Ls.exports={set:yr,get:Vt,has:hr,enforce:vl,getterFor:Fl}});var Ms=be((l0,qs)=>{var ln=ht(),Al=mt(),js=Function.prototype,Sl=ln&&Object.getOwnPropertyDescriptor,pn=Al(js,"name"),xl=pn&&function(){}.name==="something",bl=pn&&(!ln||ln&&Sl(js,"name").configurable);qs.exports={EXISTS:pn,PROPER:xl,CONFIGURABLE:bl}});var Hs=be((p0,$s)=>{var Tl=Ye(),Rs=it(),Bl=mt(),Vs=dr(),Nl=cr(),wl=gr(),Ws=Os(),_l=Ms().CONFIGURABLE,Pl=Ws.get,Il=Ws.enforce,kl=String(String).split("String");($s.exports=function(e,n,t,s){var i=s?!!s.unsafe:!1,r=s?!!s.enumerable:!1,u=s?!!s.noTargetGet:!1,a=s&&s.name!==void 0?s.name:n,c;if(Rs(t)&&(String(a).slice(0,7)==="Symbol("&&(a="["+String(a).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!Bl(t,"name")||_l&&t.name!==a)&&Vs(t,"name",a),c=Il(t),c.source||(c.source=kl.join(typeof a=="string"?a:""))),e===Tl){r?e[n]=t:Nl(n,t);return}else i?!u&&e[n]&&(r=!0):delete e[n];r?e[n]=t:Vs(e,n,t)})(Function.prototype,"toString",function(){return Rs(this)&&Pl(this).source||wl(this)})});var Cr=be((f0,Gs)=>{var Ll=Math.ceil,Ol=Math.floor;Gs.exports=function(e){var n=+e;return n!==n||n===0?0:(n>0?Ol:Ll)(n)}});var Us=be((D0,Js)=>{var jl=Cr(),ql=Math.max,Ml=Math.min;Js.exports=function(e,n){var t=jl(e);return t<0?ql(t+n,0):Ml(t,n)}});var Xs=be((m0,zs)=>{var Rl=Cr(),Vl=Math.min;zs.exports=function(e){return e>0?Vl(Rl(e),9007199254740991):0}});var Nt=be((d0,Ks)=>{var Wl=Xs();Ks.exports=function(e){return Wl(e.length)}});var Zs=be((g0,Qs)=>{var $l=sr(),Hl=Us(),Gl=Nt(),Ys=function(e){return function(n,t,s){var i=$l(n),r=Gl(i),u=Hl(s,r),a;if(e&&t!=t){for(;r>u;)if(a=i[u++],a!=a)return!0}else for(;r>u;u++)if((e||u in i)&&i[u]===t)return e||u||0;return!e&&-1}};Qs.exports={includes:Ys(!0),indexOf:Ys(!1)}});var ra=be((y0,ta)=>{var Jl=at(),fn=mt(),Ul=sr(),zl=Zs().indexOf,Xl=nn(),ea=Jl([].push);ta.exports=function(e,n){var t=Ul(e),s=0,i=[],r;for(r in t)!fn(Xl,r)&&fn(t,r)&&ea(i,r);for(;n.length>s;)fn(t,r=n[s++])&&(~zl(i,r)||ea(i,r));return i}});var ua=be((h0,na)=>{na.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]});var aa=be(sa=>{var Kl=ra(),Yl=ua(),Ql=Yl.concat("length","prototype");sa.f=Object.getOwnPropertyNames||function(n){return Kl(n,Ql)}});var oa=be(ia=>{ia.f=Object.getOwnPropertySymbols});var la=be((v0,ca)=>{var Zl=Mt(),ep=at(),tp=aa(),rp=oa(),np=Bt(),up=ep([].concat);ca.exports=Zl("Reflect","ownKeys")||function(n){var t=tp.f(np(n)),s=rp.f;return s?up(t,s(n)):t}});var Da=be((F0,fa)=>{var pa=mt(),sp=la(),ap=Yr(),ip=mr();fa.exports=function(e,n,t){for(var s=sp(n),i=ip.f,r=ap.f,u=0;u<s.length;u++){var a=s[u];!pa(e,a)&&!(t&&pa(t,a))&&i(e,a,r(n,a))}}});var da=be((A0,ma)=>{var op=ft(),cp=it(),lp=/#|\.prototype\./,Wt=function(e,n){var t=fp[pp(e)];return t==mp?!0:t==Dp?!1:cp(n)?op(n):!!n},pp=Wt.normalize=function(e){return String(e).replace(lp,".").toLowerCase()},fp=Wt.data={},Dp=Wt.NATIVE="N",mp=Wt.POLYFILL="P";ma.exports=Wt});var $t=be((S0,ga)=>{var Dn=Ye(),dp=Yr().f,gp=dr(),yp=Hs(),hp=cr(),Cp=Da(),Ep=da();ga.exports=function(e,n){var t=e.target,s=e.global,i=e.stat,r,u,a,c,l,C;if(s?u=Dn:i?u=Dn[t]||hp(t,{}):u=(Dn[t]||{}).prototype,u)for(a in n){if(l=n[a],e.noTargetGet?(C=dp(u,a),c=C&&C.value):c=u[a],r=Ep(s?a:t+(i?".":"#")+a,e.forced),!r&&c!==void 0){if(typeof l==typeof c)continue;Cp(l,c)}(e.sham||c&&c.sham)&&gp(l,"sham",!0),yp(u,a,l,e)}}});var mn=be((x0,ya)=>{var vp=ur();ya.exports=Array.isArray||function(n){return vp(n)=="Array"}});var dn=be((b0,Ca)=>{var ha=at(),Fp=Rt(),Ap=tr(),Sp=ha(ha.bind);Ca.exports=function(e,n){return Fp(e),n===void 0?e:Ap?Sp(e,n):function(){return e.apply(n,arguments)}}});var gn=be((T0,va)=>{"use strict";var xp=Ye(),bp=mn(),Tp=Nt(),Bp=dn(),Np=xp.TypeError,Ea=function(e,n,t,s,i,r,u,a){for(var c=i,l=0,C=u?Bp(u,a):!1,m,g;l<s;){if(l in t){if(m=C?C(t[l],l,n):t[l],r>0&&bp(m))g=Tp(m),c=Ea(e,n,m,g,c,r-1)-1;else{if(c>=9007199254740991)throw Np("Exceed the acceptable array length");e[c]=m}c++}l++}return c};va.exports=Ea});var Sa=be((B0,Aa)=>{var wp=Ft(),_p=wp("toStringTag"),Fa={};Fa[_p]="z";Aa.exports=String(Fa)==="[object z]"});var yn=be((N0,xa)=>{var Pp=Ye(),Ip=Sa(),kp=it(),Er=ur(),Lp=Ft(),Op=Lp("toStringTag"),jp=Pp.Object,qp=Er(function(){return arguments}())=="Arguments",Mp=function(e,n){try{return e[n]}catch{}};xa.exports=Ip?Er:function(e){var n,t,s;return e===void 0?"Undefined":e===null?"Null":typeof(t=Mp(n=jp(e),Op))=="string"?t:qp?Er(n):(s=Er(n))=="Object"&&kp(n.callee)?"Arguments":s}});var _a=be((w0,wa)=>{var Rp=at(),Vp=ft(),ba=it(),Wp=yn(),$p=Mt(),Hp=gr(),Ta=function(){},Gp=[],Ba=$p("Reflect","construct"),hn=/^\s*(?:class|function)\b/,Jp=Rp(hn.exec),Up=!hn.exec(Ta),Ht=function(n){if(!ba(n))return!1;try{return Ba(Ta,Gp,n),!0}catch{return!1}},Na=function(n){if(!ba(n))return!1;switch(Wp(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return Up||!!Jp(hn,Hp(n))}catch{return!0}};Na.sham=!0;wa.exports=!Ba||Vp(function(){var e;return Ht(Ht.call)||!Ht(Object)||!Ht(function(){e=!0})||e})?Na:Ht});var La=be((_0,ka)=>{var zp=Ye(),Pa=mn(),Xp=_a(),Kp=Et(),Yp=Ft(),Qp=Yp("species"),Ia=zp.Array;ka.exports=function(e){var n;return Pa(e)&&(n=e.constructor,Xp(n)&&(n===Ia||Pa(n.prototype))?n=void 0:Kp(n)&&(n=n[Qp],n===null&&(n=void 0))),n===void 0?Ia:n}});var Cn=be((P0,Oa)=>{var Zp=La();Oa.exports=function(e,n){return new(Zp(e))(n===0?0:n)}});var ja=be(()=>{"use strict";var ef=$t(),tf=gn(),rf=Rt(),nf=pr(),uf=Nt(),sf=Cn();ef({target:"Array",proto:!0},{flatMap:function(n){var t=nf(this),s=uf(t),i;return rf(n),i=sf(t,0),i.length=tf(i,t,t,s,0,1,n,arguments.length>1?arguments[1]:void 0),i}})});var En=be((L0,qa)=>{qa.exports={}});var Ra=be((O0,Ma)=>{var af=Ft(),of=En(),cf=af("iterator"),lf=Array.prototype;Ma.exports=function(e){return e!==void 0&&(of.Array===e||lf[cf]===e)}});var vn=be((j0,Wa)=>{var pf=yn(),Va=or(),ff=En(),Df=Ft(),mf=Df("iterator");Wa.exports=function(e){if(e!=null)return Va(e,mf)||Va(e,"@@iterator")||ff[pf(e)]}});var Ha=be((q0,$a)=>{var df=Ye(),gf=Ct(),yf=Rt(),hf=Bt(),Cf=ir(),Ef=vn(),vf=df.TypeError;$a.exports=function(e,n){var t=arguments.length<2?Ef(e):n;if(yf(t))return hf(gf(t,e));throw vf(Cf(e)+" is not iterable")}});var Ua=be((M0,Ja)=>{var Ff=Ct(),Ga=Bt(),Af=or();Ja.exports=function(e,n,t){var s,i;Ga(e);try{if(s=Af(e,"return"),!s){if(n==="throw")throw t;return t}s=Ff(s,e)}catch(r){i=!0,s=r}if(n==="throw")throw t;if(i)throw s;return Ga(s),t}});var Qa=be((R0,Ya)=>{var Sf=Ye(),xf=dn(),bf=Ct(),Tf=Bt(),Bf=ir(),Nf=Ra(),wf=Nt(),za=Mr(),_f=Ha(),Pf=vn(),Xa=Ua(),If=Sf.TypeError,vr=function(e,n){this.stopped=e,this.result=n},Ka=vr.prototype;Ya.exports=function(e,n,t){var s=t&&t.that,i=!!(t&&t.AS_ENTRIES),r=!!(t&&t.IS_ITERATOR),u=!!(t&&t.INTERRUPTED),a=xf(n,s),c,l,C,m,g,p,f,h=function(T){return c&&Xa(c,"normal",T),new vr(!0,T)},N=function(T){return i?(Tf(T),u?a(T[0],T[1],h):a(T[0],T[1])):u?a(T,h):a(T)};if(r)c=e;else{if(l=Pf(e),!l)throw If(Bf(e)+" is not iterable");if(Nf(l)){for(C=0,m=wf(e);m>C;C++)if(g=N(e[C]),g&&za(Ka,g))return g;return new vr(!1)}c=_f(e,l)}for(p=c.next;!(f=bf(p,c)).done;){try{g=N(f.value)}catch(T){Xa(c,"throw",T)}if(typeof g=="object"&&g&&za(Ka,g))return g}return new vr(!1)}});var ei=be((V0,Za)=>{"use strict";var kf=fr(),Lf=mr(),Of=nr();Za.exports=function(e,n,t){var s=kf(n);s in e?Lf.f(e,s,Of(0,t)):e[s]=t}});var ti=be(()=>{var jf=$t(),qf=Qa(),Mf=ei();jf({target:"Object",stat:!0},{fromEntries:function(n){var t={};return qf(n,function(s,i){Mf(t,s,i)},{AS_ENTRIES:!0}),t}})});var ri=be(()=>{var Rf=$t(),Vf=Ye();Rf({global:!0},{globalThis:Vf})});var ni=be(()=>{ri()});var ui=be(()=>{"use strict";var Wf=$t(),$f=gn(),Hf=pr(),Gf=Nt(),Jf=Cr(),Uf=Cn();Wf({target:"Array",proto:!0},{flat:function(){var n=arguments.length?arguments[0]:void 0,t=Hf(this),s=Gf(t),i=Uf(t,0);return i.length=$f(i,t,t,s,0,n===void 0?1:Jf(n)),i}})});var dg=be((Y0,yo)=>{var zf=["cliName","cliCategory","cliDescription"],Xf=["_"],Kf=["languageId"],si,ai,ii,oi,ci,li;function _n(e,n){if(e==null)return{};var t=Yf(e,n),s,i;if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)s=r[i],!(n.indexOf(s)>=0)&&(!Object.prototype.propertyIsEnumerable.call(e,s)||(t[s]=e[s]))}return t}function Yf(e,n){if(e==null)return{};var t={},s=Object.keys(e),i,r;for(r=0;r<s.length;r++)i=s[r],!(n.indexOf(i)>=0)&&(t[i]=e[i]);return t}ja();ti();ni();ui();function wt(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Pn=Object.defineProperty,Qf=Object.getOwnPropertyDescriptor,In=Object.getOwnPropertyNames,Zf=Object.prototype.hasOwnProperty,br=(e,n)=>function(){return e&&(n=(0,e[In(e)[0]])(e=0)),n},Z=(e,n)=>function(){return n||(0,e[In(e)[0]])((n={exports:{}}).exports,n),n.exports},kn=(e,n)=>{for(var t in n)Pn(e,t,{get:n[t],enumerable:!0})},eD=(e,n,t,s)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of In(n))!Zf.call(e,i)&&i!==t&&Pn(e,i,{get:()=>n[i],enumerable:!(s=Qf(n,i))||s.enumerable});return e},pt=e=>eD(Pn({},"__esModule",{value:!0}),e),pi,fi,xt,ae=br({"<define:process>"(){pi={},fi=[],xt={env:pi,argv:fi}}}),gi=Z({"package.json"(e,n){n.exports={version:"2.6.2"}}}),tD=Z({"node_modules/diff/lib/diff/base.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(){}n.prototype={diff:function(r,u){var a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},c=a.callback;typeof a=="function"&&(c=a,a={}),this.options=a;var l=this;function C(b){return c?(setTimeout(function(){c(void 0,b)},0),!0):b}r=this.castInput(r),u=this.castInput(u),r=this.removeEmpty(this.tokenize(r)),u=this.removeEmpty(this.tokenize(u));var m=u.length,g=r.length,p=1,f=m+g,h=[{newPos:-1,components:[]}],N=this.extractCommon(h[0],u,r,0);if(h[0].newPos+1>=m&&N+1>=g)return C([{value:this.join(u),count:u.length}]);function T(){for(var b=-1*p;b<=p;b+=2){var v=void 0,B=h[b-1],w=h[b+1],I=(w?w.newPos:0)-b;B&&(h[b-1]=void 0);var E=B&&B.newPos+1<m,D=w&&0<=I&&I<g;if(!E&&!D){h[b]=void 0;continue}if(!E||D&&B.newPos<w.newPos?(v=s(w),l.pushComponent(v.components,void 0,!0)):(v=B,v.newPos++,l.pushComponent(v.components,!0,void 0)),I=l.extractCommon(v,u,r,b),v.newPos+1>=m&&I+1>=g)return C(t(l,v.components,u,r,l.useLongestToken));h[b]=v}p++}if(c)(function b(){setTimeout(function(){if(p>f)return c();T()||b()},0)})();else for(;p<=f;){var A=T();if(A)return A}},pushComponent:function(r,u,a){var c=r[r.length-1];c&&c.added===u&&c.removed===a?r[r.length-1]={count:c.count+1,added:u,removed:a}:r.push({count:1,added:u,removed:a})},extractCommon:function(r,u,a,c){for(var l=u.length,C=a.length,m=r.newPos,g=m-c,p=0;m+1<l&&g+1<C&&this.equals(u[m+1],a[g+1]);)m++,g++,p++;return p&&r.components.push({count:p}),r.newPos=m,g},equals:function(r,u){return this.options.comparator?this.options.comparator(r,u):r===u||this.options.ignoreCase&&r.toLowerCase()===u.toLowerCase()},removeEmpty:function(r){for(var u=[],a=0;a<r.length;a++)r[a]&&u.push(r[a]);return u},castInput:function(r){return r},tokenize:function(r){return r.split("")},join:function(r){return r.join("")}};function t(i,r,u,a,c){for(var l=0,C=r.length,m=0,g=0;l<C;l++){var p=r[l];if(p.removed){if(p.value=i.join(a.slice(g,g+p.count)),g+=p.count,l&&r[l-1].added){var h=r[l-1];r[l-1]=r[l],r[l]=h}}else{if(!p.added&&c){var f=u.slice(m,m+p.count);f=f.map(function(T,A){var b=a[g+A];return b.length>T.length?b:T}),p.value=i.join(f)}else p.value=i.join(u.slice(m,m+p.count));m+=p.count,p.added||(g+=p.count)}}var N=r[C-1];return C>1&&typeof N.value=="string"&&(N.added||N.removed)&&i.equals("",N.value)&&(r[C-2].value+=N.value,r.pop()),r}function s(i){return{newPos:i.newPos,components:i.components.slice(0)}}}}),rD=Z({"node_modules/diff/lib/diff/array.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.diffArrays=i,e.arrayDiff=void 0;var n=t(tD());function t(r){return r&&r.__esModule?r:{default:r}}var s=new n.default;e.arrayDiff=s,s.tokenize=function(r){return r.slice()},s.join=s.removeEmpty=function(r){return r};function i(r,u,a){return s.diff(r,u,a)}}}),Ln=Z({"src/document/doc-builders.js"(e,n){"use strict";ae();function t(y){return{type:"concat",parts:y}}function s(y){return{type:"indent",contents:y}}function i(y,o){return{type:"align",contents:o,n:y}}function r(y){let o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return{type:"group",id:o.id,contents:y,break:Boolean(o.shouldBreak),expandedStates:o.expandedStates}}function u(y){return i(Number.NEGATIVE_INFINITY,y)}function a(y){return i({type:"root"},y)}function c(y){return i(-1,y)}function l(y,o){return r(y[0],Object.assign(Object.assign({},o),{},{expandedStates:y}))}function C(y){return{type:"fill",parts:y}}function m(y,o){let x=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return{type:"if-break",breakContents:y,flatContents:o,groupId:x.groupId}}function g(y,o){return{type:"indent-if-break",contents:y,groupId:o.groupId,negate:o.negate}}function p(y){return{type:"line-suffix",contents:y}}var f={type:"line-suffix-boundary"},h={type:"break-parent"},N={type:"trim"},T={type:"line",hard:!0},A={type:"line",hard:!0,literal:!0},b={type:"line"},v={type:"line",soft:!0},B=t([T,h]),w=t([A,h]),I={type:"cursor",placeholder:Symbol("cursor")};function E(y,o){let x=[];for(let F=0;F<o.length;F++)F!==0&&x.push(y),x.push(o[F]);return t(x)}function D(y,o,x){let F=y;if(o>0){for(let S=0;S<Math.floor(o/x);++S)F=s(F);F=i(o%x,F),F=i(Number.NEGATIVE_INFINITY,F)}return F}function d(y,o){return{type:"label",label:y,contents:o}}n.exports={concat:t,join:E,line:b,softline:v,hardline:B,literalline:w,group:r,conditionalGroup:l,fill:C,lineSuffix:p,lineSuffixBoundary:f,cursor:I,breakParent:h,ifBreak:m,trim:N,indent:s,indentIfBreak:g,align:i,addAlignmentToDoc:D,markAsRoot:a,dedentToRoot:u,dedent:c,hardlineWithoutBreakParent:T,literallineWithoutBreakParent:A,label:d}}}),On=Z({"src/common/end-of-line.js"(e,n){"use strict";ae();function t(u){let a=u.indexOf("\r");return a>=0?u.charAt(a+1)===`
`?"crlf":"cr":"lf"}function s(u){switch(u){case"cr":return"\r";case"crlf":return`\r
`;default:return`
`}}function i(u,a){let c;switch(a){case`
`:c=/\n/g;break;case"\r":c=/\r/g;break;case`\r
`:c=/\r\n/g;break;default:throw new Error('Unexpected "eol" '.concat(JSON.stringify(a),"."))}let l=u.match(c);return l?l.length:0}function r(u){return u.replace(/\r\n?/g,`
`)}n.exports={guessEndOfLine:t,convertEndOfLineToChars:s,countEndOfLineChars:i,normalizeEndOfLine:r}}}),st=Z({"src/utils/get-last.js"(e,n){"use strict";ae();var t=s=>s[s.length-1];n.exports=t}}),nD=Z({"vendors/string-width.js"(e,n){ae();var t=Object.create,s=Object.defineProperty,i=Object.getOwnPropertyDescriptor,r=Object.getOwnPropertyNames,u=Object.getPrototypeOf,a=Object.prototype.hasOwnProperty,c=(v,B)=>function(){return B||(0,v[r(v)[0]])((B={exports:{}}).exports,B),B.exports},l=(v,B)=>{for(var w in B)s(v,w,{get:B[w],enumerable:!0})},C=(v,B,w,I)=>{if(B&&typeof B=="object"||typeof B=="function")for(let E of r(B))!a.call(v,E)&&E!==w&&s(v,E,{get:()=>B[E],enumerable:!(I=i(B,E))||I.enumerable});return v},m=(v,B,w)=>(w=v!=null?t(u(v)):{},C(B||!v||!v.__esModule?s(w,"default",{value:v,enumerable:!0}):w,v)),g=v=>C(s({},"__esModule",{value:!0}),v),p=c({"node_modules/emoji-regex/index.js"(v,B){"use strict";B.exports=function(){return/\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g}}}),f={};l(f,{default:()=>b}),n.exports=g(f);function h(){let{onlyFirst:v=!1}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},B=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(B,v?void 0:"g")}function N(v){if(typeof v!="string")throw new TypeError("Expected a `string`, got `".concat(typeof v,"`"));return v.replace(h(),"")}function T(v){return Number.isInteger(v)?v>=4352&&(v<=4447||v===9001||v===9002||11904<=v&&v<=12871&&v!==12351||12880<=v&&v<=19903||19968<=v&&v<=42182||43360<=v&&v<=43388||44032<=v&&v<=55203||63744<=v&&v<=64255||65040<=v&&v<=65049||65072<=v&&v<=65131||65281<=v&&v<=65376||65504<=v&&v<=65510||110592<=v&&v<=110593||127488<=v&&v<=127569||131072<=v&&v<=262141):!1}var A=m(p(),1);function b(v){if(typeof v!="string"||v.length===0||(v=N(v),v.length===0))return 0;v=v.replace((0,A.default)(),"  ");let B=0;for(let w=0;w<v.length;w++){let I=v.codePointAt(w);I<=31||I>=127&&I<=159||I>=768&&I<=879||(I>65535&&w++,B+=T(I)?2:1)}return B}}}),yi=Z({"src/utils/get-string-width.js"(e,n){"use strict";ae();var t=nD().default,s=/[^\x20-\x7F]/;function i(r){return r?s.test(r)?t(r):r.length:0}n.exports=i}}),jn=Z({"src/document/doc-utils.js"(e,n){"use strict";ae();var t=st(),{literalline:s,join:i}=Ln(),r=o=>Array.isArray(o)||o&&o.type==="concat",u=o=>{if(Array.isArray(o))return o;if(o.type!=="concat"&&o.type!=="fill")throw new Error("Expect doc type to be `concat` or `fill`.");return o.parts},a={};function c(o,x,F,S){let k=[o];for(;k.length>0;){let _=k.pop();if(_===a){F(k.pop());continue}if(F&&k.push(_,a),!x||x(_)!==!1)if(r(_)||_.type==="fill"){let O=u(_);for(let R=O.length,M=R-1;M>=0;--M)k.push(O[M])}else if(_.type==="if-break")_.flatContents&&k.push(_.flatContents),_.breakContents&&k.push(_.breakContents);else if(_.type==="group"&&_.expandedStates)if(S)for(let O=_.expandedStates.length,R=O-1;R>=0;--R)k.push(_.expandedStates[R]);else k.push(_.contents);else _.contents&&k.push(_.contents)}}function l(o,x){let F=new Map;return S(o);function S(_){if(F.has(_))return F.get(_);let O=k(_);return F.set(_,O),O}function k(_){if(Array.isArray(_))return x(_.map(S));if(_.type==="concat"||_.type==="fill"){let O=_.parts.map(S);return x(Object.assign(Object.assign({},_),{},{parts:O}))}if(_.type==="if-break"){let O=_.breakContents&&S(_.breakContents),R=_.flatContents&&S(_.flatContents);return x(Object.assign(Object.assign({},_),{},{breakContents:O,flatContents:R}))}if(_.type==="group"&&_.expandedStates){let O=_.expandedStates.map(S),R=O[0];return x(Object.assign(Object.assign({},_),{},{contents:R,expandedStates:O}))}if(_.contents){let O=S(_.contents);return x(Object.assign(Object.assign({},_),{},{contents:O}))}return x(_)}}function C(o,x,F){let S=F,k=!1;function _(O){let R=x(O);if(R!==void 0&&(k=!0,S=R),k)return!1}return c(o,_),S}function m(o){if(o.type==="group"&&o.break||o.type==="line"&&o.hard||o.type==="break-parent")return!0}function g(o){return C(o,m,!1)}function p(o){if(o.length>0){let x=t(o);!x.expandedStates&&!x.break&&(x.break="propagated")}return null}function f(o){let x=new Set,F=[];function S(_){if(_.type==="break-parent"&&p(F),_.type==="group"){if(F.push(_),x.has(_))return!1;x.add(_)}}function k(_){_.type==="group"&&F.pop().break&&p(F)}c(o,S,k,!0)}function h(o){return o.type==="line"&&!o.hard?o.soft?"":" ":o.type==="if-break"?o.flatContents||"":o}function N(o){return l(o,h)}var T=(o,x)=>o&&o.type==="line"&&o.hard&&x&&x.type==="break-parent";function A(o){if(!o)return o;if(r(o)||o.type==="fill"){let x=u(o);for(;x.length>1&&T(...x.slice(-2));)x.length-=2;if(x.length>0){let F=A(t(x));x[x.length-1]=F}return Array.isArray(o)?x:Object.assign(Object.assign({},o),{},{parts:x})}switch(o.type){case"align":case"indent":case"indent-if-break":case"group":case"line-suffix":case"label":{let x=A(o.contents);return Object.assign(Object.assign({},o),{},{contents:x})}case"if-break":{let x=A(o.breakContents),F=A(o.flatContents);return Object.assign(Object.assign({},o),{},{breakContents:x,flatContents:F})}}return o}function b(o){return A(B(o))}function v(o){switch(o.type){case"fill":if(o.parts.every(F=>F===""))return"";break;case"group":if(!o.contents&&!o.id&&!o.break&&!o.expandedStates)return"";if(o.contents.type==="group"&&o.contents.id===o.id&&o.contents.break===o.break&&o.contents.expandedStates===o.expandedStates)return o.contents;break;case"align":case"indent":case"indent-if-break":case"line-suffix":if(!o.contents)return"";break;case"if-break":if(!o.flatContents&&!o.breakContents)return"";break}if(!r(o))return o;let x=[];for(let F of u(o)){if(!F)continue;let[S,...k]=r(F)?u(F):[F];typeof S=="string"&&typeof t(x)=="string"?x[x.length-1]+=S:x.push(S),x.push(...k)}return x.length===0?"":x.length===1?x[0]:Array.isArray(o)?x:Object.assign(Object.assign({},o),{},{parts:x})}function B(o){return l(o,x=>v(x))}function w(o){let x=[],F=o.filter(Boolean);for(;F.length>0;){let S=F.shift();if(!!S){if(r(S)){F.unshift(...u(S));continue}if(x.length>0&&typeof t(x)=="string"&&typeof S=="string"){x[x.length-1]+=S;continue}x.push(S)}}return x}function I(o){return l(o,x=>Array.isArray(x)?w(x):x.parts?Object.assign(Object.assign({},x),{},{parts:w(x.parts)}):x)}function E(o){return l(o,x=>typeof x=="string"&&x.includes(`
`)?D(x):x)}function D(o){let x=arguments.length>1&&arguments[1]!==void 0?arguments[1]:s;return i(x,o.split(`
`)).parts}function d(o){if(o.type==="line")return!0}function y(o){return C(o,d,!1)}n.exports={isConcat:r,getDocParts:u,willBreak:g,traverseDoc:c,findInDoc:C,mapDoc:l,propagateBreaks:f,removeLines:N,stripTrailingHardline:b,normalizeParts:w,normalizeDoc:I,cleanDoc:B,replaceTextEndOfLine:D,replaceEndOfLine:E,canBreak:y}}}),uD=Z({"src/document/doc-printer.js"(e,n){"use strict";ae();var{convertEndOfLineToChars:t}=On(),s=st(),i=yi(),{fill:r,cursor:u,indent:a}=Ln(),{isConcat:c,getDocParts:l}=jn(),C,m=1,g=2;function p(){return{value:"",length:0,queue:[]}}function f(v,B){return N(v,{type:"indent"},B)}function h(v,B,w){return B===Number.NEGATIVE_INFINITY?v.root||p():B<0?N(v,{type:"dedent"},w):B?B.type==="root"?Object.assign(Object.assign({},v),{},{root:v}):N(v,{type:typeof B=="string"?"stringAlign":"numberAlign",n:B},w):v}function N(v,B,w){let I=B.type==="dedent"?v.queue.slice(0,-1):[...v.queue,B],E="",D=0,d=0,y=0;for(let O of I)switch(O.type){case"indent":F(),w.useTabs?o(1):x(w.tabWidth);break;case"stringAlign":F(),E+=O.n,D+=O.n.length;break;case"numberAlign":d+=1,y+=O.n;break;default:throw new Error("Unexpected type '".concat(O.type,"'"))}return k(),Object.assign(Object.assign({},v),{},{value:E,length:D,queue:I});function o(O){E+="	".repeat(O),D+=w.tabWidth*O}function x(O){E+=" ".repeat(O),D+=O}function F(){w.useTabs?S():k()}function S(){d>0&&o(d),_()}function k(){y>0&&x(y),_()}function _(){d=0,y=0}}function T(v){if(v.length===0)return 0;let B=0;for(;v.length>0&&typeof s(v)=="string"&&/^[\t ]*$/.test(s(v));)B+=v.pop().length;if(v.length>0&&typeof s(v)=="string"){let w=s(v).replace(/[\t ]*$/,"");B+=s(v).length-w.length,v[v.length-1]=w}return B}function A(v,B,w,I,E,D){let d=B.length,y=[v],o=[];for(;w>=0;){if(y.length===0){if(d===0)return!0;y.push(B[d-1]),d--;continue}let[x,F,S]=y.pop();if(typeof S=="string")o.push(S),w-=i(S);else if(c(S)){let k=l(S);for(let _=k.length-1;_>=0;_--)y.push([x,F,k[_]])}else switch(S.type){case"indent":y.push([f(x,I),F,S.contents]);break;case"align":y.push([h(x,S.n,I),F,S.contents]);break;case"trim":w+=T(o);break;case"group":{if(D&&S.break)return!1;let k=S.break?m:F;y.push([x,k,S.expandedStates&&k===m?s(S.expandedStates):S.contents]),S.id&&(C[S.id]=k);break}case"fill":for(let k=S.parts.length-1;k>=0;k--)y.push([x,F,S.parts[k]]);break;case"if-break":case"indent-if-break":{let k=S.groupId?C[S.groupId]:F;if(k===m){let _=S.type==="if-break"?S.breakContents:S.negate?S.contents:a(S.contents);_&&y.push([x,F,_])}if(k===g){let _=S.type==="if-break"?S.flatContents:S.negate?a(S.contents):S.contents;_&&y.push([x,F,_])}break}case"line":switch(F){case g:if(!S.hard){S.soft||(o.push(" "),w-=1);break}return!0;case m:return!0}break;case"line-suffix":E=!0;break;case"line-suffix-boundary":if(E)return!1;break;case"label":y.push([x,F,S.contents]);break}}return!1}function b(v,B){C={};let w=B.printWidth,I=t(B.endOfLine),E=0,D=[[p(),m,v]],d=[],y=!1,o=[];for(;D.length>0;){let[F,S,k]=D.pop();if(typeof k=="string"){let _=I!==`
`?k.replace(/\n/g,I):k;d.push(_),E+=i(_)}else if(c(k)){let _=l(k);for(let O=_.length-1;O>=0;O--)D.push([F,S,_[O]])}else switch(k.type){case"cursor":d.push(u.placeholder);break;case"indent":D.push([f(F,B),S,k.contents]);break;case"align":D.push([h(F,k.n,B),S,k.contents]);break;case"trim":E-=T(d);break;case"group":switch(S){case g:if(!y){D.push([F,k.break?m:g,k.contents]);break}case m:{y=!1;let _=[F,g,k.contents],O=w-E,R=o.length>0;if(!k.break&&A(_,D,O,B,R))D.push(_);else if(k.expandedStates){let M=s(k.expandedStates);if(k.break){D.push([F,m,M]);break}else for(let H=1;H<k.expandedStates.length+1;H++)if(H>=k.expandedStates.length){D.push([F,m,M]);break}else{let P=k.expandedStates[H],G=[F,g,P];if(A(G,D,O,B,R)){D.push(G);break}}}else D.push([F,m,k.contents]);break}}k.id&&(C[k.id]=s(D)[1]);break;case"fill":{let _=w-E,{parts:O}=k;if(O.length===0)break;let[R,M]=O,H=[F,g,R],P=[F,m,R],G=A(H,[],_,B,o.length>0,!0);if(O.length===1){G?D.push(H):D.push(P);break}let re=[F,g,M],$=[F,m,M];if(O.length===2){G?D.push(re,H):D.push($,P);break}O.splice(0,2);let W=[F,S,r(O)],ee=O[0];A([F,g,[R,M,ee]],[],_,B,o.length>0,!0)?D.push(W,re,H):G?D.push(W,$,H):D.push(W,$,P);break}case"if-break":case"indent-if-break":{let _=k.groupId?C[k.groupId]:S;if(_===m){let O=k.type==="if-break"?k.breakContents:k.negate?k.contents:a(k.contents);O&&D.push([F,S,O])}if(_===g){let O=k.type==="if-break"?k.flatContents:k.negate?a(k.contents):k.contents;O&&D.push([F,S,O])}break}case"line-suffix":o.push([F,S,k.contents]);break;case"line-suffix-boundary":o.length>0&&D.push([F,S,{type:"line",hard:!0}]);break;case"line":switch(S){case g:if(k.hard)y=!0;else{k.soft||(d.push(" "),E+=1);break}case m:if(o.length>0){D.push([F,S,k],...o.reverse()),o=[];break}k.literal?F.root?(d.push(I,F.root.value),E=F.root.length):(d.push(I),E=0):(E-=T(d),d.push(I+F.value),E=F.length);break}break;case"label":D.push([F,S,k.contents]);break;default:}D.length===0&&o.length>0&&(D.push(...o.reverse()),o=[])}let x=d.indexOf(u.placeholder);if(x!==-1){let F=d.indexOf(u.placeholder,x+1),S=d.slice(0,x).join(""),k=d.slice(x+1,F).join(""),_=d.slice(F+1).join("");return{formatted:S+k+_,cursorNodeStart:S.length,cursorNodeText:k}}return{formatted:d.join("")}}n.exports={printDocToString:b}}}),sD=Z({"src/document/doc-debug.js"(e,n){"use strict";ae();var{isConcat:t,getDocParts:s}=jn();function i(u){if(!u)return"";if(t(u)){let a=[];for(let c of s(u))if(t(c))a.push(...i(c).parts);else{let l=i(c);l!==""&&a.push(l)}return{type:"concat",parts:a}}return u.type==="if-break"?Object.assign(Object.assign({},u),{},{breakContents:i(u.breakContents),flatContents:i(u.flatContents)}):u.type==="group"?Object.assign(Object.assign({},u),{},{contents:i(u.contents),expandedStates:u.expandedStates&&u.expandedStates.map(i)}):u.type==="fill"?{type:"fill",parts:u.parts.map(i)}:u.contents?Object.assign(Object.assign({},u),{},{contents:i(u.contents)}):u}function r(u){let a=Object.create(null),c=new Set;return l(i(u));function l(m,g,p){if(typeof m=="string")return JSON.stringify(m);if(t(m)){let f=s(m).map(l).filter(Boolean);return f.length===1?f[0]:"[".concat(f.join(", "),"]")}if(m.type==="line"){let f=Array.isArray(p)&&p[g+1]&&p[g+1].type==="break-parent";return m.literal?f?"literalline":"literallineWithoutBreakParent":m.hard?f?"hardline":"hardlineWithoutBreakParent":m.soft?"softline":"line"}if(m.type==="break-parent")return Array.isArray(p)&&p[g-1]&&p[g-1].type==="line"&&p[g-1].hard?void 0:"breakParent";if(m.type==="trim")return"trim";if(m.type==="indent")return"indent("+l(m.contents)+")";if(m.type==="align")return m.n===Number.NEGATIVE_INFINITY?"dedentToRoot("+l(m.contents)+")":m.n<0?"dedent("+l(m.contents)+")":m.n.type==="root"?"markAsRoot("+l(m.contents)+")":"align("+JSON.stringify(m.n)+", "+l(m.contents)+")";if(m.type==="if-break")return"ifBreak("+l(m.breakContents)+(m.flatContents?", "+l(m.flatContents):"")+(m.groupId?(m.flatContents?"":', ""')+", { groupId: ".concat(C(m.groupId)," }"):"")+")";if(m.type==="indent-if-break"){let f=[];m.negate&&f.push("negate: true"),m.groupId&&f.push("groupId: ".concat(C(m.groupId)));let h=f.length>0?", { ".concat(f.join(", ")," }"):"";return"indentIfBreak(".concat(l(m.contents)).concat(h,")")}if(m.type==="group"){let f=[];m.break&&m.break!=="propagated"&&f.push("shouldBreak: true"),m.id&&f.push("id: ".concat(C(m.id)));let h=f.length>0?", { ".concat(f.join(", ")," }"):"";return m.expandedStates?"conditionalGroup([".concat(m.expandedStates.map(N=>l(N)).join(","),"]").concat(h,")"):"group(".concat(l(m.contents)).concat(h,")")}if(m.type==="fill")return"fill([".concat(m.parts.map(f=>l(f)).join(", "),"])");if(m.type==="line-suffix")return"lineSuffix("+l(m.contents)+")";if(m.type==="line-suffix-boundary")return"lineSuffixBoundary";if(m.type==="label")return"label(".concat(JSON.stringify(m.label),", ").concat(l(m.contents),")");throw new Error("Unknown doc type "+m.type)}function C(m){if(typeof m!="symbol")return JSON.stringify(String(m));if(m in a)return a[m];let g=String(m).slice(7,-1)||"symbol";for(let p=0;;p++){let f=g+(p>0?" #".concat(p):"");if(!c.has(f))return c.add(f),a[m]="Symbol.for(".concat(JSON.stringify(f),")")}}}n.exports={printDocToDebug:r}}}),Le=Z({"src/document/index.js"(e,n){"use strict";ae(),n.exports={builders:Ln(),printer:uD(),utils:jn(),debug:sD()}}}),aD=Z({"vendors/escape-string-regexp.js"(e,n){ae();var t=Object.defineProperty,s=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,r=Object.prototype.hasOwnProperty,u=(m,g)=>{for(var p in g)t(m,p,{get:g[p],enumerable:!0})},a=(m,g,p,f)=>{if(g&&typeof g=="object"||typeof g=="function")for(let h of i(g))!r.call(m,h)&&h!==p&&t(m,h,{get:()=>g[h],enumerable:!(f=s(g,h))||f.enumerable});return m},c=m=>a(t({},"__esModule",{value:!0}),m),l={};u(l,{default:()=>C}),n.exports=c(l);function C(m){if(typeof m!="string")throw new TypeError("Expected a string");return m.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}}}),hi=Z({"node_modules/semver/internal/debug.js"(e,n){ae();var t=typeof xt=="object"&&xt.env&&xt.env.NODE_DEBUG&&/\bsemver\b/i.test(xt.env.NODE_DEBUG)?function(){for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];return console.error("SEMVER",...i)}:()=>{};n.exports=t}}),Ci=Z({"node_modules/semver/internal/constants.js"(e,n){ae();var t="2.0.0",s=256,i=Number.MAX_SAFE_INTEGER||9007199254740991,r=16;n.exports={SEMVER_SPEC_VERSION:t,MAX_LENGTH:s,MAX_SAFE_INTEGER:i,MAX_SAFE_COMPONENT_LENGTH:r}}}),iD=Z({"node_modules/semver/internal/re.js"(e,n){ae();var{MAX_SAFE_COMPONENT_LENGTH:t}=Ci(),s=hi();e=n.exports={};var i=e.re=[],r=e.src=[],u=e.t={},a=0,c=(l,C,m)=>{let g=a++;s(g,C),u[l]=g,r[g]=C,i[g]=new RegExp(C,m?"g":void 0)};c("NUMERICIDENTIFIER","0|[1-9]\\d*"),c("NUMERICIDENTIFIERLOOSE","[0-9]+"),c("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),c("MAINVERSION","(".concat(r[u.NUMERICIDENTIFIER],")\\.(").concat(r[u.NUMERICIDENTIFIER],")\\.(").concat(r[u.NUMERICIDENTIFIER],")")),c("MAINVERSIONLOOSE","(".concat(r[u.NUMERICIDENTIFIERLOOSE],")\\.(").concat(r[u.NUMERICIDENTIFIERLOOSE],")\\.(").concat(r[u.NUMERICIDENTIFIERLOOSE],")")),c("PRERELEASEIDENTIFIER","(?:".concat(r[u.NUMERICIDENTIFIER],"|").concat(r[u.NONNUMERICIDENTIFIER],")")),c("PRERELEASEIDENTIFIERLOOSE","(?:".concat(r[u.NUMERICIDENTIFIERLOOSE],"|").concat(r[u.NONNUMERICIDENTIFIER],")")),c("PRERELEASE","(?:-(".concat(r[u.PRERELEASEIDENTIFIER],"(?:\\.").concat(r[u.PRERELEASEIDENTIFIER],")*))")),c("PRERELEASELOOSE","(?:-?(".concat(r[u.PRERELEASEIDENTIFIERLOOSE],"(?:\\.").concat(r[u.PRERELEASEIDENTIFIERLOOSE],")*))")),c("BUILDIDENTIFIER","[0-9A-Za-z-]+"),c("BUILD","(?:\\+(".concat(r[u.BUILDIDENTIFIER],"(?:\\.").concat(r[u.BUILDIDENTIFIER],")*))")),c("FULLPLAIN","v?".concat(r[u.MAINVERSION]).concat(r[u.PRERELEASE],"?").concat(r[u.BUILD],"?")),c("FULL","^".concat(r[u.FULLPLAIN],"$")),c("LOOSEPLAIN","[v=\\s]*".concat(r[u.MAINVERSIONLOOSE]).concat(r[u.PRERELEASELOOSE],"?").concat(r[u.BUILD],"?")),c("LOOSE","^".concat(r[u.LOOSEPLAIN],"$")),c("GTLT","((?:<|>)?=?)"),c("XRANGEIDENTIFIERLOOSE","".concat(r[u.NUMERICIDENTIFIERLOOSE],"|x|X|\\*")),c("XRANGEIDENTIFIER","".concat(r[u.NUMERICIDENTIFIER],"|x|X|\\*")),c("XRANGEPLAIN","[v=\\s]*(".concat(r[u.XRANGEIDENTIFIER],")(?:\\.(").concat(r[u.XRANGEIDENTIFIER],")(?:\\.(").concat(r[u.XRANGEIDENTIFIER],")(?:").concat(r[u.PRERELEASE],")?").concat(r[u.BUILD],"?)?)?")),c("XRANGEPLAINLOOSE","[v=\\s]*(".concat(r[u.XRANGEIDENTIFIERLOOSE],")(?:\\.(").concat(r[u.XRANGEIDENTIFIERLOOSE],")(?:\\.(").concat(r[u.XRANGEIDENTIFIERLOOSE],")(?:").concat(r[u.PRERELEASELOOSE],")?").concat(r[u.BUILD],"?)?)?")),c("XRANGE","^".concat(r[u.GTLT],"\\s*").concat(r[u.XRANGEPLAIN],"$")),c("XRANGELOOSE","^".concat(r[u.GTLT],"\\s*").concat(r[u.XRANGEPLAINLOOSE],"$")),c("COERCE","(^|[^\\d])(\\d{1,".concat(t,"})(?:\\.(\\d{1,").concat(t,"}))?(?:\\.(\\d{1,").concat(t,"}))?(?:$|[^\\d])")),c("COERCERTL",r[u.COERCE],!0),c("LONETILDE","(?:~>?)"),c("TILDETRIM","(\\s*)".concat(r[u.LONETILDE],"\\s+"),!0),e.tildeTrimReplace="$1~",c("TILDE","^".concat(r[u.LONETILDE]).concat(r[u.XRANGEPLAIN],"$")),c("TILDELOOSE","^".concat(r[u.LONETILDE]).concat(r[u.XRANGEPLAINLOOSE],"$")),c("LONECARET","(?:\\^)"),c("CARETTRIM","(\\s*)".concat(r[u.LONECARET],"\\s+"),!0),e.caretTrimReplace="$1^",c("CARET","^".concat(r[u.LONECARET]).concat(r[u.XRANGEPLAIN],"$")),c("CARETLOOSE","^".concat(r[u.LONECARET]).concat(r[u.XRANGEPLAINLOOSE],"$")),c("COMPARATORLOOSE","^".concat(r[u.GTLT],"\\s*(").concat(r[u.LOOSEPLAIN],")$|^$")),c("COMPARATOR","^".concat(r[u.GTLT],"\\s*(").concat(r[u.FULLPLAIN],")$|^$")),c("COMPARATORTRIM","(\\s*)".concat(r[u.GTLT],"\\s*(").concat(r[u.LOOSEPLAIN],"|").concat(r[u.XRANGEPLAIN],")"),!0),e.comparatorTrimReplace="$1$2$3",c("HYPHENRANGE","^\\s*(".concat(r[u.XRANGEPLAIN],")\\s+-\\s+(").concat(r[u.XRANGEPLAIN],")\\s*$")),c("HYPHENRANGELOOSE","^\\s*(".concat(r[u.XRANGEPLAINLOOSE],")\\s+-\\s+(").concat(r[u.XRANGEPLAINLOOSE],")\\s*$")),c("STAR","(<|>)?=?\\s*\\*"),c("GTE0","^\\s*>=\\s*0.0.0\\s*$"),c("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}}),oD=Z({"node_modules/semver/internal/parse-options.js"(e,n){ae();var t=["includePrerelease","loose","rtl"],s=i=>i?typeof i!="object"?{loose:!0}:t.filter(r=>i[r]).reduce((r,u)=>(r[u]=!0,r),{}):{};n.exports=s}}),cD=Z({"node_modules/semver/internal/identifiers.js"(e,n){ae();var t=/^[0-9]+$/,s=(r,u)=>{let a=t.test(r),c=t.test(u);return a&&c&&(r=+r,u=+u),r===u?0:a&&!c?-1:c&&!a?1:r<u?-1:1},i=(r,u)=>s(u,r);n.exports={compareIdentifiers:s,rcompareIdentifiers:i}}}),lD=Z({"node_modules/semver/classes/semver.js"(e,n){ae();var t=hi(),{MAX_LENGTH:s,MAX_SAFE_INTEGER:i}=Ci(),{re:r,t:u}=iD(),a=oD(),{compareIdentifiers:c}=cD(),l=class{constructor(C,m){if(m=a(m),C instanceof l){if(C.loose===!!m.loose&&C.includePrerelease===!!m.includePrerelease)return C;C=C.version}else if(typeof C!="string")throw new TypeError("Invalid Version: ".concat(C));if(C.length>s)throw new TypeError("version is longer than ".concat(s," characters"));t("SemVer",C,m),this.options=m,this.loose=!!m.loose,this.includePrerelease=!!m.includePrerelease;let g=C.trim().match(m.loose?r[u.LOOSE]:r[u.FULL]);if(!g)throw new TypeError("Invalid Version: ".concat(C));if(this.raw=C,this.major=+g[1],this.minor=+g[2],this.patch=+g[3],this.major>i||this.major<0)throw new TypeError("Invalid major version");if(this.minor>i||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>i||this.patch<0)throw new TypeError("Invalid patch version");g[4]?this.prerelease=g[4].split(".").map(p=>{if(/^[0-9]+$/.test(p)){let f=+p;if(f>=0&&f<i)return f}return p}):this.prerelease=[],this.build=g[5]?g[5].split("."):[],this.format()}format(){return this.version="".concat(this.major,".").concat(this.minor,".").concat(this.patch),this.prerelease.length&&(this.version+="-".concat(this.prerelease.join("."))),this.version}toString(){return this.version}compare(C){if(t("SemVer.compare",this.version,this.options,C),!(C instanceof l)){if(typeof C=="string"&&C===this.version)return 0;C=new l(C,this.options)}return C.version===this.version?0:this.compareMain(C)||this.comparePre(C)}compareMain(C){return C instanceof l||(C=new l(C,this.options)),c(this.major,C.major)||c(this.minor,C.minor)||c(this.patch,C.patch)}comparePre(C){if(C instanceof l||(C=new l(C,this.options)),this.prerelease.length&&!C.prerelease.length)return-1;if(!this.prerelease.length&&C.prerelease.length)return 1;if(!this.prerelease.length&&!C.prerelease.length)return 0;let m=0;do{let g=this.prerelease[m],p=C.prerelease[m];if(t("prerelease compare",m,g,p),g===void 0&&p===void 0)return 0;if(p===void 0)return 1;if(g===void 0)return-1;if(g===p)continue;return c(g,p)}while(++m)}compareBuild(C){C instanceof l||(C=new l(C,this.options));let m=0;do{let g=this.build[m],p=C.build[m];if(t("prerelease compare",m,g,p),g===void 0&&p===void 0)return 0;if(p===void 0)return 1;if(g===void 0)return-1;if(g===p)continue;return c(g,p)}while(++m)}inc(C,m){switch(C){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",m);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",m);break;case"prepatch":this.prerelease.length=0,this.inc("patch",m),this.inc("pre",m);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",m),this.inc("pre",m);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{let g=this.prerelease.length;for(;--g>=0;)typeof this.prerelease[g]=="number"&&(this.prerelease[g]++,g=-2);g===-1&&this.prerelease.push(0)}m&&(this.prerelease[0]===m?isNaN(this.prerelease[1])&&(this.prerelease=[m,0]):this.prerelease=[m,0]);break;default:throw new Error("invalid increment argument: ".concat(C))}return this.format(),this.raw=this.version,this}};n.exports=l}}),qn=Z({"node_modules/semver/functions/compare.js"(e,n){ae();var t=lD(),s=(i,r,u)=>new t(i,u).compare(new t(r,u));n.exports=s}}),pD=Z({"node_modules/semver/functions/lt.js"(e,n){ae();var t=qn(),s=(i,r,u)=>t(i,r,u)<0;n.exports=s}}),fD=Z({"node_modules/semver/functions/gte.js"(e,n){ae();var t=qn(),s=(i,r,u)=>t(i,r,u)>=0;n.exports=s}}),DD=Z({"src/utils/arrayify.js"(e,n){"use strict";ae(),n.exports=(t,s)=>Object.entries(t).map(i=>{let[r,u]=i;return Object.assign({[s]:r},u)})}}),mD=Z({"node_modules/outdent/lib/index.js"(e,n){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.outdent=void 0;function t(){for(var A=[],b=0;b<arguments.length;b++)A[b]=arguments[b]}function s(){return typeof WeakMap<"u"?new WeakMap:i()}function i(){return{add:t,delete:t,get:t,set:t,has:function(A){return!1}}}var r=Object.prototype.hasOwnProperty,u=function(A,b){return r.call(A,b)};function a(A,b){for(var v in b)u(b,v)&&(A[v]=b[v]);return A}var c=/^[ \t]*(?:\r\n|\r|\n)/,l=/(?:\r\n|\r|\n)[ \t]*$/,C=/^(?:[\r\n]|$)/,m=/(?:\r\n|\r|\n)([ \t]*)(?:[^ \t\r\n]|$)/,g=/^[ \t]*[\r\n][ \t\r\n]*$/;function p(A,b,v){var B=0,w=A[0].match(m);w&&(B=w[1].length);var I="(\\r\\n|\\r|\\n).{0,"+B+"}",E=new RegExp(I,"g");b&&(A=A.slice(1));var D=v.newline,d=v.trimLeadingNewline,y=v.trimTrailingNewline,o=typeof D=="string",x=A.length,F=A.map(function(S,k){return S=S.replace(E,"$1"),k===0&&d&&(S=S.replace(c,"")),k===x-1&&y&&(S=S.replace(l,"")),o&&(S=S.replace(/\r\n|\n|\r/g,function(_){return D})),S});return F}function f(A,b){for(var v="",B=0,w=A.length;B<w;B++)v+=A[B],B<w-1&&(v+=b[B]);return v}function h(A){return u(A,"raw")&&u(A,"length")}function N(A){var b=s(),v=s();function B(I){for(var E=[],D=1;D<arguments.length;D++)E[D-1]=arguments[D];if(h(I)){var d=I,y=(E[0]===B||E[0]===T)&&g.test(d[0])&&C.test(d[1]),o=y?v:b,x=o.get(d);if(x||(x=p(d,y,A),o.set(d,x)),E.length===0)return x[0];var F=f(x,y?E.slice(1):E);return F}else return N(a(a({},A),I||{}))}var w=a(B,{string:function(I){return p([I],!1,A)[0]}});return w}var T=N({trimLeadingNewline:!0,trimTrailingNewline:!0});if(e.outdent=T,e.default=T,typeof n<"u")try{n.exports=T,Object.defineProperty(T,"__esModule",{value:!0}),T.default=T,T.outdent=T}catch{}}}),dD=Z({"src/main/core-options.js"(e,n){"use strict";ae();var{outdent:t}=mD(),s="Config",i="Editor",r="Format",u="Other",a="Output",c="Global",l="Special",C={cursorOffset:{since:"1.4.0",category:l,type:"int",default:-1,range:{start:-1,end:Number.POSITIVE_INFINITY,step:1},description:t(si||(si=wt([`
      Print (to stderr) where a cursor at the given position would move to after formatting.
      This option cannot be used with --range-start and --range-end.
    `]))),cliCategory:i},endOfLine:{since:"1.15.0",category:c,type:"choice",default:[{since:"1.15.0",value:"auto"},{since:"2.0.0",value:"lf"}],description:"Which end of line characters to apply.",choices:[{value:"lf",description:"Line Feed only (\\n), common on Linux and macOS as well as inside git repos"},{value:"crlf",description:"Carriage Return + Line Feed characters (\\r\\n), common on Windows"},{value:"cr",description:"Carriage Return character only (\\r), used very rarely"},{value:"auto",description:t(ai||(ai=wt([`
          Maintain existing
          (mixed values within one file are normalised by looking at what's used after the first line)
        `])))}]},filepath:{since:"1.4.0",category:l,type:"path",description:"Specify the input filepath. This will be used to do parser inference.",cliName:"stdin-filepath",cliCategory:u,cliDescription:"Path to the file to pretend that stdin comes from."},insertPragma:{since:"1.8.0",category:l,type:"boolean",default:!1,description:"Insert @format pragma into file's first docblock comment.",cliCategory:u},parser:{since:"0.0.10",category:c,type:"choice",default:[{since:"0.0.10",value:"babylon"},{since:"1.13.0",value:void 0}],description:"Which parser to use.",exception:m=>typeof m=="string"||typeof m=="function",choices:[{value:"flow",description:"Flow"},{value:"babel",since:"1.16.0",description:"JavaScript"},{value:"babel-flow",since:"1.16.0",description:"Flow"},{value:"babel-ts",since:"2.0.0",description:"TypeScript"},{value:"typescript",since:"1.4.0",description:"TypeScript"},{value:"acorn",since:"2.6.0",description:"JavaScript"},{value:"espree",since:"2.2.0",description:"JavaScript"},{value:"meriyah",since:"2.2.0",description:"JavaScript"},{value:"css",since:"1.7.1",description:"CSS"},{value:"less",since:"1.7.1",description:"Less"},{value:"scss",since:"1.7.1",description:"SCSS"},{value:"json",since:"1.5.0",description:"JSON"},{value:"json5",since:"1.13.0",description:"JSON5"},{value:"json-stringify",since:"1.13.0",description:"JSON.stringify"},{value:"graphql",since:"1.5.0",description:"GraphQL"},{value:"markdown",since:"1.8.0",description:"Markdown"},{value:"mdx",since:"1.15.0",description:"MDX"},{value:"vue",since:"1.10.0",description:"Vue"},{value:"yaml",since:"1.14.0",description:"YAML"},{value:"glimmer",since:"2.3.0",description:"Ember / Handlebars"},{value:"html",since:"1.15.0",description:"HTML"},{value:"angular",since:"1.15.0",description:"Angular"},{value:"lwc",since:"1.17.0",description:"Lightning Web Components"}]},plugins:{since:"1.10.0",type:"path",array:!0,default:[{value:[]}],category:c,description:"Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",exception:m=>typeof m=="string"||typeof m=="object",cliName:"plugin",cliCategory:s},pluginSearchDirs:{since:"1.13.0",type:"path",array:!0,default:[{value:[]}],category:c,description:t(ii||(ii=wt([`
      Custom directory that contains prettier plugins in node_modules subdirectory.
      Overrides default behavior when plugins are searched relatively to the location of Prettier.
      Multiple values are accepted.
    `]))),exception:m=>typeof m=="string"||typeof m=="object",cliName:"plugin-search-dir",cliCategory:s},printWidth:{since:"0.0.0",category:c,type:"int",default:80,description:"The line length where Prettier will try wrap.",range:{start:0,end:Number.POSITIVE_INFINITY,step:1}},rangeEnd:{since:"1.4.0",category:l,type:"int",default:Number.POSITIVE_INFINITY,range:{start:0,end:Number.POSITIVE_INFINITY,step:1},description:t(oi||(oi=wt([`
      Format code ending at a given character offset (exclusive).
      The range will extend forwards to the end of the selected statement.
      This option cannot be used with --cursor-offset.
    `]))),cliCategory:i},rangeStart:{since:"1.4.0",category:l,type:"int",default:0,range:{start:0,end:Number.POSITIVE_INFINITY,step:1},description:t(ci||(ci=wt([`
      Format code starting at a given character offset.
      The range will extend backwards to the start of the first line containing the selected statement.
      This option cannot be used with --cursor-offset.
    `]))),cliCategory:i},requirePragma:{since:"1.7.0",category:l,type:"boolean",default:!1,description:t(li||(li=wt([`
      Require either '@prettier' or '@format' to be present in the file's first docblock comment
      in order for it to be formatted.
    `]))),cliCategory:u},tabWidth:{type:"int",category:c,default:2,description:"Number of spaces per indentation level.",range:{start:0,end:Number.POSITIVE_INFINITY,step:1}},useTabs:{since:"1.0.0",category:c,type:"boolean",default:!1,description:"Indent with tabs instead of spaces."},embeddedLanguageFormatting:{since:"2.1.0",category:c,type:"choice",default:[{since:"2.1.0",value:"auto"}],description:"Control how Prettier formats quoted code embedded in the file.",choices:[{value:"auto",description:"Format embedded code if Prettier can automatically identify it."},{value:"off",description:"Never automatically format embedded code."}]}};n.exports={CATEGORY_CONFIG:s,CATEGORY_EDITOR:i,CATEGORY_FORMAT:r,CATEGORY_OTHER:u,CATEGORY_OUTPUT:a,CATEGORY_GLOBAL:c,CATEGORY_SPECIAL:l,options:C}}}),Mn=Z({"src/main/support.js"(e,n){"use strict";ae();var t={compare:qn(),lt:pD(),gte:fD()},s=DD(),i=gi().version,r=dD().options;function u(){let{plugins:c=[],showUnreleased:l=!1,showDeprecated:C=!1,showInternal:m=!1}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},g=i.split("-",1)[0],p=c.flatMap(A=>A.languages||[]).filter(h),f=s(Object.assign({},...c.map(A=>{let{options:b}=A;return b}),r),"name").filter(A=>h(A)&&N(A)).sort((A,b)=>A.name===b.name?0:A.name<b.name?-1:1).map(T).map(A=>{A=Object.assign({},A),Array.isArray(A.default)&&(A.default=A.default.length===1?A.default[0].value:A.default.filter(h).sort((v,B)=>t.compare(B.since,v.since))[0].value),Array.isArray(A.choices)&&(A.choices=A.choices.filter(v=>h(v)&&N(v)),A.name==="parser"&&a(A,p,c));let b=Object.fromEntries(c.filter(v=>v.defaultOptions&&v.defaultOptions[A.name]!==void 0).map(v=>[v.name,v.defaultOptions[A.name]]));return Object.assign(Object.assign({},A),{},{pluginDefaults:b})});return{languages:p,options:f};function h(A){return l||!("since"in A)||A.since&&t.gte(g,A.since)}function N(A){return C||!("deprecated"in A)||A.deprecated&&t.lt(g,A.deprecated)}function T(A){if(m)return A;let{cliName:b,cliCategory:v,cliDescription:B}=A;return _n(A,zf)}}function a(c,l,C){let m=new Set(c.choices.map(g=>g.value));for(let g of l)if(g.parsers){for(let p of g.parsers)if(!m.has(p)){m.add(p);let f=C.find(N=>N.parsers&&N.parsers[p]),h=g.name;f&&f.name&&(h+=" (plugin: ".concat(f.name,")")),c.choices.push({value:p,description:h})}}}n.exports={getSupportInfo:u}}}),Rn=Z({"src/utils/is-non-empty-array.js"(e,n){"use strict";ae();function t(s){return Array.isArray(s)&&s.length>0}n.exports=t}}),Tr=Z({"src/utils/text/skip.js"(e,n){"use strict";ae();function t(a){return(c,l,C)=>{let m=C&&C.backwards;if(l===!1)return!1;let{length:g}=c,p=l;for(;p>=0&&p<g;){let f=c.charAt(p);if(a instanceof RegExp){if(!a.test(f))return p}else if(!a.includes(f))return p;m?p--:p++}return p===-1||p===g?p:!1}}var s=t(/\s/),i=t(" 	"),r=t(",; 	"),u=t(/[^\n\r]/);n.exports={skipWhitespace:s,skipSpaces:i,skipToLineEnd:r,skipEverythingButNewLine:u}}}),Ei=Z({"src/utils/text/skip-inline-comment.js"(e,n){"use strict";ae();function t(s,i){if(i===!1)return!1;if(s.charAt(i)==="/"&&s.charAt(i+1)==="*"){for(let r=i+2;r<s.length;++r)if(s.charAt(r)==="*"&&s.charAt(r+1)==="/")return r+2}return i}n.exports=t}}),vi=Z({"src/utils/text/skip-trailing-comment.js"(e,n){"use strict";ae();var{skipEverythingButNewLine:t}=Tr();function s(i,r){return r===!1?!1:i.charAt(r)==="/"&&i.charAt(r+1)==="/"?t(i,r):r}n.exports=s}}),Fi=Z({"src/utils/text/skip-newline.js"(e,n){"use strict";ae();function t(s,i,r){let u=r&&r.backwards;if(i===!1)return!1;let a=s.charAt(i);if(u){if(s.charAt(i-1)==="\r"&&a===`
`)return i-2;if(a===`
`||a==="\r"||a==="\u2028"||a==="\u2029")return i-1}else{if(a==="\r"&&s.charAt(i+1)===`
`)return i+2;if(a===`
`||a==="\r"||a==="\u2028"||a==="\u2029")return i+1}return i}n.exports=t}}),gD=Z({"src/utils/text/get-next-non-space-non-comment-character-index-with-start-index.js"(e,n){"use strict";ae();var t=Ei(),s=Fi(),i=vi(),{skipSpaces:r}=Tr();function u(a,c){let l=null,C=c;for(;C!==l;)l=C,C=r(a,C),C=t(a,C),C=i(a,C),C=s(a,C);return C}n.exports=u}}),Ge=Z({"src/common/util.js"(e,n){"use strict";ae();var{default:t}=aD(),s=st(),{getSupportInfo:i}=Mn(),r=Rn(),u=yi(),{skipWhitespace:a,skipSpaces:c,skipToLineEnd:l,skipEverythingButNewLine:C}=Tr(),m=Ei(),g=vi(),p=Fi(),f=gD(),h=$=>$[$.length-2];function N($){return(W,ee,U)=>{let ne=U&&U.backwards;if(ee===!1)return!1;let{length:se}=W,V=ee;for(;V>=0&&V<se;){let oe=W.charAt(V);if($ instanceof RegExp){if(!$.test(oe))return V}else if(!$.includes(oe))return V;ne?V--:V++}return V===-1||V===se?V:!1}}function T($,W){let ee=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},U=c($,ee.backwards?W-1:W,ee),ne=p($,U,ee);return U!==ne}function A($,W,ee){for(let U=W;U<ee;++U)if($.charAt(U)===`
`)return!0;return!1}function b($,W,ee){let U=ee(W)-1;U=c($,U,{backwards:!0}),U=p($,U,{backwards:!0}),U=c($,U,{backwards:!0});let ne=p($,U,{backwards:!0});return U!==ne}function v($,W){let ee=null,U=W;for(;U!==ee;)ee=U,U=l($,U),U=m($,U),U=c($,U);return U=g($,U),U=p($,U),U!==!1&&T($,U)}function B($,W,ee){return v($,ee(W))}function w($,W,ee){return f($,ee(W))}function I($,W,ee){return $.charAt(w($,W,ee))}function E($,W){let ee=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return c($,ee.backwards?W-1:W,ee)!==W}function D($,W){let ee=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,U=0;for(let ne=ee;ne<$.length;++ne)$[ne]==="	"?U=U+W-U%W:U++;return U}function d($,W){let ee=$.lastIndexOf(`
`);return ee===-1?0:D($.slice(ee+1).match(/^[\t ]*/)[0],W)}function y($,W){let ee={quote:'"',regex:/"/g,escaped:"&quot;"},U={quote:"'",regex:/'/g,escaped:"&apos;"},ne=W==="'"?U:ee,se=ne===U?ee:U,V=ne;if($.includes(ne.quote)||$.includes(se.quote)){let oe=($.match(ne.regex)||[]).length,K=($.match(se.regex)||[]).length;V=oe>K?se:ne}return V}function o($,W){let ee=$.slice(1,-1),U=W.parser==="json"||W.parser==="json5"&&W.quoteProps==="preserve"&&!W.singleQuote?'"':W.__isInHtmlAttribute?"'":y(ee,W.singleQuote?"'":'"').quote;return x(ee,U,!(W.parser==="css"||W.parser==="less"||W.parser==="scss"||W.__embeddedInHtml))}function x($,W,ee){let U=W==='"'?"'":'"',ne=/\\(.)|(["'])/gs,se=$.replace(ne,(V,oe,K)=>oe===U?oe:K===W?"\\"+K:K||(ee&&/^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/.test(oe)?oe:"\\"+oe));return W+se+W}function F($){return $.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(\d)/,"$1$2$3").replace(/^([+-]?[\d.]+)e[+-]?0+$/,"$1").replace(/^([+-])?\./,"$10.").replace(/(\.\d+?)0+(?=e|$)/,"$1").replace(/\.(?=e|$)/,"")}function S($,W){let ee=$.match(new RegExp("(".concat(t(W),")+"),"g"));return ee===null?0:ee.reduce((U,ne)=>Math.max(U,ne.length/W.length),0)}function k($,W){let ee=$.match(new RegExp("(".concat(t(W),")+"),"g"));if(ee===null)return 0;let U=new Map,ne=0;for(let se of ee){let V=se.length/W.length;U.set(V,!0),V>ne&&(ne=V)}for(let se=1;se<ne;se++)if(!U.get(se))return se;return ne+1}function _($,W){($.comments||($.comments=[])).push(W),W.printed=!1,W.nodeDescription=re($)}function O($,W){W.leading=!0,W.trailing=!1,_($,W)}function R($,W,ee){W.leading=!1,W.trailing=!1,ee&&(W.marker=ee),_($,W)}function M($,W){W.leading=!1,W.trailing=!0,_($,W)}function H($,W){let{languages:ee}=i({plugins:W.plugins}),U=ee.find(ne=>{let{name:se}=ne;return se.toLowerCase()===$})||ee.find(ne=>{let{aliases:se}=ne;return Array.isArray(se)&&se.includes($)})||ee.find(ne=>{let{extensions:se}=ne;return Array.isArray(se)&&se.includes(".".concat($))});return U&&U.parsers[0]}function P($){return $&&$.type==="front-matter"}function G($){let W=new WeakMap;return function(ee){return W.has(ee)||W.set(ee,Symbol($)),W.get(ee)}}function re($){let W=$.type||$.kind||"(unknown type)",ee=String($.name||$.id&&(typeof $.id=="object"?$.id.name:$.id)||$.key&&(typeof $.key=="object"?$.key.name:$.key)||$.value&&(typeof $.value=="object"?"":String($.value))||$.operator||"");return ee.length>20&&(ee=ee.slice(0,19)+"\u2026"),W+(ee?" "+ee:"")}n.exports={inferParserByLanguage:H,getStringWidth:u,getMaxContinuousCount:S,getMinNotPresentContinuousCount:k,getPenultimate:h,getLast:s,getNextNonSpaceNonCommentCharacterIndexWithStartIndex:f,getNextNonSpaceNonCommentCharacterIndex:w,getNextNonSpaceNonCommentCharacter:I,skip:N,skipWhitespace:a,skipSpaces:c,skipToLineEnd:l,skipEverythingButNewLine:C,skipInlineComment:m,skipTrailingComment:g,skipNewline:p,isNextLineEmptyAfterIndex:v,isNextLineEmpty:B,isPreviousLineEmpty:b,hasNewline:T,hasNewlineInRange:A,hasSpaces:E,getAlignmentSize:D,getIndentSize:d,getPreferredQuote:y,printString:o,printNumber:F,makeString:x,addLeadingComment:O,addDanglingComment:R,addTrailingComment:M,isFrontMatterNode:P,isNonEmptyArray:r,createGroupIdMapper:G}}}),Ai={};kn(Ai,{basename:()=>Bi,default:()=>wi,delimiter:()=>bn,dirname:()=>Ti,extname:()=>Ni,isAbsolute:()=>Wn,join:()=>xi,normalize:()=>Vn,relative:()=>bi,resolve:()=>xr,sep:()=>xn});function Si(e,n){for(var t=0,s=e.length-1;s>=0;s--){var i=e[s];i==="."?e.splice(s,1):i===".."?(e.splice(s,1),t++):t&&(e.splice(s,1),t--)}if(n)for(;t--;t)e.unshift("..");return e}function xr(){for(var e="",n=!1,t=arguments.length-1;t>=-1&&!n;t--){var s=t>=0?arguments[t]:"/";if(typeof s!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!s)continue;e=s+"/"+e,n=s.charAt(0)==="/"}return e=Si($n(e.split("/"),function(i){return!!i}),!n).join("/"),(n?"/":"")+e||"."}function Vn(e){var n=Wn(e),t=_i(e,-1)==="/";return e=Si($n(e.split("/"),function(s){return!!s}),!n).join("/"),!e&&!n&&(e="."),e&&t&&(e+="/"),(n?"/":"")+e}function Wn(e){return e.charAt(0)==="/"}function xi(){var e=Array.prototype.slice.call(arguments,0);return Vn($n(e,function(n,t){if(typeof n!="string")throw new TypeError("Arguments to path.join must be strings");return n}).join("/"))}function bi(e,n){e=xr(e).substr(1),n=xr(n).substr(1);function t(l){for(var C=0;C<l.length&&l[C]==="";C++);for(var m=l.length-1;m>=0&&l[m]==="";m--);return C>m?[]:l.slice(C,m-C+1)}for(var s=t(e.split("/")),i=t(n.split("/")),r=Math.min(s.length,i.length),u=r,a=0;a<r;a++)if(s[a]!==i[a]){u=a;break}for(var c=[],a=u;a<s.length;a++)c.push("..");return c=c.concat(i.slice(u)),c.join("/")}function Ti(e){var n=Br(e),t=n[0],s=n[1];return!t&&!s?".":(s&&(s=s.substr(0,s.length-1)),t+s)}function Bi(e,n){var t=Br(e)[2];return n&&t.substr(-1*n.length)===n&&(t=t.substr(0,t.length-n.length)),t}function Ni(e){return Br(e)[3]}function $n(e,n){if(e.filter)return e.filter(n);for(var t=[],s=0;s<e.length;s++)n(e[s],s,e)&&t.push(e[s]);return t}var Di,Br,xn,bn,wi,_i,yD=br({"node-modules-polyfills:path"(){ae(),Di=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,Br=function(e){return Di.exec(e).slice(1)},xn="/",bn=":",wi={extname:Ni,basename:Bi,dirname:Ti,sep:xn,delimiter:bn,relative:bi,join:xi,isAbsolute:Wn,normalize:Vn,resolve:xr},_i= true?function(e,n,t){return e.substr(n,t)}:0}}),Pi=Z({"node-modules-polyfills-commonjs:path"(e,n){ae();var t=(yD(),pt(Ai));if(t&&t.default){n.exports=t.default;for(let s in t)n.exports[s]=t[s]}else t&&(n.exports=t)}}),Jt=Z({"src/common/errors.js"(e,n){"use strict";ae();var t=class extends Error{},s=class extends Error{},i=class extends Error{},r=class extends Error{};n.exports={ConfigError:t,DebugError:s,UndefinedParserError:i,ArgExpansionBailout:r}}}),Dt={};kn(Dt,{__assign:()=>Sr,__asyncDelegator:()=>wD,__asyncGenerator:()=>ND,__asyncValues:()=>_D,__await:()=>Gt,__awaiter:()=>AD,__classPrivateFieldGet:()=>LD,__classPrivateFieldSet:()=>OD,__createBinding:()=>xD,__decorate:()=>ED,__exportStar:()=>bD,__extends:()=>hD,__generator:()=>SD,__importDefault:()=>kD,__importStar:()=>ID,__makeTemplateObject:()=>PD,__metadata:()=>FD,__param:()=>vD,__read:()=>Ii,__rest:()=>CD,__spread:()=>TD,__spreadArrays:()=>BD,__values:()=>Tn});function hD(e,n){Ar(e,n);function t(){this.constructor=e}e.prototype=n===null?Object.create(n):(t.prototype=n.prototype,new t)}function CD(e,n){var t={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,s=Object.getOwnPropertySymbols(e);i<s.length;i++)n.indexOf(s[i])<0&&Object.prototype.propertyIsEnumerable.call(e,s[i])&&(t[s[i]]=e[s[i]]);return t}function ED(e,n,t,s){var i=arguments.length,r=i<3?n:s===null?s=Object.getOwnPropertyDescriptor(n,t):s,u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(e,n,t,s);else for(var a=e.length-1;a>=0;a--)(u=e[a])&&(r=(i<3?u(r):i>3?u(n,t,r):u(n,t))||r);return i>3&&r&&Object.defineProperty(n,t,r),r}function vD(e,n){return function(t,s){n(t,s,e)}}function FD(e,n){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(e,n)}function AD(e,n,t,s){function i(r){return r instanceof t?r:new t(function(u){u(r)})}return new(t||(t=Promise))(function(r,u){function a(C){try{l(s.next(C))}catch(m){u(m)}}function c(C){try{l(s.throw(C))}catch(m){u(m)}}function l(C){C.done?r(C.value):i(C.value).then(a,c)}l((s=s.apply(e,n||[])).next())})}function SD(e,n){var t={label:0,sent:function(){if(r[0]&1)throw r[1];return r[1]},trys:[],ops:[]},s,i,r,u;return u={next:a(0),throw:a(1),return:a(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function a(l){return function(C){return c([l,C])}}function c(l){if(s)throw new TypeError("Generator is already executing.");for(;t;)try{if(s=1,i&&(r=l[0]&2?i.return:l[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,l[1])).done)return r;switch(i=0,r&&(l=[l[0]&2,r.value]),l[0]){case 0:case 1:r=l;break;case 4:return t.label++,{value:l[1],done:!1};case 5:t.label++,i=l[1],l=[0];continue;case 7:l=t.ops.pop(),t.trys.pop();continue;default:if(r=t.trys,!(r=r.length>0&&r[r.length-1])&&(l[0]===6||l[0]===2)){t=0;continue}if(l[0]===3&&(!r||l[1]>r[0]&&l[1]<r[3])){t.label=l[1];break}if(l[0]===6&&t.label<r[1]){t.label=r[1],r=l;break}if(r&&t.label<r[2]){t.label=r[2],t.ops.push(l);break}r[2]&&t.ops.pop(),t.trys.pop();continue}l=n.call(e,t)}catch(C){l=[6,C],i=0}finally{s=r=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}}function xD(e,n,t,s){s===void 0&&(s=t),e[s]=n[t]}function bD(e,n){for(var t in e)t!=="default"&&!n.hasOwnProperty(t)&&(n[t]=e[t])}function Tn(e){var n=typeof Symbol=="function"&&Symbol.iterator,t=n&&e[n],s=0;if(t)return t.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&s>=e.length&&(e=void 0),{value:e&&e[s++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ii(e,n){var t=typeof Symbol=="function"&&e[Symbol.iterator];if(!t)return e;var s=t.call(e),i,r=[],u;try{for(;(n===void 0||n-- >0)&&!(i=s.next()).done;)r.push(i.value)}catch(a){u={error:a}}finally{try{i&&!i.done&&(t=s.return)&&t.call(s)}finally{if(u)throw u.error}}return r}function TD(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(Ii(arguments[n]));return e}function BD(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;for(var s=Array(e),i=0,n=0;n<t;n++)for(var r=arguments[n],u=0,a=r.length;u<a;u++,i++)s[i]=r[u];return s}function Gt(e){return this instanceof Gt?(this.v=e,this):new Gt(e)}function ND(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s=t.apply(e,n||[]),i,r=[];return i={},u("next"),u("throw"),u("return"),i[Symbol.asyncIterator]=function(){return this},i;function u(g){s[g]&&(i[g]=function(p){return new Promise(function(f,h){r.push([g,p,f,h])>1||a(g,p)})})}function a(g,p){try{c(s[g](p))}catch(f){m(r[0][3],f)}}function c(g){g.value instanceof Gt?Promise.resolve(g.value.v).then(l,C):m(r[0][2],g)}function l(g){a("next",g)}function C(g){a("throw",g)}function m(g,p){g(p),r.shift(),r.length&&a(r[0][0],r[0][1])}}function wD(e){var n,t;return n={},s("next"),s("throw",function(i){throw i}),s("return"),n[Symbol.iterator]=function(){return this},n;function s(i,r){n[i]=e[i]?function(u){return(t=!t)?{value:Gt(e[i](u)),done:i==="return"}:r?r(u):u}:r}}function _D(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=e[Symbol.asyncIterator],t;return n?n.call(e):(e=typeof Tn=="function"?Tn(e):e[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(r){t[r]=e[r]&&function(u){return new Promise(function(a,c){u=e[r](u),i(a,c,u.done,u.value)})}}function i(r,u,a,c){Promise.resolve(c).then(function(l){r({value:l,done:a})},u)}}function PD(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}function ID(e){if(e&&e.__esModule)return e;var n={};if(e!=null)for(var t in e)Object.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function kD(e){return e&&e.__esModule?e:{default:e}}function LD(e,n){if(!n.has(e))throw new TypeError("attempted to get private field on non-instance");return n.get(e)}function OD(e,n,t){if(!n.has(e))throw new TypeError("attempted to set private field on non-instance");return n.set(e,t),t}var Ar,Sr,gt=br({"node_modules/tslib/tslib.es6.js"(){ae(),Ar=function(e,n){return Ar=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,s){t.__proto__=s}||function(t,s){for(var i in s)s.hasOwnProperty(i)&&(t[i]=s[i])},Ar(e,n)},Sr=function(){return Sr=Object.assign||function(n){for(var t,s=1,i=arguments.length;s<i;s++){t=arguments[s];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Sr.apply(this,arguments)}}}),ki=Z({"node_modules/vnopts/lib/descriptors/api.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.apiDescriptor={key:n=>/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(n)?n:JSON.stringify(n),value(n){if(n===null||typeof n!="object")return JSON.stringify(n);if(Array.isArray(n))return"[".concat(n.map(s=>e.apiDescriptor.value(s)).join(", "),"]");let t=Object.keys(n);return t.length===0?"{}":"{ ".concat(t.map(s=>"".concat(e.apiDescriptor.key(s),": ").concat(e.apiDescriptor.value(n[s]))).join(", ")," }")},pair:n=>{let{key:t,value:s}=n;return e.apiDescriptor.value({[t]:s})}}}}),jD=Z({"node_modules/vnopts/lib/descriptors/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(ki(),e)}}),Nr=Z({"scripts/build/shims/chalk.cjs"(e,n){"use strict";ae();var t=s=>s;t.grey=t,t.red=t,t.bold=t,t.yellow=t,t.blue=t,t.default=t,n.exports=t}}),Li=Z({"node_modules/vnopts/lib/handlers/deprecated/common.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=Nr();e.commonDeprecatedHandler=(t,s,i)=>{let{descriptor:r}=i,u=["".concat(n.default.yellow(typeof t=="string"?r.key(t):r.pair(t))," is deprecated")];return s&&u.push("we now treat it as ".concat(n.default.blue(typeof s=="string"?r.key(s):r.pair(s)))),u.join("; ")+"."}}}),qD=Z({"node_modules/vnopts/lib/handlers/deprecated/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(Li(),e)}}),MD=Z({"node_modules/vnopts/lib/handlers/invalid/common.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=Nr();e.commonInvalidHandler=(t,s,i)=>["Invalid ".concat(n.default.red(i.descriptor.key(t))," value."),"Expected ".concat(n.default.blue(i.schemas[t].expected(i)),","),"but received ".concat(n.default.red(i.descriptor.value(s)),".")].join(" ")}}),Oi=Z({"node_modules/vnopts/lib/handlers/invalid/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(MD(),e)}}),RD=Z({"node_modules/vnopts/node_modules/leven/index.js"(e,n){"use strict";ae();var t=[],s=[];n.exports=function(i,r){if(i===r)return 0;var u=i;i.length>r.length&&(i=r,r=u);var a=i.length,c=r.length;if(a===0)return c;if(c===0)return a;for(;a>0&&i.charCodeAt(~-a)===r.charCodeAt(~-c);)a--,c--;if(a===0)return c;for(var l=0;l<a&&i.charCodeAt(l)===r.charCodeAt(l);)l++;if(a-=l,c-=l,a===0)return c;for(var C,m,g,p,f=0,h=0;f<a;)s[l+f]=i.charCodeAt(l+f),t[f]=++f;for(;h<c;)for(C=r.charCodeAt(l+h),g=h++,m=h,f=0;f<a;f++)p=C===s[l+f]?g:g+1,g=t[f],m=t[f]=g>m?p>m?m+1:p:p>g?g+1:p;return m}}}),ji=Z({"node_modules/vnopts/lib/handlers/unknown/leven.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=Nr(),t=RD();e.levenUnknownHandler=(s,i,r)=>{let{descriptor:u,logger:a,schemas:c}=r,l=["Ignored unknown option ".concat(n.default.yellow(u.pair({key:s,value:i})),".")],C=Object.keys(c).sort().find(m=>t(s,m)<3);C&&l.push("Did you mean ".concat(n.default.blue(u.key(C)),"?")),a.warn(l.join(" "))}}}),VD=Z({"node_modules/vnopts/lib/handlers/unknown/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(ji(),e)}}),WD=Z({"node_modules/vnopts/lib/handlers/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(qD(),e),n.__exportStar(Oi(),e),n.__exportStar(VD(),e)}}),yt=Z({"node_modules/vnopts/lib/schema.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=["default","expected","validate","deprecated","forward","redirect","overlap","preprocess","postprocess"];function t(r,u){let a=new r(u),c=Object.create(a);for(let l of n)l in u&&(c[l]=i(u[l],a,s.prototype[l].length));return c}e.createSchema=t;var s=class{constructor(r){this.name=r.name}static create(r){return t(this,r)}default(r){}expected(r){return"nothing"}validate(r,u){return!1}deprecated(r,u){return!1}forward(r,u){}redirect(r,u){}overlap(r,u,a){return r}preprocess(r,u){return r}postprocess(r,u){return r}};e.Schema=s;function i(r,u,a){return typeof r=="function"?function(){for(var c=arguments.length,l=new Array(c),C=0;C<c;C++)l[C]=arguments[C];return r(...l.slice(0,a-1),u,...l.slice(a-1))}:()=>r}}}),$D=Z({"node_modules/vnopts/lib/schemas/alias.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=class extends n.Schema{constructor(s){super(s);this._sourceName=s.sourceName}expected(s){return s.schemas[this._sourceName].expected(s)}validate(s,i){return i.schemas[this._sourceName].validate(s,i)}redirect(s,i){return this._sourceName}};e.AliasSchema=t}}),HD=Z({"node_modules/vnopts/lib/schemas/any.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=class extends n.Schema{expected(){return"anything"}validate(){return!0}};e.AnySchema=t}}),GD=Z({"node_modules/vnopts/lib/schemas/array.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt)),t=yt(),s=class extends t.Schema{constructor(r){var{valueSchema:u,name:a=u.name}=r,c=n.__rest(r,["valueSchema","name"]);super(Object.assign({},c,{name:a}));this._valueSchema=u}expected(r){return"an array of ".concat(this._valueSchema.expected(r))}validate(r,u){if(!Array.isArray(r))return!1;let a=[];for(let c of r){let l=u.normalizeValidateResult(this._valueSchema.validate(c,u),c);l!==!0&&a.push(l.value)}return a.length===0?!0:{value:a}}deprecated(r,u){let a=[];for(let c of r){let l=u.normalizeDeprecatedResult(this._valueSchema.deprecated(c,u),c);l!==!1&&a.push(...l.map(C=>{let{value:m}=C;return{value:[m]}}))}return a}forward(r,u){let a=[];for(let c of r){let l=u.normalizeForwardResult(this._valueSchema.forward(c,u),c);a.push(...l.map(i))}return a}redirect(r,u){let a=[],c=[];for(let l of r){let C=u.normalizeRedirectResult(this._valueSchema.redirect(l,u),l);"remain"in C&&a.push(C.remain),c.push(...C.redirect.map(i))}return a.length===0?{redirect:c}:{redirect:c,remain:a}}overlap(r,u){return r.concat(u)}};e.ArraySchema=s;function i(r){let{from:u,to:a}=r;return{from:[u],to:a}}}}),JD=Z({"node_modules/vnopts/lib/schemas/boolean.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=class extends n.Schema{expected(){return"true or false"}validate(s){return typeof s=="boolean"}};e.BooleanSchema=t}}),Hn=Z({"node_modules/vnopts/lib/utils.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});function n(p,f){let h=Object.create(null);for(let N of p){let T=N[f];if(h[T])throw new Error("Duplicate ".concat(f," ").concat(JSON.stringify(T)));h[T]=N}return h}e.recordFromArray=n;function t(p,f){let h=new Map;for(let N of p){let T=N[f];if(h.has(T))throw new Error("Duplicate ".concat(f," ").concat(JSON.stringify(T)));h.set(T,N)}return h}e.mapFromArray=t;function s(){let p=Object.create(null);return f=>{let h=JSON.stringify(f);return p[h]?!0:(p[h]=!0,!1)}}e.createAutoChecklist=s;function i(p,f){let h=[],N=[];for(let T of p)f(T)?h.push(T):N.push(T);return[h,N]}e.partition=i;function r(p){return p===Math.floor(p)}e.isInt=r;function u(p,f){if(p===f)return 0;let h=typeof p,N=typeof f,T=["undefined","object","boolean","number","string"];return h!==N?T.indexOf(h)-T.indexOf(N):h!=="string"?Number(p)-Number(f):p.localeCompare(f)}e.comparePrimitive=u;function a(p){return p===void 0?{}:p}e.normalizeDefaultResult=a;function c(p,f){return p===!0?!0:p===!1?{value:f}:p}e.normalizeValidateResult=c;function l(p,f){let h=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;return p===!1?!1:p===!0?h?!0:[{value:f}]:"value"in p?[p]:p.length===0?!1:p}e.normalizeDeprecatedResult=l;function C(p,f){return typeof p=="string"||"key"in p?{from:f,to:p}:"from"in p?{from:p.from,to:p.to}:{from:f,to:p.to}}e.normalizeTransferResult=C;function m(p,f){return p===void 0?[]:Array.isArray(p)?p.map(h=>C(h,f)):[C(p,f)]}e.normalizeForwardResult=m;function g(p,f){let h=m(typeof p=="object"&&"redirect"in p?p.redirect:p,f);return h.length===0?{remain:f,redirect:h}:typeof p=="object"&&"remain"in p?{remain:p.remain,redirect:h}:{redirect:h}}e.normalizeRedirectResult=g}}),UD=Z({"node_modules/vnopts/lib/schemas/choice.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=Hn(),s=class extends n.Schema{constructor(i){super(i);this._choices=t.mapFromArray(i.choices.map(r=>r&&typeof r=="object"?r:{value:r}),"value")}expected(i){let{descriptor:r}=i,u=Array.from(this._choices.keys()).map(l=>this._choices.get(l)).filter(l=>!l.deprecated).map(l=>l.value).sort(t.comparePrimitive).map(r.value),a=u.slice(0,-2),c=u.slice(-2);return a.concat(c.join(" or ")).join(", ")}validate(i){return this._choices.has(i)}deprecated(i){let r=this._choices.get(i);return r&&r.deprecated?{value:i}:!1}forward(i){let r=this._choices.get(i);return r?r.forward:void 0}redirect(i){let r=this._choices.get(i);return r?r.redirect:void 0}};e.ChoiceSchema=s}}),qi=Z({"node_modules/vnopts/lib/schemas/number.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=class extends n.Schema{expected(){return"a number"}validate(s,i){return typeof s=="number"}};e.NumberSchema=t}}),zD=Z({"node_modules/vnopts/lib/schemas/integer.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=Hn(),t=qi(),s=class extends t.NumberSchema{expected(){return"an integer"}validate(i,r){return r.normalizeValidateResult(super.validate(i,r),i)===!0&&n.isInt(i)}};e.IntegerSchema=s}}),XD=Z({"node_modules/vnopts/lib/schemas/string.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=yt(),t=class extends n.Schema{expected(){return"a string"}validate(s){return typeof s=="string"}};e.StringSchema=t}}),KD=Z({"node_modules/vnopts/lib/schemas/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar($D(),e),n.__exportStar(HD(),e),n.__exportStar(GD(),e),n.__exportStar(JD(),e),n.__exportStar(UD(),e),n.__exportStar(zD(),e),n.__exportStar(qi(),e),n.__exportStar(XD(),e)}}),YD=Z({"node_modules/vnopts/lib/defaults.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=ki(),t=Li(),s=Oi(),i=ji();e.defaultDescriptor=n.apiDescriptor,e.defaultUnknownHandler=i.levenUnknownHandler,e.defaultInvalidHandler=s.commonInvalidHandler,e.defaultDeprecatedHandler=t.commonDeprecatedHandler}}),QD=Z({"node_modules/vnopts/lib/normalize.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=YD(),t=Hn();e.normalize=(i,r,u)=>new s(r,u).normalize(i);var s=class{constructor(i,r){let{logger:u=console,descriptor:a=n.defaultDescriptor,unknown:c=n.defaultUnknownHandler,invalid:l=n.defaultInvalidHandler,deprecated:C=n.defaultDeprecatedHandler}=r||{};this._utils={descriptor:a,logger:u||{warn:()=>{}},schemas:t.recordFromArray(i,"name"),normalizeDefaultResult:t.normalizeDefaultResult,normalizeDeprecatedResult:t.normalizeDeprecatedResult,normalizeForwardResult:t.normalizeForwardResult,normalizeRedirectResult:t.normalizeRedirectResult,normalizeValidateResult:t.normalizeValidateResult},this._unknownHandler=c,this._invalidHandler=l,this._deprecatedHandler=C,this.cleanHistory()}cleanHistory(){this._hasDeprecationWarned=t.createAutoChecklist()}normalize(i){let r={},u=[i],a=()=>{for(;u.length!==0;){let c=u.shift(),l=this._applyNormalization(c,r);u.push(...l)}};a();for(let c of Object.keys(this._utils.schemas)){let l=this._utils.schemas[c];if(!(c in r)){let C=t.normalizeDefaultResult(l.default(this._utils));"value"in C&&u.push({[c]:C.value})}}a();for(let c of Object.keys(this._utils.schemas)){let l=this._utils.schemas[c];c in r&&(r[c]=l.postprocess(r[c],this._utils))}return r}_applyNormalization(i,r){let u=[],[a,c]=t.partition(Object.keys(i),l=>l in this._utils.schemas);for(let l of a){let C=this._utils.schemas[l],m=C.preprocess(i[l],this._utils),g=t.normalizeValidateResult(C.validate(m,this._utils),m);if(g!==!0){let{value:T}=g,A=this._invalidHandler(l,T,this._utils);throw typeof A=="string"?new Error(A):A}let p=T=>{let{from:A,to:b}=T;u.push(typeof b=="string"?{[b]:A}:{[b.key]:b.value})},f=T=>{let{value:A,redirectTo:b}=T,v=t.normalizeDeprecatedResult(C.deprecated(A,this._utils),m,!0);if(v!==!1)if(v===!0)this._hasDeprecationWarned(l)||this._utils.logger.warn(this._deprecatedHandler(l,b,this._utils));else for(let{value:B}of v){let w={key:l,value:B};if(!this._hasDeprecationWarned(w)){let I=typeof b=="string"?{key:b,value:B}:b;this._utils.logger.warn(this._deprecatedHandler(w,I,this._utils))}}};t.normalizeForwardResult(C.forward(m,this._utils),m).forEach(p);let N=t.normalizeRedirectResult(C.redirect(m,this._utils),m);if(N.redirect.forEach(p),"remain"in N){let T=N.remain;r[l]=l in r?C.overlap(r[l],T,this._utils):T,f({value:T})}for(let{from:T,to:A}of N.redirect)f({value:T,redirectTo:A})}for(let l of c){let C=i[l],m=this._unknownHandler(l,C,this._utils);if(m)for(let g of Object.keys(m)){let p={[g]:m[g]};g in this._utils.schemas?u.push(p):Object.assign(r,p)}}return u}};e.Normalizer=s}}),ZD=Z({"node_modules/vnopts/lib/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=(gt(),pt(Dt));n.__exportStar(jD(),e),n.__exportStar(WD(),e),n.__exportStar(KD(),e),n.__exportStar(QD(),e),n.__exportStar(yt(),e)}}),em=Z({"src/main/options-normalizer.js"(e,n){"use strict";ae();var t=ZD(),s=st(),i={key:g=>g.length===1?"-".concat(g):"--".concat(g),value:g=>t.apiDescriptor.value(g),pair:g=>{let{key:p,value:f}=g;return f===!1?"--no-".concat(p):f===!0?i.key(p):f===""?"".concat(i.key(p)," without an argument"):"".concat(i.key(p),"=").concat(f)}},r=g=>{let{colorsModule:p,levenshteinDistance:f}=g;return class extends t.ChoiceSchema{constructor(N){let{name:T,flags:A}=N;super({name:T,choices:A});this._flags=[...A].sort()}preprocess(N,T){if(typeof N=="string"&&N.length>0&&!this._flags.includes(N)){let A=this._flags.find(b=>f(b,N)<3);if(A)return T.logger.warn(["Unknown flag ".concat(p.yellow(T.descriptor.value(N)),","),"did you mean ".concat(p.blue(T.descriptor.value(A)),"?")].join(" ")),A}return N}expected(){return"a flag"}}},u;function a(g,p){let{logger:f,isCLI:h=!1,passThrough:N=!1,colorsModule:T,levenshteinDistance:A}=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},b=N?Array.isArray(N)?(D,d)=>N.includes(D)?{[D]:d}:void 0:(D,d)=>({[D]:d}):(D,d,y)=>{let o=y.schemas,{_:x}=o,F=_n(o,Xf);return t.levenUnknownHandler(D,d,Object.assign(Object.assign({},y),{},{schemas:F}))},v=h?i:t.apiDescriptor,B=c(p,{isCLI:h,colorsModule:T,levenshteinDistance:A}),w=new t.Normalizer(B,{logger:f,unknown:b,descriptor:v}),I=f!==!1;I&&u&&(w._hasDeprecationWarned=u);let E=w.normalize(g);return I&&(u=w._hasDeprecationWarned),h&&E["plugin-search"]===!1&&(E["plugin-search-dir"]=!1),E}function c(g,p){let{isCLI:f,colorsModule:h,levenshteinDistance:N}=p,T=[];f&&T.push(t.AnySchema.create({name:"_"}));for(let A of g)T.push(l(A,{isCLI:f,optionInfos:g,colorsModule:h,levenshteinDistance:N})),A.alias&&f&&T.push(t.AliasSchema.create({name:A.alias,sourceName:A.name}));return T}function l(g,p){let{isCLI:f,optionInfos:h,colorsModule:N,levenshteinDistance:T}=p,{name:A}=g;if(A==="plugin-search-dir"||A==="pluginSearchDirs")return t.AnySchema.create({name:A,preprocess(w){return w===!1||(w=Array.isArray(w)?w:[w]),w},validate(w){return w===!1?!0:w.every(I=>typeof I=="string")},expected(){return"false or paths to plugin search dir"}});let b={name:A},v,B={};switch(g.type){case"int":v=t.IntegerSchema,f&&(b.preprocess=w=>Number(w));break;case"string":v=t.StringSchema;break;case"choice":v=t.ChoiceSchema,b.choices=g.choices.map(w=>typeof w=="object"&&w.redirect?Object.assign(Object.assign({},w),{},{redirect:{to:{key:g.name,value:w.redirect}}}):w);break;case"boolean":v=t.BooleanSchema;break;case"flag":v=r({colorsModule:N,levenshteinDistance:T}),b.flags=h.flatMap(w=>[w.alias,w.description&&w.name,w.oppositeDescription&&"no-".concat(w.name)].filter(Boolean));break;case"path":v=t.StringSchema;break;default:throw new Error("Unexpected type ".concat(g.type))}if(g.exception?b.validate=(w,I,E)=>g.exception(w)||I.validate(w,E):b.validate=(w,I,E)=>w===void 0||I.validate(w,E),g.redirect&&(B.redirect=w=>w?{to:{key:g.redirect.option,value:g.redirect.value}}:void 0),g.deprecated&&(B.deprecated=!0),f&&!g.array){let w=b.preprocess||(I=>I);b.preprocess=(I,E,D)=>E.preprocess(w(Array.isArray(I)?s(I):I),D)}return g.array?t.ArraySchema.create(Object.assign(Object.assign(Object.assign({},f?{preprocess:w=>Array.isArray(w)?w:[w]}:{}),B),{},{valueSchema:v.create(b)})):v.create(Object.assign(Object.assign({},b),B))}function C(g,p,f){return a(g,p,f)}function m(g,p,f){return a(g,p,Object.assign({isCLI:!0},f))}n.exports={normalizeApiOptions:C,normalizeCliOptions:m}}}),nt=Z({"src/language-js/loc.js"(e,n){"use strict";ae();var t=Rn();function s(c,l){let{ignoreDecorators:C}=l||{};if(!C){let m=c.declaration&&c.declaration.decorators||c.decorators;if(t(m))return s(m[0])}return c.range?c.range[0]:c.start}function i(c){return c.range?c.range[1]:c.end}function r(c,l){let C=s(c);return Number.isInteger(C)&&C===s(l)}function u(c,l){let C=i(c);return Number.isInteger(C)&&C===i(l)}function a(c,l){return r(c,l)&&u(c,l)}n.exports={locStart:s,locEnd:i,hasSameLocStart:r,hasSameLoc:a}}}),tm=Z({"scripts/build/shims/babel-highlight.cjs"(e,n){"use strict";ae();var t=Nr(),s={shouldHighlight:()=>!1,getChalk:()=>t};n.exports=s}}),rm=Z({"node_modules/@babel/code-frame/lib/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.codeFrameColumns=u,e.default=a;var n=tm(),t=!1;function s(c){return{gutter:c.grey,marker:c.red.bold,message:c.red.bold}}var i=/\r\n|[\n\r\u2028\u2029]/;function r(c,l,C){let m=Object.assign({column:0,line:-1},c.start),g=Object.assign({},m,c.end),{linesAbove:p=2,linesBelow:f=3}=C||{},h=m.line,N=m.column,T=g.line,A=g.column,b=Math.max(h-(p+1),0),v=Math.min(l.length,T+f);h===-1&&(b=0),T===-1&&(v=l.length);let B=T-h,w={};if(B)for(let I=0;I<=B;I++){let E=I+h;if(!N)w[E]=!0;else if(I===0){let D=l[E-1].length;w[E]=[N,D-N+1]}else if(I===B)w[E]=[0,A];else{let D=l[E-I].length;w[E]=[0,D]}}else N===A?N?w[h]=[N,0]:w[h]=!0:w[h]=[N,A-N];return{start:b,end:v,markerLines:w}}function u(c,l){let C=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},m=(C.highlightCode||C.forceColor)&&(0,n.shouldHighlight)(C),g=(0,n.getChalk)(C),p=s(g),f=(I,E)=>m?I(E):E,h=c.split(i),{start:N,end:T,markerLines:A}=r(l,h,C),b=l.start&&typeof l.start.column=="number",v=String(T).length,w=(m?(0,n.default)(c,C):c).split(i,T).slice(N,T).map((I,E)=>{let D=N+1+E,d=" ".concat(D).slice(-v),y=" ".concat(d," |"),o=A[D],x=!A[D+1];if(o){let F="";if(Array.isArray(o)){let S=I.slice(0,Math.max(o[0]-1,0)).replace(/[^\t]/g," "),k=o[1]||1;F=[`
 `,f(p.gutter,y.replace(/\d/g," "))," ",S,f(p.marker,"^").repeat(k)].join(""),x&&C.message&&(F+=" "+f(p.message,C.message))}return[f(p.marker,">"),f(p.gutter,y),I.length>0?" ".concat(I):"",F].join("")}else return" ".concat(f(p.gutter,y)).concat(I.length>0?" ".concat(I):"")}).join(`
`);return C.message&&!b&&(w="".concat(" ".repeat(v+1)).concat(C.message,`
`).concat(w)),m?g.reset(w):w}function a(c,l,C){let m=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};if(!t){t=!0;let p="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(xt.emitWarning)xt.emitWarning(p,"DeprecationWarning");else{let f=new Error(p);f.name="DeprecationWarning",console.warn(new Error(p))}}return C=Math.max(C,0),u(c,{start:{column:C,line:l}},m)}}}),Gn=Z({"src/main/parser.js"(e,n){"use strict";ae();var t=Pi(),{ConfigError:s}=Jt(),i=nt(),{locStart:r,locEnd:u}=i,a=Object.getOwnPropertyNames,c=Object.getOwnPropertyDescriptor;function l(g){let p={};for(let f of g.plugins)if(!!f.parsers)for(let h of a(f.parsers))Object.defineProperty(p,h,c(f.parsers,h));return p}function C(g){let p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:l(g);if(typeof g.parser=="function")return{parse:g.parser,astFormat:"estree",locStart:r,locEnd:u};if(typeof g.parser=="string"){if(Object.prototype.hasOwnProperty.call(p,g.parser))return p[g.parser];throw new s(`Couldn't resolve parser "`.concat(g.parser,'". Parsers must be explicitly added to the standalone bundle.'))}}function m(g,p){let f=l(p),h=Object.defineProperties({},Object.fromEntries(Object.keys(f).map(T=>[T,{enumerable:!0,get(){return f[T].parse}}]))),N=C(p,f);try{return N.preprocess&&(g=N.preprocess(g,p)),{text:g,ast:N.parse(g,h,p)}}catch(T){let{loc:A}=T;if(A){let{codeFrameColumns:b}=rm();throw T.codeFrame=b(g,A,{highlightCode:!0}),T.message+=`
`+T.codeFrame,T}throw T.stack}}n.exports={parse:m,resolveParser:C}}}),Mi=Z({"src/main/options.js"(e,n){"use strict";ae();var t=Pi(),{UndefinedParserError:s}=Jt(),{getSupportInfo:i}=Mn(),r=em(),{resolveParser:u}=Gn(),a={astFormat:"estree",printer:{},originalText:void 0,locStart:null,locEnd:null};function c(m){let g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},p=Object.assign({},m),f=i({plugins:m.plugins,showUnreleased:!0,showDeprecated:!0}).options,h=Object.assign(Object.assign({},a),Object.fromEntries(f.filter(v=>v.default!==void 0).map(v=>[v.name,v.default])));if(!p.parser){if(!p.filepath)(g.logger||console).warn("No parser and no filepath given, using 'babel' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred."),p.parser="babel";else if(p.parser=C(p.filepath,p.plugins),!p.parser)throw new s("No parser could be inferred for file: ".concat(p.filepath))}let N=u(r.normalizeApiOptions(p,[f.find(v=>v.name==="parser")],{passThrough:!0,logger:!1}));p.astFormat=N.astFormat,p.locEnd=N.locEnd,p.locStart=N.locStart;let T=l(p);p.printer=T.printers[p.astFormat];let A=Object.fromEntries(f.filter(v=>v.pluginDefaults&&v.pluginDefaults[T.name]!==void 0).map(v=>[v.name,v.pluginDefaults[T.name]])),b=Object.assign(Object.assign({},h),A);for(let[v,B]of Object.entries(b))(p[v]===null||p[v]===void 0)&&(p[v]=B);return p.parser==="json"&&(p.trailingComma="none"),r.normalizeApiOptions(p,f,Object.assign({passThrough:Object.keys(a)},g))}function l(m){let{astFormat:g}=m;if(!g)throw new Error("getPlugin() requires astFormat to be set");let p=m.plugins.find(f=>f.printers&&f.printers[g]);if(!p)throw new Error(`Couldn't find plugin for AST format "`.concat(g,'"'));return p}function C(m,g){let p=t.basename(m).toLowerCase(),h=i({plugins:g}).languages.filter(N=>N.since!==null).find(N=>N.extensions&&N.extensions.some(T=>p.endsWith(T))||N.filenames&&N.filenames.some(T=>T.toLowerCase()===p));return h&&h.parsers[0]}n.exports={normalize:c,hiddenDefaults:a,inferParser:C}}}),nm=Z({"src/main/massage-ast.js"(e,n){"use strict";ae();function t(s,i,r){if(Array.isArray(s))return s.map(l=>t(l,i,r)).filter(Boolean);if(!s||typeof s!="object")return s;let u=i.printer.massageAstNode,a;u&&u.ignoredProperties?a=u.ignoredProperties:a=new Set;let c={};for(let[l,C]of Object.entries(s))!a.has(l)&&typeof C!="function"&&(c[l]=t(C,i,s));if(u){let l=u(s,c,r);if(l===null)return;if(l)return l}return c}n.exports=t}}),Ut=Z({"scripts/build/shims/assert.cjs"(e,n){"use strict";ae();var t=()=>{};t.ok=t,t.strictEqual=t,n.exports=t}}),Qe=Z({"src/main/comments.js"(e,n){"use strict";ae();var t=Ut(),{builders:{line:s,hardline:i,breakParent:r,indent:u,lineSuffix:a,join:c,cursor:l}}=Le(),{hasNewline:C,skipNewline:m,skipSpaces:g,isPreviousLineEmpty:p,addLeadingComment:f,addDanglingComment:h,addTrailingComment:N}=Ge(),T=new WeakMap;function A(O,R,M){if(!O)return;let{printer:H,locStart:P,locEnd:G}=R;if(M){if(H.canAttachComment&&H.canAttachComment(O)){let $;for($=M.length-1;$>=0&&!(P(M[$])<=P(O)&&G(M[$])<=G(O));--$);M.splice($+1,0,O);return}}else if(T.has(O))return T.get(O);let re=H.getCommentChildNodes&&H.getCommentChildNodes(O,R)||typeof O=="object"&&Object.entries(O).filter($=>{let[W]=$;return W!=="enclosingNode"&&W!=="precedingNode"&&W!=="followingNode"&&W!=="tokens"&&W!=="comments"&&W!=="parent"}).map($=>{let[,W]=$;return W});if(!!re){M||(M=[],T.set(O,M));for(let $ of re)A($,R,M);return M}}function b(O,R,M,H){let{locStart:P,locEnd:G}=M,re=P(R),$=G(R),W=A(O,M),ee,U,ne=0,se=W.length;for(;ne<se;){let V=ne+se>>1,oe=W[V],K=P(oe),Ee=G(oe);if(K<=re&&$<=Ee)return b(oe,R,M,oe);if(Ee<=re){ee=oe,ne=V+1;continue}if($<=K){U=oe,se=V;continue}throw new Error("Comment location overlaps with node location")}if(H&&H.type==="TemplateLiteral"){let{quasis:V}=H,oe=y(V,R,M);ee&&y(V,ee,M)!==oe&&(ee=null),U&&y(V,U,M)!==oe&&(U=null)}return{enclosingNode:H,precedingNode:ee,followingNode:U}}var v=()=>!1;function B(O,R,M,H){if(!Array.isArray(O))return;let P=[],{locStart:G,locEnd:re,printer:{handleComments:$={}}}=H,{avoidAstMutation:W,ownLine:ee=v,endOfLine:U=v,remaining:ne=v}=$,se=O.map((V,oe)=>Object.assign(Object.assign({},b(R,V,H)),{},{comment:V,text:M,options:H,ast:R,isLastComment:O.length-1===oe}));for(let[V,oe]of se.entries()){let{comment:K,precedingNode:Ee,enclosingNode:q,followingNode:le,text:ue,options:Q,ast:de,isLastComment:ge}=oe;if(Q.parser==="json"||Q.parser==="json5"||Q.parser==="__js_expression"||Q.parser==="__vue_expression"){if(G(K)-G(de)<=0){f(de,K);continue}if(re(K)-re(de)>=0){N(de,K);continue}}let ve;if(W?ve=[oe]:(K.enclosingNode=q,K.precedingNode=Ee,K.followingNode=le,ve=[K,ue,Q,de,ge]),I(ue,Q,se,V))K.placement="ownLine",ee(...ve)||(le?f(le,K):Ee?N(Ee,K):h(q||de,K));else if(E(ue,Q,se,V))K.placement="endOfLine",U(...ve)||(Ee?N(Ee,K):le?f(le,K):h(q||de,K));else if(K.placement="remaining",!ne(...ve))if(Ee&&le){let xe=P.length;xe>0&&P[xe-1].followingNode!==le&&D(P,ue,Q),P.push(oe)}else Ee?N(Ee,K):le?f(le,K):h(q||de,K)}if(D(P,M,H),!W)for(let V of O)delete V.precedingNode,delete V.enclosingNode,delete V.followingNode}var w=O=>!/[\S\n\u2028\u2029]/.test(O);function I(O,R,M,H){let{comment:P,precedingNode:G}=M[H],{locStart:re,locEnd:$}=R,W=re(P);if(G)for(let ee=H-1;ee>=0;ee--){let{comment:U,precedingNode:ne}=M[ee];if(ne!==G||!w(O.slice($(U),W)))break;W=re(U)}return C(O,W,{backwards:!0})}function E(O,R,M,H){let{comment:P,followingNode:G}=M[H],{locStart:re,locEnd:$}=R,W=$(P);if(G)for(let ee=H+1;ee<M.length;ee++){let{comment:U,followingNode:ne}=M[ee];if(ne!==G||!w(O.slice(W,re(U))))break;W=$(U)}return C(O,W)}function D(O,R,M){let H=O.length;if(H===0)return;let{precedingNode:P,followingNode:G,enclosingNode:re}=O[0],$=M.printer.getGapRegex&&M.printer.getGapRegex(re)||/^[\s(]*$/,W=M.locStart(G),ee;for(ee=H;ee>0;--ee){let{comment:U,precedingNode:ne,followingNode:se}=O[ee-1];t.strictEqual(ne,P),t.strictEqual(se,G);let V=R.slice(M.locEnd(U),W);if($.test(V))W=M.locStart(U);else break}for(let[U,{comment:ne}]of O.entries())U<ee?N(P,ne):f(G,ne);for(let U of[P,G])U.comments&&U.comments.length>1&&U.comments.sort((ne,se)=>M.locStart(ne)-M.locStart(se));O.length=0}function d(O,R){let M=O.getValue();return M.printed=!0,R.printer.printComment(O,R)}function y(O,R,M){let H=M.locStart(R)-1;for(let P=1;P<O.length;++P)if(H<M.locStart(O[P]))return P-1;return 0}function o(O,R){let M=O.getValue(),H=[d(O,R)],{printer:P,originalText:G,locStart:re,locEnd:$}=R;if(P.isBlockComment&&P.isBlockComment(M)){let U=C(G,$(M))?C(G,re(M),{backwards:!0})?i:s:" ";H.push(U)}else H.push(i);let ee=m(G,g(G,$(M)));return ee!==!1&&C(G,ee)&&H.push(i),H}function x(O,R){let M=O.getValue(),H=d(O,R),{printer:P,originalText:G,locStart:re}=R,$=P.isBlockComment&&P.isBlockComment(M);if(C(G,re(M),{backwards:!0})){let ee=p(G,M,re);return a([i,ee?i:"",H])}let W=[" ",H];return $||(W=[a(W),r]),W}function F(O,R,M,H){let P=[],G=O.getValue();return!G||!G.comments||(O.each(()=>{let re=O.getValue();!re.leading&&!re.trailing&&(!H||H(re))&&P.push(d(O,R))},"comments"),P.length===0)?"":M?c(i,P):u([i,c(i,P)])}function S(O,R,M){let H=O.getValue();if(!H)return{};let P=H.comments||[];M&&(P=P.filter(W=>!M.has(W)));let G=H===R.cursorNode;if(P.length===0){let W=G?l:"";return{leading:W,trailing:W}}let re=[],$=[];return O.each(()=>{let W=O.getValue();if(M&&M.has(W))return;let{leading:ee,trailing:U}=W;ee?re.push(o(O,R)):U&&$.push(x(O,R))},"comments"),G&&(re.unshift(l),$.push(l)),{leading:re,trailing:$}}function k(O,R,M,H){let{leading:P,trailing:G}=S(O,M,H);return!P&&!G?R:[P,R,G]}function _(O){if(!!O)for(let R of O){if(!R.printed)throw new Error('Comment "'+R.value.trim()+'" was not printed. Please report this error!');delete R.printed}}n.exports={attach:B,printComments:k,printCommentsSeparately:S,printDanglingComments:F,getSortedChildNodes:A,ensureAllCommentsPrinted:_}}}),um=Z({"src/common/ast-path.js"(e,n){"use strict";ae();var t=st();function s(u,a){let c=i(u.stack,a);return c===-1?null:u.stack[c]}function i(u,a){for(let c=u.length-1;c>=0;c-=2){let l=u[c];if(l&&!Array.isArray(l)&&--a<0)return c}return-1}var r=class{constructor(u){this.stack=[u]}getName(){let{stack:u}=this,{length:a}=u;return a>1?u[a-2]:null}getValue(){return t(this.stack)}getNode(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0;return s(this,u)}getParentNode(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0;return s(this,u+1)}call(u){let{stack:a}=this,{length:c}=a,l=t(a);for(var C=arguments.length,m=new Array(C>1?C-1:0),g=1;g<C;g++)m[g-1]=arguments[g];for(let f of m)l=l[f],a.push(f,l);let p=u(this);return a.length=c,p}callParent(u){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,c=i(this.stack,a+1),l=this.stack.splice(c+1),C=u(this);return this.stack.push(...l),C}each(u){let{stack:a}=this,{length:c}=a,l=t(a);for(var C=arguments.length,m=new Array(C>1?C-1:0),g=1;g<C;g++)m[g-1]=arguments[g];for(let p of m)l=l[p],a.push(p,l);for(let p=0;p<l.length;++p)a.push(p,l[p]),u(this,p,l),a.length-=2;a.length=c}map(u){let a=[];for(var c=arguments.length,l=new Array(c>1?c-1:0),C=1;C<c;C++)l[C-1]=arguments[C];return this.each((m,g,p)=>{a[g]=u(m,g,p)},...l),a}try(u){let{stack:a}=this,c=[...a];try{return u()}finally{a.length=0,a.push(...c)}}match(){let u=this.stack.length-1,a=null,c=this.stack[u--];for(var l=arguments.length,C=new Array(l),m=0;m<l;m++)C[m]=arguments[m];for(let g of C){if(c===void 0)return!1;let p=null;if(typeof a=="number"&&(p=a,a=this.stack[u--],c=this.stack[u--]),g&&!g(c,a,p))return!1;a=this.stack[u--],c=this.stack[u--]}return!0}findAncestor(u){let a=this.stack.length-1,c=null,l=this.stack[a--];for(;l;){let C=null;if(typeof c=="number"&&(C=c,c=this.stack[a--],l=this.stack[a--]),c!==null&&u(l,c,C))return l;c=this.stack[a--],l=this.stack[a--]}}};n.exports=r}}),sm=Z({"src/main/multiparser.js"(e,n){"use strict";ae();var{utils:{stripTrailingHardline:t}}=Le(),{normalize:s}=Mi(),i=Qe();function r(a,c,l,C){if(l.printer.embed&&l.embeddedLanguageFormatting==="auto")return l.printer.embed(a,c,(m,g,p)=>u(m,g,l,C,p),l)}function u(a,c,l,C){let{stripTrailingHardline:m=!1}=arguments.length>4&&arguments[4]!==void 0?arguments[4]:{},g=s(Object.assign(Object.assign(Object.assign({},l),c),{},{parentParser:l.parser,originalText:a}),{passThrough:!0}),p=Gn().parse(a,g),{ast:f}=p;a=p.text;let h=f.comments;delete f.comments,i.attach(h,f,a,g),g[Symbol.for("comments")]=h||[],g[Symbol.for("tokens")]=f.tokens||[];let N=C(f,g);return i.ensureAllCommentsPrinted(h),m?typeof N=="string"?N.replace(/(?:\r?\n)*$/,""):t(N):N}n.exports={printSubtree:r}}}),am=Z({"src/main/ast-to-doc.js"(e,n){"use strict";ae();var t=um(),{builders:{hardline:s,addAlignmentToDoc:i},utils:{propagateBreaks:r}}=Le(),{printComments:u}=Qe(),a=sm();function c(m,g){let p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,{printer:f}=g;f.preprocess&&(m=f.preprocess(m,g));let h=new Map,N=new t(m),T=A();return p>0&&(T=i([s,T],p,g.tabWidth)),r(T),T;function A(v,B){return v===void 0||v===N?b(B):Array.isArray(v)?N.call(()=>b(B),...v):N.call(()=>b(B),v)}function b(v){let B=N.getValue(),w=B&&typeof B=="object"&&v===void 0;if(w&&h.has(B))return h.get(B);let I=C(N,g,A,v);return w&&h.set(B,I),I}}function l(m,g){let{originalText:p,[Symbol.for("comments")]:f,locStart:h,locEnd:N}=g,T=h(m),A=N(m),b=new Set;for(let v of f)h(v)>=T&&N(v)<=A&&(v.printed=!0,b.add(v));return{doc:p.slice(T,A),printedComments:b}}function C(m,g,p,f){let h=m.getValue(),{printer:N}=g,T,A;if(N.hasPrettierIgnore&&N.hasPrettierIgnore(m))({doc:T,printedComments:A}=l(h,g));else{if(h)try{T=a.printSubtree(m,p,g,c)}catch(b){if(globalThis.PRETTIER_DEBUG)throw b}T||(T=N.print(m,g,p,f))}return(!N.willPrintOwnComments||!N.willPrintOwnComments(m,g))&&(T=u(m,T,g,A)),T}n.exports=c}}),im=Z({"src/main/range-util.js"(e,n){"use strict";ae();var t=Ut(),s=Qe(),i=f=>{let{parser:h}=f;return h==="json"||h==="json5"||h==="json-stringify"};function r(f,h){let N=[f.node,...f.parentNodes],T=new Set([h.node,...h.parentNodes]);return N.find(A=>C.has(A.type)&&T.has(A))}function u(f){let h=f.length-1;for(;;){let N=f[h];if(N&&(N.type==="Program"||N.type==="File"))h--;else break}return f.slice(0,h+1)}function a(f,h,N){let{locStart:T,locEnd:A}=N,b=f.node,v=h.node;if(b===v)return{startNode:b,endNode:v};let B=T(f.node);for(let I of u(h.parentNodes))if(T(I)>=B)v=I;else break;let w=A(h.node);for(let I of u(f.parentNodes))if(A(I)<=w)b=I;else break;return{startNode:b,endNode:v}}function c(f,h,N,T){let A=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[],b=arguments.length>5?arguments[5]:void 0,{locStart:v,locEnd:B}=N,w=v(f),I=B(f);if(!(h>I||h<w||b==="rangeEnd"&&h===w||b==="rangeStart"&&h===I)){for(let E of s.getSortedChildNodes(f,N)){let D=c(E,h,N,T,[f,...A],b);if(D)return D}if(!T||T(f,A[0]))return{node:f,parentNodes:A}}}function l(f,h){return h!=="DeclareExportDeclaration"&&f!=="TypeParameterDeclaration"&&(f==="Directive"||f==="TypeAlias"||f==="TSExportAssignment"||f.startsWith("Declare")||f.startsWith("TSDeclare")||f.endsWith("Statement")||f.endsWith("Declaration"))}var C=new Set(["ObjectExpression","ArrayExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","UnaryExpression","TemplateLiteral"]),m=new Set(["OperationDefinition","FragmentDefinition","VariableDefinition","TypeExtensionDefinition","ObjectTypeDefinition","FieldDefinition","DirectiveDefinition","EnumTypeDefinition","EnumValueDefinition","InputValueDefinition","InputObjectTypeDefinition","SchemaDefinition","OperationTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","ScalarTypeDefinition"]);function g(f,h,N){if(!h)return!1;switch(f.parser){case"flow":case"babel":case"babel-flow":case"babel-ts":case"typescript":case"acorn":case"espree":case"meriyah":case"__babel_estree":return l(h.type,N&&N.type);case"json":case"json5":case"json-stringify":return C.has(h.type);case"graphql":return m.has(h.kind);case"vue":return h.tag!=="root"}return!1}function p(f,h,N){let{rangeStart:T,rangeEnd:A,locStart:b,locEnd:v}=h;t.ok(A>T);let B=f.slice(T,A).search(/\S/),w=B===-1;if(!w)for(T+=B;A>T&&!/\S/.test(f[A-1]);--A);let I=c(N,T,h,(y,o)=>g(h,y,o),[],"rangeStart"),E=w?I:c(N,A,h,y=>g(h,y),[],"rangeEnd");if(!I||!E)return{rangeStart:0,rangeEnd:0};let D,d;if(i(h)){let y=r(I,E);D=y,d=y}else({startNode:D,endNode:d}=a(I,E,h));return{rangeStart:Math.min(b(D),b(d)),rangeEnd:Math.max(v(D),v(d))}}n.exports={calculateRange:p,findNodeAtOffset:c}}}),om=Z({"src/main/core.js"(e,n){"use strict";ae();var{diffArrays:t}=rD(),{printer:{printDocToString:s},debug:{printDocToDebug:i}}=Le(),{getAlignmentSize:r}=Ge(),{guessEndOfLine:u,convertEndOfLineToChars:a,countEndOfLineChars:c,normalizeEndOfLine:l}=On(),C=Mi().normalize,m=nm(),g=Qe(),p=Gn(),f=am(),h=im(),N="\uFEFF",T=Symbol("cursor");function A(d,y,o){let x=y.comments;return x&&(delete y.comments,g.attach(x,y,d,o)),o[Symbol.for("comments")]=x||[],o[Symbol.for("tokens")]=y.tokens||[],o.originalText=d,x}function b(d,y){let o=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0;if(!d||d.trim().length===0)return{formatted:"",cursorOffset:-1,comments:[]};let{ast:x,text:F}=p.parse(d,y);if(y.cursorOffset>=0){let O=h.findNodeAtOffset(x,y.cursorOffset,y);O&&O.node&&(y.cursorNode=O.node)}let S=A(F,x,y),k=f(x,y,o),_=s(k,y);if(g.ensureAllCommentsPrinted(S),o>0){let O=_.formatted.trim();_.cursorNodeStart!==void 0&&(_.cursorNodeStart-=_.formatted.indexOf(O)),_.formatted=O+a(y.endOfLine)}if(y.cursorOffset>=0){let O,R,M,H,P;if(y.cursorNode&&_.cursorNodeText?(O=y.locStart(y.cursorNode),R=F.slice(O,y.locEnd(y.cursorNode)),M=y.cursorOffset-O,H=_.cursorNodeStart,P=_.cursorNodeText):(O=0,R=F,M=y.cursorOffset,H=0,P=_.formatted),R===P)return{formatted:_.formatted,cursorOffset:H+M,comments:S};let G=[...R];G.splice(M,0,T);let re=[...P],$=t(G,re),W=H;for(let ee of $)if(ee.removed){if(ee.value.includes(T))break}else W+=ee.count;return{formatted:_.formatted,cursorOffset:W,comments:S}}return{formatted:_.formatted,cursorOffset:-1,comments:S}}function v(d,y){let{ast:o,text:x}=p.parse(d,y),{rangeStart:F,rangeEnd:S}=h.calculateRange(x,y,o),k=x.slice(F,S),_=Math.min(F,x.lastIndexOf(`
`,F)+1),O=x.slice(_,F).match(/^\s*/)[0],R=r(O,y.tabWidth),M=b(k,Object.assign(Object.assign({},y),{},{rangeStart:0,rangeEnd:Number.POSITIVE_INFINITY,cursorOffset:y.cursorOffset>F&&y.cursorOffset<=S?y.cursorOffset-F:-1,endOfLine:"lf"}),R),H=M.formatted.trimEnd(),{cursorOffset:P}=y;P>S?P+=H.length-k.length:M.cursorOffset>=0&&(P=M.cursorOffset+F);let G=x.slice(0,F)+H+x.slice(S);if(y.endOfLine!=="lf"){let re=a(y.endOfLine);P>=0&&re===`\r
`&&(P+=c(G.slice(0,P),`
`)),G=G.replace(/\n/g,re)}return{formatted:G,cursorOffset:P,comments:M.comments}}function B(d,y,o){return typeof y!="number"||Number.isNaN(y)||y<0||y>d.length?o:y}function w(d,y){let{cursorOffset:o,rangeStart:x,rangeEnd:F}=y;return o=B(d,o,-1),x=B(d,x,0),F=B(d,F,d.length),Object.assign(Object.assign({},y),{},{cursorOffset:o,rangeStart:x,rangeEnd:F})}function I(d,y){let{cursorOffset:o,rangeStart:x,rangeEnd:F,endOfLine:S}=w(d,y),k=d.charAt(0)===N;if(k&&(d=d.slice(1),o--,x--,F--),S==="auto"&&(S=u(d)),d.includes("\r")){let _=O=>c(d.slice(0,Math.max(O,0)),`\r
`);o-=_(o),x-=_(x),F-=_(F),d=l(d)}return{hasBOM:k,text:d,options:w(d,Object.assign(Object.assign({},y),{},{cursorOffset:o,rangeStart:x,rangeEnd:F,endOfLine:S}))}}function E(d,y){let o=p.resolveParser(y);return!o.hasPragma||o.hasPragma(d)}function D(d,y){let{hasBOM:o,text:x,options:F}=I(d,C(y));if(F.rangeStart>=F.rangeEnd&&x!==""||F.requirePragma&&!E(x,F))return{formatted:d,cursorOffset:y.cursorOffset,comments:[]};let S;return F.rangeStart>0||F.rangeEnd<x.length?S=v(x,F):(!F.requirePragma&&F.insertPragma&&F.printer.insertPragma&&!E(x,F)&&(x=F.printer.insertPragma(x)),S=b(x,F)),o&&(S.formatted=N+S.formatted,S.cursorOffset>=0&&S.cursorOffset++),S}n.exports={formatWithCursor:D,parse(d,y,o){let{text:x,options:F}=I(d,C(y)),S=p.parse(x,F);return o&&(S.ast=m(S.ast,F)),S},formatAST(d,y){y=C(y);let o=f(d,y);return s(o,y)},formatDoc(d,y){return D(i(d),Object.assign(Object.assign({},y),{},{parser:"__js_expression"})).formatted},printToDoc(d,y){y=C(y);let{ast:o,text:x}=p.parse(d,y);return A(x,o,y),f(o,y)},printDocToString(d,y){return s(d,C(y))}}}}),cm=Z({"src/common/util-shared.js"(e,n){"use strict";ae();var{getMaxContinuousCount:t,getStringWidth:s,getAlignmentSize:i,getIndentSize:r,skip:u,skipWhitespace:a,skipSpaces:c,skipNewline:l,skipToLineEnd:C,skipEverythingButNewLine:m,skipInlineComment:g,skipTrailingComment:p,hasNewline:f,hasNewlineInRange:h,hasSpaces:N,isNextLineEmpty:T,isNextLineEmptyAfterIndex:A,isPreviousLineEmpty:b,getNextNonSpaceNonCommentCharacterIndex:v,makeString:B,addLeadingComment:w,addDanglingComment:I,addTrailingComment:E}=Ge();n.exports={getMaxContinuousCount:t,getStringWidth:s,getAlignmentSize:i,getIndentSize:r,skip:u,skipWhitespace:a,skipSpaces:c,skipNewline:l,skipToLineEnd:C,skipEverythingButNewLine:m,skipInlineComment:g,skipTrailingComment:p,hasNewline:f,hasNewlineInRange:h,hasSpaces:N,isNextLineEmpty:T,isNextLineEmptyAfterIndex:A,isPreviousLineEmpty:b,getNextNonSpaceNonCommentCharacterIndex:v,makeString:B,addLeadingComment:w,addDanglingComment:I,addTrailingComment:E}}}),bt=Z({"src/utils/create-language.js"(e,n){"use strict";ae(),n.exports=function(t,s){let{languageId:i}=t,r=_n(t,Kf);return Object.assign(Object.assign({linguistLanguageId:i},r),s(t))}}}),lm=Z({"node_modules/esutils/lib/ast.js"(e,n){ae(),function(){"use strict";function t(c){if(c==null)return!1;switch(c.type){case"ArrayExpression":case"AssignmentExpression":case"BinaryExpression":case"CallExpression":case"ConditionalExpression":case"FunctionExpression":case"Identifier":case"Literal":case"LogicalExpression":case"MemberExpression":case"NewExpression":case"ObjectExpression":case"SequenceExpression":case"ThisExpression":case"UnaryExpression":case"UpdateExpression":return!0}return!1}function s(c){if(c==null)return!1;switch(c.type){case"DoWhileStatement":case"ForInStatement":case"ForStatement":case"WhileStatement":return!0}return!1}function i(c){if(c==null)return!1;switch(c.type){case"BlockStatement":case"BreakStatement":case"ContinueStatement":case"DebuggerStatement":case"DoWhileStatement":case"EmptyStatement":case"ExpressionStatement":case"ForInStatement":case"ForStatement":case"IfStatement":case"LabeledStatement":case"ReturnStatement":case"SwitchStatement":case"ThrowStatement":case"TryStatement":case"VariableDeclaration":case"WhileStatement":case"WithStatement":return!0}return!1}function r(c){return i(c)||c!=null&&c.type==="FunctionDeclaration"}function u(c){switch(c.type){case"IfStatement":return c.alternate!=null?c.alternate:c.consequent;case"LabeledStatement":case"ForStatement":case"ForInStatement":case"WhileStatement":case"WithStatement":return c.body}return null}function a(c){var l;if(c.type!=="IfStatement"||c.alternate==null)return!1;l=c.consequent;do{if(l.type==="IfStatement"&&l.alternate==null)return!0;l=u(l)}while(l);return!1}n.exports={isExpression:t,isStatement:i,isIterationStatement:s,isSourceElement:r,isProblematicIfStatement:a,trailingStatement:u}}()}}),Ri=Z({"node_modules/esutils/lib/code.js"(e,n){ae(),function(){"use strict";var t,s,i,r,u,a;s={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,NonAsciiIdentifierPart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/},t={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};function c(A){return 48<=A&&A<=57}function l(A){return 48<=A&&A<=57||97<=A&&A<=102||65<=A&&A<=70}function C(A){return A>=48&&A<=55}i=[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279];function m(A){return A===32||A===9||A===11||A===12||A===160||A>=5760&&i.indexOf(A)>=0}function g(A){return A===10||A===13||A===8232||A===8233}function p(A){if(A<=65535)return String.fromCharCode(A);var b=String.fromCharCode(Math.floor((A-65536)/1024)+55296),v=String.fromCharCode((A-65536)%1024+56320);return b+v}for(r=new Array(128),a=0;a<128;++a)r[a]=a>=97&&a<=122||a>=65&&a<=90||a===36||a===95;for(u=new Array(128),a=0;a<128;++a)u[a]=a>=97&&a<=122||a>=65&&a<=90||a>=48&&a<=57||a===36||a===95;function f(A){return A<128?r[A]:s.NonAsciiIdentifierStart.test(p(A))}function h(A){return A<128?u[A]:s.NonAsciiIdentifierPart.test(p(A))}function N(A){return A<128?r[A]:t.NonAsciiIdentifierStart.test(p(A))}function T(A){return A<128?u[A]:t.NonAsciiIdentifierPart.test(p(A))}n.exports={isDecimalDigit:c,isHexDigit:l,isOctalDigit:C,isWhiteSpace:m,isLineTerminator:g,isIdentifierStartES5:f,isIdentifierPartES5:h,isIdentifierStartES6:N,isIdentifierPartES6:T}}()}}),pm=Z({"node_modules/esutils/lib/keyword.js"(e,n){ae(),function(){"use strict";var t=Ri();function s(f){switch(f){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"let":return!0;default:return!1}}function i(f,h){return!h&&f==="yield"?!1:r(f,h)}function r(f,h){if(h&&s(f))return!0;switch(f.length){case 2:return f==="if"||f==="in"||f==="do";case 3:return f==="var"||f==="for"||f==="new"||f==="try";case 4:return f==="this"||f==="else"||f==="case"||f==="void"||f==="with"||f==="enum";case 5:return f==="while"||f==="break"||f==="catch"||f==="throw"||f==="const"||f==="yield"||f==="class"||f==="super";case 6:return f==="return"||f==="typeof"||f==="delete"||f==="switch"||f==="export"||f==="import";case 7:return f==="default"||f==="finally"||f==="extends";case 8:return f==="function"||f==="continue"||f==="debugger";case 10:return f==="instanceof";default:return!1}}function u(f,h){return f==="null"||f==="true"||f==="false"||i(f,h)}function a(f,h){return f==="null"||f==="true"||f==="false"||r(f,h)}function c(f){return f==="eval"||f==="arguments"}function l(f){var h,N,T;if(f.length===0||(T=f.charCodeAt(0),!t.isIdentifierStartES5(T)))return!1;for(h=1,N=f.length;h<N;++h)if(T=f.charCodeAt(h),!t.isIdentifierPartES5(T))return!1;return!0}function C(f,h){return(f-55296)*1024+(h-56320)+65536}function m(f){var h,N,T,A,b;if(f.length===0)return!1;for(b=t.isIdentifierStartES6,h=0,N=f.length;h<N;++h){if(T=f.charCodeAt(h),55296<=T&&T<=56319){if(++h,h>=N||(A=f.charCodeAt(h),!(56320<=A&&A<=57343)))return!1;T=C(T,A)}if(!b(T))return!1;b=t.isIdentifierPartES6}return!0}function g(f,h){return l(f)&&!u(f,h)}function p(f,h){return m(f)&&!a(f,h)}n.exports={isKeywordES5:i,isKeywordES6:r,isReservedWordES5:u,isReservedWordES6:a,isRestrictedWord:c,isIdentifierNameES5:l,isIdentifierNameES6:m,isIdentifierES5:g,isIdentifierES6:p}}()}}),fm=Z({"node_modules/esutils/lib/utils.js"(e){ae(),function(){"use strict";e.ast=lm(),e.code=Ri(),e.keyword=pm()}()}}),Pt=Z({"src/language-js/utils/is-block-comment.js"(e,n){"use strict";ae();function t(s){return s.type==="Block"||s.type==="CommentBlock"||s.type==="MultiLine"}n.exports=t}}),Xe=Z({"src/language-js/utils/index.js"(e,n){"use strict";ae();var t=fm().keyword.isIdentifierNameES5,{getLast:s,hasNewline:i,skipWhitespace:r,isNonEmptyArray:u,isNextLineEmptyAfterIndex:a,getStringWidth:c}=Ge(),{locStart:l,locEnd:C,hasSameLocStart:m}=nt(),g=Pt(),p="(?:(?=.)\\s)",f=new RegExp("^".concat(p,"*:")),h=new RegExp("^".concat(p,"*::"));function N(L){return L.extra&&L.extra.parenthesized&&u(L.trailingComments)&&g(L.trailingComments[0])&&f.test(L.trailingComments[0].value)}function T(L){return u(L)&&g(L[0])&&h.test(L[0].value)}function A(L,De){if(!L||typeof L!="object")return!1;if(Array.isArray(L))return L.some(We=>A(We,De));let ke=De(L);return typeof ke=="boolean"?ke:Object.values(L).some(We=>A(We,De))}function b(L){return L.type==="AssignmentExpression"||L.type==="BinaryExpression"||L.type==="LogicalExpression"||L.type==="NGPipeExpression"||L.type==="ConditionalExpression"||Ee(L)||q(L)||L.type==="SequenceExpression"||L.type==="TaggedTemplateExpression"||L.type==="BindExpression"||L.type==="UpdateExpression"&&!L.prefix||L.type==="TSAsExpression"||L.type==="TSNonNullExpression"}function v(L){return L.expressions?L.expressions[0]:L.left||L.test||L.callee||L.object||L.tag||L.argument||L.expression}function B(L,De){if(De.expressions)return["expressions",0];if(De.left)return["left"];if(De.test)return["test"];if(De.object)return["object"];if(De.callee)return["callee"];if(De.tag)return["tag"];if(De.argument)return["argument"];if(De.expression)return["expression"];throw new Error("Unexpected node has no left side.")}function w(L){return L.type==="Line"||L.type==="CommentLine"||L.type==="SingleLine"||L.type==="HashbangComment"||L.type==="HTMLOpen"||L.type==="HTMLClose"}var I=new Set(["ExportDefaultDeclaration","ExportDefaultSpecifier","DeclareExportDeclaration","ExportNamedDeclaration","ExportAllDeclaration"]);function E(L){return L&&I.has(L.type)}function D(L){let De=L.getParentNode();return L.getName()==="declaration"&&E(De)?De:null}function d(L){return L.type==="BooleanLiteral"||L.type==="DirectiveLiteral"||L.type==="Literal"||L.type==="NullLiteral"||L.type==="NumericLiteral"||L.type==="BigIntLiteral"||L.type==="DecimalLiteral"||L.type==="RegExpLiteral"||L.type==="StringLiteral"||L.type==="TemplateLiteral"||L.type==="TSTypeLiteral"||L.type==="JSXText"}function y(L){return L.type==="NumericLiteral"||L.type==="Literal"&&typeof L.value=="number"}function o(L){return L.type==="UnaryExpression"&&(L.operator==="+"||L.operator==="-")&&y(L.argument)}function x(L){return L.type==="StringLiteral"||L.type==="Literal"&&typeof L.value=="string"}function F(L){return L.type==="ObjectTypeAnnotation"||L.type==="TSTypeLiteral"||L.type==="TSMappedType"}function S(L){return L.type==="FunctionExpression"||L.type==="ArrowFunctionExpression"}function k(L){return L.type==="FunctionExpression"||L.type==="ArrowFunctionExpression"&&L.body.type==="BlockStatement"}function _(L){return L.type==="TemplateLiteral"}function O(L){return Ee(L)&&L.callee.type==="Identifier"&&["async","inject","fakeAsync","waitForAsync"].includes(L.callee.name)}function R(L){return L.type==="JSXElement"||L.type==="JSXFragment"}function M(L,De){if(L.parentParser!=="markdown"&&L.parentParser!=="mdx")return!1;let ke=De.getNode();if(!ke.expression||!R(ke.expression))return!1;let We=De.getParentNode();return We.type==="Program"&&We.body.length===1}function H(L){return L.kind==="get"||L.kind==="set"}function P(L){return H(L)||m(L,L.value)}function G(L){return(L.type==="ObjectTypeProperty"||L.type==="ObjectTypeInternalSlot")&&L.value.type==="FunctionTypeAnnotation"&&!L.static&&!P(L)}function re(L){return(L.type==="TypeAnnotation"||L.type==="TSTypeAnnotation")&&L.typeAnnotation.type==="FunctionTypeAnnotation"&&!L.static&&!m(L,L.typeAnnotation)}var $=new Set(["BinaryExpression","LogicalExpression","NGPipeExpression"]);function W(L){return $.has(L.type)}function ee(L){return q(L)||L.type==="BindExpression"&&Boolean(L.object)}var U=new Set(["AnyTypeAnnotation","TSAnyKeyword","NullLiteralTypeAnnotation","TSNullKeyword","ThisTypeAnnotation","TSThisType","NumberTypeAnnotation","TSNumberKeyword","VoidTypeAnnotation","TSVoidKeyword","BooleanTypeAnnotation","TSBooleanKeyword","BigIntTypeAnnotation","TSBigIntKeyword","SymbolTypeAnnotation","TSSymbolKeyword","StringTypeAnnotation","TSStringKeyword","BooleanLiteralTypeAnnotation","StringLiteralTypeAnnotation","BigIntLiteralTypeAnnotation","NumberLiteralTypeAnnotation","TSLiteralType","TSTemplateLiteralType","EmptyTypeAnnotation","MixedTypeAnnotation","TSNeverKeyword","TSObjectKeyword","TSUndefinedKeyword","TSUnknownKeyword"]);function ne(L){return L?!!((L.type==="GenericTypeAnnotation"||L.type==="TSTypeReference")&&!L.typeParameters||U.has(L.type)):!1}var se=/^(?:skip|[fx]?(?:it|describe|test))$/;function V(L){return q(L.callee)&&L.callee.object.type==="Identifier"&&L.callee.property.type==="Identifier"&&se.test(L.callee.object.name)&&(L.callee.property.name==="only"||L.callee.property.name==="skip")}function oe(L){let De=/^(?:before|after)(?:Each|All)$/;return L.callee.type==="Identifier"&&De.test(L.callee.name)&&L.arguments.length===1}function K(L,De){if(L.type!=="CallExpression")return!1;if(L.arguments.length===1){if(O(L)&&De&&K(De))return S(L.arguments[0]);if(oe(L))return O(L.arguments[0])}else if((L.arguments.length===2||L.arguments.length===3)&&(L.callee.type==="Identifier"&&se.test(L.callee.name)||V(L))&&(_(L.arguments[0])||x(L.arguments[0])))return L.arguments[2]&&!y(L.arguments[2])?!1:(L.arguments.length===2?S(L.arguments[1]):k(L.arguments[1])&&Ke(L.arguments[1]).length<=1)||O(L.arguments[1]);return!1}function Ee(L){return L&&(L.type==="CallExpression"||L.type==="OptionalCallExpression")}function q(L){return L&&(L.type==="MemberExpression"||L.type==="OptionalMemberExpression")}function le(L){let De="expressions";L.type==="TSTemplateLiteralType"&&(De="types");let ke=L[De];return ke.length===0?!1:ke.every(We=>{if(Me(We))return!1;if(We.type==="Identifier"||We.type==="ThisExpression")return!0;if(q(We)){let $e=We;for(;q($e);)if($e.property.type!=="Identifier"&&$e.property.type!=="Literal"&&$e.property.type!=="StringLiteral"&&$e.property.type!=="NumericLiteral"||($e=$e.object,Me($e)))return!1;return $e.type==="Identifier"||$e.type==="ThisExpression"}return!1})}function ue(L,De){return L==="+"?"+"+De:L==="-"?"-"+De:De}function Q(L,De){let ke=l(De),We=r(L,C(De));return We!==!1&&L.slice(ke,ke+2)==="/*"&&L.slice(We,We+2)==="*/"}function de(L,De){return R(De)?Ae(De):Me(De,Pe.Leading,ke=>i(L,C(ke)))}function ge(L,De){return De.parser!=="json"&&x(L.key)&&J(L.key).slice(1,-1)===L.key.value&&(t(L.key.value)&&!(De.parser==="babel-ts"&&L.type==="ClassProperty"||De.parser==="typescript"&&L.type==="PropertyDefinition")||ve(L.key.value)&&String(Number(L.key.value))===L.key.value&&(De.parser==="babel"||De.parser==="acorn"||De.parser==="espree"||De.parser==="meriyah"||De.parser==="__babel_estree"))}function ve(L){return/^(?:\d+|\d+\.\d+)$/.test(L)}function xe(L,De){let ke=/^[fx]?(?:describe|it|test)$/;return De.type==="TaggedTemplateExpression"&&De.quasi===L&&De.tag.type==="MemberExpression"&&De.tag.property.type==="Identifier"&&De.tag.property.name==="each"&&(De.tag.object.type==="Identifier"&&ke.test(De.tag.object.name)||De.tag.object.type==="MemberExpression"&&De.tag.object.property.type==="Identifier"&&(De.tag.object.property.name==="only"||De.tag.object.property.name==="skip")&&De.tag.object.object.type==="Identifier"&&ke.test(De.tag.object.object.name))}function we(L){return L.quasis.some(De=>De.value.raw.includes(`
`))}function fe(L,De){return(L.type==="TemplateLiteral"&&we(L)||L.type==="TaggedTemplateExpression"&&we(L.quasi))&&!i(De,l(L),{backwards:!0})}function pe(L){if(!Me(L))return!1;let De=s(qe(L,Pe.Dangling));return De&&!g(De)}function me(L){if(L.length<=1)return!1;let De=0;for(let ke of L)if(S(ke)){if(De+=1,De>1)return!0}else if(Ee(ke)){for(let We of ke.arguments)if(S(We))return!0}return!1}function ce(L){let De=L.getValue(),ke=L.getParentNode();return Ee(De)&&Ee(ke)&&ke.callee===De&&De.arguments.length>ke.arguments.length&&ke.arguments.length>0}function he(L,De){if(De>=2)return!1;let ke=$e=>he($e,De+1),We=L.type==="Literal"&&"regex"in L&&L.regex.pattern||L.type==="RegExpLiteral"&&L.pattern;return We&&c(We)>5?!1:L.type==="Literal"||L.type==="BigIntLiteral"||L.type==="DecimalLiteral"||L.type==="BooleanLiteral"||L.type==="NullLiteral"||L.type==="NumericLiteral"||L.type==="RegExpLiteral"||L.type==="StringLiteral"||L.type==="Identifier"||L.type==="ThisExpression"||L.type==="Super"||L.type==="PrivateName"||L.type==="PrivateIdentifier"||L.type==="ArgumentPlaceholder"||L.type==="Import"?!0:L.type==="TemplateLiteral"?L.quasis.every($e=>!$e.value.raw.includes(`
`))&&L.expressions.every(ke):L.type==="ObjectExpression"?L.properties.every($e=>!$e.computed&&($e.shorthand||$e.value&&ke($e.value))):L.type==="ArrayExpression"?L.elements.every($e=>$e===null||ke($e)):rt(L)?(L.type==="ImportExpression"||he(L.callee,De))&&Be(L).every(ke):q(L)?he(L.object,De)&&he(L.property,De):L.type==="UnaryExpression"&&(L.operator==="!"||L.operator==="-")?he(L.argument,De):L.type==="TSNonNullExpression"?he(L.expression,De):!1}function J(L){return L.extra?L.extra.raw:L.raw}function ye(L){return L}function X(L){return L.filepath&&/\.tsx$/i.test(L.filepath)}function Y(L){let De=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"es5";return L.trailingComma==="es5"&&De==="es5"||L.trailingComma==="all"&&(De==="all"||De==="es5")}function te(L,De){switch(L=tt(L),L.type){case"FunctionExpression":case"ClassExpression":case"DoExpression":return De;case"ObjectExpression":return!0;case"MemberExpression":case"OptionalMemberExpression":return te(L.object,De);case"TaggedTemplateExpression":return L.tag.type==="FunctionExpression"?!1:te(L.tag,De);case"CallExpression":case"OptionalCallExpression":return L.callee.type==="FunctionExpression"?!1:te(L.callee,De);case"ConditionalExpression":return te(L.test,De);case"UpdateExpression":return!L.prefix&&te(L.argument,De);case"BindExpression":return L.object&&te(L.object,De);case"SequenceExpression":return te(L.expressions[0],De);case"TSAsExpression":case"TSNonNullExpression":return te(L.expression,De);default:return!1}}var z={"==":!0,"!=":!0,"===":!0,"!==":!0},j={"*":!0,"/":!0,"%":!0},Ce={">>":!0,">>>":!0,"<<":!0};function Ne(L,De){return!(Ue(De)!==Ue(L)||L==="**"||z[L]&&z[De]||De==="%"&&j[L]||L==="%"&&j[De]||De!==L&&j[De]&&j[L]||Ce[L]&&Ce[De])}var je={};for(let[L,De]of[["|>"],["??"],["||"],["&&"],["|"],["^"],["&"],["==","===","!=","!=="],["<",">","<=",">=","in","instanceof"],[">>","<<",">>>"],["+","-"],["*","/","%"],["**"]].entries())for(let ke of De)je[ke]=L;function Ue(L){return je[L]}function tt(L){for(;L.left;)L=L.left;return L}function Te(L){return Boolean(Ce[L])||L==="|"||L==="^"||L==="&"}function _e(L){if(L.rest)return!0;let De=Ke(L);return De.length>0&&s(De).type==="RestElement"}var Fe=new WeakMap;function Ke(L){if(Fe.has(L))return Fe.get(L);let De=[];return L.this&&De.push(L.this),Array.isArray(L.parameters)?De.push(...L.parameters):Array.isArray(L.params)&&De.push(...L.params),L.rest&&De.push(L.rest),Fe.set(L,De),De}function Se(L,De){let ke=L.getValue(),We=0,$e=ut=>De(ut,We++);ke.this&&L.call($e,"this"),Array.isArray(ke.parameters)?L.each($e,"parameters"):Array.isArray(ke.params)&&L.each($e,"params"),ke.rest&&L.call($e,"rest")}var ze=new WeakMap;function Be(L){if(ze.has(L))return ze.get(L);let De=L.arguments;return L.type==="ImportExpression"&&(De=[L.source],L.attributes&&De.push(L.attributes)),ze.set(L,De),De}function Ie(L,De){let ke=L.getValue();ke.type==="ImportExpression"?(L.call(We=>De(We,0),"source"),ke.attributes&&L.call(We=>De(We,1),"attributes")):L.each(De,"arguments")}function Ve(L){return L.value.trim()==="prettier-ignore"&&!L.unignore}function Ae(L){return L&&(L.prettierIgnore||Me(L,Pe.PrettierIgnore))}function Oe(L){let De=L.getValue();return Ae(De)}var Pe={Leading:1<<1,Trailing:1<<2,Dangling:1<<3,Block:1<<4,Line:1<<5,PrettierIgnore:1<<6,First:1<<7,Last:1<<8},ie=(L,De)=>{if(typeof L=="function"&&(De=L,L=0),L||De)return(ke,We,$e)=>!(L&Pe.Leading&&!ke.leading||L&Pe.Trailing&&!ke.trailing||L&Pe.Dangling&&(ke.leading||ke.trailing)||L&Pe.Block&&!g(ke)||L&Pe.Line&&!w(ke)||L&Pe.First&&We!==0||L&Pe.Last&&We!==$e.length-1||L&Pe.PrettierIgnore&&!Ve(ke)||De&&!De(ke))};function Me(L,De,ke){if(!L||!u(L.comments))return!1;let We=ie(De,ke);return We?L.comments.some(We):!0}function qe(L,De,ke){if(!L||!Array.isArray(L.comments))return[];let We=ie(De,ke);return We?L.comments.filter(We):L.comments}var Je=(L,De)=>{let{originalText:ke}=De;return a(ke,C(L))};function rt(L){return Ee(L)||L.type==="NewExpression"||L.type==="ImportExpression"}function Ze(L){return L&&(L.type==="ObjectProperty"||L.type==="Property"&&!L.method&&L.kind==="init")}function ct(L){return Boolean(L.__isUsingHackPipeline)}var qt=Symbol("ifWithoutBlockAndSameLineComment");n.exports={getFunctionParameters:Ke,iterateFunctionParametersPath:Se,getCallArguments:Be,iterateCallArgumentsPath:Ie,hasRestParameter:_e,getLeftSide:v,getLeftSidePathName:B,getParentExportDeclaration:D,getTypeScriptMappedTypeModifier:ue,hasFlowAnnotationComment:T,hasFlowShorthandAnnotationComment:N,hasLeadingOwnLineComment:de,hasNakedLeftSide:b,hasNode:A,hasIgnoreComment:Oe,hasNodeIgnoreComment:Ae,identity:ye,isBinaryish:W,isCallLikeExpression:rt,isEnabledHackPipeline:ct,isLineComment:w,isPrettierIgnoreComment:Ve,isCallExpression:Ee,isMemberExpression:q,isExportDeclaration:E,isFlowAnnotationComment:Q,isFunctionCompositionArgs:me,isFunctionNotation:P,isFunctionOrArrowExpression:S,isGetterOrSetter:H,isJestEachTemplateLiteral:xe,isJsxNode:R,isLiteral:d,isLongCurriedCallExpression:ce,isSimpleCallArgument:he,isMemberish:ee,isNumericLiteral:y,isSignedNumericLiteral:o,isObjectProperty:Ze,isObjectType:F,isObjectTypePropertyAFunction:G,isSimpleType:ne,isSimpleNumber:ve,isSimpleTemplateLiteral:le,isStringLiteral:x,isStringPropSafeToUnquote:ge,isTemplateOnItsOwnLine:fe,isTestCall:K,isTheOnlyJsxElementInMarkdown:M,isTSXFile:X,isTypeAnnotationAFunction:re,isNextLineEmpty:Je,needsHardlineAfterDanglingComment:pe,rawText:J,shouldPrintComma:Y,isBitwiseOperator:Te,shouldFlatten:Ne,startsWithNoLookaheadToken:te,getPrecedence:Ue,hasComment:Me,getComments:qe,CommentCheckFlags:Pe,markerForIfWithoutBlockAndSameLineComment:qt}}}),It=Z({"src/language-js/print/template-literal.js"(e,n){"use strict";ae();var t=st(),{getStringWidth:s,getIndentSize:i}=Ge(),{builders:{join:r,hardline:u,softline:a,group:c,indent:l,align:C,lineSuffixBoundary:m,addAlignmentToDoc:g},printer:{printDocToString:p},utils:{mapDoc:f}}=Le(),{isBinaryish:h,isJestEachTemplateLiteral:N,isSimpleTemplateLiteral:T,hasComment:A,isMemberExpression:b}=Xe();function v(d,y,o){let x=d.getValue();if(x.type==="TemplateLiteral"&&N(x,d.getParentNode())){let R=B(d,o,y);if(R)return R}let S="expressions";x.type==="TSTemplateLiteralType"&&(S="types");let k=[],_=d.map(y,S),O=T(x);return O&&(_=_.map(R=>p(R,Object.assign(Object.assign({},o),{},{printWidth:Number.POSITIVE_INFINITY})).formatted)),k.push(m,"`"),d.each(R=>{let M=R.getName();if(k.push(y()),M<_.length){let{tabWidth:H}=o,P=R.getValue(),G=i(P.value.raw,H),re=_[M];if(!O){let W=x[S][M];(A(W)||b(W)||W.type==="ConditionalExpression"||W.type==="SequenceExpression"||W.type==="TSAsExpression"||h(W))&&(re=[l([a,re]),a])}let $=G===0&&P.value.raw.endsWith(`
`)?C(Number.NEGATIVE_INFINITY,re):g(re,G,H);k.push(c(["${",$,m,"}"]))}},"quasis"),k.push("`"),k}function B(d,y,o){let x=d.getNode(),F=x.quasis[0].value.raw.trim().split(/\s*\|\s*/);if(F.length>1||F.some(S=>S.length>0)){y.__inJestEach=!0;let S=d.map(o,"expressions");y.__inJestEach=!1;let k=[],_=S.map(P=>"${"+p(P,Object.assign(Object.assign({},y),{},{printWidth:Number.POSITIVE_INFINITY,endOfLine:"lf"})).formatted+"}"),O=[{hasLineBreak:!1,cells:[]}];for(let P=1;P<x.quasis.length;P++){let G=t(O),re=_[P-1];G.cells.push(re),re.includes(`
`)&&(G.hasLineBreak=!0),x.quasis[P].value.raw.includes(`
`)&&O.push({hasLineBreak:!1,cells:[]})}let R=Math.max(F.length,...O.map(P=>P.cells.length)),M=Array.from({length:R}).fill(0),H=[{cells:F},...O.filter(P=>P.cells.length>0)];for(let{cells:P}of H.filter(G=>!G.hasLineBreak))for(let[G,re]of P.entries())M[G]=Math.max(M[G],s(re));return k.push(m,"`",l([u,r(u,H.map(P=>r(" | ",P.cells.map((G,re)=>P.hasLineBreak?G:G+" ".repeat(M[re]-s(G))))))]),u,"`"),k}}function w(d,y){let o=d.getValue(),x=y();return A(o)&&(x=c([l([a,x]),a])),["${",x,m,"}"]}function I(d,y){return d.map(o=>w(o,y),"expressions")}function E(d,y){return f(d,o=>typeof o=="string"?y?o.replace(/(\\*)`/g,"$1$1\\`"):D(o):o)}function D(d){return d.replace(/([\\`]|\${)/g,"\\$1")}n.exports={printTemplateLiteral:v,printTemplateExpressions:I,escapeTemplateCharacters:E,uncookTemplateElementValue:D}}}),Dm=Z({"src/language-js/embed/markdown.js"(e,n){"use strict";ae();var{builders:{indent:t,softline:s,literalline:i,dedentToRoot:r}}=Le(),{escapeTemplateCharacters:u}=It();function a(l,C,m){let p=l.getValue().quasis[0].value.raw.replace(/((?:\\\\)*)\\`/g,(T,A)=>"\\".repeat(A.length/2)+"`"),f=c(p),h=f!=="";h&&(p=p.replace(new RegExp("^".concat(f),"gm"),""));let N=u(m(p,{parser:"markdown",__inJsTemplate:!0},{stripTrailingHardline:!0}),!0);return["`",h?t([s,N]):[i,r(N)],s,"`"]}function c(l){let C=l.match(/^([^\S\n]*)\S/m);return C===null?"":C[1]}n.exports=a}}),mm=Z({"src/language-js/embed/css.js"(e,n){"use strict";ae();var{isNonEmptyArray:t}=Ge(),{builders:{indent:s,hardline:i,softline:r},utils:{mapDoc:u,replaceEndOfLine:a,cleanDoc:c}}=Le(),{printTemplateExpressions:l}=It();function C(p,f,h){let N=p.getValue(),T=N.quasis.map(w=>w.value.raw),A=0,b=T.reduce((w,I,E)=>E===0?I:w+"@prettier-placeholder-"+A+++"-id"+I,""),v=h(b,{parser:"scss"},{stripTrailingHardline:!0}),B=l(p,f);return m(v,N,B)}function m(p,f,h){if(f.quasis.length===1&&!f.quasis[0].value.raw.trim())return"``";let T=g(p,h);if(!T)throw new Error("Couldn't insert all the expressions");return["`",s([i,T]),r,"`"]}function g(p,f){if(!t(f))return p;let h=0,N=u(c(p),T=>typeof T!="string"||!T.includes("@prettier-placeholder")?T:T.split(/@prettier-placeholder-(\d+)-id/).map((A,b)=>b%2===0?a(A):(h++,f[A])));return f.length===h?N:null}n.exports=C}}),dm=Z({"src/language-js/embed/graphql.js"(e,n){"use strict";ae();var{builders:{indent:t,join:s,hardline:i}}=Le(),{escapeTemplateCharacters:r,printTemplateExpressions:u}=It();function a(l,C,m){let g=l.getValue(),p=g.quasis.length;if(p===1&&g.quasis[0].value.raw.trim()==="")return"``";let f=u(l,C),h=[];for(let N=0;N<p;N++){let T=g.quasis[N],A=N===0,b=N===p-1,v=T.value.cooked,B=v.split(`
`),w=B.length,I=f[N],E=w>2&&B[0].trim()===""&&B[1].trim()==="",D=w>2&&B[w-1].trim()===""&&B[w-2].trim()==="",d=B.every(o=>/^\s*(?:#[^\n\r]*)?$/.test(o));if(!b&&/#[^\n\r]*$/.test(B[w-1]))return null;let y=null;d?y=c(B):y=m(v,{parser:"graphql"},{stripTrailingHardline:!0}),y?(y=r(y,!1),!A&&E&&h.push(""),h.push(y),!b&&D&&h.push("")):!A&&!b&&E&&h.push(""),I&&h.push(I)}return["`",t([i,s(i,h)]),i,"`"]}function c(l){let C=[],m=!1,g=l.map(p=>p.trim());for(let[p,f]of g.entries())f!==""&&(g[p-1]===""&&m?C.push([i,f]):C.push(f),m=!0);return C.length===0?null:s(i,C)}n.exports=a}}),gm=Z({"src/language-js/embed/html.js"(e,n){"use strict";ae();var{builders:{indent:t,line:s,hardline:i,group:r},utils:{mapDoc:u}}=Le(),{printTemplateExpressions:a,uncookTemplateElementValue:c}=It(),l=0;function C(m,g,p,f,h){let{parser:N}=h,T=m.getValue(),A=l;l=l+1>>>0;let b=x=>"PRETTIER_HTML_PLACEHOLDER_".concat(x,"_").concat(A,"_IN_JS"),v=T.quasis.map((x,F,S)=>F===S.length-1?x.value.cooked:x.value.cooked+b(F)).join(""),B=a(m,g);if(B.length===0&&v.trim().length===0)return"``";let w=new RegExp(b("(\\d+)"),"g"),I=0,E=p(v,{parser:N,__onHtmlRoot(x){I=x.children.length}},{stripTrailingHardline:!0}),D=u(E,x=>{if(typeof x!="string")return x;let F=[],S=x.split(w);for(let k=0;k<S.length;k++){let _=S[k];if(k%2===0){_&&(_=c(_),f.__embeddedInHtml&&(_=_.replace(/<\/(script)\b/gi,"<\\/$1")),F.push(_));continue}let O=Number(_);F.push(B[O])}return F}),d=/^\s/.test(v)?" ":"",y=/\s$/.test(v)?" ":"",o=f.htmlWhitespaceSensitivity==="ignore"?i:d&&y?s:null;return r(o?["`",t([o,r(D)]),o,"`"]:["`",d,I>1?t(r(D)):r(D),y,"`"])}n.exports=C}}),ym=Z({"src/language-js/embed.js"(e,n){"use strict";ae();var{hasComment:t,CommentCheckFlags:s,isObjectProperty:i}=Xe(),r=Dm(),u=mm(),a=dm(),c=gm();function l(E){if(g(E)||N(E)||T(E)||p(E))return"css";if(v(E))return"graphql";if(w(E))return"html";if(f(E))return"angular";if(m(E))return"markdown"}function C(E,D,d,y){let o=E.getValue();if(o.type!=="TemplateLiteral"||I(o))return;let x=l(E);if(!!x){if(x==="markdown")return r(E,D,d);if(x==="css")return u(E,D,d);if(x==="graphql")return a(E,D,d);if(x==="html"||x==="angular")return c(E,D,d,y,{parser:x})}}function m(E){let D=E.getValue(),d=E.getParentNode();return d&&d.type==="TaggedTemplateExpression"&&D.quasis.length===1&&d.tag.type==="Identifier"&&(d.tag.name==="md"||d.tag.name==="markdown")}function g(E){let D=E.getValue(),d=E.getParentNode(),y=E.getParentNode(1);return y&&D.quasis&&d.type==="JSXExpressionContainer"&&y.type==="JSXElement"&&y.openingElement.name.name==="style"&&y.openingElement.attributes.some(o=>o.name.name==="jsx")||d&&d.type==="TaggedTemplateExpression"&&d.tag.type==="Identifier"&&d.tag.name==="css"||d&&d.type==="TaggedTemplateExpression"&&d.tag.type==="MemberExpression"&&d.tag.object.name==="css"&&(d.tag.property.name==="global"||d.tag.property.name==="resolve")}function p(E){return E.match(D=>D.type==="TemplateLiteral",(D,d)=>D.type==="ArrayExpression"&&d==="elements",(D,d)=>i(D)&&D.key.type==="Identifier"&&D.key.name==="styles"&&d==="value",...h)}function f(E){return E.match(D=>D.type==="TemplateLiteral",(D,d)=>i(D)&&D.key.type==="Identifier"&&D.key.name==="template"&&d==="value",...h)}var h=[(E,D)=>E.type==="ObjectExpression"&&D==="properties",(E,D)=>E.type==="CallExpression"&&E.callee.type==="Identifier"&&E.callee.name==="Component"&&D==="arguments",(E,D)=>E.type==="Decorator"&&D==="expression"];function N(E){let D=E.getParentNode();if(!D||D.type!=="TaggedTemplateExpression")return!1;let d=D.tag.type==="ParenthesizedExpression"?D.tag.expression:D.tag;switch(d.type){case"MemberExpression":return A(d.object)||b(d);case"CallExpression":return A(d.callee)||d.callee.type==="MemberExpression"&&(d.callee.object.type==="MemberExpression"&&(A(d.callee.object.object)||b(d.callee.object))||d.callee.object.type==="CallExpression"&&A(d.callee.object.callee));case"Identifier":return d.name==="css";default:return!1}}function T(E){let D=E.getParentNode(),d=E.getParentNode(1);return d&&D.type==="JSXExpressionContainer"&&d.type==="JSXAttribute"&&d.name.type==="JSXIdentifier"&&d.name.name==="css"}function A(E){return E.type==="Identifier"&&E.name==="styled"}function b(E){return/^[A-Z]/.test(E.object.name)&&E.property.name==="extend"}function v(E){let D=E.getValue(),d=E.getParentNode();return B(D,"GraphQL")||d&&(d.type==="TaggedTemplateExpression"&&(d.tag.type==="MemberExpression"&&d.tag.object.name==="graphql"&&d.tag.property.name==="experimental"||d.tag.type==="Identifier"&&(d.tag.name==="gql"||d.tag.name==="graphql"))||d.type==="CallExpression"&&d.callee.type==="Identifier"&&d.callee.name==="graphql")}function B(E,D){return t(E,s.Block|s.Leading,d=>{let{value:y}=d;return y===" ".concat(D," ")})}function w(E){return B(E.getValue(),"HTML")||E.match(D=>D.type==="TemplateLiteral",(D,d)=>D.type==="TaggedTemplateExpression"&&D.tag.type==="Identifier"&&D.tag.name==="html"&&d==="quasi")}function I(E){let{quasis:D}=E;return D.some(d=>{let{value:{cooked:y}}=d;return y===null})}n.exports=C}}),hm=Z({"src/language-js/clean.js"(e,n){"use strict";ae();var t=Pt(),s=new Set(["range","raw","comments","leadingComments","trailingComments","innerComments","extra","start","end","loc","flags","errors","tokens"]),i=u=>{for(let a of u.quasis)delete a.value};function r(u,a,c){if(u.type==="Program"&&delete a.sourceType,(u.type==="BigIntLiteral"||u.type==="BigIntLiteralTypeAnnotation")&&a.value&&(a.value=a.value.toLowerCase()),(u.type==="BigIntLiteral"||u.type==="Literal")&&a.bigint&&(a.bigint=a.bigint.toLowerCase()),u.type==="DecimalLiteral"&&(a.value=Number(a.value)),u.type==="Literal"&&a.decimal&&(a.decimal=Number(a.decimal)),u.type==="EmptyStatement"||u.type==="JSXText"||u.type==="JSXExpressionContainer"&&(u.expression.type==="Literal"||u.expression.type==="StringLiteral")&&u.expression.value===" ")return null;if((u.type==="Property"||u.type==="ObjectProperty"||u.type==="MethodDefinition"||u.type==="ClassProperty"||u.type==="ClassMethod"||u.type==="PropertyDefinition"||u.type==="TSDeclareMethod"||u.type==="TSPropertySignature"||u.type==="ObjectTypeProperty")&&typeof u.key=="object"&&u.key&&(u.key.type==="Literal"||u.key.type==="NumericLiteral"||u.key.type==="StringLiteral"||u.key.type==="Identifier")&&delete a.key,u.type==="JSXElement"&&u.openingElement.name.name==="style"&&u.openingElement.attributes.some(C=>C.name.name==="jsx"))for(let{type:C,expression:m}of a.children)C==="JSXExpressionContainer"&&m.type==="TemplateLiteral"&&i(m);u.type==="JSXAttribute"&&u.name.name==="css"&&u.value.type==="JSXExpressionContainer"&&u.value.expression.type==="TemplateLiteral"&&i(a.value.expression),u.type==="JSXAttribute"&&u.value&&u.value.type==="Literal"&&/["']|&quot;|&apos;/.test(u.value.value)&&(a.value.value=a.value.value.replace(/["']|&quot;|&apos;/g,'"'));let l=u.expression||u.callee;if(u.type==="Decorator"&&l.type==="CallExpression"&&l.callee.name==="Component"&&l.arguments.length===1){let C=u.expression.arguments[0].properties;for(let[m,g]of a.expression.arguments[0].properties.entries())switch(C[m].key.name){case"styles":g.value.type==="ArrayExpression"&&i(g.value.elements[0]);break;case"template":g.value.type==="TemplateLiteral"&&i(g.value);break}}if(u.type==="TaggedTemplateExpression"&&(u.tag.type==="MemberExpression"||u.tag.type==="Identifier"&&(u.tag.name==="gql"||u.tag.name==="graphql"||u.tag.name==="css"||u.tag.name==="md"||u.tag.name==="markdown"||u.tag.name==="html")||u.tag.type==="CallExpression")&&i(a.quasi),u.type==="TemplateLiteral"&&(u.leadingComments&&u.leadingComments.some(m=>t(m)&&["GraphQL","HTML"].some(g=>m.value===" ".concat(g," ")))||c.type==="CallExpression"&&c.callee.name==="graphql"||!u.leadingComments)&&i(a),u.type==="InterpreterDirective"&&(a.value=a.value.trimEnd()),(u.type==="TSIntersectionType"||u.type==="TSUnionType")&&u.types.length===1)return a.types[0]}r.ignoredProperties=s,n.exports=r}}),Vi={};kn(Vi,{EOL:()=>wn,arch:()=>Cm,cpus:()=>zi,default:()=>Zi,endianness:()=>Wi,freemem:()=>Ji,getNetworkInterfaces:()=>Qi,hostname:()=>$i,loadavg:()=>Hi,networkInterfaces:()=>Yi,platform:()=>Em,release:()=>Ki,tmpDir:()=>Bn,tmpdir:()=>Nn,totalmem:()=>Ui,type:()=>Xi,uptime:()=>Gi});function Wi(){if(typeof Fr>"u"){var e=new ArrayBuffer(2),n=new Uint8Array(e),t=new Uint16Array(e);if(n[0]=1,n[1]=2,t[0]===258)Fr="BE";else if(t[0]===513)Fr="LE";else throw new Error("unable to figure out endianess")}return Fr}function $i(){return typeof globalThis.location<"u"?globalThis.location.hostname:""}function Hi(){return[]}function Gi(){return 0}function Ji(){return Number.MAX_VALUE}function Ui(){return Number.MAX_VALUE}function zi(){return[]}function Xi(){return"Browser"}function Ki(){return typeof globalThis.navigator<"u"?globalThis.navigator.appVersion:""}function Yi(){}function Qi(){}function Cm(){return"javascript"}function Em(){return"browser"}function Bn(){return"/tmp"}var Fr,Nn,wn,Zi,vm=br({"node-modules-polyfills:os"(){ae(),Nn=Bn,wn=`
`,Zi={EOL:wn,tmpdir:Nn,tmpDir:Bn,networkInterfaces:Yi,getNetworkInterfaces:Qi,release:Ki,type:Xi,cpus:zi,totalmem:Ui,freemem:Ji,uptime:Gi,loadavg:Hi,hostname:$i,endianness:Wi}}}),Fm=Z({"node-modules-polyfills-commonjs:os"(e,n){ae();var t=(vm(),pt(Vi));if(t&&t.default){n.exports=t.default;for(let s in t)n.exports[s]=t[s]}else t&&(n.exports=t)}}),Am=Z({"node_modules/detect-newline/index.js"(e,n){"use strict";ae();var t=s=>{if(typeof s!="string")throw new TypeError("Expected a string");let i=s.match(/(?:\r?\n)/g)||[];if(i.length===0)return;let r=i.filter(a=>a===`\r
`).length,u=i.length-r;return r>u?`\r
`:`
`};n.exports=t,n.exports.graceful=s=>typeof s=="string"&&t(s)||`
`}}),Sm=Z({"node_modules/jest-docblock/build/index.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.extract=p,e.parse=h,e.parseWithComments=N,e.print=T,e.strip=f;function n(){let b=Fm();return n=function(){return b},b}function t(){let b=s(Am());return t=function(){return b},b}function s(b){return b&&b.__esModule?b:{default:b}}var i=/\*\/$/,r=/^\/\*\*/,u=/^\s*(\/\*\*?(.|\r?\n)*?\*\/)/,a=/(^|\s+)\/\/([^\r\n]*)/g,c=/^(\r?\n)+/,l=/(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g,C=/(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g,m=/(\r?\n|^) *\* ?/g,g=[];function p(b){let v=b.match(u);return v?v[0].trimLeft():""}function f(b){let v=b.match(u);return v&&v[0]?b.substring(v[0].length):b}function h(b){return N(b).pragmas}function N(b){let v=(0,t().default)(b)||n().EOL;b=b.replace(r,"").replace(i,"").replace(m,"$1");let B="";for(;B!==b;)B=b,b=b.replace(l,"".concat(v,"$1 $2").concat(v));b=b.replace(c,"").trimRight();let w=Object.create(null),I=b.replace(C,"").replace(c,"").trimRight(),E;for(;E=C.exec(b);){let D=E[2].replace(a,"");typeof w[E[1]]=="string"||Array.isArray(w[E[1]])?w[E[1]]=g.concat(w[E[1]],D):w[E[1]]=D}return{comments:I,pragmas:w}}function T(b){let{comments:v="",pragmas:B={}}=b,w=(0,t().default)(v)||n().EOL,I="/**",E=" *",D=" */",d=Object.keys(B),y=d.map(x=>A(x,B[x])).reduce((x,F)=>x.concat(F),[]).map(x=>E+" "+x+w).join("");if(!v){if(d.length===0)return"";if(d.length===1&&!Array.isArray(B[d[0]])){let x=B[d[0]];return"".concat(I," ").concat(A(d[0],x)[0]).concat(D)}}let o=v.split(w).map(x=>"".concat(E," ").concat(x)).join(w)+w;return I+w+(v?o:"")+(v&&d.length?E+w:"")+y+D}function A(b,v){return g.concat(v).map(B=>"@".concat(b," ").concat(B).trim())}}}),xm=Z({"src/language-js/utils/get-shebang.js"(e,n){"use strict";ae();function t(s){if(!s.startsWith("#!"))return"";let i=s.indexOf(`
`);return i===-1?s:s.slice(0,i)}n.exports=t}}),eo=Z({"src/language-js/pragma.js"(e,n){"use strict";ae();var{parseWithComments:t,strip:s,extract:i,print:r}=Sm(),{normalizeEndOfLine:u}=On(),a=xm();function c(m){let g=a(m);g&&(m=m.slice(g.length+1));let p=i(m),{pragmas:f,comments:h}=t(p);return{shebang:g,text:m,pragmas:f,comments:h}}function l(m){let g=Object.keys(c(m).pragmas);return g.includes("prettier")||g.includes("format")}function C(m){let{shebang:g,text:p,pragmas:f,comments:h}=c(m),N=s(p),T=r({pragmas:Object.assign({format:""},f),comments:h.trimStart()});return(g?"".concat(g,`
`):"")+u(T)+(N.startsWith(`
`)?`
`:`

`)+N}n.exports={hasPragma:l,insertPragma:C}}}),to=Z({"src/language-js/comments.js"(e,n){"use strict";ae();var{getLast:t,hasNewline:s,getNextNonSpaceNonCommentCharacterIndexWithStartIndex:i,getNextNonSpaceNonCommentCharacter:r,hasNewlineInRange:u,addLeadingComment:a,addTrailingComment:c,addDanglingComment:l,getNextNonSpaceNonCommentCharacterIndex:C,isNonEmptyArray:m}=Ge(),{getFunctionParameters:g,isPrettierIgnoreComment:p,isJsxNode:f,hasFlowShorthandAnnotationComment:h,hasFlowAnnotationComment:N,hasIgnoreComment:T,isCallLikeExpression:A,getCallArguments:b,isCallExpression:v,isMemberExpression:B,isObjectProperty:w,isLineComment:I,getComments:E,CommentCheckFlags:D,markerForIfWithoutBlockAndSameLineComment:d}=Xe(),{locStart:y,locEnd:o}=nt(),x=Pt();function F(X){return[fe,V,G,M,H,P,W,oe,de,le,Q,ge,ve,ee,K,Ee].some(Y=>Y(X))}function S(X){return[R,V,re,oe,M,H,P,W,K,q,ue,Q,xe,Ee,me].some(Y=>Y(X))}function k(X){return[fe,M,H,$,se,ee,Q,ne,U,pe,Ee,we].some(Y=>Y(X))}function _(X,Y){let te=(X.body||X.properties).find(z=>{let{type:j}=z;return j!=="EmptyStatement"});te?a(te,Y):l(X,Y)}function O(X,Y){X.type==="BlockStatement"?_(X,Y):a(X,Y)}function R(X){let{comment:Y,followingNode:te}=X;return te&&J(Y)?(a(te,Y),!0):!1}function M(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j,text:Ce}=X;if(!z||z.type!=="IfStatement"||!j)return!1;if(r(Ce,Y,o)===")")return c(te,Y),!0;if(te===z.consequent&&j===z.alternate){if(te.type==="BlockStatement")c(te,Y);else{let je=Y.type==="SingleLine"||Y.loc.start.line===Y.loc.end.line,Ue=Y.loc.start.line===te.loc.start.line;je&&Ue?l(te,Y,d):l(z,Y)}return!0}return j.type==="BlockStatement"?(_(j,Y),!0):j.type==="IfStatement"?(O(j.consequent,Y),!0):z.consequent===j?(a(j,Y),!0):!1}function H(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j,text:Ce}=X;return!z||z.type!=="WhileStatement"||!j?!1:r(Ce,Y,o)===")"?(c(te,Y),!0):j.type==="BlockStatement"?(_(j,Y),!0):z.body===j?(a(j,Y),!0):!1}function P(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j}=X;return!z||z.type!=="TryStatement"&&z.type!=="CatchClause"||!j?!1:z.type==="CatchClause"&&te?(c(te,Y),!0):j.type==="BlockStatement"?(_(j,Y),!0):j.type==="TryStatement"?(O(j.finalizer,Y),!0):j.type==="CatchClause"?(O(j.body,Y),!0):!1}function G(X){let{comment:Y,enclosingNode:te,followingNode:z}=X;return B(te)&&z&&z.type==="Identifier"?(a(te,Y),!0):!1}function re(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j,text:Ce}=X,Ne=te&&!u(Ce,o(te),y(Y));return(!te||!Ne)&&z&&(z.type==="ConditionalExpression"||z.type==="TSConditionalType")&&j?(a(j,Y),!0):!1}function $(X){let{comment:Y,precedingNode:te,enclosingNode:z}=X;return w(z)&&z.shorthand&&z.key===te&&z.value.type==="AssignmentPattern"?(c(z.value.left,Y),!0):!1}function W(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j}=X;if(z&&(z.type==="ClassDeclaration"||z.type==="ClassExpression"||z.type==="DeclareClass"||z.type==="DeclareInterface"||z.type==="InterfaceDeclaration"||z.type==="TSInterfaceDeclaration")){if(m(z.decorators)&&!(j&&j.type==="Decorator"))return c(t(z.decorators),Y),!0;if(z.body&&j===z.body)return _(z.body,Y),!0;if(j){if(z.superClass&&j===z.superClass&&te&&(te===z.id||te===z.typeParameters))return c(te,Y),!0;for(let Ce of["implements","extends","mixins"])if(z[Ce]&&j===z[Ce][0])return te&&(te===z.id||te===z.typeParameters||te===z.superClass)?c(te,Y):l(z,Y,Ce),!0}}return!1}function ee(X){let{comment:Y,precedingNode:te,enclosingNode:z,text:j}=X;return z&&te&&r(j,Y,o)==="("&&(z.type==="Property"||z.type==="TSDeclareMethod"||z.type==="TSAbstractMethodDefinition")&&te.type==="Identifier"&&z.key===te&&r(j,te,o)!==":"||te&&z&&te.type==="Decorator"&&(z.type==="ClassMethod"||z.type==="ClassProperty"||z.type==="PropertyDefinition"||z.type==="TSAbstractPropertyDefinition"||z.type==="TSAbstractMethodDefinition"||z.type==="TSDeclareMethod"||z.type==="MethodDefinition")?(c(te,Y),!0):!1}function U(X){let{comment:Y,precedingNode:te,enclosingNode:z,text:j}=X;return r(j,Y,o)!=="("?!1:te&&z&&(z.type==="FunctionDeclaration"||z.type==="FunctionExpression"||z.type==="ClassMethod"||z.type==="MethodDefinition"||z.type==="ObjectMethod")?(c(te,Y),!0):!1}function ne(X){let{comment:Y,enclosingNode:te,text:z}=X;if(!(te&&te.type==="ArrowFunctionExpression"))return!1;let j=C(z,Y,o);return j!==!1&&z.slice(j,j+2)==="=>"?(l(te,Y),!0):!1}function se(X){let{comment:Y,enclosingNode:te,text:z}=X;return r(z,Y,o)!==")"?!1:te&&(ce(te)&&g(te).length===0||A(te)&&b(te).length===0)?(l(te,Y),!0):te&&(te.type==="MethodDefinition"||te.type==="TSAbstractMethodDefinition")&&g(te.value).length===0?(l(te.value,Y),!0):!1}function V(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j,text:Ce}=X;if(te&&te.type==="FunctionTypeParam"&&z&&z.type==="FunctionTypeAnnotation"&&j&&j.type!=="FunctionTypeParam"||te&&(te.type==="Identifier"||te.type==="AssignmentPattern")&&z&&ce(z)&&r(Ce,Y,o)===")")return c(te,Y),!0;if(z&&z.type==="FunctionDeclaration"&&j&&j.type==="BlockStatement"){let Ne=(()=>{let je=g(z);if(je.length>0)return i(Ce,o(t(je)));let Ue=i(Ce,o(z.id));return Ue!==!1&&i(Ce,Ue+1)})();if(y(Y)>Ne)return _(j,Y),!0}return!1}function oe(X){let{comment:Y,enclosingNode:te}=X;return te&&te.type==="ImportSpecifier"?(a(te,Y),!0):!1}function K(X){let{comment:Y,enclosingNode:te}=X;return te&&te.type==="LabeledStatement"?(a(te,Y),!0):!1}function Ee(X){let{comment:Y,enclosingNode:te}=X;return te&&(te.type==="ContinueStatement"||te.type==="BreakStatement")&&!te.label?(c(te,Y),!0):!1}function q(X){let{comment:Y,precedingNode:te,enclosingNode:z}=X;return v(z)&&te&&z.callee===te&&z.arguments.length>0?(a(z.arguments[0],Y),!0):!1}function le(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j}=X;return z&&(z.type==="UnionTypeAnnotation"||z.type==="TSUnionType")?(p(Y)&&(j.prettierIgnore=!0,Y.unignore=!0),te?(c(te,Y),!0):!1):(j&&(j.type==="UnionTypeAnnotation"||j.type==="TSUnionType")&&p(Y)&&(j.types[0].prettierIgnore=!0,Y.unignore=!0),!1)}function ue(X){let{comment:Y,enclosingNode:te}=X;return w(te)?(a(te,Y),!0):!1}function Q(X){let{comment:Y,enclosingNode:te,followingNode:z,ast:j,isLastComment:Ce}=X;return j&&j.body&&j.body.length===0?(Ce?l(j,Y):a(j,Y),!0):te&&te.type==="Program"&&te.body.length===0&&!m(te.directives)?(Ce?l(te,Y):a(te,Y),!0):z&&z.type==="Program"&&z.body.length===0&&te&&te.type==="ModuleExpression"?(l(z,Y),!0):!1}function de(X){let{comment:Y,enclosingNode:te}=X;return te&&(te.type==="ForInStatement"||te.type==="ForOfStatement")?(a(te,Y),!0):!1}function ge(X){let{comment:Y,precedingNode:te,enclosingNode:z,text:j}=X;return te&&te.type==="ImportSpecifier"&&z&&z.type==="ImportDeclaration"&&s(j,o(Y))?(c(te,Y),!0):!1}function ve(X){let{comment:Y,enclosingNode:te}=X;return te&&te.type==="AssignmentPattern"?(a(te,Y),!0):!1}function xe(X){let{comment:Y,enclosingNode:te,followingNode:z}=X;return te&&(te.type==="VariableDeclarator"||te.type==="AssignmentExpression"||te.type==="TypeAlias"||te.type==="TSTypeAliasDeclaration")&&z&&(z.type==="ObjectExpression"||z.type==="ArrayExpression"||z.type==="TemplateLiteral"||z.type==="TaggedTemplateExpression"||z.type==="ObjectTypeAnnotation"||z.type==="TSTypeLiteral"||x(Y))?(a(z,Y),!0):!1}function we(X){let{comment:Y,enclosingNode:te,followingNode:z,text:j}=X;return!z&&te&&(te.type==="TSMethodSignature"||te.type==="TSDeclareFunction"||te.type==="TSAbstractMethodDefinition")&&r(j,Y,o)===";"?(c(te,Y),!0):!1}function fe(X){let{comment:Y,enclosingNode:te,followingNode:z}=X;if(p(Y)&&te&&te.type==="TSMappedType"&&z&&z.type==="TSTypeParameter"&&z.constraint)return te.prettierIgnore=!0,Y.unignore=!0,!0}function pe(X){let{comment:Y,precedingNode:te,enclosingNode:z,followingNode:j}=X;return!z||z.type!=="TSMappedType"?!1:j&&j.type==="TSTypeParameter"&&j.name?(a(j.name,Y),!0):te&&te.type==="TSTypeParameter"&&te.constraint?(c(te.constraint,Y),!0):!1}function me(X){let{comment:Y,enclosingNode:te,followingNode:z}=X;return!te||te.type!=="SwitchCase"||te.test?!1:(z.type==="BlockStatement"&&I(Y)?_(z,Y):l(te,Y),!0)}function ce(X){return X.type==="ArrowFunctionExpression"||X.type==="FunctionExpression"||X.type==="FunctionDeclaration"||X.type==="ObjectMethod"||X.type==="ClassMethod"||X.type==="TSDeclareFunction"||X.type==="TSCallSignatureDeclaration"||X.type==="TSConstructSignatureDeclaration"||X.type==="TSMethodSignature"||X.type==="TSConstructorType"||X.type==="TSFunctionType"||X.type==="TSDeclareMethod"}function he(X,Y){if((Y.parser==="typescript"||Y.parser==="flow"||Y.parser==="acorn"||Y.parser==="espree"||Y.parser==="meriyah"||Y.parser==="__babel_estree")&&X.type==="MethodDefinition"&&X.value&&X.value.type==="FunctionExpression"&&g(X.value).length===0&&!X.value.returnType&&!m(X.value.typeParameters)&&X.value.body)return[...X.decorators||[],X.key,X.value.body]}function J(X){return x(X)&&X.value[0]==="*"&&/@type\b/.test(X.value)}function ye(X){let Y=X.getValue(),te=X.getParentNode(),z=j=>N(E(j,D.Leading))||N(E(j,D.Trailing));return(Y&&(f(Y)||h(Y)||v(te)&&z(Y))||te&&(te.type==="JSXSpreadAttribute"||te.type==="JSXSpreadChild"||te.type==="UnionTypeAnnotation"||te.type==="TSUnionType"||(te.type==="ClassDeclaration"||te.type==="ClassExpression")&&te.superClass===Y))&&(!T(X)||te.type==="UnionTypeAnnotation"||te.type==="TSUnionType")}n.exports={handleOwnLineComment:F,handleEndOfLineComment:S,handleRemainingComment:k,isTypeCastComment:J,getCommentChildNodes:he,willPrintOwnComments:ye}}}),kt=Z({"src/language-js/needs-parens.js"(e,n){"use strict";ae();var t=st(),s=Rn(),{getFunctionParameters:i,getLeftSidePathName:r,hasFlowShorthandAnnotationComment:u,hasNakedLeftSide:a,hasNode:c,isBitwiseOperator:l,startsWithNoLookaheadToken:C,shouldFlatten:m,getPrecedence:g,isCallExpression:p,isMemberExpression:f,isObjectProperty:h}=Xe();function N(I,E){let D=I.getParentNode();if(!D)return!1;let d=I.getName(),y=I.getNode();if(E.__isInHtmlInterpolation&&!E.bracketSpacing&&v(y)&&B(I))return!0;if(T(y))return!1;if(E.parser!=="flow"&&u(I.getValue()))return!0;if(y.type==="Identifier")return!!(y.extra&&y.extra.parenthesized&&/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(y.name)||d==="left"&&y.name==="async"&&D.type==="ForOfStatement"&&!D.await);switch(D.type){case"ParenthesizedExpression":return!1;case"ClassDeclaration":case"ClassExpression":{if(d==="superClass"&&(y.type==="ArrowFunctionExpression"||y.type==="AssignmentExpression"||y.type==="AwaitExpression"||y.type==="BinaryExpression"||y.type==="ConditionalExpression"||y.type==="LogicalExpression"||y.type==="NewExpression"||y.type==="ObjectExpression"||y.type==="SequenceExpression"||y.type==="TaggedTemplateExpression"||y.type==="UnaryExpression"||y.type==="UpdateExpression"||y.type==="YieldExpression"||y.type==="TSNonNullExpression"))return!0;break}case"ExportDefaultDeclaration":return w(I,E)||y.type==="SequenceExpression";case"Decorator":{if(d==="expression"){let o=!1,x=!1,F=y;for(;F;)switch(F.type){case"MemberExpression":x=!0,F=F.object;break;case"CallExpression":if(x||o)return E.parser!=="typescript";o=!0,F=F.callee;break;case"Identifier":return!1;case"TaggedTemplateExpression":return E.parser!=="typescript";default:return!0}return!0}break}case"ExpressionStatement":{if(C(y,!0))return!0;break}case"ArrowFunctionExpression":{if(d==="body"&&y.type!=="SequenceExpression"&&C(y,!1))return!0;break}}switch(y.type){case"UpdateExpression":if(D.type==="UnaryExpression")return y.prefix&&(y.operator==="++"&&D.operator==="+"||y.operator==="--"&&D.operator==="-");case"UnaryExpression":switch(D.type){case"UnaryExpression":return y.operator===D.operator&&(y.operator==="+"||y.operator==="-");case"BindExpression":return!0;case"MemberExpression":case"OptionalMemberExpression":return d==="object";case"TaggedTemplateExpression":return!0;case"NewExpression":case"CallExpression":case"OptionalCallExpression":return d==="callee";case"BinaryExpression":return d==="left"&&D.operator==="**";case"TSNonNullExpression":return!0;default:return!1}case"BinaryExpression":{if(D.type==="UpdateExpression"||y.operator==="in"&&A(I))return!0;if(y.operator==="|>"&&y.extra&&y.extra.parenthesized){let o=I.getParentNode(1);if(o.type==="BinaryExpression"&&o.operator==="|>")return!0}}case"TSTypeAssertion":case"TSAsExpression":case"LogicalExpression":switch(D.type){case"TSAsExpression":return y.type!=="TSAsExpression";case"ConditionalExpression":return y.type==="TSAsExpression";case"CallExpression":case"NewExpression":case"OptionalCallExpression":return d==="callee";case"ClassExpression":case"ClassDeclaration":return d==="superClass";case"TSTypeAssertion":case"TaggedTemplateExpression":case"UnaryExpression":case"JSXSpreadAttribute":case"SpreadElement":case"SpreadProperty":case"BindExpression":case"AwaitExpression":case"TSNonNullExpression":case"UpdateExpression":return!0;case"MemberExpression":case"OptionalMemberExpression":return d==="object";case"AssignmentExpression":case"AssignmentPattern":return d==="left"&&(y.type==="TSTypeAssertion"||y.type==="TSAsExpression");case"LogicalExpression":if(y.type==="LogicalExpression")return D.operator!==y.operator;case"BinaryExpression":{let{operator:o,type:x}=y;if(!o&&x!=="TSTypeAssertion")return!0;let F=g(o),S=D.operator,k=g(S);return k>F||d==="right"&&k===F||k===F&&!m(S,o)?!0:k<F&&o==="%"?S==="+"||S==="-":!!l(S)}default:return!1}case"SequenceExpression":switch(D.type){case"ReturnStatement":return!1;case"ForStatement":return!1;case"ExpressionStatement":return d!=="expression";case"ArrowFunctionExpression":return d!=="body";default:return!0}case"YieldExpression":if(D.type==="UnaryExpression"||D.type==="AwaitExpression"||D.type==="TSAsExpression"||D.type==="TSNonNullExpression")return!0;case"AwaitExpression":switch(D.type){case"TaggedTemplateExpression":case"UnaryExpression":case"LogicalExpression":case"SpreadElement":case"SpreadProperty":case"TSAsExpression":case"TSNonNullExpression":case"BindExpression":return!0;case"MemberExpression":case"OptionalMemberExpression":return d==="object";case"NewExpression":case"CallExpression":case"OptionalCallExpression":return d==="callee";case"ConditionalExpression":return d==="test";case"BinaryExpression":return!(!y.argument&&D.operator==="|>");default:return!1}case"TSConditionalType":if(d==="extendsType"&&D.type==="TSConditionalType")return!0;case"TSFunctionType":case"TSConstructorType":if(d==="checkType"&&D.type==="TSConditionalType")return!0;case"TSUnionType":case"TSIntersectionType":if((D.type==="TSUnionType"||D.type==="TSIntersectionType")&&D.types.length>1&&(!y.types||y.types.length>1))return!0;case"TSInferType":if(y.type==="TSInferType"&&D.type==="TSRestType")return!1;case"TSTypeOperator":return D.type==="TSArrayType"||D.type==="TSOptionalType"||D.type==="TSRestType"||d==="objectType"&&D.type==="TSIndexedAccessType"||D.type==="TSTypeOperator"||D.type==="TSTypeAnnotation"&&I.getParentNode(1).type.startsWith("TSJSDoc");case"ArrayTypeAnnotation":return D.type==="NullableTypeAnnotation";case"IntersectionTypeAnnotation":case"UnionTypeAnnotation":return D.type==="ArrayTypeAnnotation"||D.type==="NullableTypeAnnotation"||D.type==="IntersectionTypeAnnotation"||D.type==="UnionTypeAnnotation"||d==="objectType"&&(D.type==="IndexedAccessType"||D.type==="OptionalIndexedAccessType");case"NullableTypeAnnotation":return D.type==="ArrayTypeAnnotation"||d==="objectType"&&(D.type==="IndexedAccessType"||D.type==="OptionalIndexedAccessType");case"FunctionTypeAnnotation":{let o=D.type==="NullableTypeAnnotation"?I.getParentNode(1):D;return o.type==="UnionTypeAnnotation"||o.type==="IntersectionTypeAnnotation"||o.type==="ArrayTypeAnnotation"||d==="objectType"&&(o.type==="IndexedAccessType"||o.type==="OptionalIndexedAccessType")||o.type==="NullableTypeAnnotation"||D.type==="FunctionTypeParam"&&D.name===null&&i(y).some(x=>x.typeAnnotation&&x.typeAnnotation.type==="NullableTypeAnnotation")}case"OptionalIndexedAccessType":return d==="objectType"&&D.type==="IndexedAccessType";case"TypeofTypeAnnotation":return d==="objectType"&&(D.type==="IndexedAccessType"||D.type==="OptionalIndexedAccessType");case"StringLiteral":case"NumericLiteral":case"Literal":if(typeof y.value=="string"&&D.type==="ExpressionStatement"&&!D.directive){let o=I.getParentNode(1);return o.type==="Program"||o.type==="BlockStatement"}return d==="object"&&D.type==="MemberExpression"&&typeof y.value=="number";case"AssignmentExpression":{let o=I.getParentNode(1);return d==="body"&&D.type==="ArrowFunctionExpression"?!0:d==="key"&&(D.type==="ClassProperty"||D.type==="PropertyDefinition")&&D.computed||(d==="init"||d==="update")&&D.type==="ForStatement"?!1:D.type==="ExpressionStatement"?y.left.type==="ObjectPattern":!(d==="key"&&D.type==="TSPropertySignature"||D.type==="AssignmentExpression"||D.type==="SequenceExpression"&&o&&o.type==="ForStatement"&&(o.init===D||o.update===D)||d==="value"&&D.type==="Property"&&o&&o.type==="ObjectPattern"&&o.properties.includes(D)||D.type==="NGChainedExpression")}case"ConditionalExpression":switch(D.type){case"TaggedTemplateExpression":case"UnaryExpression":case"SpreadElement":case"SpreadProperty":case"BinaryExpression":case"LogicalExpression":case"NGPipeExpression":case"ExportDefaultDeclaration":case"AwaitExpression":case"JSXSpreadAttribute":case"TSTypeAssertion":case"TypeCastExpression":case"TSAsExpression":case"TSNonNullExpression":return!0;case"NewExpression":case"CallExpression":case"OptionalCallExpression":return d==="callee";case"ConditionalExpression":return d==="test";case"MemberExpression":case"OptionalMemberExpression":return d==="object";default:return!1}case"FunctionExpression":switch(D.type){case"NewExpression":case"CallExpression":case"OptionalCallExpression":return d==="callee";case"TaggedTemplateExpression":return!0;default:return!1}case"ArrowFunctionExpression":switch(D.type){case"BinaryExpression":return D.operator!=="|>"||y.extra&&y.extra.parenthesized;case"NewExpression":case"CallExpression":case"OptionalCallExpression":return d==="callee";case"MemberExpression":case"OptionalMemberExpression":return d==="object";case"TSAsExpression":case"TSNonNullExpression":case"BindExpression":case"TaggedTemplateExpression":case"UnaryExpression":case"LogicalExpression":case"AwaitExpression":case"TSTypeAssertion":return!0;case"ConditionalExpression":return d==="test";default:return!1}case"ClassExpression":if(s(y.decorators))return!0;switch(D.type){case"NewExpression":return d==="callee";default:return!1}case"OptionalMemberExpression":case"OptionalCallExpression":{let o=I.getParentNode(1);if(d==="object"&&D.type==="MemberExpression"||d==="callee"&&(D.type==="CallExpression"||D.type==="NewExpression")||D.type==="TSNonNullExpression"&&o.type==="MemberExpression"&&o.object===D)return!0}case"CallExpression":case"MemberExpression":case"TaggedTemplateExpression":case"TSNonNullExpression":if(d==="callee"&&(D.type==="BindExpression"||D.type==="NewExpression")){let o=y;for(;o;)switch(o.type){case"CallExpression":case"OptionalCallExpression":return!0;case"MemberExpression":case"OptionalMemberExpression":case"BindExpression":o=o.object;break;case"TaggedTemplateExpression":o=o.tag;break;case"TSNonNullExpression":o=o.expression;break;default:return!1}}return!1;case"BindExpression":return d==="callee"&&(D.type==="BindExpression"||D.type==="NewExpression")||d==="object"&&f(D);case"NGPipeExpression":return!(D.type==="NGRoot"||D.type==="NGMicrosyntaxExpression"||D.type==="ObjectProperty"&&!(y.extra&&y.extra.parenthesized)||D.type==="ArrayExpression"||p(D)&&D.arguments[d]===y||d==="right"&&D.type==="NGPipeExpression"||d==="property"&&D.type==="MemberExpression"||D.type==="AssignmentExpression");case"JSXFragment":case"JSXElement":return d==="callee"||d==="left"&&D.type==="BinaryExpression"&&D.operator==="<"||D.type!=="ArrayExpression"&&D.type!=="ArrowFunctionExpression"&&D.type!=="AssignmentExpression"&&D.type!=="AssignmentPattern"&&D.type!=="BinaryExpression"&&D.type!=="NewExpression"&&D.type!=="ConditionalExpression"&&D.type!=="ExpressionStatement"&&D.type!=="JsExpressionRoot"&&D.type!=="JSXAttribute"&&D.type!=="JSXElement"&&D.type!=="JSXExpressionContainer"&&D.type!=="JSXFragment"&&D.type!=="LogicalExpression"&&!p(D)&&!h(D)&&D.type!=="ReturnStatement"&&D.type!=="ThrowStatement"&&D.type!=="TypeCastExpression"&&D.type!=="VariableDeclarator"&&D.type!=="YieldExpression";case"TypeAnnotation":return d==="returnType"&&D.type==="ArrowFunctionExpression"&&b(y)}return!1}function T(I){return I.type==="BlockStatement"||I.type==="BreakStatement"||I.type==="ClassBody"||I.type==="ClassDeclaration"||I.type==="ClassMethod"||I.type==="ClassProperty"||I.type==="PropertyDefinition"||I.type==="ClassPrivateProperty"||I.type==="ContinueStatement"||I.type==="DebuggerStatement"||I.type==="DeclareClass"||I.type==="DeclareExportAllDeclaration"||I.type==="DeclareExportDeclaration"||I.type==="DeclareFunction"||I.type==="DeclareInterface"||I.type==="DeclareModule"||I.type==="DeclareModuleExports"||I.type==="DeclareVariable"||I.type==="DoWhileStatement"||I.type==="EnumDeclaration"||I.type==="ExportAllDeclaration"||I.type==="ExportDefaultDeclaration"||I.type==="ExportNamedDeclaration"||I.type==="ExpressionStatement"||I.type==="ForInStatement"||I.type==="ForOfStatement"||I.type==="ForStatement"||I.type==="FunctionDeclaration"||I.type==="IfStatement"||I.type==="ImportDeclaration"||I.type==="InterfaceDeclaration"||I.type==="LabeledStatement"||I.type==="MethodDefinition"||I.type==="ReturnStatement"||I.type==="SwitchStatement"||I.type==="ThrowStatement"||I.type==="TryStatement"||I.type==="TSDeclareFunction"||I.type==="TSEnumDeclaration"||I.type==="TSImportEqualsDeclaration"||I.type==="TSInterfaceDeclaration"||I.type==="TSModuleDeclaration"||I.type==="TSNamespaceExportDeclaration"||I.type==="TypeAlias"||I.type==="VariableDeclaration"||I.type==="WhileStatement"||I.type==="WithStatement"}function A(I){let E=0,D=I.getValue();for(;D;){let d=I.getParentNode(E++);if(d&&d.type==="ForStatement"&&d.init===D)return!0;D=d}return!1}function b(I){return c(I,E=>E.type==="ObjectTypeAnnotation"&&c(E,D=>D.type==="FunctionTypeAnnotation"||void 0)||void 0)}function v(I){switch(I.type){case"ObjectExpression":return!0;default:return!1}}function B(I){let E=I.getValue(),D=I.getParentNode(),d=I.getName();switch(D.type){case"NGPipeExpression":if(typeof d=="number"&&D.arguments[d]===E&&D.arguments.length-1===d)return I.callParent(B);break;case"ObjectProperty":if(d==="value"){let y=I.getParentNode(1);return t(y.properties)===D}break;case"BinaryExpression":case"LogicalExpression":if(d==="right")return I.callParent(B);break;case"ConditionalExpression":if(d==="alternate")return I.callParent(B);break;case"UnaryExpression":if(D.prefix)return I.callParent(B);break}return!1}function w(I,E){let D=I.getValue(),d=I.getParentNode();return D.type==="FunctionExpression"||D.type==="ClassExpression"?d.type==="ExportDefaultDeclaration"||!N(I,E):!a(D)||d.type!=="ExportDefaultDeclaration"&&N(I,E)?!1:I.call(y=>w(y,E),...r(I,D))}n.exports=N}}),ro=Z({"src/language-js/print-preprocess.js"(e,n){"use strict";ae();function t(s,i){switch(i.parser){case"json":case"json5":case"json-stringify":case"__js_expression":case"__vue_expression":return Object.assign(Object.assign({},s),{},{type:i.parser.startsWith("__")?"JsExpressionRoot":"JsonRoot",node:s,comments:[],rootMarker:i.rootMarker});default:return s}}n.exports=t}}),bm=Z({"src/language-js/print/html-binding.js"(e,n){"use strict";ae();var{builders:{join:t,line:s,group:i,softline:r,indent:u}}=Le();function a(l,C,m){let g=l.getValue();if(C.__onHtmlBindingRoot&&l.getName()===null&&C.__onHtmlBindingRoot(g,C),g.type==="File"){if(C.__isVueForBindingLeft)return l.call(p=>{let f=t([",",s],p.map(m,"params")),{params:h}=p.getValue();return h.length===1?f:["(",u([r,i(f)]),r,")"]},"program","body",0);if(C.__isVueBindings)return l.call(p=>t([",",s],p.map(m,"params")),"program","body",0)}}function c(l){switch(l.type){case"MemberExpression":switch(l.property.type){case"Identifier":case"NumericLiteral":case"StringLiteral":return c(l.object)}return!1;case"Identifier":return!0;default:return!1}}n.exports={isVueEventBindingExpression:c,printHtmlBinding:a}}}),Jn=Z({"src/language-js/print/binaryish.js"(e,n){"use strict";ae();var{printComments:t}=Qe(),{getLast:s}=Ge(),{builders:{join:i,line:r,softline:u,group:a,indent:c,align:l,ifBreak:C,indentIfBreak:m},utils:{cleanDoc:g,getDocParts:p,isConcat:f}}=Le(),{hasLeadingOwnLineComment:h,isBinaryish:N,isJsxNode:T,shouldFlatten:A,hasComment:b,CommentCheckFlags:v,isCallExpression:B,isMemberExpression:w,isObjectProperty:I,isEnabledHackPipeline:E}=Xe(),D=0;function d(x,F,S){let k=x.getValue(),_=x.getParentNode(),O=x.getParentNode(1),R=k!==_.body&&(_.type==="IfStatement"||_.type==="WhileStatement"||_.type==="SwitchStatement"||_.type==="DoWhileStatement"),M=E(F)&&k.operator==="|>",H=y(x,S,F,!1,R);if(R)return H;if(M)return a(H);if(B(_)&&_.callee===k||_.type==="UnaryExpression"||w(_)&&!_.computed)return a([c([u,...H]),u]);let P=_.type==="ReturnStatement"||_.type==="ThrowStatement"||_.type==="JSXExpressionContainer"&&O.type==="JSXAttribute"||k.operator!=="|"&&_.type==="JsExpressionRoot"||k.type!=="NGPipeExpression"&&(_.type==="NGRoot"&&F.parser==="__ng_binding"||_.type==="NGMicrosyntaxExpression"&&O.type==="NGMicrosyntax"&&O.body.length===1)||k===_.body&&_.type==="ArrowFunctionExpression"||k!==_.body&&_.type==="ForStatement"||_.type==="ConditionalExpression"&&O.type!=="ReturnStatement"&&O.type!=="ThrowStatement"&&!B(O)||_.type==="TemplateLiteral",G=_.type==="AssignmentExpression"||_.type==="VariableDeclarator"||_.type==="ClassProperty"||_.type==="PropertyDefinition"||_.type==="TSAbstractPropertyDefinition"||_.type==="ClassPrivateProperty"||I(_),re=N(k.left)&&A(k.operator,k.left.operator);if(P||o(k)&&!re||!o(k)&&G)return a(H);if(H.length===0)return"";let $=T(k.right),W=H.findIndex(oe=>typeof oe!="string"&&!Array.isArray(oe)&&oe.type==="group"),ee=H.slice(0,W===-1?1:W+1),U=H.slice(ee.length,$?-1:void 0),ne=Symbol("logicalChain-"+ ++D),se=a([...ee,c(U)],{id:ne});if(!$)return se;let V=s(H);return a([se,m(V,{groupId:ne})])}function y(x,F,S,k,_){let O=x.getValue();if(!N(O))return[a(F())];let R=[];A(O.operator,O.left.operator)?R=x.call(U=>y(U,F,S,!0,_),"left"):R.push(a(F("left")));let M=o(O),H=(O.operator==="|>"||O.type==="NGPipeExpression"||O.operator==="|"&&S.parser==="__vue_expression")&&!h(S.originalText,O.right),P=O.type==="NGPipeExpression"?"|":O.operator,G=O.type==="NGPipeExpression"&&O.arguments.length>0?a(c([u,": ",i([u,":",C(" ")],x.map(F,"arguments").map(U=>l(2,a(U))))])):"",re;if(M)re=[P," ",F("right"),G];else{let ne=E(S)&&P==="|>"?x.call(se=>y(se,F,S,!0,_),"right"):F("right");re=[H?r:"",P,H?" ":r,ne,G]}let $=x.getParentNode(),W=b(O.left,v.Trailing|v.Line),ee=W||!(_&&O.type==="LogicalExpression")&&$.type!==O.type&&O.left.type!==O.type&&O.right.type!==O.type;if(R.push(H?"":" ",ee?a(re,{shouldBreak:W}):re),k&&b(O)){let U=g(t(x,R,S));return f(U)||U.type==="fill"?p(U):[U]}return R}function o(x){return x.type!=="LogicalExpression"?!1:!!(x.right.type==="ObjectExpression"&&x.right.properties.length>0||x.right.type==="ArrayExpression"&&x.right.elements.length>0||T(x.right))}n.exports={printBinaryishExpression:d,shouldInlineLogicalExpression:o}}}),Tm=Z({"src/language-js/print/angular.js"(e,n){"use strict";ae();var{builders:{join:t,line:s,group:i}}=Le(),{hasNode:r,hasComment:u,getComments:a}=Xe(),{printBinaryishExpression:c}=Jn();function l(g,p,f){let h=g.getValue();if(!!h.type.startsWith("NG"))switch(h.type){case"NGRoot":return[f("node"),u(h.node)?" //"+a(h.node)[0].value.trimEnd():""];case"NGPipeExpression":return c(g,p,f);case"NGChainedExpression":return i(t([";",s],g.map(N=>m(N)?f():["(",f(),")"],"expressions")));case"NGEmptyExpression":return"";case"NGQuotedExpression":return[h.prefix,": ",h.value.trim()];case"NGMicrosyntax":return g.map((N,T)=>[T===0?"":C(N.getValue(),T,h)?" ":[";",s],f()],"body");case"NGMicrosyntaxKey":return/^[$_a-z][\w$]*(?:-[$_a-z][\w$])*$/i.test(h.name)?h.name:JSON.stringify(h.name);case"NGMicrosyntaxExpression":return[f("expression"),h.alias===null?"":[" as ",f("alias")]];case"NGMicrosyntaxKeyedExpression":{let N=g.getName(),T=g.getParentNode(),A=C(h,N,T)||(N===1&&(h.key.name==="then"||h.key.name==="else")||N===2&&h.key.name==="else"&&T.body[N-1].type==="NGMicrosyntaxKeyedExpression"&&T.body[N-1].key.name==="then")&&T.body[0].type==="NGMicrosyntaxExpression";return[f("key"),A?" ":": ",f("expression")]}case"NGMicrosyntaxLet":return["let ",f("key"),h.value===null?"":[" = ",f("value")]];case"NGMicrosyntaxAs":return[f("key")," as ",f("alias")];default:throw new Error("Unknown Angular node type: ".concat(JSON.stringify(h.type),"."))}}function C(g,p,f){return g.type==="NGMicrosyntaxKeyedExpression"&&g.key.name==="of"&&p===1&&f.body[0].type==="NGMicrosyntaxLet"&&f.body[0].value===null}function m(g){return r(g.getValue(),p=>{switch(p.type){case void 0:return!1;case"CallExpression":case"OptionalCallExpression":case"AssignmentExpression":return!0}})}n.exports={printAngular:l}}}),Bm=Z({"src/language-js/print/jsx.js"(e,n){"use strict";ae();var{printComments:t,printDanglingComments:s}=Qe(),{builders:{line:i,hardline:r,softline:u,group:a,indent:c,conditionalGroup:l,fill:C,ifBreak:m,lineSuffixBoundary:g,join:p},utils:{willBreak:f}}=Le(),{getLast:h,getPreferredQuote:N}=Ge(),{isJsxNode:T,rawText:A,isLiteral:b,isCallExpression:v,isStringLiteral:B,isBinaryish:w,hasComment:I,CommentCheckFlags:E,hasNodeIgnoreComment:D}=Xe(),d=kt(),{willPrintOwnComments:y}=to(),o=q=>q===""||q===i||q===r||q===u;function x(q,le,ue){let Q=q.getValue();if(Q.type==="JSXElement"&&V(Q))return[ue("openingElement"),ue("closingElement")];let de=Q.type==="JSXElement"?ue("openingElement"):ue("openingFragment"),ge=Q.type==="JSXElement"?ue("closingElement"):ue("closingFragment");if(Q.children.length===1&&Q.children[0].type==="JSXExpressionContainer"&&(Q.children[0].expression.type==="TemplateLiteral"||Q.children[0].expression.type==="TaggedTemplateExpression"))return[de,...q.map(ue,"children"),ge];Q.children=Q.children.map(z=>K(z)?{type:"JSXText",value:" ",raw:" "}:z);let ve=Q.children.some(T),xe=Q.children.filter(z=>z.type==="JSXExpressionContainer").length>1,we=Q.type==="JSXElement"&&Q.openingElement.attributes.length>1,fe=f(de)||ve||we||xe,pe=q.getParentNode().rootMarker==="mdx",me=le.singleQuote?"{' '}":'{" "}',ce=pe?" ":m([me,u]," "),he=Q.openingElement&&Q.openingElement.name&&Q.openingElement.name.name==="fbt",J=F(q,le,ue,ce,he),ye=Q.children.some(z=>oe(z));for(let z=J.length-2;z>=0;z--){let j=J[z]===""&&J[z+1]==="",Ce=J[z]===r&&J[z+1]===""&&J[z+2]===r,Ne=(J[z]===u||J[z]===r)&&J[z+1]===""&&J[z+2]===ce,je=J[z]===ce&&J[z+1]===""&&(J[z+2]===u||J[z+2]===r),Ue=J[z]===ce&&J[z+1]===""&&J[z+2]===ce,tt=J[z]===u&&J[z+1]===""&&J[z+2]===r||J[z]===r&&J[z+1]===""&&J[z+2]===u;Ce&&ye||j||Ne||Ue||tt?J.splice(z,2):je&&J.splice(z+1,2)}for(;J.length>0&&o(h(J));)J.pop();for(;J.length>1&&o(J[0])&&o(J[1]);)J.shift(),J.shift();let X=[];for(let[z,j]of J.entries()){if(j===ce){if(z===1&&J[z-1]===""){if(J.length===2){X.push(me);continue}X.push([me,r]);continue}else if(z===J.length-1){X.push(me);continue}else if(J[z-1]===""&&J[z-2]===r){X.push(me);continue}}X.push(j),f(j)&&(fe=!0)}let Y=ye?C(X):a(X,{shouldBreak:!0});if(pe)return Y;let te=a([de,c([r,Y]),r,ge]);return fe?te:l([a([de,...J,ge]),te])}function F(q,le,ue,Q,de){let ge=[];return q.each((ve,xe,we)=>{let fe=ve.getValue();if(b(fe)){let pe=A(fe);if(oe(fe)){let me=pe.split(U);if(me[0]===""){if(ge.push(""),me.shift(),/\n/.test(me[0])){let he=we[xe+1];ge.push(k(de,me[1],fe,he))}else ge.push(Q);me.shift()}let ce;if(h(me)===""&&(me.pop(),ce=me.pop()),me.length===0)return;for(let[he,J]of me.entries())he%2===1?ge.push(i):ge.push(J);if(ce!==void 0)if(/\n/.test(ce)){let he=we[xe+1];ge.push(k(de,h(ge),fe,he))}else ge.push(Q);else{let he=we[xe+1];ge.push(S(de,h(ge),fe,he))}}else/\n/.test(pe)?pe.match(/\n/g).length>1&&ge.push("",r):ge.push("",Q)}else{let pe=ue();ge.push(pe);let me=we[xe+1];if(me&&oe(me)){let he=se(A(me)).split(U)[0];ge.push(S(de,he,fe,me))}else ge.push(r)}},"children"),ge}function S(q,le,ue,Q){return q?"":ue.type==="JSXElement"&&!ue.closingElement||Q&&Q.type==="JSXElement"&&!Q.closingElement?le.length===1?u:r:u}function k(q,le,ue,Q){return q?r:le.length===1?ue.type==="JSXElement"&&!ue.closingElement||Q&&Q.type==="JSXElement"&&!Q.closingElement?r:u:r}function _(q,le,ue){let Q=q.getParentNode();if(!Q||{ArrayExpression:!0,JSXAttribute:!0,JSXElement:!0,JSXExpressionContainer:!0,JSXFragment:!0,ExpressionStatement:!0,CallExpression:!0,OptionalCallExpression:!0,ConditionalExpression:!0,JsExpressionRoot:!0}[Q.type])return le;let ge=q.match(void 0,xe=>xe.type==="ArrowFunctionExpression",v,xe=>xe.type==="JSXExpressionContainer"),ve=d(q,ue);return a([ve?"":m("("),c([u,le]),u,ve?"":m(")")],{shouldBreak:ge})}function O(q,le,ue){let Q=q.getValue(),de=[];if(de.push(ue("name")),Q.value){let ge;if(B(Q.value)){let xe=A(Q.value).slice(1,-1).replace(/&apos;/g,"'").replace(/&quot;/g,'"'),{escaped:we,quote:fe,regex:pe}=N(xe,le.jsxSingleQuote?"'":'"');xe=xe.replace(pe,we),ge=[fe,xe,fe]}else ge=ue("value");de.push("=",ge)}return de}function R(q,le,ue){let Q=q.getValue(),de=(ge,ve)=>ge.type==="JSXEmptyExpression"||!I(ge)&&(ge.type==="ArrayExpression"||ge.type==="ObjectExpression"||ge.type==="ArrowFunctionExpression"||ge.type==="AwaitExpression"&&(de(ge.argument,ge)||ge.argument.type==="JSXElement")||v(ge)||ge.type==="FunctionExpression"||ge.type==="TemplateLiteral"||ge.type==="TaggedTemplateExpression"||ge.type==="DoExpression"||T(ve)&&(ge.type==="ConditionalExpression"||w(ge)));return de(Q.expression,q.getParentNode(0))?a(["{",ue("expression"),g,"}"]):a(["{",c([u,ue("expression")]),u,g,"}"])}function M(q,le,ue){let Q=q.getValue(),de=Q.name&&I(Q.name)||Q.typeParameters&&I(Q.typeParameters);if(Q.selfClosing&&Q.attributes.length===0&&!de)return["<",ue("name"),ue("typeParameters")," />"];if(Q.attributes&&Q.attributes.length===1&&Q.attributes[0].value&&B(Q.attributes[0].value)&&!Q.attributes[0].value.value.includes(`
`)&&!de&&!I(Q.attributes[0]))return a(["<",ue("name"),ue("typeParameters")," ",...q.map(ue,"attributes"),Q.selfClosing?" />":">"]);let ge=Q.attributes.length>0&&I(h(Q.attributes),E.Trailing),ve=Q.attributes.length===0&&!de||(le.bracketSameLine||le.jsxBracketSameLine)&&(!de||Q.attributes.length>0)&&!ge,xe=Q.attributes&&Q.attributes.some(fe=>fe.value&&B(fe.value)&&fe.value.value.includes(`
`)),we=le.singleAttributePerLine&&Q.attributes.length>1?r:i;return a(["<",ue("name"),ue("typeParameters"),c(q.map(()=>[we,ue()],"attributes")),Q.selfClosing?i:ve?">":u,Q.selfClosing?"/>":ve?"":">"],{shouldBreak:xe})}function H(q,le,ue){let Q=q.getValue(),de=[];de.push("</");let ge=ue("name");return I(Q.name,E.Leading|E.Line)?de.push(c([r,ge]),r):I(Q.name,E.Leading|E.Block)?de.push(" ",ge):de.push(ge),de.push(">"),de}function P(q,le){let ue=q.getValue(),Q=I(ue),de=I(ue,E.Line),ge=ue.type==="JSXOpeningFragment";return[ge?"<":"</",c([de?r:Q&&!ge?" ":"",s(q,le,!0)]),de?r:"",">"]}function G(q,le,ue){let Q=t(q,x(q,le,ue),le);return _(q,Q,le)}function re(q,le){let ue=q.getValue(),Q=I(ue,E.Line);return[s(q,le,!Q),Q?r:""]}function $(q,le,ue){let Q=q.getValue();return["{",q.call(de=>{let ge=["...",ue()],ve=de.getValue();return!I(ve)||!y(de)?ge:[c([u,t(de,ge,le)]),u]},Q.type==="JSXSpreadAttribute"?"argument":"expression"),"}"]}function W(q,le,ue){let Q=q.getValue();if(!!Q.type.startsWith("JSX"))switch(Q.type){case"JSXAttribute":return O(q,le,ue);case"JSXIdentifier":return String(Q.name);case"JSXNamespacedName":return p(":",[ue("namespace"),ue("name")]);case"JSXMemberExpression":return p(".",[ue("object"),ue("property")]);case"JSXSpreadAttribute":return $(q,le,ue);case"JSXSpreadChild":return $(q,le,ue);case"JSXExpressionContainer":return R(q,le,ue);case"JSXFragment":case"JSXElement":return G(q,le,ue);case"JSXOpeningElement":return M(q,le,ue);case"JSXClosingElement":return H(q,le,ue);case"JSXOpeningFragment":case"JSXClosingFragment":return P(q,le);case"JSXEmptyExpression":return re(q,le);case"JSXText":throw new Error("JSXTest should be handled by JSXElement");default:throw new Error("Unknown JSX node type: ".concat(JSON.stringify(Q.type),"."))}}var ee=` 
\r	`,U=new RegExp("(["+ee+"]+)"),ne=new RegExp("[^"+ee+"]"),se=q=>q.replace(new RegExp("(?:^"+U.source+"|"+U.source+"$)"),"");function V(q){if(q.children.length===0)return!0;if(q.children.length>1)return!1;let le=q.children[0];return b(le)&&!oe(le)}function oe(q){return b(q)&&(ne.test(A(q))||!/\n/.test(A(q)))}function K(q){return q.type==="JSXExpressionContainer"&&b(q.expression)&&q.expression.value===" "&&!I(q.expression)}function Ee(q){let le=q.getValue(),ue=q.getParentNode();if(!ue||!le||!T(le)||!T(ue))return!1;let Q=ue.children.indexOf(le),de=null;for(let ge=Q;ge>0;ge--){let ve=ue.children[ge-1];if(!(ve.type==="JSXText"&&!oe(ve))){de=ve;break}}return de&&de.type==="JSXExpressionContainer"&&de.expression.type==="JSXEmptyExpression"&&D(de.expression)}n.exports={hasJsxIgnoreComment:Ee,printJsx:W}}}),ot=Z({"src/language-js/print/misc.js"(e,n){"use strict";ae();var{isNonEmptyArray:t}=Ge(),{builders:{indent:s,join:i,line:r}}=Le(),{isFlowAnnotationComment:u}=Xe();function a(h){let N=h.getValue();return!N.optional||N.type==="Identifier"&&N===h.getParentNode().key?"":N.type==="OptionalCallExpression"||N.type==="OptionalMemberExpression"&&N.computed?"?.":"?"}function c(h){return h.getValue().definite||h.match(void 0,(N,T)=>T==="id"&&N.type==="VariableDeclarator"&&N.definite)?"!":""}function l(h,N,T){let A=h.getValue();return A.typeArguments?T("typeArguments"):A.typeParameters?T("typeParameters"):""}function C(h,N,T){let A=h.getValue();if(!A.typeAnnotation)return"";let b=h.getParentNode(),v=b.type==="DeclareFunction"&&b.id===A;return u(N.originalText,A.typeAnnotation)?[" /*: ",T("typeAnnotation")," */"]:[v?"":": ",T("typeAnnotation")]}function m(h,N,T){return["::",T("callee")]}function g(h,N,T){let A=h.getValue();return t(A.modifiers)?[i(" ",h.map(T,"modifiers"))," "]:""}function p(h,N,T){return h.type==="EmptyStatement"?";":h.type==="BlockStatement"||T?[" ",N]:s([r,N])}function f(h,N,T){return["...",T("argument"),C(h,N,T)]}n.exports={printOptionalToken:a,printDefiniteToken:c,printFunctionTypeParameters:l,printBindExpressionCallee:m,printTypeScriptModifiers:g,printTypeAnnotation:C,printRestSpread:f,adjustClause:p}}}),zt=Z({"src/language-js/print/array.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{builders:{line:s,softline:i,hardline:r,group:u,indent:a,ifBreak:c,fill:l}}=Le(),{getLast:C,hasNewline:m}=Ge(),{shouldPrintComma:g,hasComment:p,CommentCheckFlags:f,isNextLineEmpty:h,isNumericLiteral:N,isSignedNumericLiteral:T}=Xe(),{locStart:A}=nt(),{printOptionalToken:b,printTypeAnnotation:v}=ot();function B(D,d,y){let o=D.getValue(),x=[],F=o.type==="TupleExpression"?"#[":"[",S="]";if(o.elements.length===0)p(o,f.Dangling)?x.push(u([F,t(D,d),i,S])):x.push(F,S);else{let k=C(o.elements),_=!(k&&k.type==="RestElement"),O=k===null,R=Symbol("array"),M=!d.__inJestEach&&o.elements.length>1&&o.elements.every((G,re,$)=>{let W=G&&G.type;if(W!=="ArrayExpression"&&W!=="ObjectExpression")return!1;let ee=$[re+1];if(ee&&W!==ee.type)return!1;let U=W==="ArrayExpression"?"elements":"properties";return G[U]&&G[U].length>1}),H=w(o,d),P=_?O?",":g(d)?H?c(",","",{groupId:R}):c(","):"":"";x.push(u([F,a([i,H?E(D,d,y,P):[I(D,d,"elements",y),P],t(D,d,!0)]),i,S],{shouldBreak:M,id:R}))}return x.push(b(D),v(D,d,y)),x}function w(D,d){return D.elements.length>1&&D.elements.every(y=>y&&(N(y)||T(y)&&!p(y.argument))&&!p(y,f.Trailing|f.Line,o=>!m(d.originalText,A(o),{backwards:!0})))}function I(D,d,y,o){let x=[],F=[];return D.each(S=>{x.push(F,u(o())),F=[",",s],S.getValue()&&h(S.getValue(),d)&&F.push(i)},y),x}function E(D,d,y,o){let x=[];return D.each((F,S,k)=>{let _=S===k.length-1;x.push([y(),_?o:","]),_||x.push(h(F.getValue(),d)?[r,r]:p(k[S+1],f.Leading|f.Line)?r:s)},"elements"),l(x)}n.exports={printArray:B,printArrayItems:I,isConciselyPrintedArray:w}}}),no=Z({"src/language-js/print/call-arguments.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{getLast:s,getPenultimate:i}=Ge(),{getFunctionParameters:r,hasComment:u,CommentCheckFlags:a,isFunctionCompositionArgs:c,isJsxNode:l,isLongCurriedCallExpression:C,shouldPrintComma:m,getCallArguments:g,iterateCallArgumentsPath:p,isNextLineEmpty:f,isCallExpression:h,isStringLiteral:N,isObjectProperty:T}=Xe(),{builders:{line:A,hardline:b,softline:v,group:B,indent:w,conditionalGroup:I,ifBreak:E,breakParent:D},utils:{willBreak:d}}=Le(),{ArgExpansionBailout:y}=Jt(),{isConciselyPrintedArray:o}=zt();function x(M,H,P){let G=M.getValue(),re=G.type==="ImportExpression",$=g(G);if($.length===0)return["(",t(M,H,!0),")"];if(_($))return["(",P(["arguments",0]),", ",P(["arguments",1]),")"];let W=!1,ee=!1,U=$.length-1,ne=[];p(M,(q,le)=>{let ue=q.getNode(),Q=[P()];le===U||(f(ue,H)?(le===0&&(ee=!0),W=!0,Q.push(",",b,b)):Q.push(",",A)),ne.push(Q)});let se=!(re||G.callee&&G.callee.type==="Import")&&m(H,"all")?",":"";function V(){return B(["(",w([A,...ne]),se,A,")"],{shouldBreak:!0})}if(W||M.getParentNode().type!=="Decorator"&&c($))return V();let oe=k($),K=S($,H);if(oe||K){if(oe?ne.slice(1).some(d):ne.slice(0,-1).some(d))return V();let q=[];try{M.try(()=>{p(M,(le,ue)=>{oe&&ue===0&&(q=[[P([],{expandFirstArg:!0}),ne.length>1?",":"",ee?b:A,ee?b:""],...ne.slice(1)]),K&&ue===U&&(q=[...ne.slice(0,-1),P([],{expandLastArg:!0})])})})}catch(le){if(le instanceof y)return V();throw le}return[ne.some(d)?D:"",I([["(",...q,")"],oe?["(",B(q[0],{shouldBreak:!0}),...q.slice(1),")"]:["(",...ne.slice(0,-1),B(s(q),{shouldBreak:!0}),")"],V()])]}let Ee=["(",w([v,...ne]),E(se),v,")"];return C(M)?Ee:B(Ee,{shouldBreak:ne.some(d)||W})}function F(M){let H=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;return M.type==="ObjectExpression"&&(M.properties.length>0||u(M))||M.type==="ArrayExpression"&&(M.elements.length>0||u(M))||M.type==="TSTypeAssertion"&&F(M.expression)||M.type==="TSAsExpression"&&F(M.expression)||M.type==="FunctionExpression"||M.type==="ArrowFunctionExpression"&&(!M.returnType||!M.returnType.typeAnnotation||M.returnType.typeAnnotation.type!=="TSTypeReference"||O(M.body))&&(M.body.type==="BlockStatement"||M.body.type==="ArrowFunctionExpression"&&F(M.body,!0)||M.body.type==="ObjectExpression"||M.body.type==="ArrayExpression"||!H&&(h(M.body)||M.body.type==="ConditionalExpression")||l(M.body))||M.type==="DoExpression"||M.type==="ModuleExpression"}function S(M,H){let P=s(M),G=i(M);return!u(P,a.Leading)&&!u(P,a.Trailing)&&F(P)&&(!G||G.type!==P.type)&&(M.length!==2||G.type!=="ArrowFunctionExpression"||P.type!=="ArrayExpression")&&!(M.length>1&&P.type==="ArrayExpression"&&o(P,H))}function k(M){if(M.length!==2)return!1;let[H,P]=M;return H.type==="ModuleExpression"&&R(P)?!0:!u(H)&&(H.type==="FunctionExpression"||H.type==="ArrowFunctionExpression"&&H.body.type==="BlockStatement")&&P.type!=="FunctionExpression"&&P.type!=="ArrowFunctionExpression"&&P.type!=="ConditionalExpression"&&!F(P)}function _(M){return M.length===2&&M[0].type==="ArrowFunctionExpression"&&r(M[0]).length===0&&M[0].body.type==="BlockStatement"&&M[1].type==="ArrayExpression"&&!M.some(H=>u(H))}function O(M){return M.type==="BlockStatement"&&(M.body.some(H=>H.type!=="EmptyStatement")||u(M,a.Dangling))}function R(M){return M.type==="ObjectExpression"&&M.properties.length===1&&T(M.properties[0])&&M.properties[0].key.type==="Identifier"&&M.properties[0].key.name==="type"&&N(M.properties[0].value)&&M.properties[0].value.value==="module"}n.exports=x}}),uo=Z({"src/language-js/print/member.js"(e,n){"use strict";ae();var{builders:{softline:t,group:s,indent:i,label:r}}=Le(),{isNumericLiteral:u,isMemberExpression:a,isCallExpression:c}=Xe(),{printOptionalToken:l}=ot();function C(g,p,f){let h=g.getValue(),N=g.getParentNode(),T,A=0;do T=g.getParentNode(A),A++;while(T&&(a(T)||T.type==="TSNonNullExpression"));let b=f("object"),v=m(g,p,f),B=T&&(T.type==="NewExpression"||T.type==="BindExpression"||T.type==="AssignmentExpression"&&T.left.type!=="Identifier")||h.computed||h.object.type==="Identifier"&&h.property.type==="Identifier"&&!a(N)||(N.type==="AssignmentExpression"||N.type==="VariableDeclarator")&&(c(h.object)&&h.object.arguments.length>0||h.object.type==="TSNonNullExpression"&&c(h.object.expression)&&h.object.expression.arguments.length>0||b.label==="member-chain");return r(b.label==="member-chain"?"member-chain":"member",[b,B?v:s(i([t,v]))])}function m(g,p,f){let h=f("property"),N=g.getValue(),T=l(g);return N.computed?!N.property||u(N.property)?[T,"[",h,"]"]:s([T,"[",i([t,h]),t,"]"]):[T,".",h]}n.exports={printMemberExpression:C,printMemberLookup:m}}}),Nm=Z({"src/language-js/print/member-chain.js"(e,n){"use strict";ae();var{printComments:t}=Qe(),{getLast:s,isNextLineEmptyAfterIndex:i,getNextNonSpaceNonCommentCharacterIndex:r}=Ge(),u=kt(),{isCallExpression:a,isMemberExpression:c,isFunctionOrArrowExpression:l,isLongCurriedCallExpression:C,isMemberish:m,isNumericLiteral:g,isSimpleCallArgument:p,hasComment:f,CommentCheckFlags:h,isNextLineEmpty:N}=Xe(),{locEnd:T}=nt(),{builders:{join:A,hardline:b,group:v,indent:B,conditionalGroup:w,breakParent:I,label:E},utils:{willBreak:D}}=Le(),d=no(),{printMemberLookup:y}=uo(),{printOptionalToken:o,printFunctionTypeParameters:x,printBindExpressionCallee:F}=ot();function S(k,_,O){let R=k.getParentNode(),M=!R||R.type==="ExpressionStatement",H=[];function P(me){let{originalText:ce}=_,he=r(ce,me,T);return ce.charAt(he)===")"?he!==!1&&i(ce,he+1):N(me,_)}function G(me){let ce=me.getValue();a(ce)&&(m(ce.callee)||a(ce.callee))?(H.unshift({node:ce,printed:[t(me,[o(me),x(me,_,O),d(me,_,O)],_),P(ce)?b:""]}),me.call(he=>G(he),"callee")):m(ce)?(H.unshift({node:ce,needsParens:u(me,_),printed:t(me,c(ce)?y(me,_,O):F(me,_,O),_)}),me.call(he=>G(he),"object")):ce.type==="TSNonNullExpression"?(H.unshift({node:ce,printed:t(me,"!",_)}),me.call(he=>G(he),"expression")):H.unshift({node:ce,printed:O()})}let re=k.getValue();H.unshift({node:re,printed:[o(k),x(k,_,O),d(k,_,O)]}),re.callee&&k.call(me=>G(me),"callee");let $=[],W=[H[0]],ee=1;for(;ee<H.length&&(H[ee].node.type==="TSNonNullExpression"||a(H[ee].node)||c(H[ee].node)&&H[ee].node.computed&&g(H[ee].node.property));++ee)W.push(H[ee]);if(!a(H[0].node))for(;ee+1<H.length&&(m(H[ee].node)&&m(H[ee+1].node));++ee)W.push(H[ee]);$.push(W),W=[];let U=!1;for(;ee<H.length;++ee){if(U&&m(H[ee].node)){if(H[ee].node.computed&&g(H[ee].node.property)){W.push(H[ee]);continue}$.push(W),W=[],U=!1}(a(H[ee].node)||H[ee].node.type==="ImportExpression")&&(U=!0),W.push(H[ee]),f(H[ee].node,h.Trailing)&&($.push(W),W=[],U=!1)}W.length>0&&$.push(W);function ne(me){return/^[A-Z]|^[$_]+$/.test(me)}function se(me){return me.length<=_.tabWidth}function V(me){let ce=me[1].length>0&&me[1][0].node.computed;if(me[0].length===1){let J=me[0][0].node;return J.type==="ThisExpression"||J.type==="Identifier"&&(ne(J.name)||M&&se(J.name)||ce)}let he=s(me[0]).node;return c(he)&&he.property.type==="Identifier"&&(ne(he.property.name)||ce)}let oe=$.length>=2&&!f($[1][0].node)&&V($);function K(me){let ce=me.map(he=>he.printed);return me.length>0&&s(me).needsParens?["(",...ce,")"]:ce}function Ee(me){return me.length===0?"":B(v([b,A(b,me.map(K))]))}let q=$.map(K),le=q,ue=oe?3:2,Q=$.flat(),de=Q.slice(1,-1).some(me=>f(me.node,h.Leading))||Q.slice(0,-1).some(me=>f(me.node,h.Trailing))||$[ue]&&f($[ue][0].node,h.Leading);if($.length<=ue&&!de)return C(k)?le:v(le);let ge=s($[oe?1:0]).node,ve=!a(ge)&&P(ge),xe=[K($[0]),oe?$.slice(1,2).map(K):"",ve?b:"",Ee($.slice(oe?2:1))],we=H.map(me=>{let{node:ce}=me;return ce}).filter(a);function fe(){let me=s(s($)).node,ce=s(q);return a(me)&&D(ce)&&we.slice(0,-1).some(he=>he.arguments.some(l))}let pe;return de||we.length>2&&we.some(me=>!me.arguments.every(ce=>p(ce,0)))||q.slice(0,-1).some(D)||fe()?pe=v(xe):pe=[D(le)||ve?I:"",w([le,xe])],E("member-chain",pe)}n.exports=S}}),so=Z({"src/language-js/print/call-expression.js"(e,n){"use strict";ae();var{builders:{join:t,group:s}}=Le(),i=kt(),{getCallArguments:r,hasFlowAnnotationComment:u,isCallExpression:a,isMemberish:c,isStringLiteral:l,isTemplateOnItsOwnLine:C,isTestCall:m,iterateCallArgumentsPath:g}=Xe(),p=Nm(),f=no(),{printOptionalToken:h,printFunctionTypeParameters:N}=ot();function T(b,v,B){let w=b.getValue(),I=b.getParentNode(),E=w.type==="NewExpression",D=w.type==="ImportExpression",d=h(b),y=r(w);if(y.length>0&&(!D&&!E&&A(w,I)||y.length===1&&C(y[0],v.originalText)||!E&&m(w,I))){let F=[];return g(b,()=>{F.push(B())}),[E?"new ":"",B("callee"),d,N(b,v,B),"(",t(", ",F),")"]}let o=(v.parser==="babel"||v.parser==="babel-flow")&&w.callee&&w.callee.type==="Identifier"&&u(w.callee.trailingComments);if(o&&(w.callee.trailingComments[0].printed=!0),!D&&!E&&c(w.callee)&&!b.call(F=>i(F,v),"callee"))return p(b,v,B);let x=[E?"new ":"",D?"import":B("callee"),d,o?"/*:: ".concat(w.callee.trailingComments[0].value.slice(2).trim()," */"):"",N(b,v,B),f(b,v,B)];return D||a(w.callee)?s(x):x}function A(b,v){if(b.callee.type!=="Identifier")return!1;if(b.callee.name==="require")return!0;if(b.callee.name==="define"){let B=r(b);return v.type==="ExpressionStatement"&&(B.length===1||B.length===2&&B[0].type==="ArrayExpression"||B.length===3&&l(B[0])&&B[1].type==="ArrayExpression")}return!1}n.exports={printCallExpression:T}}}),Xt=Z({"src/language-js/print/assignment.js"(e,n){"use strict";ae();var{isNonEmptyArray:t,getStringWidth:s}=Ge(),{builders:{line:i,group:r,indent:u,indentIfBreak:a,lineSuffixBoundary:c},utils:{cleanDoc:l,willBreak:C,canBreak:m}}=Le(),{hasLeadingOwnLineComment:g,isBinaryish:p,isStringLiteral:f,isLiteral:h,isNumericLiteral:N,isCallExpression:T,isMemberExpression:A,getCallArguments:b,rawText:v,hasComment:B,isSignedNumericLiteral:w,isObjectProperty:I}=Xe(),{shouldInlineLogicalExpression:E}=Jn(),{printCallExpression:D}=so();function d(V,oe,K,Ee,q,le){let ue=x(V,oe,K,Ee,le),Q=K(le,{assignmentLayout:ue});switch(ue){case"break-after-operator":return r([r(Ee),q,r(u([i,Q]))]);case"never-break-after-operator":return r([r(Ee),q," ",Q]);case"fluid":{let de=Symbol("assignment");return r([r(Ee),q,r(u(i),{id:de}),c,a(Q,{groupId:de})])}case"break-lhs":return r([Ee,q," ",r(Q)]);case"chain":return[r(Ee),q,i,Q];case"chain-tail":return[r(Ee),q,u([i,Q])];case"chain-tail-arrow-chain":return[r(Ee),q,Q];case"only-left":return Ee}}function y(V,oe,K){let Ee=V.getValue();return d(V,oe,K,K("left"),[" ",Ee.operator],"right")}function o(V,oe,K){return d(V,oe,K,K("id")," =","init")}function x(V,oe,K,Ee,q){let le=V.getValue(),ue=le[q];if(!ue)return"only-left";let Q=!k(ue);if(V.match(k,_,xe=>!Q||xe.type!=="ExpressionStatement"&&xe.type!=="VariableDeclaration"))return Q?ue.type==="ArrowFunctionExpression"&&ue.body.type==="ArrowFunctionExpression"?"chain-tail-arrow-chain":"chain-tail":"chain";if(!Q&&k(ue.right)||g(oe.originalText,ue))return"break-after-operator";if(ue.type==="CallExpression"&&ue.callee.name==="require"||oe.parser==="json5"||oe.parser==="json")return"never-break-after-operator";if(S(le)||O(le)||H(le)||P(le)&&m(Ee))return"break-lhs";let ve=U(le,Ee,oe);return V.call(()=>F(V,oe,K,ve),q)?"break-after-operator":ve||ue.type==="TemplateLiteral"||ue.type==="TaggedTemplateExpression"||ue.type==="BooleanLiteral"||N(ue)||ue.type==="ClassExpression"?"never-break-after-operator":"fluid"}function F(V,oe,K,Ee){let q=V.getValue();if(p(q)&&!E(q))return!0;switch(q.type){case"StringLiteralTypeAnnotation":case"SequenceExpression":return!0;case"ConditionalExpression":{let{test:Q}=q;return p(Q)&&!E(Q)}case"ClassExpression":return t(q.decorators)}if(Ee)return!1;let le=q,ue=[];for(;;)if(le.type==="UnaryExpression")le=le.argument,ue.push("argument");else if(le.type==="TSNonNullExpression")le=le.expression,ue.push("expression");else break;return!!(f(le)||V.call(()=>$(V,oe,K),...ue))}function S(V){if(_(V)){let oe=V.left||V.id;return oe.type==="ObjectPattern"&&oe.properties.length>2&&oe.properties.some(K=>I(K)&&(!K.shorthand||K.value&&K.value.type==="AssignmentPattern"))}return!1}function k(V){return V.type==="AssignmentExpression"}function _(V){return k(V)||V.type==="VariableDeclarator"}function O(V){let oe=R(V);if(t(oe)){let K=V.type==="TSTypeAliasDeclaration"?"constraint":"bound";if(oe.length>1&&oe.some(Ee=>Ee[K]||Ee.default))return!0}return!1}function R(V){return M(V)&&V.typeParameters&&V.typeParameters.params?V.typeParameters.params:null}function M(V){return V.type==="TSTypeAliasDeclaration"||V.type==="TypeAlias"}function H(V){if(V.type!=="VariableDeclarator")return!1;let{typeAnnotation:oe}=V.id;if(!oe||!oe.typeAnnotation)return!1;let K=G(oe.typeAnnotation);return t(K)&&K.length>1&&K.some(Ee=>t(G(Ee))||Ee.type==="TSConditionalType")}function P(V){return V.type==="VariableDeclarator"&&V.init&&V.init.type==="ArrowFunctionExpression"}function G(V){return re(V)&&V.typeParameters&&V.typeParameters.params?V.typeParameters.params:null}function re(V){return V.type==="TSTypeReference"||V.type==="GenericTypeAnnotation"}function $(V,oe,K){let Ee=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!1,q=V.getValue(),le=()=>$(V,oe,K,!0);if(q.type==="TSNonNullExpression")return V.call(le,"expression");if(T(q)){if(D(V,oe,K).label==="member-chain")return!1;let Q=b(q);return!(Q.length===0||Q.length===1&&ee(Q[0],oe))||ne(q,K)?!1:V.call(le,"callee")}return A(q)?V.call(le,"object"):Ee&&(q.type==="Identifier"||q.type==="ThisExpression")}var W=.25;function ee(V,oe){let{printWidth:K}=oe;if(B(V))return!1;let Ee=K*W;if(V.type==="ThisExpression"||V.type==="Identifier"&&V.name.length<=Ee||w(V)&&!B(V.argument))return!0;let q=V.type==="Literal"&&"regex"in V&&V.regex.pattern||V.type==="RegExpLiteral"&&V.pattern;return q?q.length<=Ee:f(V)?v(V).length<=Ee:V.type==="TemplateLiteral"?V.expressions.length===0&&V.quasis[0].value.raw.length<=Ee&&!V.quasis[0].value.raw.includes(`
`):h(V)}function U(V,oe,K){if(!I(V))return!1;oe=l(oe);let Ee=3;return typeof oe=="string"&&s(oe)<K.tabWidth+Ee}function ne(V,oe){let K=se(V);if(t(K)){if(K.length>1)return!0;if(K.length===1){let q=K[0];if(q.type==="TSUnionType"||q.type==="UnionTypeAnnotation"||q.type==="TSIntersectionType"||q.type==="IntersectionTypeAnnotation"||q.type==="TSTypeLiteral"||q.type==="ObjectTypeAnnotation")return!0}let Ee=V.typeParameters?"typeParameters":"typeArguments";if(C(oe(Ee)))return!0}return!1}function se(V){return V.typeParameters&&V.typeParameters.params||V.typeArguments&&V.typeArguments.params}n.exports={printVariableDeclarator:o,printAssignmentExpression:y,printAssignment:d,isArrowFunctionVariableDeclarator:P}}}),wr=Z({"src/language-js/print/function-parameters.js"(e,n){"use strict";ae();var{getNextNonSpaceNonCommentCharacter:t}=Ge(),{printDanglingComments:s}=Qe(),{builders:{line:i,hardline:r,softline:u,group:a,indent:c,ifBreak:l},utils:{removeLines:C,willBreak:m}}=Le(),{getFunctionParameters:g,iterateFunctionParametersPath:p,isSimpleType:f,isTestCall:h,isTypeAnnotationAFunction:N,isObjectType:T,isObjectTypePropertyAFunction:A,hasRestParameter:b,shouldPrintComma:v,hasComment:B,isNextLineEmpty:w}=Xe(),{locEnd:I}=nt(),{ArgExpansionBailout:E}=Jt(),{printFunctionTypeParameters:D}=ot();function d(F,S,k,_,O){let R=F.getValue(),M=g(R),H=O?D(F,k,S):"";if(M.length===0)return[H,"(",s(F,k,!0,U=>t(k.originalText,U,I)===")"),")"];let P=F.getParentNode(),G=h(P),re=y(R),$=[];if(p(F,(U,ne)=>{let se=ne===M.length-1;se&&R.rest&&$.push("..."),$.push(S()),!se&&($.push(","),G||re?$.push(" "):w(M[ne],k)?$.push(r,r):$.push(i))}),_){if(m(H)||m($))throw new E;return a([C(H),"(",C($),")"])}let W=M.every(U=>!U.decorators);return re&&W?[H,"(",...$,")"]:G?[H,"(",...$,")"]:(A(P)||N(P)||P.type==="TypeAlias"||P.type==="UnionTypeAnnotation"||P.type==="TSUnionType"||P.type==="IntersectionTypeAnnotation"||P.type==="FunctionTypeAnnotation"&&P.returnType===R)&&M.length===1&&M[0].name===null&&R.this!==M[0]&&M[0].typeAnnotation&&R.typeParameters===null&&f(M[0].typeAnnotation)&&!R.rest?k.arrowParens==="always"?["(",...$,")"]:$:[H,"(",c([u,...$]),l(!b(R)&&v(k,"all")?",":""),u,")"]}function y(F){if(!F)return!1;let S=g(F);if(S.length!==1)return!1;let[k]=S;return!B(k)&&(k.type==="ObjectPattern"||k.type==="ArrayPattern"||k.type==="Identifier"&&k.typeAnnotation&&(k.typeAnnotation.type==="TypeAnnotation"||k.typeAnnotation.type==="TSTypeAnnotation")&&T(k.typeAnnotation.typeAnnotation)||k.type==="FunctionTypeParam"&&T(k.typeAnnotation)||k.type==="AssignmentPattern"&&(k.left.type==="ObjectPattern"||k.left.type==="ArrayPattern")&&(k.right.type==="Identifier"||k.right.type==="ObjectExpression"&&k.right.properties.length===0||k.right.type==="ArrayExpression"&&k.right.elements.length===0))}function o(F){let S;return F.returnType?(S=F.returnType,S.typeAnnotation&&(S=S.typeAnnotation)):F.typeAnnotation&&(S=F.typeAnnotation),S}function x(F,S){let k=o(F);if(!k)return!1;let _=F.typeParameters&&F.typeParameters.params;if(_){if(_.length>1)return!1;if(_.length===1){let O=_[0];if(O.constraint||O.default)return!1}}return g(F).length===1&&(T(k)||m(S))}n.exports={printFunctionParameters:d,shouldHugFunctionParameters:y,shouldGroupFunctionParameters:x}}}),_r=Z({"src/language-js/print/type-annotation.js"(e,n){"use strict";ae();var{printComments:t,printDanglingComments:s}=Qe(),{isNonEmptyArray:i}=Ge(),{builders:{group:r,join:u,line:a,softline:c,indent:l,align:C,ifBreak:m}}=Le(),g=kt(),{locStart:p}=nt(),{isSimpleType:f,isObjectType:h,hasLeadingOwnLineComment:N,isObjectTypePropertyAFunction:T,shouldPrintComma:A}=Xe(),{printAssignment:b}=Xt(),{printFunctionParameters:v,shouldGroupFunctionParameters:B}=wr(),{printArrayItems:w}=zt();function I(S){if(f(S)||h(S))return!0;if(S.type==="UnionTypeAnnotation"||S.type==="TSUnionType"){let k=S.types.filter(O=>O.type==="VoidTypeAnnotation"||O.type==="TSVoidKeyword"||O.type==="NullLiteralTypeAnnotation"||O.type==="TSNullKeyword").length,_=S.types.some(O=>O.type==="ObjectTypeAnnotation"||O.type==="TSTypeLiteral"||O.type==="GenericTypeAnnotation"||O.type==="TSTypeReference");if(S.types.length-1===k&&_)return!0}return!1}function E(S,k,_){let O=k.semi?";":"",R=S.getValue(),M=[];return M.push("opaque type ",_("id"),_("typeParameters")),R.supertype&&M.push(": ",_("supertype")),R.impltype&&M.push(" = ",_("impltype")),M.push(O),M}function D(S,k,_){let O=k.semi?";":"",R=S.getValue(),M=[];R.declare&&M.push("declare "),M.push("type ",_("id"),_("typeParameters"));let H=R.type==="TSTypeAliasDeclaration"?"typeAnnotation":"right";return[b(S,k,_,M," =",H),O]}function d(S,k,_){let O=S.getValue(),R=S.map(_,"types"),M=[],H=!1;for(let P=0;P<R.length;++P)P===0?M.push(R[P]):h(O.types[P-1])&&h(O.types[P])?M.push([" & ",H?l(R[P]):R[P]]):!h(O.types[P-1])&&!h(O.types[P])?M.push(l([" &",a,R[P]])):(P>1&&(H=!0),M.push(" & ",P>1?l(R[P]):R[P]));return r(M)}function y(S,k,_){let O=S.getValue(),R=S.getParentNode(),M=R.type!=="TypeParameterInstantiation"&&R.type!=="TSTypeParameterInstantiation"&&R.type!=="GenericTypeAnnotation"&&R.type!=="TSTypeReference"&&R.type!=="TSTypeAssertion"&&R.type!=="TupleTypeAnnotation"&&R.type!=="TSTupleType"&&!(R.type==="FunctionTypeParam"&&!R.name&&S.getParentNode(1).this!==R)&&!((R.type==="TypeAlias"||R.type==="VariableDeclarator"||R.type==="TSTypeAliasDeclaration")&&N(k.originalText,O)),H=I(O),P=S.map($=>{let W=_();return H||(W=C(2,W)),t($,W,k)},"types");if(H)return u(" | ",P);let G=M&&!N(k.originalText,O),re=[m([G?a:"","| "]),u([a,"| "],P)];return g(S,k)?r([l(re),c]):R.type==="TupleTypeAnnotation"&&R.types.length>1||R.type==="TSTupleType"&&R.elementTypes.length>1?r([l([m(["(",c]),re]),c,m(")")]):r(M?l(re):re)}function o(S,k,_){let O=S.getValue(),R=[],M=S.getParentNode(0),H=S.getParentNode(1),P=S.getParentNode(2),G=O.type==="TSFunctionType"||!((M.type==="ObjectTypeProperty"||M.type==="ObjectTypeInternalSlot")&&!M.variance&&!M.optional&&p(M)===p(O)||M.type==="ObjectTypeCallProperty"||P&&P.type==="DeclareFunction"),re=G&&(M.type==="TypeAnnotation"||M.type==="TSTypeAnnotation"),$=re&&G&&(M.type==="TypeAnnotation"||M.type==="TSTypeAnnotation")&&H.type==="ArrowFunctionExpression";T(M)&&(G=!0,re=!0),$&&R.push("(");let W=v(S,_,k,!1,!0),ee=O.returnType||O.predicate||O.typeAnnotation?[G?" => ":": ",_("returnType"),_("predicate"),_("typeAnnotation")]:"",U=B(O,ee);return R.push(U?r(W):W),ee&&R.push(ee),$&&R.push(")"),r(R)}function x(S,k,_){let O=S.getValue(),R=O.type==="TSTupleType"?"elementTypes":"types",M=O[R],H=i(M),P=H?c:"";return r(["[",l([P,w(S,k,R,_)]),m(H&&A(k,"all")?",":""),s(S,k,!0),P,"]"])}function F(S,k,_){let O=S.getValue(),R=O.type==="OptionalIndexedAccessType"&&O.optional?"?.[":"[";return[_("objectType"),R,_("indexType"),"]"]}n.exports={printOpaqueType:E,printTypeAlias:D,printIntersectionType:d,printUnionType:y,printFunctionType:o,printTupleType:x,printIndexedAccessType:F,shouldHugType:I}}}),Pr=Z({"src/language-js/print/type-parameters.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{builders:{join:s,line:i,hardline:r,softline:u,group:a,indent:c,ifBreak:l}}=Le(),{isTestCall:C,hasComment:m,CommentCheckFlags:g,isTSXFile:p,shouldPrintComma:f,getFunctionParameters:h,isObjectType:N}=Xe(),{createGroupIdMapper:T}=Ge(),{shouldHugType:A}=_r(),{isArrowFunctionVariableDeclarator:b}=Xt(),v=T("typeParameters");function B(E,D,d,y){let o=E.getValue();if(!o[y])return"";if(!Array.isArray(o[y]))return d(y);let x=E.getNode(2),F=x&&C(x);if(!E.match(O=>!(O[y].length===1&&N(O[y][0])),void 0,(O,R)=>R==="typeAnnotation",O=>O.type==="Identifier",b)&&(F||o[y].length===0||o[y].length===1&&(o[y][0].type==="NullableTypeAnnotation"||A(o[y][0]))))return["<",s(", ",E.map(d,y)),w(E,D),">"];let _=o.type==="TSTypeParameterInstantiation"?"":h(o).length===1&&p(D)&&!o[y][0].constraint&&E.getParentNode().type==="ArrowFunctionExpression"?",":f(D,"all")?l(","):"";return a(["<",c([u,s([",",i],E.map(d,y))]),_,u,">"],{id:v(o)})}function w(E,D){let d=E.getValue();if(!m(d,g.Dangling))return"";let y=!m(d,g.Line),o=t(E,D,y);return y?o:[o,r]}function I(E,D,d){let y=E.getValue(),o=[],x=E.getParentNode();return x.type==="TSMappedType"?(o.push("[",d("name")),y.constraint&&o.push(" in ",d("constraint")),x.nameType&&o.push(" as ",E.callParent(()=>d("nameType"))),o.push("]"),o):(y.variance&&o.push(d("variance")),o.push(d("name")),y.bound&&o.push(": ",d("bound")),y.constraint&&o.push(" extends ",d("constraint")),y.default&&o.push(" = ",d("default")),o)}n.exports={printTypeParameter:I,printTypeParameters:B,getTypeParametersGroupId:v}}}),Kt=Z({"src/language-js/print/property.js"(e,n){"use strict";ae();var{printComments:t}=Qe(),{printString:s,printNumber:i}=Ge(),{isNumericLiteral:r,isSimpleNumber:u,isStringLiteral:a,isStringPropSafeToUnquote:c,rawText:l}=Xe(),{printAssignment:C}=Xt(),m=new WeakMap;function g(f,h,N){let T=f.getNode();if(T.computed)return["[",N("key"),"]"];let A=f.getParentNode(),{key:b}=T;if(T.type==="ClassPrivateProperty"&&b.type==="Identifier")return["#",N("key")];if(h.quoteProps==="consistent"&&!m.has(A)){let v=(A.properties||A.body||A.members).some(B=>!B.computed&&B.key&&a(B.key)&&!c(B,h));m.set(A,v)}if((b.type==="Identifier"||r(b)&&u(i(l(b)))&&String(b.value)===i(l(b))&&!(h.parser==="typescript"||h.parser==="babel-ts"))&&(h.parser==="json"||h.quoteProps==="consistent"&&m.get(A))){let v=s(JSON.stringify(b.type==="Identifier"?b.name:b.value.toString()),h);return f.call(B=>t(B,v,h),"key")}return c(T,h)&&(h.quoteProps==="as-needed"||h.quoteProps==="consistent"&&!m.get(A))?f.call(v=>t(v,/^\d/.test(b.value)?i(b.value):b.value,h),"key"):N("key")}function p(f,h,N){return f.getValue().shorthand?N("value"):C(f,h,N,g(f,h,N),":","value")}n.exports={printProperty:p,printPropertyKey:g}}}),Ir=Z({"src/language-js/print/function.js"(e,n){"use strict";ae();var t=Ut(),{printDanglingComments:s,printCommentsSeparately:i}=Qe(),r=st(),{getNextNonSpaceNonCommentCharacterIndex:u}=Ge(),{builders:{line:a,softline:c,group:l,indent:C,ifBreak:m,hardline:g,join:p,indentIfBreak:f},utils:{removeLines:h,willBreak:N}}=Le(),{ArgExpansionBailout:T}=Jt(),{getFunctionParameters:A,hasLeadingOwnLineComment:b,isFlowAnnotationComment:v,isJsxNode:B,isTemplateOnItsOwnLine:w,shouldPrintComma:I,startsWithNoLookaheadToken:E,isBinaryish:D,isLineComment:d,hasComment:y,getComments:o,CommentCheckFlags:x,isCallLikeExpression:F,isCallExpression:S,getCallArguments:k,hasNakedLeftSide:_,getLeftSide:O}=Xe(),{locEnd:R}=nt(),{printFunctionParameters:M,shouldGroupFunctionParameters:H}=wr(),{printPropertyKey:P}=Kt(),{printFunctionTypeParameters:G}=ot();function re(ue,Q,de,ge){let ve=ue.getValue(),xe=!1;if((ve.type==="FunctionDeclaration"||ve.type==="FunctionExpression")&&ge&&ge.expandLastArg){let ce=ue.getParentNode();S(ce)&&k(ce).length>1&&(xe=!0)}let we=[];ve.type==="TSDeclareFunction"&&ve.declare&&we.push("declare "),ve.async&&we.push("async "),ve.generator?we.push("function* "):we.push("function "),ve.id&&we.push(Q("id"));let fe=M(ue,Q,de,xe),pe=oe(ue,Q,de),me=H(ve,pe);return we.push(G(ue,de,Q),l([me?l(fe):fe,pe]),ve.body?" ":"",Q("body")),de.semi&&(ve.declare||!ve.body)&&we.push(";"),we}function $(ue,Q,de){let ge=ue.getNode(),{kind:ve}=ge,xe=ge.value||ge,we=[];return!ve||ve==="init"||ve==="method"||ve==="constructor"?xe.async&&we.push("async "):(t.ok(ve==="get"||ve==="set"),we.push(ve," ")),xe.generator&&we.push("*"),we.push(P(ue,Q,de),ge.optional||ge.key.optional?"?":""),ge===xe?we.push(W(ue,Q,de)):xe.type==="FunctionExpression"?we.push(ue.call(fe=>W(fe,Q,de),"value")):we.push(de("value")),we}function W(ue,Q,de){let ge=ue.getNode(),ve=M(ue,de,Q),xe=oe(ue,de,Q),we=H(ge,xe),fe=[G(ue,Q,de),l([we?l(ve):ve,xe])];return ge.body?fe.push(" ",de("body")):fe.push(Q.semi?";":""),fe}function ee(ue,Q,de,ge){let ve=ue.getValue(),xe=[];if(ve.async&&xe.push("async "),V(ue,Q))xe.push(de(["params",0]));else{let fe=ge&&(ge.expandLastArg||ge.expandFirstArg),pe=oe(ue,de,Q);if(fe){if(N(pe))throw new T;pe=l(h(pe))}xe.push(l([M(ue,de,Q,fe,!0),pe]))}let we=s(ue,Q,!0,fe=>{let pe=u(Q.originalText,fe,R);return pe!==!1&&Q.originalText.slice(pe,pe+2)==="=>"});return we&&xe.push(" ",we),xe}function U(ue,Q,de,ge,ve,xe){let we=ue.getName(),fe=ue.getParentNode(),pe=F(fe)&&we==="callee",me=Boolean(Q&&Q.assignmentLayout),ce=xe.body.type!=="BlockStatement"&&xe.body.type!=="ObjectExpression"&&xe.body.type!=="SequenceExpression",he=pe&&ce||Q&&Q.assignmentLayout==="chain-tail-arrow-chain",J=Symbol("arrow-chain");return xe.body.type==="SequenceExpression"&&(ve=l(["(",C([c,ve]),c,")"])),l([l(C([pe||me?c:"",l(p([" =>",a],de),{shouldBreak:ge})]),{id:J,shouldBreak:he})," =>",f(ce?C([a,ve]):[" ",ve],{groupId:J}),pe?m(c,"",{groupId:J}):""])}function ne(ue,Q,de,ge){let ve=ue.getValue(),xe=[],we=[],fe=!1;if(function J(){let ye=ee(ue,Q,de,ge);if(xe.length===0)xe.push(ye);else{let{leading:X,trailing:Y}=i(ue,Q);xe.push([X,ye]),we.unshift(Y)}fe=fe||ve.returnType&&A(ve).length>0||ve.typeParameters||A(ve).some(X=>X.type!=="Identifier"),ve.body.type!=="ArrowFunctionExpression"||ge&&ge.expandLastArg?we.unshift(de("body",ge)):(ve=ve.body,ue.call(J,"body"))}(),xe.length>1)return U(ue,ge,xe,fe,we,ve);let pe=xe;if(pe.push(" =>"),!b(Q.originalText,ve.body)&&(ve.body.type==="ArrayExpression"||ve.body.type==="ObjectExpression"||ve.body.type==="BlockStatement"||B(ve.body)||w(ve.body,Q.originalText)||ve.body.type==="ArrowFunctionExpression"||ve.body.type==="DoExpression"))return l([...pe," ",we]);if(ve.body.type==="SequenceExpression")return l([...pe,l([" (",C([c,we]),c,")"])]);let me=(ge&&ge.expandLastArg||ue.getParentNode().type==="JSXExpressionContainer")&&!y(ve),ce=ge&&ge.expandLastArg&&I(Q,"all"),he=ve.body.type==="ConditionalExpression"&&!E(ve.body,!1);return l([...pe,l([C([a,he?m("","("):"",we,he?m("",")"):""]),me?[m(ce?",":""),c]:""])])}function se(ue){let Q=A(ue);return Q.length===1&&!ue.typeParameters&&!y(ue,x.Dangling)&&Q[0].type==="Identifier"&&!Q[0].typeAnnotation&&!y(Q[0])&&!Q[0].optional&&!ue.predicate&&!ue.returnType}function V(ue,Q){if(Q.arrowParens==="always")return!1;if(Q.arrowParens==="avoid"){let de=ue.getValue();return se(de)}return!1}function oe(ue,Q,de){let ge=ue.getValue(),ve=Q("returnType");if(ge.returnType&&v(de.originalText,ge.returnType))return[" /*: ",ve," */"];let xe=[ve];return ge.returnType&&ge.returnType.typeAnnotation&&xe.unshift(": "),ge.predicate&&xe.push(ge.returnType?" ":": ",Q("predicate")),xe}function K(ue,Q,de){let ge=ue.getValue(),ve=Q.semi?";":"",xe=[];ge.argument&&(le(Q,ge.argument)?xe.push([" (",C([g,de("argument")]),g,")"]):D(ge.argument)||ge.argument.type==="SequenceExpression"?xe.push(l([m(" ("," "),C([c,de("argument")]),c,m(")")])):xe.push(" ",de("argument")));let we=o(ge),fe=r(we),pe=fe&&d(fe);return pe&&xe.push(ve),y(ge,x.Dangling)&&xe.push(" ",s(ue,Q,!0)),pe||xe.push(ve),xe}function Ee(ue,Q,de){return["return",K(ue,Q,de)]}function q(ue,Q,de){return["throw",K(ue,Q,de)]}function le(ue,Q){if(b(ue.originalText,Q))return!0;if(_(Q)){let de=Q,ge;for(;ge=O(de);)if(de=ge,b(ue.originalText,de))return!0}return!1}n.exports={printFunction:re,printArrowFunction:ne,printMethod:$,printReturnStatement:Ee,printThrowStatement:q,printMethodInternal:W,shouldPrintParamsWithoutParens:V}}}),Un=Z({"src/language-js/print/decorators.js"(e,n){"use strict";ae();var{isNonEmptyArray:t,hasNewline:s}=Ge(),{builders:{line:i,hardline:r,join:u,breakParent:a,group:c}}=Le(),{locStart:l,locEnd:C}=nt(),{getParentExportDeclaration:m}=Xe();function g(T,A,b){let v=T.getValue();return c([u(i,T.map(b,"decorators")),h(v,A)?r:i])}function p(T,A,b){return[u(r,T.map(b,"declaration","decorators")),r]}function f(T,A,b){let v=T.getValue(),{decorators:B}=v;if(!t(B)||N(T.getParentNode()))return;let w=v.type==="ClassExpression"||v.type==="ClassDeclaration"||h(v,A);return[m(T)?r:w?a:"",u(i,T.map(b,"decorators")),i]}function h(T,A){return T.decorators.some(b=>s(A.originalText,C(b)))}function N(T){if(T.type!=="ExportDefaultDeclaration"&&T.type!=="ExportNamedDeclaration"&&T.type!=="DeclareExportDeclaration")return!1;let A=T.declaration&&T.declaration.decorators;return t(A)&&l(T,{ignoreDecorators:!0})>l(A[0])}n.exports={printDecorators:f,printClassMemberDecorators:g,printDecoratorsBeforeExport:p,hasDecoratorsBeforeExport:N}}}),Yt=Z({"src/language-js/print/class.js"(e,n){"use strict";ae();var{isNonEmptyArray:t,createGroupIdMapper:s}=Ge(),{printComments:i,printDanglingComments:r}=Qe(),{builders:{join:u,line:a,hardline:c,softline:l,group:C,indent:m,ifBreak:g}}=Le(),{hasComment:p,CommentCheckFlags:f}=Xe(),{getTypeParametersGroupId:h}=Pr(),{printMethod:N}=Ir(),{printOptionalToken:T,printTypeAnnotation:A,printDefiniteToken:b}=ot(),{printPropertyKey:v}=Kt(),{printAssignment:B}=Xt(),{printClassMemberDecorators:w}=Un();function I(k,_,O){let R=k.getValue(),M=[];R.declare&&M.push("declare "),R.abstract&&M.push("abstract "),M.push("class");let H=R.id&&p(R.id,f.Trailing)||R.typeParameters&&p(R.typeParameters,f.Trailing)||R.superClass&&p(R.superClass)||t(R.extends)||t(R.mixins)||t(R.implements),P=[],G=[];if(R.id&&P.push(" ",O("id")),P.push(O("typeParameters")),R.superClass){let re=[x(k,_,O),O("superTypeParameters")],$=k.call(W=>["extends ",i(W,re,_)],"superClass");H?G.push(a,C($)):G.push(" ",$)}else G.push(o(k,_,O,"extends"));if(G.push(o(k,_,O,"mixins"),o(k,_,O,"implements")),H){let re;y(R)?re=[...P,m(G)]:re=m([...P,G]),M.push(C(re,{id:E(R)}))}else M.push(...P,...G);return M.push(" ",O("body")),M}var E=s("heritageGroup");function D(k){return g(c,"",{groupId:E(k)})}function d(k){return["superClass","extends","mixins","implements"].filter(_=>Boolean(k[_])).length>1}function y(k){return k.typeParameters&&!p(k.typeParameters,f.Trailing|f.Line)&&!d(k)}function o(k,_,O,R){let M=k.getValue();if(!t(M[R]))return"";let H=r(k,_,!0,P=>{let{marker:G}=P;return G===R});return[y(M)?g(" ",a,{groupId:h(M.typeParameters)}):a,H,H&&c,R,C(m([a,u([",",a],k.map(O,R))]))]}function x(k,_,O){let R=O("superClass");return k.getParentNode().type==="AssignmentExpression"?C(g(["(",m([l,R]),l,")"],R)):R}function F(k,_,O){let R=k.getValue(),M=[];return t(R.decorators)&&M.push(w(k,_,O)),R.accessibility&&M.push(R.accessibility+" "),R.readonly&&M.push("readonly "),R.declare&&M.push("declare "),R.static&&M.push("static "),(R.type==="TSAbstractMethodDefinition"||R.abstract)&&M.push("abstract "),R.override&&M.push("override "),M.push(N(k,_,O)),M}function S(k,_,O){let R=k.getValue(),M=[],H=_.semi?";":"";return t(R.decorators)&&M.push(w(k,_,O)),R.accessibility&&M.push(R.accessibility+" "),R.declare&&M.push("declare "),R.static&&M.push("static "),(R.type==="TSAbstractPropertyDefinition"||R.abstract)&&M.push("abstract "),R.override&&M.push("override "),R.readonly&&M.push("readonly "),R.variance&&M.push(O("variance")),R.type==="ClassAccessorProperty"&&M.push("accessor "),M.push(v(k,_,O),T(k),b(k),A(k,_,O)),[B(k,_,O,M," =","value"),H]}n.exports={printClass:I,printClassMethod:F,printClassProperty:S,printHardlineAfterHeritage:D}}}),ao=Z({"src/language-js/print/interface.js"(e,n){"use strict";ae();var{isNonEmptyArray:t}=Ge(),{builders:{join:s,line:i,group:r,indent:u,ifBreak:a}}=Le(),{hasComment:c,identity:l,CommentCheckFlags:C}=Xe(),{getTypeParametersGroupId:m}=Pr(),{printTypeScriptModifiers:g}=ot();function p(f,h,N){let T=f.getValue(),A=[];T.declare&&A.push("declare "),T.type==="TSInterfaceDeclaration"&&A.push(T.abstract?"abstract ":"",g(f,h,N)),A.push("interface");let b=[],v=[];T.type!=="InterfaceTypeAnnotation"&&b.push(" ",N("id"),N("typeParameters"));let B=T.typeParameters&&!c(T.typeParameters,C.Trailing|C.Line);return t(T.extends)&&v.push(B?a(" ",i,{groupId:m(T.typeParameters)}):i,"extends ",(T.extends.length===1?l:u)(s([",",i],f.map(N,"extends")))),T.id&&c(T.id,C.Trailing)||t(T.extends)?B?A.push(r([...b,u(v)])):A.push(r(u([...b,...v]))):A.push(...b,...v),A.push(" ",N("body")),r(A)}n.exports={printInterface:p}}}),io=Z({"src/language-js/print/module.js"(e,n){"use strict";ae();var{isNonEmptyArray:t}=Ge(),{builders:{softline:s,group:i,indent:r,join:u,line:a,ifBreak:c,hardline:l}}=Le(),{printDanglingComments:C}=Qe(),{hasComment:m,CommentCheckFlags:g,shouldPrintComma:p,needsHardlineAfterDanglingComment:f,isStringLiteral:h,rawText:N}=Xe(),{locStart:T,hasSameLoc:A}=nt(),{hasDecoratorsBeforeExport:b,printDecoratorsBeforeExport:v}=Un();function B(S,k,_){let O=S.getValue(),R=k.semi?";":"",M=[],{importKind:H}=O;return M.push("import"),H&&H!=="value"&&M.push(" ",H),M.push(d(S,k,_),D(S,k,_),o(S,k,_),R),M}function w(S,k,_){let O=S.getValue(),R=[];b(O)&&R.push(v(S,k,_));let{type:M,exportKind:H,declaration:P}=O;return R.push("export"),(O.default||M==="ExportDefaultDeclaration")&&R.push(" default"),m(O,g.Dangling)&&(R.push(" ",C(S,k,!0)),f(O)&&R.push(l)),P?R.push(" ",_("declaration")):R.push(H==="type"?" type":"",d(S,k,_),D(S,k,_),o(S,k,_)),E(O,k)&&R.push(";"),R}function I(S,k,_){let O=S.getValue(),R=k.semi?";":"",M=[],{exportKind:H,exported:P}=O;return M.push("export"),H==="type"&&M.push(" type"),M.push(" *"),P&&M.push(" as ",_("exported")),M.push(D(S,k,_),o(S,k,_),R),M}function E(S,k){if(!k.semi)return!1;let{type:_,declaration:O}=S,R=S.default||_==="ExportDefaultDeclaration";if(!O)return!0;let{type:M}=O;return!!(R&&M!=="ClassDeclaration"&&M!=="FunctionDeclaration"&&M!=="TSInterfaceDeclaration"&&M!=="DeclareClass"&&M!=="DeclareFunction"&&M!=="TSDeclareFunction"&&M!=="EnumDeclaration")}function D(S,k,_){let O=S.getValue();if(!O.source)return"";let R=[];return y(O,k)||R.push(" from"),R.push(" ",_("source")),R}function d(S,k,_){let O=S.getValue();if(y(O,k))return"";let R=[" "];if(t(O.specifiers)){let M=[],H=[];S.each(()=>{let P=S.getValue().type;if(P==="ExportNamespaceSpecifier"||P==="ExportDefaultSpecifier"||P==="ImportNamespaceSpecifier"||P==="ImportDefaultSpecifier")M.push(_());else if(P==="ExportSpecifier"||P==="ImportSpecifier")H.push(_());else throw new Error("Unknown specifier type ".concat(JSON.stringify(P)))},"specifiers"),R.push(u(", ",M)),H.length>0&&(M.length>0&&R.push(", "),H.length>1||M.length>0||O.specifiers.some(G=>m(G))?R.push(i(["{",r([k.bracketSpacing?a:s,u([",",a],H)]),c(p(k)?",":""),k.bracketSpacing?a:s,"}"])):R.push(["{",k.bracketSpacing?" ":"",...H,k.bracketSpacing?" ":"","}"]))}else R.push("{}");return R}function y(S,k){let{type:_,importKind:O,source:R,specifiers:M}=S;return _!=="ImportDeclaration"||t(M)||O==="type"?!1:!/{\s*}/.test(k.originalText.slice(T(S),T(R)))}function o(S,k,_){let O=S.getNode();return t(O.assertions)?[" assert {",k.bracketSpacing?" ":"",u(", ",S.map(_,"assertions")),k.bracketSpacing?" ":"","}"]:""}function x(S,k,_){let O=S.getNode(),{type:R}=O,M=[],H=R==="ImportSpecifier"?O.importKind:O.exportKind;H&&H!=="value"&&M.push(H," ");let P=R.startsWith("Import"),G=P?"imported":"local",re=P?"local":"exported",$=O[G],W=O[re],ee="",U="";return R==="ExportNamespaceSpecifier"||R==="ImportNamespaceSpecifier"?ee="*":$&&(ee=_(G)),W&&!F(O)&&(U=_(re)),M.push(ee,ee&&U?" as ":"",U),M}function F(S){if(S.type!=="ImportSpecifier"&&S.type!=="ExportSpecifier")return!1;let{local:k,[S.type==="ImportSpecifier"?"imported":"exported"]:_}=S;if(k.type!==_.type||!A(k,_))return!1;if(h(k))return k.value===_.value&&N(k)===N(_);switch(k.type){case"Identifier":return k.name===_.name;default:return!1}}n.exports={printImportDeclaration:B,printExportDeclaration:w,printExportAllDeclaration:I,printModuleSpecifier:x}}}),zn=Z({"src/language-js/print/object.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{builders:{line:s,softline:i,group:r,indent:u,ifBreak:a,hardline:c}}=Le(),{getLast:l,hasNewlineInRange:C,hasNewline:m,isNonEmptyArray:g}=Ge(),{shouldPrintComma:p,hasComment:f,getComments:h,CommentCheckFlags:N,isNextLineEmpty:T}=Xe(),{locStart:A,locEnd:b}=nt(),{printOptionalToken:v,printTypeAnnotation:B}=ot(),{shouldHugFunctionParameters:w}=wr(),{shouldHugType:I}=_r(),{printHardlineAfterHeritage:E}=Yt();function D(d,y,o){let x=y.semi?";":"",F=d.getValue(),S;F.type==="TSTypeLiteral"?S="members":F.type==="TSInterfaceBody"?S="body":S="properties";let k=F.type==="ObjectTypeAnnotation",_=[S];k&&_.push("indexers","callProperties","internalSlots");let O=_.map(V=>F[V][0]).sort((V,oe)=>A(V)-A(oe))[0],R=d.getParentNode(0),M=k&&R&&(R.type==="InterfaceDeclaration"||R.type==="DeclareInterface"||R.type==="DeclareClass")&&d.getName()==="body",H=F.type==="TSInterfaceBody"||M||F.type==="ObjectPattern"&&R.type!=="FunctionDeclaration"&&R.type!=="FunctionExpression"&&R.type!=="ArrowFunctionExpression"&&R.type!=="ObjectMethod"&&R.type!=="ClassMethod"&&R.type!=="ClassPrivateMethod"&&R.type!=="AssignmentPattern"&&R.type!=="CatchClause"&&F.properties.some(V=>V.value&&(V.value.type==="ObjectPattern"||V.value.type==="ArrayPattern"))||F.type!=="ObjectPattern"&&O&&C(y.originalText,A(F),A(O)),P=M?";":F.type==="TSInterfaceBody"||F.type==="TSTypeLiteral"?a(x,";"):",",G=F.type==="RecordExpression"?"#{":F.exact?"{|":"{",re=F.exact?"|}":"}",$=[];for(let V of _)d.each(oe=>{let K=oe.getValue();$.push({node:K,printed:o(),loc:A(K)})},V);_.length>1&&$.sort((V,oe)=>V.loc-oe.loc);let W=[],ee=$.map(V=>{let oe=[...W,r(V.printed)];return W=[P,s],(V.node.type==="TSPropertySignature"||V.node.type==="TSMethodSignature"||V.node.type==="TSConstructSignatureDeclaration")&&f(V.node,N.PrettierIgnore)&&W.shift(),T(V.node,y)&&W.push(c),oe});if(F.inexact){let V;if(f(F,N.Dangling)){let oe=f(F,N.Line);V=[t(d,y,!0),oe||m(y.originalText,b(l(h(F))))?c:s,"..."]}else V=["..."];ee.push([...W,...V])}let U=l(F[S]),ne=!(F.inexact||U&&U.type==="RestElement"||U&&(U.type==="TSPropertySignature"||U.type==="TSCallSignatureDeclaration"||U.type==="TSMethodSignature"||U.type==="TSConstructSignatureDeclaration")&&f(U,N.PrettierIgnore)),se;if(ee.length===0){if(!f(F,N.Dangling))return[G,re,B(d,y,o)];se=r([G,t(d,y),i,re,v(d),B(d,y,o)])}else se=[M&&g(F.properties)?E(R):"",G,u([y.bracketSpacing?s:i,...ee]),a(ne&&(P!==","||p(y))?P:""),y.bracketSpacing?s:i,re,v(d),B(d,y,o)];return d.match(V=>V.type==="ObjectPattern"&&!V.decorators,(V,oe,K)=>w(V)&&(oe==="params"||oe==="parameters"||oe==="this"||oe==="rest")&&K===0)||d.match(I,(V,oe)=>oe==="typeAnnotation",(V,oe)=>oe==="typeAnnotation",(V,oe,K)=>w(V)&&(oe==="params"||oe==="parameters"||oe==="this"||oe==="rest")&&K===0)||!H&&d.match(V=>V.type==="ObjectPattern",V=>V.type==="AssignmentExpression"||V.type==="VariableDeclarator")?se:r(se,{shouldBreak:H})}n.exports={printObject:D}}}),wm=Z({"src/language-js/print/flow.js"(e,n){"use strict";ae();var t=Ut(),{printDanglingComments:s}=Qe(),{printString:i,printNumber:r}=Ge(),{builders:{hardline:u,softline:a,group:c,indent:l}}=Le(),{getParentExportDeclaration:C,isFunctionNotation:m,isGetterOrSetter:g,rawText:p,shouldPrintComma:f}=Xe(),{locStart:h,locEnd:N}=nt(),{printClass:T}=Yt(),{printOpaqueType:A,printTypeAlias:b,printIntersectionType:v,printUnionType:B,printFunctionType:w,printTupleType:I,printIndexedAccessType:E}=_r(),{printInterface:D}=ao(),{printTypeParameter:d,printTypeParameters:y}=Pr(),{printExportDeclaration:o,printExportAllDeclaration:x}=io(),{printArrayItems:F}=zt(),{printObject:S}=zn(),{printPropertyKey:k}=Kt(),{printOptionalToken:_,printTypeAnnotation:O,printRestSpread:R}=ot();function M(P,G,re){let $=P.getValue(),W=G.semi?";":"",ee=[];switch($.type){case"DeclareClass":return H(P,T(P,G,re));case"DeclareFunction":return H(P,["function ",re("id"),$.predicate?" ":"",re("predicate"),W]);case"DeclareModule":return H(P,["module ",re("id")," ",re("body")]);case"DeclareModuleExports":return H(P,["module.exports",": ",re("typeAnnotation"),W]);case"DeclareVariable":return H(P,["var ",re("id"),W]);case"DeclareOpaqueType":return H(P,A(P,G,re));case"DeclareInterface":return H(P,D(P,G,re));case"DeclareTypeAlias":return H(P,b(P,G,re));case"DeclareExportDeclaration":return H(P,o(P,G,re));case"DeclareExportAllDeclaration":return H(P,x(P,G,re));case"OpaqueType":return A(P,G,re);case"TypeAlias":return b(P,G,re);case"IntersectionTypeAnnotation":return v(P,G,re);case"UnionTypeAnnotation":return B(P,G,re);case"FunctionTypeAnnotation":return w(P,G,re);case"TupleTypeAnnotation":return I(P,G,re);case"GenericTypeAnnotation":return[re("id"),y(P,G,re,"typeParameters")];case"IndexedAccessType":case"OptionalIndexedAccessType":return E(P,G,re);case"TypeAnnotation":return re("typeAnnotation");case"TypeParameter":return d(P,G,re);case"TypeofTypeAnnotation":return["typeof ",re("argument")];case"ExistsTypeAnnotation":return"*";case"EmptyTypeAnnotation":return"empty";case"MixedTypeAnnotation":return"mixed";case"ArrayTypeAnnotation":return[re("elementType"),"[]"];case"BooleanLiteralTypeAnnotation":return String($.value);case"EnumDeclaration":return["enum ",re("id")," ",re("body")];case"EnumBooleanBody":case"EnumNumberBody":case"EnumStringBody":case"EnumSymbolBody":{if($.type==="EnumSymbolBody"||$.explicitType){let U=null;switch($.type){case"EnumBooleanBody":U="boolean";break;case"EnumNumberBody":U="number";break;case"EnumStringBody":U="string";break;case"EnumSymbolBody":U="symbol";break}ee.push("of ",U," ")}if($.members.length===0&&!$.hasUnknownMembers)ee.push(c(["{",s(P,G),a,"}"]));else{let U=$.members.length>0?[u,F(P,G,"members",re),$.hasUnknownMembers||f(G)?",":""]:[];ee.push(c(["{",l([...U,...$.hasUnknownMembers?[u,"..."]:[]]),s(P,G,!0),u,"}"]))}return ee}case"EnumBooleanMember":case"EnumNumberMember":case"EnumStringMember":return[re("id")," = ",typeof $.init=="object"?re("init"):String($.init)];case"EnumDefaultedMember":return re("id");case"FunctionTypeParam":{let U=$.name?re("name"):P.getParentNode().this===$?"this":"";return[U,_(P),U?": ":"",re("typeAnnotation")]}case"InterfaceDeclaration":case"InterfaceTypeAnnotation":return D(P,G,re);case"ClassImplements":case"InterfaceExtends":return[re("id"),re("typeParameters")];case"NullableTypeAnnotation":return["?",re("typeAnnotation")];case"Variance":{let{kind:U}=$;return t.ok(U==="plus"||U==="minus"),U==="plus"?"+":"-"}case"ObjectTypeCallProperty":return $.static&&ee.push("static "),ee.push(re("value")),ee;case"ObjectTypeIndexer":return[$.static?"static ":"",$.variance?re("variance"):"","[",re("id"),$.id?": ":"",re("key"),"]: ",re("value")];case"ObjectTypeProperty":{let U="";return $.proto?U="proto ":$.static&&(U="static "),[U,g($)?$.kind+" ":"",$.variance?re("variance"):"",k(P,G,re),_(P),m($)?"":": ",re("value")]}case"ObjectTypeAnnotation":return S(P,G,re);case"ObjectTypeInternalSlot":return[$.static?"static ":"","[[",re("id"),"]]",_(P),$.method?"":": ",re("value")];case"ObjectTypeSpreadProperty":return R(P,G,re);case"QualifiedTypeofIdentifier":case"QualifiedTypeIdentifier":return[re("qualification"),".",re("id")];case"StringLiteralTypeAnnotation":return i(p($),G);case"NumberLiteralTypeAnnotation":t.strictEqual(typeof $.value,"number");case"BigIntLiteralTypeAnnotation":return $.extra?r($.extra.raw):r($.raw);case"TypeCastExpression":return["(",re("expression"),O(P,G,re),")"];case"TypeParameterDeclaration":case"TypeParameterInstantiation":{let U=y(P,G,re,"params");if(G.parser==="flow"){let ne=h($),se=N($),V=G.originalText.lastIndexOf("/*",ne),oe=G.originalText.indexOf("*/",se);if(V!==-1&&oe!==-1){let K=G.originalText.slice(V+2,oe).trim();if(K.startsWith("::")&&!K.includes("/*")&&!K.includes("*/"))return["/*:: ",U," */"]}}return U}case"InferredPredicate":return"%checks";case"DeclaredPredicate":return["%checks(",re("value"),")"];case"AnyTypeAnnotation":return"any";case"BooleanTypeAnnotation":return"boolean";case"BigIntTypeAnnotation":return"bigint";case"NullLiteralTypeAnnotation":return"null";case"NumberTypeAnnotation":return"number";case"SymbolTypeAnnotation":return"symbol";case"StringTypeAnnotation":return"string";case"VoidTypeAnnotation":return"void";case"ThisTypeAnnotation":return"this";case"Node":case"Printable":case"SourceLocation":case"Position":case"Statement":case"Function":case"Pattern":case"Expression":case"Declaration":case"Specifier":case"NamedSpecifier":case"Comment":case"MemberTypeAnnotation":case"Type":throw new Error("unprintable type: "+JSON.stringify($.type))}}function H(P,G){let re=C(P);return re?(t.strictEqual(re.type,"DeclareExportDeclaration"),G):["declare ",G]}n.exports={printFlow:M}}}),_m=Z({"src/language-js/utils/is-ts-keyword-type.js"(e,n){"use strict";ae();function t(s){let{type:i}=s;return i.startsWith("TS")&&i.endsWith("Keyword")}n.exports=t}}),oo=Z({"src/language-js/print/ternary.js"(e,n){"use strict";ae();var{hasNewlineInRange:t}=Ge(),{isJsxNode:s,getComments:i,isCallExpression:r,isMemberExpression:u}=Xe(),{locStart:a,locEnd:c}=nt(),l=Pt(),{builders:{line:C,softline:m,group:g,indent:p,align:f,ifBreak:h,dedent:N,breakParent:T}}=Le();function A(I){let E=[I];for(let D=0;D<E.length;D++){let d=E[D];for(let y of["test","consequent","alternate"]){let o=d[y];if(s(o))return!0;o.type==="ConditionalExpression"&&E.push(o)}}return!1}function b(I,E,D){let d=I.getValue(),y=d.type==="ConditionalExpression",o=y?"alternate":"falseType",x=I.getParentNode(),F=y?D("test"):[D("checkType")," ","extends"," ",D("extendsType")];return x.type===d.type&&x[o]===d?f(2,F):F}var v=new Map([["AssignmentExpression","right"],["VariableDeclarator","init"],["ReturnStatement","argument"],["ThrowStatement","argument"],["UnaryExpression","argument"],["YieldExpression","argument"]]);function B(I){let E=I.getValue();if(E.type!=="ConditionalExpression")return!1;let D,d=E;for(let y=0;!D;y++){let o=I.getParentNode(y);if(r(o)&&o.callee===d||u(o)&&o.object===d||o.type==="TSNonNullExpression"&&o.expression===d){d=o;continue}o.type==="NewExpression"&&o.callee===d||o.type==="TSAsExpression"&&o.expression===d?(D=I.getParentNode(y+1),d=o):D=o}return d===E?!1:D[v.get(D.type)]===d}function w(I,E,D){let d=I.getValue(),y=d.type==="ConditionalExpression",o=y?"consequent":"trueType",x=y?"alternate":"falseType",F=y?["test"]:["checkType","extendsType"],S=d[o],k=d[x],_=[],O=!1,R=I.getParentNode(),M=R.type===d.type&&F.some(K=>R[K]===d),H=R.type===d.type&&!M,P,G,re=0;do G=P||d,P=I.getParentNode(re),re++;while(P&&P.type===d.type&&F.every(K=>P[K]!==G));let $=P||R,W=G;if(y&&(s(d[F[0]])||s(S)||s(k)||A(W))){O=!0,H=!0;let K=q=>[h("("),p([m,q]),m,h(")")],Ee=q=>q.type==="NullLiteral"||q.type==="Literal"&&q.value===null||q.type==="Identifier"&&q.name==="undefined";_.push(" ? ",Ee(S)?D(o):K(D(o))," : ",k.type===d.type||Ee(k)?D(x):K(D(x)))}else{let K=[C,"? ",S.type===d.type?h("","("):"",f(2,D(o)),S.type===d.type?h("",")"):"",C,": ",k.type===d.type?D(x):f(2,D(x))];_.push(R.type!==d.type||R[x]===d||M?K:E.useTabs?N(p(K)):f(Math.max(0,E.tabWidth-2),K))}let U=[...F.map(K=>i(d[K])),i(S),i(k)].flat().some(K=>l(K)&&t(E.originalText,a(K),c(K))),ne=K=>R===$?g(K,{shouldBreak:U}):U?[K,T]:K,se=!O&&(u(R)||R.type==="NGPipeExpression"&&R.left===d)&&!R.computed,V=B(I),oe=ne([b(I,E,D),H?_:p(_),y&&se&&!V?m:""]);return M||V?g([p([m,oe]),m]):oe}n.exports={printTernary:w}}}),co=Z({"src/language-js/print/statement.js"(e,n){"use strict";ae();var{builders:{hardline:t}}=Le(),s=kt(),{getLeftSidePathName:i,hasNakedLeftSide:r,isJsxNode:u,isTheOnlyJsxElementInMarkdown:a,hasComment:c,CommentCheckFlags:l,isNextLineEmpty:C}=Xe(),{shouldPrintParamsWithoutParens:m}=Ir();function g(v,B,w,I){let E=v.getValue(),D=[],d=E.type==="ClassBody",y=p(E[I]);return v.each((o,x,F)=>{let S=o.getValue();if(S.type==="EmptyStatement")return;let k=w();!B.semi&&!d&&!a(B,o)&&f(o,B)?c(S,l.Leading)?D.push(w([],{needsSemi:!0})):D.push(";",k):D.push(k),!B.semi&&d&&A(S)&&b(S,F[x+1])&&D.push(";"),S!==y&&(D.push(t),C(S,B)&&D.push(t))},I),D}function p(v){for(let B=v.length-1;B>=0;B--){let w=v[B];if(w.type!=="EmptyStatement")return w}}function f(v,B){return v.getNode().type!=="ExpressionStatement"?!1:v.call(I=>h(I,B),"expression")}function h(v,B){let w=v.getValue();switch(w.type){case"ParenthesizedExpression":case"TypeCastExpression":case"ArrayExpression":case"ArrayPattern":case"TemplateLiteral":case"TemplateElement":case"RegExpLiteral":return!0;case"ArrowFunctionExpression":{if(!m(v,B))return!0;break}case"UnaryExpression":{let{prefix:I,operator:E}=w;if(I&&(E==="+"||E==="-"))return!0;break}case"BindExpression":{if(!w.object)return!0;break}case"Literal":{if(w.regex)return!0;break}default:if(u(w))return!0}return s(v,B)?!0:r(w)?v.call(I=>h(I,B),...i(v,w)):!1}function N(v,B,w){return g(v,B,w,"body")}function T(v,B,w){return g(v,B,w,"consequent")}var A=v=>{let{type:B}=v;return B==="ClassProperty"||B==="PropertyDefinition"||B==="ClassPrivateProperty"||B==="ClassAccessorProperty"};function b(v,B){let w=v.key&&v.key.name;if((w==="static"||w==="get"||w==="set")&&!v.value&&!v.typeAnnotation)return!0;if(!B||B.static||B.accessibility)return!1;if(!B.computed){let I=B.key&&B.key.name;if(I==="in"||I==="instanceof")return!0}if(A(B)&&B.variance&&!B.static&&!B.declare)return!0;switch(B.type){case"ClassProperty":case"PropertyDefinition":case"TSAbstractPropertyDefinition":return B.computed;case"MethodDefinition":case"TSAbstractMethodDefinition":case"ClassMethod":case"ClassPrivateMethod":{if((B.value?B.value.async:B.async)||B.kind==="get"||B.kind==="set")return!1;let E=B.value?B.value.generator:B.generator;return!!(B.computed||E)}case"TSIndexSignature":return!0}return!1}n.exports={printBody:N,printSwitchCaseConsequent:T}}}),lo=Z({"src/language-js/print/block.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{isNonEmptyArray:s}=Ge(),{builders:{hardline:i,indent:r}}=Le(),{hasComment:u,CommentCheckFlags:a,isNextLineEmpty:c}=Xe(),{printHardlineAfterHeritage:l}=Yt(),{printBody:C}=co();function m(p,f,h){let N=p.getValue(),T=[];if(N.type==="StaticBlock"&&T.push("static "),N.type==="ClassBody"&&s(N.body)){let b=p.getParentNode();T.push(l(b))}T.push("{");let A=g(p,f,h);if(A)T.push(r([i,A]),i);else{let b=p.getParentNode(),v=p.getParentNode(1);b.type==="ArrowFunctionExpression"||b.type==="FunctionExpression"||b.type==="FunctionDeclaration"||b.type==="ObjectMethod"||b.type==="ClassMethod"||b.type==="ClassPrivateMethod"||b.type==="ForStatement"||b.type==="WhileStatement"||b.type==="DoWhileStatement"||b.type==="DoExpression"||b.type==="CatchClause"&&!v.finalizer||b.type==="TSModuleDeclaration"||b.type==="TSDeclareFunction"||N.type==="StaticBlock"||N.type==="ClassBody"||T.push(i)}return T.push("}"),T}function g(p,f,h){let N=p.getValue(),T=s(N.directives),A=N.body.some(B=>B.type!=="EmptyStatement"),b=u(N,a.Dangling);if(!T&&!A&&!b)return"";let v=[];if(T&&p.each((B,w,I)=>{v.push(h()),(w<I.length-1||A||b)&&(v.push(i),c(B.getValue(),f)&&v.push(i))},"directives"),A&&v.push(C(p,f,h)),b&&v.push(t(p,f,!0)),N.type==="Program"){let B=p.getParentNode();(!B||B.type!=="ModuleExpression")&&v.push(i)}return v}n.exports={printBlock:m,printBlockBody:g}}}),Pm=Z({"src/language-js/print/typescript.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{hasNewlineInRange:s}=Ge(),{builders:{join:i,line:r,hardline:u,softline:a,group:c,indent:l,conditionalGroup:C,ifBreak:m}}=Le(),{isLiteral:g,getTypeScriptMappedTypeModifier:p,shouldPrintComma:f,isCallExpression:h,isMemberExpression:N}=Xe(),T=_m(),{locStart:A,locEnd:b}=nt(),{printOptionalToken:v,printTypeScriptModifiers:B}=ot(),{printTernary:w}=oo(),{printFunctionParameters:I,shouldGroupFunctionParameters:E}=wr(),{printTemplateLiteral:D}=It(),{printArrayItems:d}=zt(),{printObject:y}=zn(),{printClassProperty:o,printClassMethod:x}=Yt(),{printTypeParameter:F,printTypeParameters:S}=Pr(),{printPropertyKey:k}=Kt(),{printFunction:_,printMethodInternal:O}=Ir(),{printInterface:R}=ao(),{printBlock:M}=lo(),{printTypeAlias:H,printIntersectionType:P,printUnionType:G,printFunctionType:re,printTupleType:$,printIndexedAccessType:W}=_r();function ee(U,ne,se){let V=U.getValue();if(!V.type.startsWith("TS"))return;if(T(V))return V.type.slice(2,-7).toLowerCase();let oe=ne.semi?";":"",K=[];switch(V.type){case"TSThisType":return"this";case"TSTypeAssertion":{let Ee=!(V.expression.type==="ArrayExpression"||V.expression.type==="ObjectExpression"),q=c(["<",l([a,se("typeAnnotation")]),a,">"]),le=[m("("),l([a,se("expression")]),a,m(")")];return Ee?C([[q,se("expression")],[q,c(le,{shouldBreak:!0})],[q,se("expression")]]):c([q,se("expression")])}case"TSDeclareFunction":return _(U,se,ne);case"TSExportAssignment":return["export = ",se("expression"),oe];case"TSModuleBlock":return M(U,ne,se);case"TSInterfaceBody":case"TSTypeLiteral":return y(U,ne,se);case"TSTypeAliasDeclaration":return H(U,ne,se);case"TSQualifiedName":return i(".",[se("left"),se("right")]);case"TSAbstractMethodDefinition":case"TSDeclareMethod":return x(U,ne,se);case"TSAbstractPropertyDefinition":return o(U,ne,se);case"TSInterfaceHeritage":case"TSExpressionWithTypeArguments":return K.push(se("expression")),V.typeParameters&&K.push(se("typeParameters")),K;case"TSTemplateLiteralType":return D(U,se,ne);case"TSNamedTupleMember":return[se("label"),V.optional?"?":"",": ",se("elementType")];case"TSRestType":return["...",se("typeAnnotation")];case"TSOptionalType":return[se("typeAnnotation"),"?"];case"TSInterfaceDeclaration":return R(U,ne,se);case"TSClassImplements":return[se("expression"),se("typeParameters")];case"TSTypeParameterDeclaration":case"TSTypeParameterInstantiation":return S(U,ne,se,"params");case"TSTypeParameter":return F(U,ne,se);case"TSAsExpression":{K.push(se("expression")," as ",se("typeAnnotation"));let Ee=U.getParentNode();return h(Ee)&&Ee.callee===V||N(Ee)&&Ee.object===V?c([l([a,...K]),a]):K}case"TSArrayType":return[se("elementType"),"[]"];case"TSPropertySignature":return V.readonly&&K.push("readonly "),K.push(k(U,ne,se),v(U)),V.typeAnnotation&&K.push(": ",se("typeAnnotation")),V.initializer&&K.push(" = ",se("initializer")),K;case"TSParameterProperty":return V.accessibility&&K.push(V.accessibility+" "),V.export&&K.push("export "),V.static&&K.push("static "),V.override&&K.push("override "),V.readonly&&K.push("readonly "),K.push(se("parameter")),K;case"TSTypeQuery":return["typeof ",se("exprName")];case"TSIndexSignature":{let Ee=U.getParentNode(),q=V.parameters.length>1?m(f(ne)?",":""):"",le=c([l([a,i([", ",a],U.map(se,"parameters"))]),q,a]);return[V.export?"export ":"",V.accessibility?[V.accessibility," "]:"",V.static?"static ":"",V.readonly?"readonly ":"",V.declare?"declare ":"","[",V.parameters?le:"",V.typeAnnotation?"]: ":"]",V.typeAnnotation?se("typeAnnotation"):"",Ee.type==="ClassBody"?oe:""]}case"TSTypePredicate":return[V.asserts?"asserts ":"",se("parameterName"),V.typeAnnotation?[" is ",se("typeAnnotation")]:""];case"TSNonNullExpression":return[se("expression"),"!"];case"TSImportType":return[V.isTypeOf?"typeof ":"","import(",se(V.parameter?"parameter":"argument"),")",V.qualifier?[".",se("qualifier")]:"",S(U,ne,se,"typeParameters")];case"TSLiteralType":return se("literal");case"TSIndexedAccessType":return W(U,ne,se);case"TSConstructSignatureDeclaration":case"TSCallSignatureDeclaration":case"TSConstructorType":{if(V.type==="TSConstructorType"&&V.abstract&&K.push("abstract "),V.type!=="TSCallSignatureDeclaration"&&K.push("new "),K.push(c(I(U,se,ne,!1,!0))),V.returnType||V.typeAnnotation){let Ee=V.type==="TSConstructorType";K.push(Ee?" => ":": ",se("returnType"),se("typeAnnotation"))}return K}case"TSTypeOperator":return[V.operator," ",se("typeAnnotation")];case"TSMappedType":{let Ee=s(ne.originalText,A(V),b(V));return c(["{",l([ne.bracketSpacing?r:a,V.readonly?[p(V.readonly,"readonly")," "]:"",B(U,ne,se),se("typeParameter"),V.optional?p(V.optional,"?"):"",V.typeAnnotation?": ":"",se("typeAnnotation"),m(oe)]),t(U,ne,!0),ne.bracketSpacing?r:a,"}"],{shouldBreak:Ee})}case"TSMethodSignature":{let Ee=V.kind&&V.kind!=="method"?"".concat(V.kind," "):"";K.push(V.accessibility?[V.accessibility," "]:"",Ee,V.export?"export ":"",V.static?"static ":"",V.readonly?"readonly ":"",V.abstract?"abstract ":"",V.declare?"declare ":"",V.computed?"[":"",se("key"),V.computed?"]":"",v(U));let q=I(U,se,ne,!1,!0),le=V.returnType?"returnType":"typeAnnotation",ue=V[le],Q=ue?se(le):"",de=E(V,Q);return K.push(de?c(q):q),ue&&K.push(": ",c(Q)),c(K)}case"TSNamespaceExportDeclaration":return K.push("export as namespace ",se("id")),ne.semi&&K.push(";"),c(K);case"TSEnumDeclaration":return V.declare&&K.push("declare "),V.modifiers&&K.push(B(U,ne,se)),V.const&&K.push("const "),K.push("enum ",se("id")," "),V.members.length===0?K.push(c(["{",t(U,ne),a,"}"])):K.push(c(["{",l([u,d(U,ne,"members",se),f(ne,"es5")?",":""]),t(U,ne,!0),u,"}"])),K;case"TSEnumMember":return K.push(se("id")),V.initializer&&K.push(" = ",se("initializer")),K;case"TSImportEqualsDeclaration":return V.isExport&&K.push("export "),K.push("import "),V.importKind&&V.importKind!=="value"&&K.push(V.importKind," "),K.push(se("id")," = ",se("moduleReference")),ne.semi&&K.push(";"),c(K);case"TSExternalModuleReference":return["require(",se("expression"),")"];case"TSModuleDeclaration":{let Ee=U.getParentNode(),q=g(V.id),le=Ee.type==="TSModuleDeclaration",ue=V.body&&V.body.type==="TSModuleDeclaration";if(le)K.push(".");else{V.declare&&K.push("declare "),K.push(B(U,ne,se));let Q=ne.originalText.slice(A(V),A(V.id));V.id.type==="Identifier"&&V.id.name==="global"&&!/namespace|module/.test(Q)||K.push(q||/(?:^|\s)module(?:\s|$)/.test(Q)?"module ":"namespace ")}return K.push(se("id")),ue?K.push(se("body")):V.body?K.push(" ",c(se("body"))):K.push(oe),K}case"TSConditionalType":return w(U,ne,se);case"TSInferType":return["infer"," ",se("typeParameter")];case"TSIntersectionType":return P(U,ne,se);case"TSUnionType":return G(U,ne,se);case"TSFunctionType":return re(U,ne,se);case"TSTupleType":return $(U,ne,se);case"TSTypeReference":return[se("typeName"),S(U,ne,se,"typeParameters")];case"TSTypeAnnotation":return se("typeAnnotation");case"TSEmptyBodyFunctionExpression":return O(U,ne,se);case"TSJSDocAllType":return"*";case"TSJSDocUnknownType":return"?";case"TSJSDocNullableType":return["?",se("typeAnnotation")];case"TSJSDocNonNullableType":return["!",se("typeAnnotation")];default:throw new Error("Unknown TypeScript node type: ".concat(JSON.stringify(V.type),"."))}}n.exports={printTypescript:ee}}}),Im=Z({"src/language-js/print/comment.js"(e,n){"use strict";ae();var{hasNewline:t}=Ge(),{builders:{join:s,hardline:i},utils:{replaceTextEndOfLine:r}}=Le(),{isLineComment:u}=Xe(),{locStart:a,locEnd:c}=nt(),l=Pt();function C(p,f){let h=p.getValue();if(u(h))return f.originalText.slice(a(h),c(h)).trimEnd();if(l(h)){if(m(h)){let A=g(h);return h.trailing&&!t(f.originalText,a(h),{backwards:!0})?[i,A]:A}let N=c(h),T=f.originalText.slice(N-3,N)==="*-/";return["/*",r(h.value),T?"*-/":"*/"]}throw new Error("Not a comment: "+JSON.stringify(h))}function m(p){let f="*".concat(p.value,"*").split(`
`);return f.length>1&&f.every(h=>h.trim()[0]==="*")}function g(p){let f=p.value.split(`
`);return["/*",s(i,f.map((h,N)=>N===0?h.trimEnd():" "+(N<f.length-1?h.trim():h.trimStart()))),"*/"]}n.exports={printComment:C}}}),km=Z({"src/language-js/print/literal.js"(e,n){"use strict";ae();var{printString:t,printNumber:s}=Ge();function i(a,c){let l=a.getNode();switch(l.type){case"RegExpLiteral":return u(l);case"BigIntLiteral":return r(l.bigint||l.extra.raw);case"NumericLiteral":return s(l.extra.raw);case"StringLiteral":return t(l.extra.raw,c);case"NullLiteral":return"null";case"BooleanLiteral":return String(l.value);case"DecimalLiteral":return s(l.value)+"m";case"Literal":{if(l.regex)return u(l.regex);if(l.bigint)return r(l.raw);if(l.decimal)return s(l.decimal)+"m";let{value:C}=l;return typeof C=="number"?s(l.raw):typeof C=="string"?t(l.raw,c):String(C)}}}function r(a){return a.toLowerCase()}function u(a){let{pattern:c,flags:l}=a;return l=[...l].sort().join(""),"/".concat(c,"/").concat(l)}n.exports={printLiteral:i}}}),Lm=Z({"src/language-js/printer-estree.js"(e,n){"use strict";ae();var{printDanglingComments:t}=Qe(),{hasNewline:s}=Ge(),{builders:{join:i,line:r,hardline:u,softline:a,group:c,indent:l},utils:{replaceTextEndOfLine:C}}=Le(),m=ym(),g=hm(),{insertPragma:p}=eo(),f=to(),h=kt(),N=ro(),{hasFlowShorthandAnnotationComment:T,hasComment:A,CommentCheckFlags:b,isTheOnlyJsxElementInMarkdown:v,isLineComment:B,isNextLineEmpty:w,needsHardlineAfterDanglingComment:I,rawText:E,hasIgnoreComment:D,isCallExpression:d,isMemberExpression:y,markerForIfWithoutBlockAndSameLineComment:o}=Xe(),{locStart:x,locEnd:F}=nt(),S=Pt(),{printHtmlBinding:k,isVueEventBindingExpression:_}=bm(),{printAngular:O}=Tm(),{printJsx:R,hasJsxIgnoreComment:M}=Bm(),{printFlow:H}=wm(),{printTypescript:P}=Pm(),{printOptionalToken:G,printBindExpressionCallee:re,printTypeAnnotation:$,adjustClause:W,printRestSpread:ee,printDefiniteToken:U}=ot(),{printImportDeclaration:ne,printExportDeclaration:se,printExportAllDeclaration:V,printModuleSpecifier:oe}=io(),{printTernary:K}=oo(),{printTemplateLiteral:Ee}=It(),{printArray:q}=zt(),{printObject:le}=zn(),{printClass:ue,printClassMethod:Q,printClassProperty:de}=Yt(),{printProperty:ge}=Kt(),{printFunction:ve,printArrowFunction:xe,printMethod:we,printReturnStatement:fe,printThrowStatement:pe}=Ir(),{printCallExpression:me}=so(),{printVariableDeclarator:ce,printAssignmentExpression:he}=Xt(),{printBinaryishExpression:J}=Jn(),{printSwitchCaseConsequent:ye}=co(),{printMemberExpression:X}=uo(),{printBlock:Y,printBlockBody:te}=lo(),{printComment:z}=Im(),{printLiteral:j}=km(),{printDecorators:Ce}=Un();function Ne(Te,_e,Fe,Ke){let Se=je(Te,_e,Fe,Ke);if(!Se)return"";let ze=Te.getValue(),{type:Be}=ze;if(Be==="ClassMethod"||Be==="ClassPrivateMethod"||Be==="ClassProperty"||Be==="ClassAccessorProperty"||Be==="PropertyDefinition"||Be==="TSAbstractPropertyDefinition"||Be==="ClassPrivateProperty"||Be==="MethodDefinition"||Be==="TSAbstractMethodDefinition"||Be==="TSDeclareMethod")return Se;let Ie=[Se],Ve=Ce(Te,_e,Fe),Ae=ze.type==="ClassExpression"&&Ve;if(Ve&&(Ie=[...Ve,Se],!Ae))return c(Ie);if(!h(Te,_e))return Ke&&Ke.needsSemi&&Ie.unshift(";"),Ie.length===1&&Ie[0]===Se?Se:Ie;if(Ae&&(Ie=[l([r,...Ie])]),Ie.unshift("("),Ke&&Ke.needsSemi&&Ie.unshift(";"),T(ze)){let[Pe]=ze.trailingComments;Ie.push(" /*",Pe.value.trimStart(),"*/"),Pe.printed=!0}return Ae&&Ie.push(r),Ie.push(")"),Ie}function je(Te,_e,Fe,Ke){let Se=Te.getValue(),ze=_e.semi?";":"";if(!Se)return"";if(typeof Se=="string")return Se;for(let Ie of[j,k,O,R,H,P]){let Ve=Ie(Te,_e,Fe);if(typeof Ve<"u")return Ve}let Be=[];switch(Se.type){case"JsExpressionRoot":return Fe("node");case"JsonRoot":return[Fe("node"),u];case"File":return Se.program&&Se.program.interpreter&&Be.push(Fe(["program","interpreter"])),Be.push(Fe("program")),Be;case"Program":return te(Te,_e,Fe);case"EmptyStatement":return"";case"ExpressionStatement":{if(Se.directive)return[Ue(Se.expression,_e),ze];if(_e.parser==="__vue_event_binding"){let Ve=Te.getParentNode();if(Ve.type==="Program"&&Ve.body.length===1&&Ve.body[0]===Se)return[Fe("expression"),_(Se.expression)?";":""]}let Ie=t(Te,_e,!0,Ve=>{let{marker:Ae}=Ve;return Ae===o});return[Fe("expression"),v(_e,Te)?"":ze,Ie?[" ",Ie]:""]}case"ParenthesizedExpression":return!A(Se.expression)&&(Se.expression.type==="ObjectExpression"||Se.expression.type==="ArrayExpression")?["(",Fe("expression"),")"]:c(["(",l([a,Fe("expression")]),a,")"]);case"AssignmentExpression":return he(Te,_e,Fe);case"VariableDeclarator":return ce(Te,_e,Fe);case"BinaryExpression":case"LogicalExpression":return J(Te,_e,Fe);case"AssignmentPattern":return[Fe("left")," = ",Fe("right")];case"OptionalMemberExpression":case"MemberExpression":return X(Te,_e,Fe);case"MetaProperty":return[Fe("meta"),".",Fe("property")];case"BindExpression":return Se.object&&Be.push(Fe("object")),Be.push(c(l([a,re(Te,_e,Fe)]))),Be;case"Identifier":return[Se.name,G(Te),U(Te),$(Te,_e,Fe)];case"V8IntrinsicIdentifier":return["%",Se.name];case"SpreadElement":case"SpreadElementPattern":case"SpreadProperty":case"SpreadPropertyPattern":case"RestElement":return ee(Te,_e,Fe);case"FunctionDeclaration":case"FunctionExpression":return ve(Te,Fe,_e,Ke);case"ArrowFunctionExpression":return xe(Te,_e,Fe,Ke);case"YieldExpression":return Be.push("yield"),Se.delegate&&Be.push("*"),Se.argument&&Be.push(" ",Fe("argument")),Be;case"AwaitExpression":{if(Be.push("await"),Se.argument){Be.push(" ",Fe("argument"));let Ie=Te.getParentNode();if(d(Ie)&&Ie.callee===Se||y(Ie)&&Ie.object===Se){Be=[l([a,...Be]),a];let Ve=Te.findAncestor(Ae=>Ae.type==="AwaitExpression"||Ae.type==="BlockStatement");if(!Ve||Ve.type!=="AwaitExpression")return c(Be)}}return Be}case"ExportDefaultDeclaration":case"ExportNamedDeclaration":return se(Te,_e,Fe);case"ExportAllDeclaration":return V(Te,_e,Fe);case"ImportDeclaration":return ne(Te,_e,Fe);case"ImportSpecifier":case"ExportSpecifier":case"ImportNamespaceSpecifier":case"ExportNamespaceSpecifier":case"ImportDefaultSpecifier":case"ExportDefaultSpecifier":return oe(Te,_e,Fe);case"ImportAttribute":return[Fe("key"),": ",Fe("value")];case"Import":return"import";case"BlockStatement":case"StaticBlock":case"ClassBody":return Y(Te,_e,Fe);case"ThrowStatement":return pe(Te,_e,Fe);case"ReturnStatement":return fe(Te,_e,Fe);case"NewExpression":case"ImportExpression":case"OptionalCallExpression":case"CallExpression":return me(Te,_e,Fe);case"ObjectExpression":case"ObjectPattern":case"RecordExpression":return le(Te,_e,Fe);case"ObjectProperty":case"Property":return Se.method||Se.kind==="get"||Se.kind==="set"?we(Te,_e,Fe):ge(Te,_e,Fe);case"ObjectMethod":return we(Te,_e,Fe);case"Decorator":return["@",Fe("expression")];case"ArrayExpression":case"ArrayPattern":case"TupleExpression":return q(Te,_e,Fe);case"SequenceExpression":{let Ie=Te.getParentNode(0);if(Ie.type==="ExpressionStatement"||Ie.type==="ForStatement"){let Ve=[];return Te.each((Ae,Oe)=>{Oe===0?Ve.push(Fe()):Ve.push(",",l([r,Fe()]))},"expressions"),c(Ve)}return c(i([",",r],Te.map(Fe,"expressions")))}case"ThisExpression":return"this";case"Super":return"super";case"Directive":return[Fe("value"),ze];case"DirectiveLiteral":return Ue(Se,_e);case"UnaryExpression":return Be.push(Se.operator),/[a-z]$/.test(Se.operator)&&Be.push(" "),A(Se.argument)?Be.push(c(["(",l([a,Fe("argument")]),a,")"])):Be.push(Fe("argument")),Be;case"UpdateExpression":return Be.push(Fe("argument"),Se.operator),Se.prefix&&Be.reverse(),Be;case"ConditionalExpression":return K(Te,_e,Fe);case"VariableDeclaration":{let Ie=Te.map(Fe,"declarations"),Ve=Te.getParentNode(),Ae=Ve.type==="ForStatement"||Ve.type==="ForInStatement"||Ve.type==="ForOfStatement",Oe=Se.declarations.some(ie=>ie.init),Pe;return Ie.length===1&&!A(Se.declarations[0])?Pe=Ie[0]:Ie.length>0&&(Pe=l(Ie[0])),Be=[Se.declare?"declare ":"",Se.kind,Pe?[" ",Pe]:"",l(Ie.slice(1).map(ie=>[",",Oe&&!Ae?u:r,ie]))],Ae&&Ve.body!==Se||Be.push(ze),c(Be)}case"WithStatement":return c(["with (",Fe("object"),")",W(Se.body,Fe("body"))]);case"IfStatement":{let Ie=W(Se.consequent,Fe("consequent")),Ve=c(["if (",c([l([a,Fe("test")]),a]),")",Ie]);if(Be.push(Ve),Se.alternate){let Ae=A(Se.consequent,b.Trailing|b.Line)||I(Se),Oe=Se.consequent.type==="BlockStatement"&&!Ae;Be.push(Oe?" ":u),A(Se,b.Dangling)&&Be.push(t(Te,_e,!0),Ae?u:" "),Be.push("else",c(W(Se.alternate,Fe("alternate"),Se.alternate.type==="IfStatement")))}return Be}case"ForStatement":{let Ie=W(Se.body,Fe("body")),Ve=t(Te,_e,!0),Ae=Ve?[Ve,a]:"";return!Se.init&&!Se.test&&!Se.update?[Ae,c(["for (;;)",Ie])]:[Ae,c(["for (",c([l([a,Fe("init"),";",r,Fe("test"),";",r,Fe("update")]),a]),")",Ie])]}case"WhileStatement":return c(["while (",c([l([a,Fe("test")]),a]),")",W(Se.body,Fe("body"))]);case"ForInStatement":return c(["for (",Fe("left")," in ",Fe("right"),")",W(Se.body,Fe("body"))]);case"ForOfStatement":return c(["for",Se.await?" await":""," (",Fe("left")," of ",Fe("right"),")",W(Se.body,Fe("body"))]);case"DoWhileStatement":{let Ie=W(Se.body,Fe("body"));return Be=[c(["do",Ie])],Se.body.type==="BlockStatement"?Be.push(" "):Be.push(u),Be.push("while (",c([l([a,Fe("test")]),a]),")",ze),Be}case"DoExpression":return[Se.async?"async ":"","do ",Fe("body")];case"BreakStatement":return Be.push("break"),Se.label&&Be.push(" ",Fe("label")),Be.push(ze),Be;case"ContinueStatement":return Be.push("continue"),Se.label&&Be.push(" ",Fe("label")),Be.push(ze),Be;case"LabeledStatement":return Se.body.type==="EmptyStatement"?[Fe("label"),":;"]:[Fe("label"),": ",Fe("body")];case"TryStatement":return["try ",Fe("block"),Se.handler?[" ",Fe("handler")]:"",Se.finalizer?[" finally ",Fe("finalizer")]:""];case"CatchClause":if(Se.param){let Ie=A(Se.param,Ae=>!S(Ae)||Ae.leading&&s(_e.originalText,F(Ae))||Ae.trailing&&s(_e.originalText,x(Ae),{backwards:!0})),Ve=Fe("param");return["catch ",Ie?["(",l([a,Ve]),a,") "]:["(",Ve,") "],Fe("body")]}return["catch ",Fe("body")];case"SwitchStatement":return[c(["switch (",l([a,Fe("discriminant")]),a,")"])," {",Se.cases.length>0?l([u,i(u,Te.map((Ie,Ve,Ae)=>{let Oe=Ie.getValue();return[Fe(),Ve!==Ae.length-1&&w(Oe,_e)?u:""]},"cases"))]):"",u,"}"];case"SwitchCase":{Se.test?Be.push("case ",Fe("test"),":"):Be.push("default:"),A(Se,b.Dangling)&&Be.push(" ",t(Te,_e,!0));let Ie=Se.consequent.filter(Ve=>Ve.type!=="EmptyStatement");if(Ie.length>0){let Ve=ye(Te,_e,Fe);Be.push(Ie.length===1&&Ie[0].type==="BlockStatement"?[" ",Ve]:l([u,Ve]))}return Be}case"DebuggerStatement":return["debugger",ze];case"ClassDeclaration":case"ClassExpression":return ue(Te,_e,Fe);case"ClassMethod":case"ClassPrivateMethod":case"MethodDefinition":return Q(Te,_e,Fe);case"ClassProperty":case"PropertyDefinition":case"ClassPrivateProperty":case"ClassAccessorProperty":return de(Te,_e,Fe);case"TemplateElement":return C(Se.value.raw);case"TemplateLiteral":return Ee(Te,Fe,_e);case"TaggedTemplateExpression":return[Fe("tag"),Fe("typeParameters"),Fe("quasi")];case"PrivateIdentifier":return["#",Fe("name")];case"PrivateName":return["#",Fe("id")];case"InterpreterDirective":return Be.push("#!",Se.value,u),w(Se,_e)&&Be.push(u),Be;case"TopicReference":return"%";case"ArgumentPlaceholder":return"?";case"ModuleExpression":{Be.push("module {");let Ie=Fe("body");return Ie&&Be.push(l([u,Ie]),u),Be.push("}"),Be}default:throw new Error("unknown type: "+JSON.stringify(Se.type))}}function Ue(Te,_e){let Fe=E(Te),Ke=Fe.slice(1,-1);if(Ke.includes('"')||Ke.includes("'"))return Fe;let Se=_e.singleQuote?"'":'"';return Se+Ke+Se}function tt(Te){return Te.type&&!S(Te)&&!B(Te)&&Te.type!=="EmptyStatement"&&Te.type!=="TemplateElement"&&Te.type!=="Import"&&Te.type!=="TSEmptyBodyFunctionExpression"}n.exports={preprocess:N,print:Ne,embed:m,insertPragma:p,massageAstNode:g,hasPrettierIgnore(Te){return D(Te)||M(Te)},willPrintOwnComments:f.willPrintOwnComments,canAttachComment:tt,printComment:z,isBlockComment:S,handleComments:{avoidAstMutation:!0,ownLine:f.handleOwnLineComment,endOfLine:f.handleEndOfLineComment,remaining:f.handleRemainingComment},getCommentChildNodes:f.getCommentChildNodes}}}),Om=Z({"src/language-js/printer-estree-json.js"(e,n){"use strict";ae();var{builders:{hardline:t,indent:s,join:i}}=Le(),r=ro();function u(l,C,m){let g=l.getValue();switch(g.type){case"JsonRoot":return[m("node"),t];case"ArrayExpression":{if(g.elements.length===0)return"[]";let p=l.map(()=>l.getValue()===null?"null":m(),"elements");return["[",s([t,i([",",t],p)]),t,"]"]}case"ObjectExpression":return g.properties.length===0?"{}":["{",s([t,i([",",t],l.map(m,"properties"))]),t,"}"];case"ObjectProperty":return[m("key"),": ",m("value")];case"UnaryExpression":return[g.operator==="+"?"":g.operator,m("argument")];case"NullLiteral":return"null";case"BooleanLiteral":return g.value?"true":"false";case"StringLiteral":case"NumericLiteral":return JSON.stringify(g.value);case"Identifier":{let p=l.getParentNode();return p&&p.type==="ObjectProperty"&&p.key===g?JSON.stringify(g.name):g.name}case"TemplateLiteral":return m(["quasis",0]);case"TemplateElement":return JSON.stringify(g.value.cooked);default:throw new Error("unknown type: "+JSON.stringify(g.type))}}var a=new Set(["start","end","extra","loc","comments","leadingComments","trailingComments","innerComments","errors","range","tokens"]);function c(l,C){let{type:m}=l;if(m==="ObjectProperty"&&l.key.type==="Identifier"){C.key={type:"StringLiteral",value:l.key.name};return}if(m==="UnaryExpression"&&l.operator==="+")return C.argument;if(m==="ArrayExpression"){for(let[g,p]of l.elements.entries())p===null&&C.elements.splice(g,0,{type:"NullLiteral"});return}if(m==="TemplateLiteral")return{type:"StringLiteral",value:l.quasis[0].value.cooked}}c.ignoredProperties=a,n.exports={preprocess:r,print:u,massageAstNode:c}}}),Lt=Z({"src/common/common-options.js"(e,n){"use strict";ae();var t="Common";n.exports={bracketSpacing:{since:"0.0.0",category:t,type:"boolean",default:!0,description:"Print spaces between brackets.",oppositeDescription:"Do not print spaces between brackets."},singleQuote:{since:"0.0.0",category:t,type:"boolean",default:!1,description:"Use single quotes instead of double quotes."},proseWrap:{since:"1.8.2",category:t,type:"choice",default:[{since:"1.8.2",value:!0},{since:"1.9.0",value:"preserve"}],description:"How to wrap prose.",choices:[{since:"1.9.0",value:"always",description:"Wrap prose if it exceeds the print width."},{since:"1.9.0",value:"never",description:"Do not wrap prose."},{since:"1.9.0",value:"preserve",description:"Wrap prose as-is."}]},bracketSameLine:{since:"2.4.0",category:t,type:"boolean",default:!1,description:"Put > of opening tags on the last line instead of on a new line."},singleAttributePerLine:{since:"2.6.0",category:t,type:"boolean",default:!1,description:"Enforce single attribute per line in HTML, Vue and JSX."}}}}),jm=Z({"src/language-js/options.js"(e,n){"use strict";ae();var t=Lt(),s="JavaScript";n.exports={arrowParens:{since:"1.9.0",category:s,type:"choice",default:[{since:"1.9.0",value:"avoid"},{since:"2.0.0",value:"always"}],description:"Include parentheses around a sole arrow function parameter.",choices:[{value:"always",description:"Always include parens. Example: `(x) => x`"},{value:"avoid",description:"Omit parens when possible. Example: `x => x`"}]},bracketSameLine:t.bracketSameLine,bracketSpacing:t.bracketSpacing,jsxBracketSameLine:{since:"0.17.0",category:s,type:"boolean",description:"Put > on the last line instead of at a new line.",deprecated:"2.4.0"},semi:{since:"1.0.0",category:s,type:"boolean",default:!0,description:"Print semicolons.",oppositeDescription:"Do not print semicolons, except at the beginning of lines which may need them."},singleQuote:t.singleQuote,jsxSingleQuote:{since:"1.15.0",category:s,type:"boolean",default:!1,description:"Use single quotes in JSX."},quoteProps:{since:"1.17.0",category:s,type:"choice",default:"as-needed",description:"Change when properties in objects are quoted.",choices:[{value:"as-needed",description:"Only add quotes around object properties where required."},{value:"consistent",description:"If at least one property in an object requires quotes, quote all properties."},{value:"preserve",description:"Respect the input use of quotes in object properties."}]},trailingComma:{since:"0.0.0",category:s,type:"choice",default:[{since:"0.0.0",value:!1},{since:"0.19.0",value:"none"},{since:"2.0.0",value:"es5"}],description:"Print trailing commas wherever possible when multi-line.",choices:[{value:"es5",description:"Trailing commas where valid in ES5 (objects, arrays, etc.)"},{value:"none",description:"No trailing commas."},{value:"all",description:"Trailing commas wherever possible (including function arguments)."}]},singleAttributePerLine:t.singleAttributePerLine}}}),qm=Z({"src/language-js/parse/parsers.js"(){ae()}}),Fn=Z({"node_modules/linguist-languages/data/JavaScript.json"(e,n){n.exports={name:"JavaScript",type:"programming",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",color:"#f1e05a",aliases:["js","node"],extensions:[".js","._js",".bones",".cjs",".es",".es6",".frag",".gs",".jake",".jsb",".jscad",".jsfl",".jsm",".jss",".jsx",".mjs",".njs",".pac",".sjs",".ssjs",".xsjs",".xsjslib"],filenames:["Jakefile"],interpreters:["chakra","d8","gjs","js","node","nodejs","qjs","rhino","v8","v8-shell"],languageId:183}}}),Mm=Z({"node_modules/linguist-languages/data/TypeScript.json"(e,n){n.exports={name:"TypeScript",type:"programming",color:"#2b7489",aliases:["ts"],interpreters:["deno","ts-node"],extensions:[".ts"],tmScope:"source.ts",aceMode:"typescript",codemirrorMode:"javascript",codemirrorMimeType:"application/typescript",languageId:378}}}),Rm=Z({"node_modules/linguist-languages/data/TSX.json"(e,n){n.exports={name:"TSX",type:"programming",group:"TypeScript",extensions:[".tsx"],tmScope:"source.tsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",languageId:94901924}}}),mi=Z({"node_modules/linguist-languages/data/JSON.json"(e,n){n.exports={name:"JSON",type:"data",tmScope:"source.json",aceMode:"json",codemirrorMode:"javascript",codemirrorMimeType:"application/json",extensions:[".json",".avsc",".geojson",".gltf",".har",".ice",".JSON-tmLanguage",".jsonl",".mcmeta",".tfstate",".tfstate.backup",".topojson",".webapp",".webmanifest",".yy",".yyp"],filenames:[".arcconfig",".htmlhintrc",".imgbotconfig",".tern-config",".tern-project",".watchmanconfig","Pipfile.lock","composer.lock","mcmod.info"],languageId:174}}}),Vm=Z({"node_modules/linguist-languages/data/JSON with Comments.json"(e,n){n.exports={name:"JSON with Comments",type:"data",group:"JSON",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",aliases:["jsonc"],extensions:[".jsonc",".sublime-build",".sublime-commands",".sublime-completions",".sublime-keymap",".sublime-macro",".sublime-menu",".sublime-mousemap",".sublime-project",".sublime-settings",".sublime-theme",".sublime-workspace",".sublime_metrics",".sublime_session"],filenames:[".babelrc",".eslintrc.json",".jscsrc",".jshintrc",".jslintrc","api-extractor.json","devcontainer.json","jsconfig.json","language-configuration.json","tsconfig.json","tslint.json"],languageId:423}}}),Wm=Z({"node_modules/linguist-languages/data/JSON5.json"(e,n){n.exports={name:"JSON5",type:"data",extensions:[".json5"],tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"application/json",languageId:175}}}),$m=Z({"src/language-js/index.js"(e,n){"use strict";ae();var t=bt(),s=Lm(),i=Om(),r=jm(),u=qm(),a=[t(Fn(),l=>({since:"0.0.0",parsers:["babel","acorn","espree","meriyah","babel-flow","babel-ts","flow","typescript"],vscodeLanguageIds:["javascript","mongo"],interpreters:[...l.interpreters,"zx"],extensions:[...l.extensions.filter(C=>C!==".jsx"),".wxs"]})),t(Fn(),()=>({name:"Flow",since:"0.0.0",parsers:["flow","babel-flow"],vscodeLanguageIds:["javascript"],aliases:[],filenames:[],extensions:[".js.flow"]})),t(Fn(),()=>({name:"JSX",since:"0.0.0",parsers:["babel","babel-flow","babel-ts","flow","typescript","espree","meriyah"],vscodeLanguageIds:["javascriptreact"],aliases:void 0,filenames:void 0,extensions:[".jsx"],group:"JavaScript",interpreters:void 0,tmScope:"source.js.jsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",color:void 0})),t(Mm(),l=>({since:"1.4.0",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescript"],extensions:[...l.extensions,".mts",".cts"]})),t(Rm(),()=>({since:"1.4.0",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescriptreact"]})),t(mi(),()=>({name:"JSON.stringify",since:"1.13.0",parsers:["json-stringify"],vscodeLanguageIds:["json"],extensions:[],filenames:["package.json","package-lock.json","composer.json"]})),t(mi(),l=>({since:"1.5.0",parsers:["json"],vscodeLanguageIds:["json"],extensions:l.extensions.filter(C=>C!==".jsonl")})),t(Vm(),l=>({since:"1.5.0",parsers:["json"],vscodeLanguageIds:["jsonc"],filenames:[...l.filenames,".eslintrc",".swcrc"]})),t(Wm(),()=>({since:"1.13.0",parsers:["json5"],vscodeLanguageIds:["json5"]}))],c={estree:s,"estree-json":i};n.exports={languages:a,options:r,printers:c,parsers:u}}}),Hm=Z({"src/language-css/clean.js"(e,n){"use strict";ae();var{isFrontMatterNode:t}=Ge(),s=st(),i=new Set(["raw","raws","sourceIndex","source","before","after","trailingComma"]);function r(a,c,l){if(t(a)&&a.lang==="yaml"&&delete c.value,a.type==="css-comment"&&l.type==="css-root"&&l.nodes.length>0&&((l.nodes[0]===a||t(l.nodes[0])&&l.nodes[1]===a)&&(delete c.text,/^\*\s*@(?:format|prettier)\s*$/.test(a.text))||l.type==="css-root"&&s(l.nodes)===a))return null;if(a.type==="value-root"&&delete c.text,(a.type==="media-query"||a.type==="media-query-list"||a.type==="media-feature-expression")&&delete c.value,a.type==="css-rule"&&delete c.params,a.type==="selector-combinator"&&(c.value=c.value.replace(/\s+/g," ")),a.type==="media-feature"&&(c.value=c.value.replace(/ /g,"")),(a.type==="value-word"&&(a.isColor&&a.isHex||["initial","inherit","unset","revert"].includes(c.value.replace().toLowerCase()))||a.type==="media-feature"||a.type==="selector-root-invalid"||a.type==="selector-pseudo")&&(c.value=c.value.toLowerCase()),a.type==="css-decl"&&(c.prop=c.prop.toLowerCase()),(a.type==="css-atrule"||a.type==="css-import")&&(c.name=c.name.toLowerCase()),a.type==="value-number"&&(c.unit=c.unit.toLowerCase()),(a.type==="media-feature"||a.type==="media-keyword"||a.type==="media-type"||a.type==="media-unknown"||a.type==="media-url"||a.type==="media-value"||a.type==="selector-attribute"||a.type==="selector-string"||a.type==="selector-class"||a.type==="selector-combinator"||a.type==="value-string")&&c.value&&(c.value=u(c.value)),a.type==="selector-attribute"&&(c.attribute=c.attribute.trim(),c.namespace&&typeof c.namespace=="string"&&(c.namespace=c.namespace.trim(),c.namespace.length===0&&(c.namespace=!0)),c.value&&(c.value=c.value.trim().replace(/^["']|["']$/g,""),delete c.quoted)),(a.type==="media-value"||a.type==="media-type"||a.type==="value-number"||a.type==="selector-root-invalid"||a.type==="selector-class"||a.type==="selector-combinator"||a.type==="selector-tag")&&c.value&&(c.value=c.value.replace(/([\d+.Ee-]+)([A-Za-z]*)/g,(C,m,g)=>{let p=Number(m);return Number.isNaN(p)?C:p+g.toLowerCase()})),a.type==="selector-tag"){let C=a.value.toLowerCase();["from","to"].includes(C)&&(c.value=C)}if(a.type==="css-atrule"&&a.name.toLowerCase()==="supports"&&delete c.value,a.type==="selector-unknown"&&delete c.value,a.type==="value-comma_group"){let C=a.groups.findIndex(m=>m.type==="value-number"&&m.unit==="...");C!==-1&&(c.groups[C].unit="",c.groups.splice(C+1,0,{type:"value-word",value:"...",isColor:!1,isHex:!1}))}}r.ignoredProperties=i;function u(a){return a.replace(/'/g,'"').replace(/\\([^\dA-Fa-f])/g,"$1")}n.exports=r}}),Xn=Z({"src/utils/front-matter/print.js"(e,n){"use strict";ae();var{builders:{hardline:t,markAsRoot:s}}=Le();function i(r,u){if(r.lang==="yaml"){let a=r.value.trim(),c=a?u(a,{parser:"yaml"},{stripTrailingHardline:!0}):"";return s([r.startDelimiter,t,c,c?t:"",r.endDelimiter])}}n.exports=i}}),Gm=Z({"src/language-css/embed.js"(e,n){"use strict";ae();var{builders:{hardline:t}}=Le(),s=Xn();function i(r,u,a){let c=r.getValue();if(c.type==="front-matter"){let l=s(c,a);return l?[l,t]:""}}n.exports=i}}),po=Z({"src/utils/front-matter/parse.js"(e,n){"use strict";ae();var t=new RegExp("^(?<startDelimiter>-{3}|\\+{3})(?<language>[^\\n]*)\\n(?:|(?<value>.*?)\\n)(?<endDelimiter>\\k<startDelimiter>|\\.{3})[^\\S\\n]*(?:\\n|$)","s");function s(i){let r=i.match(t);if(!r)return{content:i};let{startDelimiter:u,language:a,value:c="",endDelimiter:l}=r.groups,C=a.trim()||"yaml";if(u==="+++"&&(C="toml"),C!=="yaml"&&u!==l)return{content:i};let[m]=r;return{frontMatter:{type:"front-matter",lang:C,value:c,startDelimiter:u,endDelimiter:l,raw:m.replace(/\n$/,"")},content:m.replace(/[^\n]/g," ")+i.slice(m.length)}}n.exports=s}}),Jm=Z({"src/language-css/pragma.js"(e,n){"use strict";ae();var t=eo(),s=po();function i(u){return t.hasPragma(s(u).content)}function r(u){let{frontMatter:a,content:c}=s(u);return(a?a.raw+`

`:"")+t.insertPragma(c)}n.exports={hasPragma:i,insertPragma:r}}}),Um=Z({"src/language-css/utils/index.js"(e,n){"use strict";ae();var t=new Set(["red","green","blue","alpha","a","rgb","hue","h","saturation","s","lightness","l","whiteness","w","blackness","b","tint","shade","blend","blenda","contrast","hsl","hsla","hwb","hwba"]);function s(q,le){let ue=Array.isArray(le)?le:[le],Q=-1,de;for(;de=q.getParentNode(++Q);)if(ue.includes(de.type))return Q;return-1}function i(q,le){let ue=s(q,le);return ue===-1?null:q.getParentNode(ue)}function r(q){let le=i(q,"css-decl");return le&&le.prop&&le.prop.toLowerCase()}function u(q){return["initial","inherit","unset","revert"].includes(q.toLowerCase())}function a(q,le){let ue=i(q,"css-atrule");return ue&&ue.name&&ue.name.toLowerCase().endsWith("keyframes")&&["from","to"].includes(le.toLowerCase())}function c(q){return q.includes("$")||q.includes("@")||q.includes("#")||q.startsWith("%")||q.startsWith("--")||q.startsWith(":--")||q.includes("(")&&q.includes(")")?q:q.toLowerCase()}function l(q,le){let ue=i(q,"value-func");return ue&&ue.value&&ue.value.toLowerCase()===le}function C(q){let le=i(q,"css-rule");return le&&le.raws&&le.raws.selector&&(le.raws.selector.startsWith(":import")||le.raws.selector.startsWith(":export"))}function m(q,le){let ue=Array.isArray(le)?le:[le],Q=i(q,"css-atrule");return Q&&ue.includes(Q.name.toLowerCase())}function g(q){let le=q.getValue(),ue=i(q,"css-atrule");return ue&&ue.name==="import"&&le.groups[0].value==="url"&&le.groups.length===2}function p(q){return q.type==="value-func"&&q.value.toLowerCase()==="url"}function f(q,le){let ue=q.getParentNode();if(!ue)return!1;let{nodes:Q}=ue;return Q&&Q.indexOf(le)===Q.length-1}function h(q){return q.selector?typeof q.selector=="string"&&/^@.+:.*$/.test(q.selector)||q.selector.value&&/^@.+:.*$/.test(q.selector.value):!1}function N(q){return q.type==="value-word"&&["from","through","end"].includes(q.value)}function T(q){return q.type==="value-word"&&["and","or","not"].includes(q.value)}function A(q){return q.type==="value-word"&&q.value==="in"}function b(q){return q.type==="value-operator"&&q.value==="*"}function v(q){return q.type==="value-operator"&&q.value==="/"}function B(q){return q.type==="value-operator"&&q.value==="+"}function w(q){return q.type==="value-operator"&&q.value==="-"}function I(q){return q.type==="value-operator"&&q.value==="%"}function E(q){return b(q)||v(q)||B(q)||w(q)||I(q)}function D(q){return q.type==="value-word"&&["==","!="].includes(q.value)}function d(q){return q.type==="value-word"&&["<",">","<=",">="].includes(q.value)}function y(q){return q.type==="css-atrule"&&["if","else","for","each","while"].includes(q.name)}function o(q){return q.raws&&q.raws.params&&/^\(\s*\)$/.test(q.raws.params)}function x(q){return q.name.startsWith("prettier-placeholder")}function F(q){return q.prop.startsWith("@prettier-placeholder")}function S(q,le){return q.value==="$$"&&q.type==="value-func"&&le&&le.type==="value-word"&&!le.raws.before}function k(q){return q.value&&q.value.type==="value-root"&&q.value.group&&q.value.group.type==="value-value"&&q.prop.toLowerCase()==="composes"}function _(q){return q.value&&q.value.group&&q.value.group.group&&q.value.group.group.type==="value-paren_group"&&q.value.group.group.open!==null&&q.value.group.group.close!==null}function O(q){return q.raws&&q.raws.before===""}function R(q){return q.type==="value-comma_group"&&q.groups&&q.groups[1]&&q.groups[1].type==="value-colon"}function M(q){return q.type==="value-paren_group"&&q.groups&&q.groups[0]&&R(q.groups[0])}function H(q){let le=q.getValue();if(le.groups.length===0)return!1;let ue=q.getParentNode(1);if(!M(le)&&!(ue&&M(ue)))return!1;let Q=i(q,"css-decl");return!!(Q&&Q.prop&&Q.prop.startsWith("$")||M(ue)||ue.type==="value-func")}function P(q){return q.type==="value-comment"&&q.inline}function G(q){return q.type==="value-word"&&q.value==="#"}function re(q){return q.type==="value-word"&&q.value==="{"}function $(q){return q.type==="value-word"&&q.value==="}"}function W(q){return["value-word","value-atword"].includes(q.type)}function ee(q){return q&&q.type==="value-colon"}function U(q,le){if(!R(le))return!1;let{groups:ue}=le,Q=ue.indexOf(q);return Q===-1?!1:ee(ue[Q+1])}function ne(q){return q.value&&["not","and","or"].includes(q.value.toLowerCase())}function se(q){return q.type!=="value-func"?!1:t.has(q.value.toLowerCase())}function V(q){return/\/\//.test(q.split(/[\n\r]/).pop())}function oe(q){return q&&q.type==="value-atword"&&q.value.startsWith("prettier-placeholder-")}function K(q,le){if(!q.open||q.open.value!=="("||!q.close||q.close.value!==")"||q.groups.some(ue=>ue.type!=="value-comma_group"))return!1;if(le.type==="value-comma_group"){let ue=le.groups.indexOf(q)-1,Q=le.groups[ue];if(Q&&Q.type==="value-word"&&Q.value==="with")return!0}return!1}function Ee(q){return q.type==="value-paren_group"&&q.open&&q.open.value==="("&&q.close&&q.close.value===")"}n.exports={getAncestorCounter:s,getAncestorNode:i,getPropOfDeclNode:r,maybeToLowerCase:c,insideValueFunctionNode:l,insideICSSRuleNode:C,insideAtRuleNode:m,insideURLFunctionInImportAtRuleNode:g,isKeyframeAtRuleKeywords:a,isWideKeywords:u,isLastNode:f,isSCSSControlDirectiveNode:y,isDetachedRulesetDeclarationNode:h,isRelationalOperatorNode:d,isEqualityOperatorNode:D,isMultiplicationNode:b,isDivisionNode:v,isAdditionNode:B,isSubtractionNode:w,isModuloNode:I,isMathOperatorNode:E,isEachKeywordNode:A,isForKeywordNode:N,isURLFunctionNode:p,isIfElseKeywordNode:T,hasComposesNode:k,hasParensAroundNode:_,hasEmptyRawBefore:O,isDetachedRulesetCallNode:o,isTemplatePlaceholderNode:x,isTemplatePropNode:F,isPostcssSimpleVarNode:S,isKeyValuePairNode:R,isKeyValuePairInParenGroupNode:M,isKeyInValuePairNode:U,isSCSSMapItemNode:H,isInlineValueCommentNode:P,isHashNode:G,isLeftCurlyBraceNode:re,isRightCurlyBraceNode:$,isWordNode:W,isColonNode:ee,isMediaAndSupportsKeywords:ne,isColorAdjusterFuncNode:se,lastLineHasInlineComment:V,isAtWordPlaceholderNode:oe,isConfigurationNode:K,isParenGroupNode:Ee}}}),zm=Z({"src/utils/line-column-to-index.js"(e,n){"use strict";ae(),n.exports=function(t,s){let i=0;for(let r=0;r<t.line-1;++r)i=s.indexOf(`
`,i)+1;return i+t.column}}}),Xm=Z({"src/language-css/loc.js"(e,n){"use strict";ae();var{skipEverythingButNewLine:t}=Tr(),s=st(),i=zm();function r(p,f){return typeof p.sourceIndex=="number"?p.sourceIndex:p.source?i(p.source.start,f)-1:null}function u(p,f){if(p.type==="css-comment"&&p.inline)return t(f,p.source.startOffset);let h=p.nodes&&s(p.nodes);return h&&p.source&&!p.source.end&&(p=h),p.source&&p.source.end?i(p.source.end,f):null}function a(p,f){p.source&&(p.source.startOffset=r(p,f),p.source.endOffset=u(p,f));for(let h in p){let N=p[h];h==="source"||!N||typeof N!="object"||(N.type==="value-root"||N.type==="value-unknown"?c(N,l(p),N.text||N.value):a(N,f))}}function c(p,f,h){p.source&&(p.source.startOffset=r(p,h)+f,p.source.endOffset=u(p,h)+f);for(let N in p){let T=p[N];N==="source"||!T||typeof T!="object"||c(T,f,h)}}function l(p){let f=p.source.startOffset;return typeof p.prop=="string"&&(f+=p.prop.length),p.type==="css-atrule"&&typeof p.name=="string"&&(f+=1+p.name.length+p.raws.afterName.match(/^\s*:?\s*/)[0].length),p.type!=="css-atrule"&&p.raws&&typeof p.raws.between=="string"&&(f+=p.raws.between.length),f}function C(p){let f="initial",h="initial",N,T=!1,A=[];for(let b=0;b<p.length;b++){let v=p[b];switch(f){case"initial":if(v==="'"){f="single-quotes";continue}if(v==='"'){f="double-quotes";continue}if((v==="u"||v==="U")&&p.slice(b,b+4).toLowerCase()==="url("){f="url",b+=3;continue}if(v==="*"&&p[b-1]==="/"){f="comment-block";continue}if(v==="/"&&p[b-1]==="/"){f="comment-inline",N=b-1;continue}continue;case"single-quotes":if(v==="'"&&p[b-1]!=="\\"&&(f=h,h="initial"),v===`
`||v==="\r")return p;continue;case"double-quotes":if(v==='"'&&p[b-1]!=="\\"&&(f=h,h="initial"),v===`
`||v==="\r")return p;continue;case"url":if(v===")"&&(f="initial"),v===`
`||v==="\r")return p;if(v==="'"){f="single-quotes",h="url";continue}if(v==='"'){f="double-quotes",h="url";continue}continue;case"comment-block":v==="/"&&p[b-1]==="*"&&(f="initial");continue;case"comment-inline":(v==='"'||v==="'"||v==="*")&&(T=!0),(v===`
`||v==="\r")&&(T&&A.push([N,b]),f="initial",T=!1);continue}}for(let[b,v]of A)p=p.slice(0,b)+p.slice(b,v).replace(/["'*]/g," ")+p.slice(v);return p}function m(p){return p.source.startOffset}function g(p){return p.source.endOffset}n.exports={locStart:m,locEnd:g,calculateLoc:a,replaceQuotesInInlineComments:C}}}),Km=Z({"src/language-css/utils/is-less-parser.js"(e,n){"use strict";ae();function t(s){return s.parser==="css"||s.parser==="less"}n.exports=t}}),Ym=Z({"src/language-css/utils/is-scss.js"(e,n){"use strict";ae();function t(s,i){return s==="less"||s==="scss"?s==="scss":/(?:\w\s*:\s*[^:}]+|#){|@import[^\n]+(?:url|,)/.test(i)}n.exports=t}}),Qm=Z({"src/language-css/utils/css-units.evaluate.js"(e,n){n.exports={em:"em",rem:"rem",ex:"ex",rex:"rex",cap:"cap",rcap:"rcap",ch:"ch",rch:"rch",ic:"ic",ric:"ric",lh:"lh",rlh:"rlh",vw:"vw",vh:"vh",vi:"vi",vb:"vb",vmin:"vmin",vmax:"vmax",cm:"cm",mm:"mm",q:"Q",in:"in",pt:"pt",pc:"pc",px:"px",deg:"deg",grad:"grad",rad:"rad",turn:"turn",s:"s",ms:"ms",hz:"Hz",khz:"kHz",dpi:"dpi",dpcm:"dpcm",dppx:"dppx",x:"x"}}}),Zm=Z({"src/language-css/utils/print-unit.js"(e,n){"use strict";ae();var t=Qm();function s(i){let r=i.toLowerCase();return Object.prototype.hasOwnProperty.call(t,r)?t[r]:i}n.exports=s}}),ed=Z({"src/language-css/printer-postcss.js"(e,n){"use strict";ae();var t=st(),{printNumber:s,printString:i,hasNewline:r,isFrontMatterNode:u,isNextLineEmpty:a,isNonEmptyArray:c}=Ge(),{builders:{join:l,line:C,hardline:m,softline:g,group:p,fill:f,indent:h,dedent:N,ifBreak:T,breakParent:A},utils:{removeLines:b,getDocParts:v}}=Le(),B=Hm(),w=Gm(),{insertPragma:I}=Jm(),{getAncestorNode:E,getPropOfDeclNode:D,maybeToLowerCase:d,insideValueFunctionNode:y,insideICSSRuleNode:o,insideAtRuleNode:x,insideURLFunctionInImportAtRuleNode:F,isKeyframeAtRuleKeywords:S,isWideKeywords:k,isLastNode:_,isSCSSControlDirectiveNode:O,isDetachedRulesetDeclarationNode:R,isRelationalOperatorNode:M,isEqualityOperatorNode:H,isMultiplicationNode:P,isDivisionNode:G,isAdditionNode:re,isSubtractionNode:$,isMathOperatorNode:W,isEachKeywordNode:ee,isForKeywordNode:U,isURLFunctionNode:ne,isIfElseKeywordNode:se,hasComposesNode:V,hasParensAroundNode:oe,hasEmptyRawBefore:K,isKeyValuePairNode:Ee,isKeyInValuePairNode:q,isDetachedRulesetCallNode:le,isTemplatePlaceholderNode:ue,isTemplatePropNode:Q,isPostcssSimpleVarNode:de,isSCSSMapItemNode:ge,isInlineValueCommentNode:ve,isHashNode:xe,isLeftCurlyBraceNode:we,isRightCurlyBraceNode:fe,isWordNode:pe,isColonNode:me,isMediaAndSupportsKeywords:ce,isColorAdjusterFuncNode:he,lastLineHasInlineComment:J,isAtWordPlaceholderNode:ye,isConfigurationNode:X,isParenGroupNode:Y}=Um(),{locStart:te,locEnd:z}=Xm(),j=Km(),Ce=Ym(),Ne=Zm();function je(Ae){return Ae.trailingComma==="es5"||Ae.trailingComma==="all"}function Ue(Ae,Oe,Pe){let ie=Ae.getValue();if(!ie)return"";if(typeof ie=="string")return ie;switch(ie.type){case"front-matter":return[ie.raw,m];case"css-root":{let Me=tt(Ae,Oe,Pe),qe=ie.raws.after.trim();return[Me,qe?" ".concat(qe):"",v(Me).length>0?m:""]}case"css-comment":{let Me=ie.inline||ie.raws.inline,qe=Oe.originalText.slice(te(ie),z(ie));return Me?qe.trimEnd():qe}case"css-rule":return[Pe("selector"),ie.important?" !important":"",ie.nodes?[ie.selector&&ie.selector.type==="selector-unknown"&&J(ie.selector.value)?C:" ","{",ie.nodes.length>0?h([m,tt(Ae,Oe,Pe)]):"",m,"}",R(ie)?";":""]:";"];case"css-decl":{let Me=Ae.getParentNode(),{between:qe}=ie.raws,Je=qe.trim(),rt=Je===":",Ze=V(ie)?b(Pe("value")):Pe("value");return!rt&&J(Je)&&(Ze=h([m,N(Ze)])),[ie.raws.before.replace(/[\s;]/g,""),o(Ae)?ie.prop:d(ie.prop),Je.startsWith("//")?" ":"",Je,ie.extend?"":" ",j(Oe)&&ie.extend&&ie.selector?["extend(",Pe("selector"),")"]:"",Ze,ie.raws.important?ie.raws.important.replace(/\s*!\s*important/i," !important"):ie.important?" !important":"",ie.raws.scssDefault?ie.raws.scssDefault.replace(/\s*!default/i," !default"):ie.scssDefault?" !default":"",ie.raws.scssGlobal?ie.raws.scssGlobal.replace(/\s*!global/i," !global"):ie.scssGlobal?" !global":"",ie.nodes?[" {",h([g,tt(Ae,Oe,Pe)]),g,"}"]:Q(ie)&&!Me.raws.semicolon&&Oe.originalText[z(ie)-1]!==";"?"":Oe.__isHTMLStyleAttribute&&_(Ae,ie)?T(";"):";"]}case"css-atrule":{let Me=Ae.getParentNode(),qe=ue(ie)&&!Me.raws.semicolon&&Oe.originalText[z(ie)-1]!==";";if(j(Oe)){if(ie.mixin)return[Pe("selector"),ie.important?" !important":"",qe?"":";"];if(ie.function)return[ie.name,Pe("params"),qe?"":";"];if(ie.variable)return["@",ie.name,": ",ie.value?Pe("value"):"",ie.raws.between.trim()?ie.raws.between.trim()+" ":"",ie.nodes?["{",h([ie.nodes.length>0?g:"",tt(Ae,Oe,Pe)]),g,"}"]:"",qe?"":";"]}return["@",le(ie)||ie.name.endsWith(":")?ie.name:d(ie.name),ie.params?[le(ie)?"":ue(ie)?ie.raws.afterName===""?"":ie.name.endsWith(":")?" ":/^\s*\n\s*\n/.test(ie.raws.afterName)?[m,m]:/^\s*\n/.test(ie.raws.afterName)?m:" ":" ",Pe("params")]:"",ie.selector?h([" ",Pe("selector")]):"",ie.value?p([" ",Pe("value"),O(ie)?oe(ie)?" ":C:""]):ie.name==="else"?" ":"",ie.nodes?[O(ie)?"":ie.selector&&!ie.selector.nodes&&typeof ie.selector.value=="string"&&J(ie.selector.value)||!ie.selector&&typeof ie.params=="string"&&J(ie.params)?C:" ","{",h([ie.nodes.length>0?g:"",tt(Ae,Oe,Pe)]),g,"}"]:qe?"":";"]}case"media-query-list":{let Me=[];return Ae.each(qe=>{let Je=qe.getValue();Je.type==="media-query"&&Je.value===""||Me.push(Pe())},"nodes"),p(h(l(C,Me)))}case"media-query":return[l(" ",Ae.map(Pe,"nodes")),_(Ae,ie)?"":","];case"media-type":return Ie(ze(ie.value,Oe));case"media-feature-expression":return ie.nodes?["(",...Ae.map(Pe,"nodes"),")"]:ie.value;case"media-feature":return d(ze(ie.value.replace(/ +/g," "),Oe));case"media-colon":return[ie.value," "];case"media-value":return Ie(ze(ie.value,Oe));case"media-keyword":return ze(ie.value,Oe);case"media-url":return ze(ie.value.replace(/^url\(\s+/gi,"url(").replace(/\s+\)$/g,")"),Oe);case"media-unknown":return ie.value;case"selector-root":return p([x(Ae,"custom-selector")?[E(Ae,"css-atrule").customSelector,C]:"",l([",",x(Ae,["extend","custom-selector","nest"])?C:m],Ae.map(Pe,"nodes"))]);case"selector-selector":return p(h(Ae.map(Pe,"nodes")));case"selector-comment":return ie.value;case"selector-string":return ze(ie.value,Oe);case"selector-tag":{let Me=Ae.getParentNode(),qe=Me&&Me.nodes.indexOf(ie),Je=qe&&Me.nodes[qe-1];return[ie.namespace?[ie.namespace===!0?"":ie.namespace.trim(),"|"]:"",Je.type==="selector-nesting"?ie.value:Ie(S(Ae,ie.value)?ie.value.toLowerCase():ie.value)]}case"selector-id":return["#",ie.value];case"selector-class":return[".",Ie(ze(ie.value,Oe))];case"selector-attribute":return["[",ie.namespace?[ie.namespace===!0?"":ie.namespace.trim(),"|"]:"",ie.attribute.trim(),ie.operator?ie.operator:"",ie.value?Be(ze(ie.value.trim(),Oe),Oe):"",ie.insensitive?" i":"","]"];case"selector-combinator":{if(ie.value==="+"||ie.value===">"||ie.value==="~"||ie.value===">>>"){let Je=Ae.getParentNode();return[Je.type==="selector-selector"&&Je.nodes[0]===ie?"":C,ie.value,_(Ae,ie)?"":" "]}let Me=ie.value.trim().startsWith("(")?C:"",qe=Ie(ze(ie.value.trim(),Oe))||C;return[Me,qe]}case"selector-universal":return[ie.namespace?[ie.namespace===!0?"":ie.namespace.trim(),"|"]:"",ie.value];case"selector-pseudo":return[d(ie.value),c(ie.nodes)?["(",l(", ",Ae.map(Pe,"nodes")),")"]:""];case"selector-nesting":return ie.value;case"selector-unknown":{let Me=E(Ae,"css-rule");if(Me&&Me.isSCSSNesterProperty)return Ie(ze(d(ie.value),Oe));let qe=Ae.getParentNode();if(qe.raws&&qe.raws.selector){let rt=te(qe),Ze=rt+qe.raws.selector.length;return Oe.originalText.slice(rt,Ze).trim()}let Je=Ae.getParentNode(1);if(qe.type==="value-paren_group"&&Je&&Je.type==="value-func"&&Je.value==="selector"){let rt=z(qe.open)+1,Ze=te(qe.close),ct=Oe.originalText.slice(rt,Ze).trim();return J(ct)?[A,ct]:ct}return ie.value}case"value-value":case"value-root":return Pe("group");case"value-comment":return Oe.originalText.slice(te(ie),z(ie));case"value-comma_group":{let Me=Ae.getParentNode(),qe=Ae.getParentNode(1),Je=D(Ae),rt=Je&&Me.type==="value-value"&&(Je==="grid"||Je.startsWith("grid-template")),Ze=E(Ae,"css-atrule"),ct=Ze&&O(Ze),qt=ie.groups.some(ut=>ve(ut)),L=Ae.map(Pe,"groups"),De=[],ke=y(Ae,"url"),We=!1,$e=!1;for(let ut=0;ut<ie.groups.length;++ut){De.push(L[ut]);let et=ie.groups[ut-1],Re=ie.groups[ut],He=ie.groups[ut+1],Zt=ie.groups[ut+2];if(ke){(He&&re(He)||re(Re))&&De.push(" ");continue}if(x(Ae,"forward")&&Re.type==="value-word"&&Re.value&&et!==void 0&&et.type==="value-word"&&et.value==="as"&&He.type==="value-operator"&&He.value==="*"||!He||Re.type==="value-word"&&Re.value.endsWith("-")&&ye(He))continue;let ho=Re.type==="value-string"&&Re.value.startsWith("#{"),Co=We&&He.type==="value-string"&&He.value.endsWith("}");if(ho||Co){We=!We;continue}if(We||me(Re)||me(He)||Re.type==="value-atword"&&Re.value===""||Re.value==="~"||Re.value&&Re.value.includes("\\")&&He&&He.type!=="value-comment"||et&&et.value&&et.value.indexOf("\\")===et.value.length-1&&Re.type==="value-operator"&&Re.value==="/"||Re.value==="\\"||de(Re,He)||xe(Re)||we(Re)||fe(He)||we(He)&&K(He)||fe(Re)&&K(He)||Re.value==="--"&&xe(He))continue;let Qn=W(Re),Zn=W(He);if((Qn&&xe(He)||Zn&&fe(Re))&&K(He)||!et&&G(Re)||y(Ae,"calc")&&(re(Re)||re(He)||$(Re)||$(He))&&K(He))continue;let Eo=(re(Re)||$(Re))&&ut===0&&(He.type==="value-number"||He.isHex)&&qe&&he(qe)&&!K(He),eu=Zt&&Zt.type==="value-func"||Zt&&pe(Zt)||Re.type==="value-func"||pe(Re),tu=He.type==="value-func"||pe(He)||et&&et.type==="value-func"||et&&pe(et);if(!(!(P(He)||P(Re))&&!y(Ae,"calc")&&!Eo&&(G(He)&&!eu||G(Re)&&!tu||re(He)&&!eu||re(Re)&&!tu||$(He)||$(Re))&&(K(He)||Qn&&(!et||et&&W(et))))){if(ve(Re)){if(Me.type==="value-paren_group"){De.push(N(m));continue}De.push(m);continue}if(ct&&(H(He)||M(He)||se(He)||ee(Re)||U(Re))){De.push(" ");continue}if(Ze&&Ze.name.toLowerCase()==="namespace"){De.push(" ");continue}if(rt){Re.source&&He.source&&Re.source.start.line!==He.source.start.line?(De.push(m),$e=!0):De.push(" ");continue}if(Zn){De.push(" ");continue}if(!(He&&He.value==="...")&&!(ye(Re)&&ye(He)&&z(Re)===te(He))){if(ye(Re)&&Y(He)&&z(Re)===te(He.open)){De.push(g);continue}if(Re.value==="with"&&Y(He)){De.push(" ");continue}De.push(C)}}}return qt&&De.push(A),$e&&De.unshift(m),ct?p(h(De)):F(Ae)?p(f(De)):p(h(f(De)))}case"value-paren_group":{let Me=Ae.getParentNode();if(Me&&ne(Me)&&(ie.groups.length===1||ie.groups.length>0&&ie.groups[0].type==="value-comma_group"&&ie.groups[0].groups.length>0&&ie.groups[0].groups[0].type==="value-word"&&ie.groups[0].groups[0].value.startsWith("data:")))return[ie.open?Pe("open"):"",l(",",Ae.map(Pe,"groups")),ie.close?Pe("close"):""];if(!ie.open){let ke=Ae.map(Pe,"groups"),We=[];for(let $e=0;$e<ke.length;$e++)$e!==0&&We.push([",",C]),We.push(ke[$e]);return p(h(f(We)))}let qe=ge(Ae),Je=t(ie.groups),rt=Je&&Je.type==="value-comment",Ze=q(ie,Me),ct=X(ie,Me),qt=ct||qe&&!Ze,L=ct||Ze,De=p([ie.open?Pe("open"):"",h([g,l([C],Ae.map((ke,We)=>{let $e=ke.getValue(),ut=We===ie.groups.length-1,et=[Pe(),ut?"":","];if(Ee($e)&&$e.type==="value-comma_group"&&$e.groups&&$e.groups[0].type!=="value-paren_group"&&$e.groups[2]&&$e.groups[2].type==="value-paren_group"){let Re=v(et[0].contents.contents);return Re[1]=p(Re[1]),p(N(et))}if(!ut&&$e.type==="value-comma_group"&&c($e.groups)){let Re=t($e.groups);Re.source&&a(Oe.originalText,Re,z)&&et.push(m)}return et},"groups"))]),T(!rt&&Ce(Oe.parser,Oe.originalText)&&qe&&je(Oe)?",":""),g,ie.close?Pe("close"):""],{shouldBreak:qt});return L?N(De):De}case"value-func":return[ie.value,x(Ae,"supports")&&ce(ie)?" ":"",Pe("group")];case"value-paren":return ie.value;case"value-number":return[Ve(ie.value),Ne(ie.unit)];case"value-operator":return ie.value;case"value-word":return ie.isColor&&ie.isHex||k(ie.value)?ie.value.toLowerCase():ie.value;case"value-colon":{let Me=Ae.getParentNode(),qe=Me&&Me.groups.indexOf(ie),Je=qe&&Me.groups[qe-1];return[ie.value,Je&&typeof Je.value=="string"&&t(Je.value)==="\\"||y(Ae,"url")?"":C]}case"value-comma":return[ie.value," "];case"value-string":return i(ie.raws.quote+ie.value+ie.raws.quote,Oe);case"value-atword":return["@",ie.value];case"value-unicode-range":return ie.value;case"value-unknown":return ie.value;default:throw new Error("Unknown postcss type ".concat(JSON.stringify(ie.type)))}}function tt(Ae,Oe,Pe){let ie=[];return Ae.each((Me,qe,Je)=>{let rt=Je[qe-1];if(rt&&rt.type==="css-comment"&&rt.text.trim()==="prettier-ignore"){let Ze=Me.getValue();ie.push(Oe.originalText.slice(te(Ze),z(Ze)))}else ie.push(Pe());qe!==Je.length-1&&(Je[qe+1].type==="css-comment"&&!r(Oe.originalText,te(Je[qe+1]),{backwards:!0})&&!u(Je[qe])||Je[qe+1].type==="css-atrule"&&Je[qe+1].name==="else"&&Je[qe].type!=="css-comment"?ie.push(" "):(ie.push(Oe.__isHTMLStyleAttribute?C:m),a(Oe.originalText,Me.getValue(),z)&&!u(Je[qe])&&ie.push(m)))},"nodes"),ie}var Te=/(["'])(?:(?!\1)[^\\]|\\.)*\1/gs,_e=/(?:\d*\.\d+|\d+\.?)(?:[Ee][+-]?\d+)?/g,Fe=/[A-Za-z]+/g,Ke=/[$@]?[A-Z_a-z\u0080-\uFFFF][\w\u0080-\uFFFF-]*/g,Se=new RegExp(Te.source+"|(".concat(Ke.source,")?(").concat(_e.source,")(").concat(Fe.source,")?"),"g");function ze(Ae,Oe){return Ae.replace(Te,Pe=>i(Pe,Oe))}function Be(Ae,Oe){let Pe=Oe.singleQuote?"'":'"';return Ae.includes('"')||Ae.includes("'")?Ae:Pe+Ae+Pe}function Ie(Ae){return Ae.replace(Se,(Oe,Pe,ie,Me,qe)=>!ie&&Me?Ve(Me)+d(qe||""):Oe)}function Ve(Ae){return s(Ae).replace(/\.0(?=$|e)/,"")}n.exports={print:Ue,embed:w,insertPragma:I,massageAstNode:B}}}),td=Z({"src/language-css/options.js"(e,n){"use strict";ae();var t=Lt();n.exports={singleQuote:t.singleQuote}}}),rd=Z({"src/language-css/parsers.js"(){ae()}}),nd=Z({"node_modules/linguist-languages/data/CSS.json"(e,n){n.exports={name:"CSS",type:"markup",tmScope:"source.css",aceMode:"css",codemirrorMode:"css",codemirrorMimeType:"text/css",color:"#563d7c",extensions:[".css"],languageId:50}}}),ud=Z({"node_modules/linguist-languages/data/PostCSS.json"(e,n){n.exports={name:"PostCSS",type:"markup",tmScope:"source.postcss",group:"CSS",extensions:[".pcss",".postcss"],aceMode:"text",languageId:262764437}}}),sd=Z({"node_modules/linguist-languages/data/Less.json"(e,n){n.exports={name:"Less",type:"markup",color:"#1d365d",extensions:[".less"],tmScope:"source.css.less",aceMode:"less",codemirrorMode:"css",codemirrorMimeType:"text/css",languageId:198}}}),ad=Z({"node_modules/linguist-languages/data/SCSS.json"(e,n){n.exports={name:"SCSS",type:"markup",color:"#c6538c",tmScope:"source.css.scss",aceMode:"scss",codemirrorMode:"css",codemirrorMimeType:"text/x-scss",extensions:[".scss"],languageId:329}}}),id=Z({"src/language-css/index.js"(e,n){"use strict";ae();var t=bt(),s=ed(),i=td(),r=rd(),u=[t(nd(),c=>({since:"1.4.0",parsers:["css"],vscodeLanguageIds:["css"],extensions:[...c.extensions,".wxss"]})),t(ud(),()=>({since:"1.4.0",parsers:["css"],vscodeLanguageIds:["postcss"]})),t(sd(),()=>({since:"1.4.0",parsers:["less"],vscodeLanguageIds:["less"]})),t(ad(),()=>({since:"1.4.0",parsers:["scss"],vscodeLanguageIds:["scss"]}))],a={postcss:s};n.exports={languages:u,options:i,printers:a,parsers:r}}}),od=Z({"src/language-handlebars/loc.js"(e,n){"use strict";ae();function t(i){return i.loc.start.offset}function s(i){return i.loc.end.offset}n.exports={locStart:t,locEnd:s}}}),cd=Z({"src/language-handlebars/clean.js"(e,n){"use strict";ae();function t(s,i){if(s.type==="TextNode"){let r=s.chars.trim();if(!r)return null;i.chars=r.replace(/[\t\n\f\r ]+/g," ")}s.type==="AttrNode"&&s.name.toLowerCase()==="class"&&delete i.value}t.ignoredProperties=new Set(["loc","selfClosing"]),n.exports=t}}),ld=Z({"vendors/html-void-elements.json"(e,n){n.exports={htmlVoidElements:["area","base","basefont","bgsound","br","col","command","embed","frame","hr","image","img","input","isindex","keygen","link","menuitem","meta","nextid","param","source","track","wbr"]}}}),pd=Z({"src/language-handlebars/utils.js"(e,n){"use strict";ae();var{htmlVoidElements:t}=ld(),s=st();function i(b){let v=b.getValue(),B=b.getParentNode(0);return!!(m(b,["ElementNode"])&&s(B.children)===v||m(b,["Block"])&&s(B.body)===v)}function r(b){return b.toUpperCase()===b}function u(b){return C(b,["ElementNode"])&&typeof b.tag=="string"&&b.tag[0]!==":"&&(r(b.tag[0])||b.tag.includes("."))}var a=new Set(t);function c(b){return u(b)&&b.children.every(v=>l(v))||a.has(b.tag)}function l(b){return C(b,["TextNode"])&&!/\S/.test(b.chars)}function C(b,v){return b&&v.includes(b.type)}function m(b,v){let B=b.getParentNode(0);return C(B,v)}function g(b,v){let B=h(b);return C(B,v)}function p(b,v){let B=N(b);return C(B,v)}function f(b,v){let B=b.getValue(),w=b.getParentNode(0)||{},I=w.children||w.body||w.parts||[],E=I.indexOf(B);return E!==-1&&I[E+v]}function h(b){let v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;return f(b,-v)}function N(b){return f(b,1)}function T(b){return C(b,["MustacheCommentStatement"])&&typeof b.value=="string"&&b.value.trim()==="prettier-ignore"}function A(b){let v=b.getValue(),B=h(b,2);return T(v)||T(B)}n.exports={getNextNode:N,getPreviousNode:h,hasPrettierIgnore:A,isLastNodeOfSiblings:i,isNextNodeOfSomeType:p,isNodeOfSomeType:C,isParentOfSomeType:m,isPreviousNodeOfSomeType:g,isVoid:c,isWhitespaceNode:l}}}),fd=Z({"src/language-handlebars/printer-glimmer.js"(e,n){"use strict";ae();var{builders:{dedent:t,fill:s,group:i,hardline:r,ifBreak:u,indent:a,join:c,line:l,softline:C},utils:{getDocParts:m,replaceTextEndOfLine:g}}=Le(),{getPreferredQuote:p,isNonEmptyArray:f}=Ge(),{locStart:h,locEnd:N}=od(),T=cd(),{getNextNode:A,getPreviousNode:b,hasPrettierIgnore:v,isLastNodeOfSiblings:B,isNextNodeOfSomeType:w,isNodeOfSomeType:I,isParentOfSomeType:E,isPreviousNodeOfSomeType:D,isVoid:d,isWhitespaceNode:y}=pd(),o=2;function x(J,ye,X){let Y=J.getValue();if(!Y)return"";if(v(J))return ye.originalText.slice(h(Y),N(Y));let te=ye.singleQuote?"'":'"';switch(Y.type){case"Block":case"Program":case"Template":return i(J.map(X,"body"));case"ElementNode":{let z=i(S(J,X)),j=ye.htmlWhitespaceSensitivity==="ignore"&&w(J,["ElementNode"])?C:"";if(d(Y))return[z,j];let Ce=["</",Y.tag,">"];return Y.children.length===0?[z,a(Ce),j]:ye.htmlWhitespaceSensitivity==="ignore"?[z,a(k(J,ye,X)),r,a(Ce),j]:[z,a(i(k(J,ye,X))),a(Ce),j]}case"BlockStatement":{let z=J.getParentNode(1);return z&&z.inverse&&z.inverse.body.length===1&&z.inverse.body[0]===Y&&z.inverse.body[0].path.parts[0]==="if"?[U(J,X),K(J,X,ye),Ee(J,X,ye)]:[W(J,X),i([K(J,X,ye),Ee(J,X,ye),ne(J,X,ye)])]}case"ElementModifierStatement":return i(["{{",pe(J,X),"}}"]);case"MustacheStatement":return i([O(Y),pe(J,X),R(Y)]);case"SubExpression":return i(["(",fe(J,X),C,")"]);case"AttrNode":{let z=Y.value.type==="TextNode";if(z&&Y.value.chars===""&&h(Y.value)===N(Y.value))return Y.name;let Ce=z?p(Y.value.chars,te).quote:Y.value.type==="ConcatStatement"?p(Y.value.parts.filter(je=>je.type==="TextNode").map(je=>je.chars).join(""),te).quote:"",Ne=X("value");return[Y.name,"=",Ce,Y.name==="class"&&Ce?i(a(Ne)):Ne,Ce]}case"ConcatStatement":return J.map(X,"parts");case"Hash":return c(l,J.map(X,"pairs"));case"HashPair":return[Y.key,"=",X("value")];case"TextNode":{let z=Y.chars.replace(/{{/g,"\\{{"),j=ue(J);if(j){if(j==="class"){let Se=z.trim().split(/\s+/).join(" "),ze=!1,Be=!1;return E(J,["ConcatStatement"])&&(D(J,["MustacheStatement"])&&/^\s/.test(z)&&(ze=!0),w(J,["MustacheStatement"])&&/\s$/.test(z)&&Se!==""&&(Be=!0)),[ze?l:"",Se,Be?l:""]}return g(z)}let Ne=/^[\t\n\f\r ]*$/.test(z),je=!b(J),Ue=!A(J);if(ye.htmlWhitespaceSensitivity!=="ignore"){let Se=/^[\t\n\f\r ]*/,ze=/[\t\n\f\r ]*$/,Be=Ue&&E(J,["Template"]),Ie=je&&E(J,["Template"]);if(Ne){if(Ie||Be)return"";let ie=[l],Me=Q(z);return Me&&(ie=ve(Me)),B(J)&&(ie=ie.map(qe=>t(qe))),ie}let[Ve]=z.match(Se),[Ae]=z.match(ze),Oe=[];if(Ve){Oe=[l];let ie=Q(Ve);ie&&(Oe=ve(ie)),z=z.replace(Se,"")}let Pe=[];if(Ae){if(!Be){Pe=[l];let ie=Q(Ae);ie&&(Pe=ve(ie)),B(J)&&(Pe=Pe.map(Me=>t(Me)))}z=z.replace(ze,"")}return[...Oe,s(q(z)),...Pe]}let tt=Q(z),Te=de(z),_e=ge(z);if((je||Ue)&&Ne&&E(J,["Block","ElementNode","Template"]))return"";Ne&&tt?(Te=Math.min(tt,o),_e=0):(w(J,["BlockStatement","ElementNode"])&&(_e=Math.max(_e,1)),D(J,["BlockStatement","ElementNode"])&&(Te=Math.max(Te,1)));let Fe="",Ke="";return _e===0&&w(J,["MustacheStatement"])&&(Ke=" "),Te===0&&D(J,["MustacheStatement"])&&(Fe=" "),je&&(Te=0,Fe=""),Ue&&(_e=0,Ke=""),z=z.replace(/^[\t\n\f\r ]+/g,Fe).replace(/[\t\n\f\r ]+$/,Ke),[...ve(Te),s(q(z)),...ve(_e)]}case"MustacheCommentStatement":{let z=h(Y),j=N(Y),Ce=ye.originalText.charAt(z+2)==="~",Ne=ye.originalText.charAt(j-3)==="~",je=Y.value.includes("}}")?"--":"";return["{{",Ce?"~":"","!",je,Y.value,je,Ne?"~":"","}}"]}case"PathExpression":return Y.original;case"BooleanLiteral":return String(Y.value);case"CommentStatement":return["<!--",Y.value,"-->"];case"StringLiteral":{if(we(J)){let z=ye.singleQuote?'"':"'";return xe(Y.value,z)}return xe(Y.value,te)}case"NumberLiteral":return String(Y.value);case"UndefinedLiteral":return"undefined";case"NullLiteral":return"null";default:throw new Error("unknown glimmer type: "+JSON.stringify(Y.type))}}function F(J,ye){return h(J)-h(ye)}function S(J,ye){let X=J.getValue(),Y=["attributes","modifiers","comments"].filter(z=>f(X[z])),te=Y.flatMap(z=>X[z]).sort(F);for(let z of Y)J.each(j=>{let Ce=te.indexOf(j.getValue());te.splice(Ce,1,[l,ye()])},z);return f(X.blockParams)&&te.push(l,he(X)),["<",X.tag,a(te),_(X)]}function k(J,ye,X){let te=J.getValue().children.every(z=>y(z));return ye.htmlWhitespaceSensitivity==="ignore"&&te?"":J.map((z,j)=>{let Ce=X();return j===0&&ye.htmlWhitespaceSensitivity==="ignore"?[C,Ce]:Ce},"children")}function _(J){return d(J)?u([C,"/>"],[" />",C]):u([C,">"],">")}function O(J){let ye=J.escaped===!1?"{{{":"{{",X=J.strip&&J.strip.open?"~":"";return[ye,X]}function R(J){let ye=J.escaped===!1?"}}}":"}}";return[J.strip&&J.strip.close?"~":"",ye]}function M(J){let ye=O(J),X=J.openStrip.open?"~":"";return[ye,X,"#"]}function H(J){let ye=R(J);return[J.openStrip.close?"~":"",ye]}function P(J){let ye=O(J),X=J.closeStrip.open?"~":"";return[ye,X,"/"]}function G(J){let ye=R(J);return[J.closeStrip.close?"~":"",ye]}function re(J){let ye=O(J),X=J.inverseStrip.open?"~":"";return[ye,X]}function $(J){let ye=R(J);return[J.inverseStrip.close?"~":"",ye]}function W(J,ye){let X=J.getValue(),Y=M(X),te=H(X),z=[me(J,ye)],j=ce(J,ye);if(j&&z.push(l,j),f(X.program.blockParams)){let Ce=he(X.program);z.push(l,Ce)}return i([Y,a(z),C,te])}function ee(J,ye){return[ye.htmlWhitespaceSensitivity==="ignore"?r:"",re(J),"else",$(J)]}function U(J,ye){let X=J.getParentNode(1);return[re(X),"else if ",ce(J,ye),$(X)]}function ne(J,ye,X){let Y=J.getValue();return X.htmlWhitespaceSensitivity==="ignore"?[se(Y)?C:r,P(Y),ye("path"),G(Y)]:[P(Y),ye("path"),G(Y)]}function se(J){return I(J,["BlockStatement"])&&J.program.body.every(ye=>y(ye))}function V(J){return oe(J)&&J.inverse.body.length===1&&I(J.inverse.body[0],["BlockStatement"])&&J.inverse.body[0].path.parts[0]==="if"}function oe(J){return I(J,["BlockStatement"])&&J.inverse}function K(J,ye,X){let Y=J.getValue();if(se(Y))return"";let te=ye("program");return X.htmlWhitespaceSensitivity==="ignore"?a([r,te]):a(te)}function Ee(J,ye,X){let Y=J.getValue(),te=ye("inverse"),z=X.htmlWhitespaceSensitivity==="ignore"?[r,te]:te;return V(Y)?z:oe(Y)?[ee(Y,X),a(z)]:""}function q(J){return m(c(l,le(J)))}function le(J){return J.split(/[\t\n\f\r ]+/)}function ue(J){for(let ye=0;ye<2;ye++){let X=J.getParentNode(ye);if(X&&X.type==="AttrNode")return X.name.toLowerCase()}}function Q(J){return J=typeof J=="string"?J:"",J.split(`
`).length-1}function de(J){J=typeof J=="string"?J:"";let ye=(J.match(/^([^\S\n\r]*[\n\r])+/g)||[])[0]||"";return Q(ye)}function ge(J){J=typeof J=="string"?J:"";let ye=(J.match(/([\n\r][^\S\n\r]*)+$/g)||[])[0]||"";return Q(ye)}function ve(){let J=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0;return Array.from({length:Math.min(J,o)}).fill(r)}function xe(J,ye){let{quote:X,regex:Y}=p(J,ye);return[X,J.replace(Y,"\\".concat(X)),X]}function we(J){let ye=0,X=J.getParentNode(ye);for(;X&&I(X,["SubExpression"]);)ye++,X=J.getParentNode(ye);return!!(X&&I(J.getParentNode(ye+1),["ConcatStatement"])&&I(J.getParentNode(ye+2),["AttrNode"]))}function fe(J,ye){let X=me(J,ye),Y=ce(J,ye);return Y?a([X,l,i(Y)]):X}function pe(J,ye){let X=me(J,ye),Y=ce(J,ye);return Y?[a([X,l,Y]),C]:X}function me(J,ye){return ye("path")}function ce(J,ye){let X=J.getValue(),Y=[];if(X.params.length>0){let te=J.map(ye,"params");Y.push(...te)}if(X.hash&&X.hash.pairs.length>0){let te=ye("hash");Y.push(te)}return Y.length===0?"":c(l,Y)}function he(J){return["as |",J.blockParams.join(" "),"|"]}n.exports={print:x,massageAstNode:T}}}),Dd=Z({"src/language-handlebars/parsers.js"(){ae()}}),md=Z({"node_modules/linguist-languages/data/Handlebars.json"(e,n){n.exports={name:"Handlebars",type:"markup",color:"#f7931e",aliases:["hbs","htmlbars"],extensions:[".handlebars",".hbs"],tmScope:"text.html.handlebars",aceMode:"handlebars",languageId:155}}}),dd=Z({"src/language-handlebars/index.js"(e,n){"use strict";ae();var t=bt(),s=fd(),i=Dd(),r=[t(md(),()=>({since:"2.3.0",parsers:["glimmer"],vscodeLanguageIds:["handlebars"]}))],u={glimmer:s};n.exports={languages:r,printers:u,parsers:i}}}),gd=Z({"src/language-graphql/pragma.js"(e,n){"use strict";ae();function t(i){return/^\s*#[^\S\n]*@(?:format|prettier)\s*(?:\n|$)/.test(i)}function s(i){return`# @format

`+i}n.exports={hasPragma:t,insertPragma:s}}}),yd=Z({"src/language-graphql/loc.js"(e,n){"use strict";ae();function t(i){return typeof i.start=="number"?i.start:i.loc&&i.loc.start}function s(i){return typeof i.end=="number"?i.end:i.loc&&i.loc.end}n.exports={locStart:t,locEnd:s}}}),hd=Z({"src/language-graphql/printer-graphql.js"(e,n){"use strict";ae();var{builders:{join:t,hardline:s,line:i,softline:r,group:u,indent:a,ifBreak:c}}=Le(),{isNextLineEmpty:l,isNonEmptyArray:C}=Ge(),{insertPragma:m}=gd(),{locStart:g,locEnd:p}=yd();function f(w,I,E){let D=w.getValue();if(!D)return"";if(typeof D=="string")return D;switch(D.kind){case"Document":{let d=[];return w.each((y,o,x)=>{d.push(E()),o!==x.length-1&&(d.push(s),l(I.originalText,y.getValue(),p)&&d.push(s))},"definitions"),[...d,s]}case"OperationDefinition":{let d=I.originalText[g(D)]!=="{",y=Boolean(D.name);return[d?D.operation:"",d&&y?[" ",E("name")]:"",d&&!y&&C(D.variableDefinitions)?" ":"",C(D.variableDefinitions)?u(["(",a([r,t([c("",", "),r],w.map(E,"variableDefinitions"))]),r,")"]):"",h(w,E,D),D.selectionSet?!d&&!y?"":" ":"",E("selectionSet")]}case"FragmentDefinition":return["fragment ",E("name"),C(D.variableDefinitions)?u(["(",a([r,t([c("",", "),r],w.map(E,"variableDefinitions"))]),r,")"]):""," on ",E("typeCondition"),h(w,E,D)," ",E("selectionSet")];case"SelectionSet":return["{",a([s,t(s,N(w,I,E,"selections"))]),s,"}"];case"Field":return u([D.alias?[E("alias"),": "]:"",E("name"),D.arguments.length>0?u(["(",a([r,t([c("",", "),r],N(w,I,E,"arguments"))]),r,")"]):"",h(w,E,D),D.selectionSet?" ":"",E("selectionSet")]);case"Name":return D.value;case"StringValue":return D.block?['"""',s,t(s,D.value.replace(/"""/g,"\\$&").split(`
`)),s,'"""']:['"',D.value.replace(/["\\]/g,"\\$&").replace(/\n/g,"\\n"),'"'];case"IntValue":case"FloatValue":case"EnumValue":return D.value;case"BooleanValue":return D.value?"true":"false";case"NullValue":return"null";case"Variable":return["$",E("name")];case"ListValue":return u(["[",a([r,t([c("",", "),r],w.map(E,"values"))]),r,"]"]);case"ObjectValue":return u(["{",I.bracketSpacing&&D.fields.length>0?" ":"",a([r,t([c("",", "),r],w.map(E,"fields"))]),r,c("",I.bracketSpacing&&D.fields.length>0?" ":""),"}"]);case"ObjectField":case"Argument":return[E("name"),": ",E("value")];case"Directive":return["@",E("name"),D.arguments.length>0?u(["(",a([r,t([c("",", "),r],N(w,I,E,"arguments"))]),r,")"]):""];case"NamedType":return E("name");case"VariableDefinition":return[E("variable"),": ",E("type"),D.defaultValue?[" = ",E("defaultValue")]:"",h(w,E,D)];case"ObjectTypeExtension":case"ObjectTypeDefinition":return[E("description"),D.description?s:"",D.kind==="ObjectTypeExtension"?"extend ":"","type ",E("name"),D.interfaces.length>0?[" implements ",...b(w,I,E)]:"",h(w,E,D),D.fields.length>0?[" {",a([s,t(s,N(w,I,E,"fields"))]),s,"}"]:""];case"FieldDefinition":return[E("description"),D.description?s:"",E("name"),D.arguments.length>0?u(["(",a([r,t([c("",", "),r],N(w,I,E,"arguments"))]),r,")"]):"",": ",E("type"),h(w,E,D)];case"DirectiveDefinition":return[E("description"),D.description?s:"","directive ","@",E("name"),D.arguments.length>0?u(["(",a([r,t([c("",", "),r],N(w,I,E,"arguments"))]),r,")"]):"",D.repeatable?" repeatable":""," on ",t(" | ",w.map(E,"locations"))];case"EnumTypeExtension":case"EnumTypeDefinition":return[E("description"),D.description?s:"",D.kind==="EnumTypeExtension"?"extend ":"","enum ",E("name"),h(w,E,D),D.values.length>0?[" {",a([s,t(s,N(w,I,E,"values"))]),s,"}"]:""];case"EnumValueDefinition":return[E("description"),D.description?s:"",E("name"),h(w,E,D)];case"InputValueDefinition":return[E("description"),D.description?D.description.block?s:i:"",E("name"),": ",E("type"),D.defaultValue?[" = ",E("defaultValue")]:"",h(w,E,D)];case"InputObjectTypeExtension":case"InputObjectTypeDefinition":return[E("description"),D.description?s:"",D.kind==="InputObjectTypeExtension"?"extend ":"","input ",E("name"),h(w,E,D),D.fields.length>0?[" {",a([s,t(s,N(w,I,E,"fields"))]),s,"}"]:""];case"SchemaDefinition":return[E("description"),D.description?s:"","schema",h(w,E,D)," {",D.operationTypes.length>0?a([s,t(s,N(w,I,E,"operationTypes"))]):"",s,"}"];case"OperationTypeDefinition":return[E("operation"),": ",E("type")];case"InterfaceTypeExtension":case"InterfaceTypeDefinition":return[E("description"),D.description?s:"",D.kind==="InterfaceTypeExtension"?"extend ":"","interface ",E("name"),D.interfaces.length>0?[" implements ",...b(w,I,E)]:"",h(w,E,D),D.fields.length>0?[" {",a([s,t(s,N(w,I,E,"fields"))]),s,"}"]:""];case"FragmentSpread":return["...",E("name"),h(w,E,D)];case"InlineFragment":return["...",D.typeCondition?[" on ",E("typeCondition")]:"",h(w,E,D)," ",E("selectionSet")];case"UnionTypeExtension":case"UnionTypeDefinition":return u([E("description"),D.description?s:"",u([D.kind==="UnionTypeExtension"?"extend ":"","union ",E("name"),h(w,E,D),D.types.length>0?[" =",c(""," "),a([c([i,"  "]),t([i,"| "],w.map(E,"types"))])]:""])]);case"ScalarTypeExtension":case"ScalarTypeDefinition":return[E("description"),D.description?s:"",D.kind==="ScalarTypeExtension"?"extend ":"","scalar ",E("name"),h(w,E,D)];case"NonNullType":return[E("type"),"!"];case"ListType":return["[",E("type"),"]"];default:throw new Error("unknown graphql type: "+JSON.stringify(D.kind))}}function h(w,I,E){if(E.directives.length===0)return"";let D=t(i,w.map(I,"directives"));return E.kind==="FragmentDefinition"||E.kind==="OperationDefinition"?u([i,D]):[" ",u(a([r,D]))]}function N(w,I,E,D){return w.map((d,y,o)=>{let x=E();return y<o.length-1&&l(I.originalText,d.getValue(),p)?[x,s]:x},D)}function T(w){return w.kind&&w.kind!=="Comment"}function A(w){let I=w.getValue();if(I.kind==="Comment")return"#"+I.value.trimEnd();throw new Error("Not a comment: "+JSON.stringify(I))}function b(w,I,E){let D=w.getNode(),d=[],{interfaces:y}=D,o=w.map(x=>E(x),"interfaces");for(let x=0;x<y.length;x++){let F=y[x];d.push(o[x]);let S=y[x+1];if(S){let k=I.originalText.slice(F.loc.end,S.loc.start),_=k.includes("#"),O=k.replace(/#.*/g,"").trim();d.push(O===","?",":" &",_?i:" ")}}return d}function v(){}v.ignoredProperties=new Set(["loc","comments"]);function B(w){let I=w.getValue();return I&&Array.isArray(I.comments)&&I.comments.some(E=>E.value.trim()==="prettier-ignore")}n.exports={print:f,massageAstNode:v,hasPrettierIgnore:B,insertPragma:m,printComment:A,canAttachComment:T}}}),Cd=Z({"src/language-graphql/options.js"(e,n){"use strict";ae();var t=Lt();n.exports={bracketSpacing:t.bracketSpacing}}}),Ed=Z({"src/language-graphql/parsers.js"(){ae()}}),vd=Z({"node_modules/linguist-languages/data/GraphQL.json"(e,n){n.exports={name:"GraphQL",type:"data",color:"#e10098",extensions:[".graphql",".gql",".graphqls"],tmScope:"source.graphql",aceMode:"text",languageId:139}}}),Fd=Z({"src/language-graphql/index.js"(e,n){"use strict";ae();var t=bt(),s=hd(),i=Cd(),r=Ed(),u=[t(vd(),()=>({since:"1.5.0",parsers:["graphql"],vscodeLanguageIds:["graphql"]}))],a={graphql:s};n.exports={languages:u,options:i,printers:a,parsers:r}}}),fo=Z({"src/language-markdown/loc.js"(e,n){"use strict";ae();function t(i){return i.position.start.offset}function s(i){return i.position.end.offset}n.exports={locStart:t,locEnd:s}}}),Ad=Z({"src/language-markdown/constants.evaluate.js"(e,n){n.exports={cjkPattern:"(?:[\\u02ea-\\u02eb\\u1100-\\u11ff\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u303f\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u3190-\\u3191\\u3196-\\u31ba\\u31c0-\\u31e3\\u31f0-\\u321e\\u322a-\\u3247\\u3260-\\u327e\\u328a-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u3370\\u337b-\\u337f\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fef\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufe10-\\ufe1f\\ufe30-\\ufe6f\\uff00-\\uffef]|[\\ud840-\\ud868\\ud86a-\\ud86c\\ud86f-\\ud872\\ud874-\\ud879][\\udc00-\\udfff]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67]|\\ud83c[\\ude00\\ude50-\\ude51]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d])(?:[\\ufe00-\\ufe0f]|\\udb40[\\udd00-\\uddef])?",kPattern:"[\\u1100-\\u11ff\\u3001-\\u3003\\u3008-\\u3011\\u3013-\\u301f\\u302e-\\u3030\\u3037\\u30fb\\u3131-\\u318e\\u3200-\\u321e\\u3260-\\u327e\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ufe45-\\ufe46\\uff61-\\uff65\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]",punctuationPattern:"[\\u0021-\\u002f\\u003a-\\u0040\\u005b-\\u0060\\u007b-\\u007e\\u00a1\\u00a7\\u00ab\\u00b6-\\u00b7\\u00bb\\u00bf\\u037e\\u0387\\u055a-\\u055f\\u0589-\\u058a\\u05be\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0a76\\u0af0\\u0c77\\u0c84\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f3a-\\u0f3d\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u1400\\u166e\\u169b-\\u169c\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205e\\u207d-\\u207e\\u208d-\\u208e\\u2308-\\u230b\\u2329-\\u232a\\u2768-\\u2775\\u27c5-\\u27c6\\u27e6-\\u27ef\\u2983-\\u2998\\u29d8-\\u29db\\u29fc-\\u29fd\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e2e\\u2e30-\\u2e4f\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301f\\u3030\\u303d\\u30a0\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufd3e-\\ufd3f\\ufe10-\\ufe19\\ufe30-\\ufe52\\ufe54-\\ufe61\\ufe63\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff0a\\uff0c-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3b-\\uff3d\\uff3f\\uff5b\\uff5d\\uff5f-\\uff65]|\\ud800[\\udd00-\\udd02\\udf9f\\udfd0]|\\ud801[\\udd6f]|\\ud802[\\udc57\\udd1f\\udd3f\\ude50-\\ude58\\ude7f\\udef0-\\udef6\\udf39-\\udf3f\\udf99-\\udf9c]|\\ud803[\\udf55-\\udf59]|\\ud804[\\udc47-\\udc4d\\udcbb-\\udcbc\\udcbe-\\udcc1\\udd40-\\udd43\\udd74-\\udd75\\uddc5-\\uddc8\\uddcd\\udddb\\udddd-\\udddf\\ude38-\\ude3d\\udea9]|\\ud805[\\udc4b-\\udc4f\\udc5b\\udc5d\\udcc6\\uddc1-\\uddd7\\ude41-\\ude43\\ude60-\\ude6c\\udf3c-\\udf3e]|\\ud806[\\udc3b\\udde2\\ude3f-\\ude46\\ude9a-\\ude9c\\ude9e-\\udea2]|\\ud807[\\udc41-\\udc45\\udc70-\\udc71\\udef7-\\udef8\\udfff]|\\ud809[\\udc70-\\udc74]|\\ud81a[\\ude6e-\\ude6f\\udef5\\udf37-\\udf3b\\udf44]|\\ud81b[\\ude97-\\ude9a\\udfe2]|\\ud82f[\\udc9f]|\\ud836[\\ude87-\\ude8b]|\\ud83a[\\udd5e-\\udd5f]"}}}),Kn=Z({"src/language-markdown/utils.js"(e,n){"use strict";ae();var{getLast:t}=Ge(),{locStart:s,locEnd:i}=fo(),{cjkPattern:r,kPattern:u,punctuationPattern:a}=Ad(),c=["liquidNode","inlineCode","emphasis","esComment","strong","delete","wikiLink","link","linkReference","image","imageReference","footnote","footnoteReference","sentence","whitespace","word","break","inlineMath"],l=[...c,"tableCell","paragraph","heading"],C=new RegExp(u),m=new RegExp(a);function g(A,b){let v="non-cjk",B="cj-letter",w="k-letter",I="cjk-punctuation",E=[],D=(b.proseWrap==="preserve"?A:A.replace(new RegExp("(".concat(r,`)
(`).concat(r,")"),"g"),"$1$2")).split(/([\t\n ]+)/);for(let[y,o]of D.entries()){if(y%2===1){E.push({type:"whitespace",value:/\n/.test(o)?`
`:" "});continue}if((y===0||y===D.length-1)&&o==="")continue;let x=o.split(new RegExp("(".concat(r,")")));for(let[F,S]of x.entries())if(!((F===0||F===x.length-1)&&S==="")){if(F%2===0){S!==""&&d({type:"word",value:S,kind:v,hasLeadingPunctuation:m.test(S[0]),hasTrailingPunctuation:m.test(t(S))});continue}d(m.test(S)?{type:"word",value:S,kind:I,hasLeadingPunctuation:!0,hasTrailingPunctuation:!0}:{type:"word",value:S,kind:C.test(S)?w:B,hasLeadingPunctuation:!1,hasTrailingPunctuation:!1})}}return E;function d(y){let o=t(E);o&&o.type==="word"&&(o.kind===v&&y.kind===B&&!o.hasTrailingPunctuation||o.kind===B&&y.kind===v&&!y.hasLeadingPunctuation?E.push({type:"whitespace",value:" "}):!x(v,I)&&![o.value,y.value].some(F=>/\u3000/.test(F))&&E.push({type:"whitespace",value:""})),E.push(y);function x(F,S){return o.kind===F&&y.kind===S||o.kind===S&&y.kind===F}}}function p(A,b){let[,v,B,w]=b.slice(A.position.start.offset,A.position.end.offset).match(/^\s*(\d+)(\.|\))(\s*)/);return{numberText:v,marker:B,leadingSpaces:w}}function f(A,b){if(!A.ordered||A.children.length<2)return!1;let v=Number(p(A.children[0],b.originalText).numberText),B=Number(p(A.children[1],b.originalText).numberText);if(v===0&&A.children.length>2){let w=Number(p(A.children[2],b.originalText).numberText);return B===1&&w===1}return B===1}function h(A,b){let{value:v}=A;return A.position.end.offset===b.length&&v.endsWith(`
`)&&b.endsWith(`
`)?v.slice(0,-1):v}function N(A,b){return function v(B,w,I){let E=Object.assign({},b(B,w,I));return E.children&&(E.children=E.children.map((D,d)=>v(D,d,[E,...I]))),E}(A,null,[])}function T(A){if(!A||A.type!=="link"||A.children.length!==1)return!1;let b=A.children[0];return b&&s(A)===s(b)&&i(A)===i(b)}n.exports={mapAst:N,splitText:g,punctuationPattern:a,getFencedCodeBlockValue:h,getOrderedListItemInfo:p,hasGitDiffFriendlyOrderedList:f,INLINE_NODE_TYPES:c,INLINE_NODE_WRAPPER_TYPES:l,isAutolink:T}}}),Sd=Z({"src/language-markdown/embed.js"(e,n){"use strict";ae();var{inferParserByLanguage:t,getMaxContinuousCount:s}=Ge(),{builders:{hardline:i,markAsRoot:r},utils:{replaceEndOfLine:u}}=Le(),a=Xn(),{getFencedCodeBlockValue:c}=Kn();function l(C,m,g,p){let f=C.getValue();if(f.type==="code"&&f.lang!==null){let h=t(f.lang,p);if(h){let N=p.__inJsTemplate?"~":"`",T=N.repeat(Math.max(3,s(f.value,N)+1)),A={parser:h};f.lang==="tsx"&&(A.filepath="dummy.tsx");let b=g(c(f,p.originalText),A,{stripTrailingHardline:!0});return r([T,f.lang,f.meta?" "+f.meta:"",i,u(b),i,T])}}switch(f.type){case"front-matter":return a(f,g);case"importExport":return[g(f.value,{parser:"babel"},{stripTrailingHardline:!0}),i];case"jsx":return g("<$>".concat(f.value,"</$>"),{parser:"__js_expression",rootMarker:"mdx"},{stripTrailingHardline:!0})}return null}n.exports=l}}),Do=Z({"src/language-markdown/pragma.js"(e,n){"use strict";ae();var t=po(),s=["format","prettier"];function i(r){let u="@(".concat(s.join("|"),")"),a=new RegExp(["<!--\\s*".concat(u,"\\s*-->"),"{\\s*\\/\\*\\s*".concat(u,"\\s*\\*\\/\\s*}"),`<!--.*\r?
[\\s\\S]*(^|
)[^\\S
]*`.concat(u,`[^\\S
]*($|
)[\\s\\S]*
.*-->`)].join("|"),"m"),c=r.match(a);return c&&c.index===0}n.exports={startWithPragma:i,hasPragma:r=>i(t(r).content.trimStart()),insertPragma:r=>{let u=t(r),a="<!-- @".concat(s[0]," -->");return u.frontMatter?"".concat(u.frontMatter.raw,`

`).concat(a,`

`).concat(u.content):"".concat(a,`

`).concat(u.content)}}}}),xd=Z({"src/language-markdown/print-preprocess.js"(e,n){"use strict";ae();var t=st(),{getOrderedListItemInfo:s,mapAst:i,splitText:r}=Kn(),u=/^.$/su;function a(T,A){return T=C(T,A),T=p(T),T=l(T),T=h(T,A),T=N(T,A),T=f(T,A),T=c(T),T=m(T),T}function c(T){return i(T,A=>A.type!=="import"&&A.type!=="export"?A:Object.assign(Object.assign({},A),{},{type:"importExport"}))}function l(T){return i(T,A=>A.type!=="inlineCode"?A:Object.assign(Object.assign({},A),{},{value:A.value.replace(/\s+/g," ")}))}function C(T,A){return i(T,b=>b.type!=="text"||b.value==="*"||b.value==="_"||!u.test(b.value)||b.position.end.offset-b.position.start.offset===b.value.length?b:Object.assign(Object.assign({},b),{},{value:A.originalText.slice(b.position.start.offset,b.position.end.offset)}))}function m(T){return g(T,(A,b)=>A.type==="importExport"&&b.type==="importExport",(A,b)=>({type:"importExport",value:A.value+`

`+b.value,position:{start:A.position.start,end:b.position.end}}))}function g(T,A,b){return i(T,v=>{if(!v.children)return v;let B=v.children.reduce((w,I)=>{let E=t(w);return E&&A(E,I)?w.splice(-1,1,b(E,I)):w.push(I),w},[]);return Object.assign(Object.assign({},v),{},{children:B})})}function p(T){return g(T,(A,b)=>A.type==="text"&&b.type==="text",(A,b)=>({type:"text",value:A.value+b.value,position:{start:A.position.start,end:b.position.end}}))}function f(T,A){return i(T,(b,v,B)=>{let[w]=B;if(b.type!=="text")return b;let{value:I}=b;return w.type==="paragraph"&&(v===0&&(I=I.trimStart()),v===w.children.length-1&&(I=I.trimEnd())),{type:"sentence",position:b.position,children:r(I,A)}})}function h(T,A){return i(T,(b,v,B)=>{if(b.type==="code"){let w=/^\n?(?: {4,}|\t)/.test(A.originalText.slice(b.position.start.offset,b.position.end.offset));if(b.isIndented=w,w)for(let I=0;I<B.length;I++){let E=B[I];if(E.hasIndentedCodeblock)break;E.type==="list"&&(E.hasIndentedCodeblock=!0)}}return b})}function N(T,A){return i(T,(B,w,I)=>{if(B.type==="list"&&B.children.length>0){for(let E=0;E<I.length;E++){let D=I[E];if(D.type==="list"&&!D.isAligned)return B.isAligned=!1,B}B.isAligned=v(B)}return B});function b(B){return B.children.length===0?-1:B.children[0].position.start.column-1}function v(B){if(!B.ordered)return!0;let[w,I]=B.children;if(s(w,A.originalText).leadingSpaces.length>1)return!0;let D=b(w);if(D===-1)return!1;if(B.children.length===1)return D%A.tabWidth===0;let d=b(I);return D!==d?!1:D%A.tabWidth===0?!0:s(I,A.originalText).leadingSpaces.length>1}}n.exports=a}}),bd=Z({"src/language-markdown/clean.js"(e,n){"use strict";ae();var{isFrontMatterNode:t}=Ge(),{startWithPragma:s}=Do(),i=new Set(["position","raw"]);function r(u,a,c){if((u.type==="front-matter"||u.type==="code"||u.type==="yaml"||u.type==="import"||u.type==="export"||u.type==="jsx")&&delete a.value,u.type==="list"&&delete a.isAligned,(u.type==="list"||u.type==="listItem")&&(delete a.spread,delete a.loose),u.type==="text"||(u.type==="inlineCode"&&(a.value=u.value.replace(/[\t\n ]+/g," ")),u.type==="wikiLink"&&(a.value=u.value.trim().replace(/[\t\n]+/g," ")),(u.type==="definition"||u.type==="linkReference")&&(a.label=u.label.trim().replace(/[\t\n ]+/g," ").toLowerCase()),(u.type==="definition"||u.type==="link"||u.type==="image")&&u.title&&(a.title=u.title.replace(/\\(["')])/g,"$1")),c&&c.type==="root"&&c.children.length>0&&(c.children[0]===u||t(c.children[0])&&c.children[1]===u)&&u.type==="html"&&s(u.value)))return null}r.ignoredProperties=i,n.exports=r}}),Td=Z({"src/language-markdown/printer-markdown.js"(e,n){"use strict";ae();var{getLast:t,getMinNotPresentContinuousCount:s,getMaxContinuousCount:i,getStringWidth:r,isNonEmptyArray:u}=Ge(),{builders:{breakParent:a,join:c,line:l,literalline:C,markAsRoot:m,hardline:g,softline:p,ifBreak:f,fill:h,align:N,indent:T,group:A,hardlineWithoutBreakParent:b},utils:{normalizeDoc:v,replaceTextEndOfLine:B},printer:{printDocToString:w}}=Le(),I=Sd(),{insertPragma:E}=Do(),{locStart:D,locEnd:d}=fo(),y=xd(),o=bd(),{getFencedCodeBlockValue:x,hasGitDiffFriendlyOrderedList:F,splitText:S,punctuationPattern:k,INLINE_NODE_TYPES:_,INLINE_NODE_WRAPPER_TYPES:O,isAutolink:R}=Kn(),M=new Set(["importExport"]),H=["heading","tableCell","link","wikiLink"],P=new Set(["listItem","definition","footnoteDefinition"]);function G(fe,pe,me){let ce=fe.getValue();if(de(fe))return S(pe.originalText.slice(ce.position.start.offset,ce.position.end.offset),pe).map(he=>he.type==="word"?he.value:he.value===""?"":se(fe,he.value,pe));switch(ce.type){case"front-matter":return pe.originalText.slice(ce.position.start.offset,ce.position.end.offset);case"root":return ce.children.length===0?"":[v(oe(fe,pe,me)),M.has(Ee(ce).type)?"":g];case"paragraph":return K(fe,pe,me,{postprocessor:h});case"sentence":return K(fe,pe,me);case"word":{let he=ce.value.replace(/\*/g,"\\$&").replace(new RegExp(["(^|".concat(k,")(_+)"),"(_+)(".concat(k,"|$)")].join("|"),"g"),(X,Y,te,z,j)=>(te?"".concat(Y).concat(te):"".concat(z).concat(j)).replace(/_/g,"\\_")),J=(X,Y,te)=>X.type==="sentence"&&te===0,ye=(X,Y,te)=>R(X.children[te-1]);return he!==ce.value&&(fe.match(void 0,J,ye)||fe.match(void 0,J,(X,Y,te)=>X.type==="emphasis"&&te===0,ye))&&(he=he.replace(/^(\\?[*_])+/,X=>X.replace(/\\/g,""))),he}case"whitespace":{let he=fe.getParentNode(),J=he.children.indexOf(ce),ye=he.children[J+1],X=ye&&/^>|^(?:[*+-]|#{1,6}|\d+[).])$/.test(ye.value)?"never":pe.proseWrap;return se(fe,ce.value,{proseWrap:X})}case"emphasis":{let he;if(R(ce.children[0]))he=pe.originalText[ce.position.start.offset];else{let J=fe.getParentNode(),ye=J.children.indexOf(ce),X=J.children[ye-1],Y=J.children[ye+1];he=X&&X.type==="sentence"&&X.children.length>0&&t(X.children).type==="word"&&!t(X.children).hasTrailingPunctuation||Y&&Y.type==="sentence"&&Y.children.length>0&&Y.children[0].type==="word"&&!Y.children[0].hasLeadingPunctuation||ne(fe,"emphasis")?"*":"_"}return[he,K(fe,pe,me),he]}case"strong":return["**",K(fe,pe,me),"**"];case"delete":return["~~",K(fe,pe,me),"~~"];case"inlineCode":{let he=s(ce.value,"`"),J="`".repeat(he||1),ye=he&&!/^\s/.test(ce.value)?" ":"";return[J,ye,ce.value,ye,J]}case"wikiLink":{let he="";return pe.proseWrap==="preserve"?he=ce.value:he=ce.value.replace(/[\t\n]+/g," "),["[[",he,"]]"]}case"link":switch(pe.originalText[ce.position.start.offset]){case"<":{let he="mailto:",J=ce.url.startsWith(he)&&pe.originalText.slice(ce.position.start.offset+1,ce.position.start.offset+1+he.length)!==he?ce.url.slice(he.length):ce.url;return["<",J,">"]}case"[":return["[",K(fe,pe,me),"](",ge(ce.url,")"),ve(ce.title,pe),")"];default:return pe.originalText.slice(ce.position.start.offset,ce.position.end.offset)}case"image":return["![",ce.alt||"","](",ge(ce.url,")"),ve(ce.title,pe),")"];case"blockquote":return["> ",N("> ",K(fe,pe,me))];case"heading":return["#".repeat(ce.depth)+" ",K(fe,pe,me)];case"code":{if(ce.isIndented){let ye=" ".repeat(4);return N(ye,[ye,...B(ce.value,g)])}let he=pe.__inJsTemplate?"~":"`",J=he.repeat(Math.max(3,i(ce.value,he)+1));return[J,ce.lang||"",ce.meta?" "+ce.meta:"",g,...B(x(ce,pe.originalText),g),g,J]}case"html":{let he=fe.getParentNode(),J=he.type==="root"&&t(he.children)===ce?ce.value.trimEnd():ce.value,ye=/^<!--.*-->$/s.test(J);return B(J,ye?g:m(C))}case"list":{let he=W(ce,fe.getParentNode()),J=F(ce,pe);return K(fe,pe,me,{processor:(ye,X)=>{let Y=z(),te=ye.getValue();if(te.children.length===2&&te.children[1].type==="html"&&te.children[0].position.start.column!==te.children[1].position.start.column)return[Y,re(ye,pe,me,Y)];return[Y,N(" ".repeat(Y.length),re(ye,pe,me,Y))];function z(){let j=ce.ordered?(X===0?ce.start:J?1:ce.start+X)+(he%2===0?". ":") "):he%2===0?"- ":"* ";return ce.isAligned||ce.hasIndentedCodeblock?$(j,pe):j}}})}case"thematicBreak":{let he=U(fe,"list");return he===-1?"---":W(fe.getParentNode(he),fe.getParentNode(he+1))%2===0?"***":"---"}case"linkReference":return["[",K(fe,pe,me),"]",ce.referenceType==="full"?["[",ce.identifier,"]"]:ce.referenceType==="collapsed"?"[]":""];case"imageReference":switch(ce.referenceType){case"full":return["![",ce.alt||"","][",ce.identifier,"]"];default:return["![",ce.alt,"]",ce.referenceType==="collapsed"?"[]":""]}case"definition":{let he=pe.proseWrap==="always"?l:" ";return A(["[",ce.identifier,"]:",T([he,ge(ce.url),ce.title===null?"":[he,ve(ce.title,pe,!1)]])])}case"footnote":return["[^",K(fe,pe,me),"]"];case"footnoteReference":return["[^",ce.identifier,"]"];case"footnoteDefinition":{let he=fe.getParentNode().children[fe.getName()+1],J=ce.children.length===1&&ce.children[0].type==="paragraph"&&(pe.proseWrap==="never"||pe.proseWrap==="preserve"&&ce.children[0].position.start.line===ce.children[0].position.end.line);return["[^",ce.identifier,"]: ",J?K(fe,pe,me):A([N(" ".repeat(4),K(fe,pe,me,{processor:(ye,X)=>X===0?A([p,me()]):me()})),he&&he.type==="footnoteDefinition"?p:""])]}case"table":return V(fe,pe,me);case"tableCell":return K(fe,pe,me);case"break":return/\s/.test(pe.originalText[ce.position.start.offset])?["  ",m(C)]:["\\",g];case"liquidNode":return B(ce.value,g);case"importExport":return[ce.value,g];case"esComment":return["{/* ",ce.value," */}"];case"jsx":return ce.value;case"math":return["$$",g,ce.value?[...B(ce.value,g),g]:"","$$"];case"inlineMath":return pe.originalText.slice(D(ce),d(ce));case"tableRow":case"listItem":default:throw new Error("Unknown markdown type ".concat(JSON.stringify(ce.type)))}}function re(fe,pe,me,ce){let he=fe.getValue(),J=he.checked===null?"":he.checked?"[x] ":"[ ] ";return[J,K(fe,pe,me,{processor:(ye,X)=>{if(X===0&&ye.getValue().type!=="list")return N(" ".repeat(J.length),me());let Y=" ".repeat(xe(pe.tabWidth-ce.length,0,3));return[Y,N(Y,me())]}})]}function $(fe,pe){let me=ce();return fe+" ".repeat(me>=4?0:me);function ce(){let he=fe.length%pe.tabWidth;return he===0?0:pe.tabWidth-he}}function W(fe,pe){return ee(fe,pe,me=>me.ordered===fe.ordered)}function ee(fe,pe,me){let ce=-1;for(let he of pe.children)if(he.type===fe.type&&me(he)?ce++:ce=-1,he===fe)return ce}function U(fe,pe){let me=Array.isArray(pe)?pe:[pe],ce=-1,he;for(;he=fe.getParentNode(++ce);)if(me.includes(he.type))return ce;return-1}function ne(fe,pe){let me=U(fe,pe);return me===-1?null:fe.getParentNode(me)}function se(fe,pe,me){if(me.proseWrap==="preserve"&&pe===`
`)return g;let ce=me.proseWrap==="always"&&!ne(fe,H);return pe!==""?ce?l:" ":ce?p:""}function V(fe,pe,me){let ce=fe.getValue(),he=[],J=fe.map(j=>j.map((Ce,Ne)=>{let je=w(me(),pe).formatted,Ue=r(je);return he[Ne]=Math.max(he[Ne]||3,Ue),{text:je,width:Ue}},"children"),"children"),ye=Y(!1);if(pe.proseWrap!=="never")return[a,ye];let X=Y(!0);return[a,A(f(X,ye))];function Y(j){let Ce=[z(J[0],j),te(j)];return J.length>1&&Ce.push(c(b,J.slice(1).map(Ne=>z(Ne,j)))),c(b,Ce)}function te(j){let Ce=he.map((Ne,je)=>{let Ue=ce.align[je],tt=Ue==="center"||Ue==="left"?":":"-",Te=Ue==="center"||Ue==="right"?":":"-",_e=j?"-":"-".repeat(Ne-2);return"".concat(tt).concat(_e).concat(Te)});return"| ".concat(Ce.join(" | ")," |")}function z(j,Ce){let Ne=j.map((je,Ue)=>{let{text:tt,width:Te}=je;if(Ce)return tt;let _e=he[Ue]-Te,Fe=ce.align[Ue],Ke=0;Fe==="right"?Ke=_e:Fe==="center"&&(Ke=Math.floor(_e/2));let Se=_e-Ke;return"".concat(" ".repeat(Ke)).concat(tt).concat(" ".repeat(Se))});return"| ".concat(Ne.join(" | ")," |")}}function oe(fe,pe,me){let ce=[],he=null,{children:J}=fe.getValue();for(let[ye,X]of J.entries())switch(q(X)){case"start":he===null&&(he={index:ye,offset:X.position.end.offset});break;case"end":he!==null&&(ce.push({start:he,end:{index:ye,offset:X.position.start.offset}}),he=null);break;default:break}return K(fe,pe,me,{processor:(ye,X)=>{if(ce.length>0){let Y=ce[0];if(X===Y.start.index)return[J[Y.start.index].value,pe.originalText.slice(Y.start.offset,Y.end.offset),J[Y.end.index].value];if(Y.start.index<X&&X<Y.end.index)return!1;if(X===Y.end.index)return ce.shift(),!1}return me()}})}function K(fe,pe,me){let ce=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},{postprocessor:he}=ce,J=ce.processor||(()=>me()),ye=fe.getValue(),X=[],Y;return fe.each((te,z)=>{let j=te.getValue(),Ce=J(te,z);if(Ce!==!1){let Ne={parts:X,prevNode:Y,parentNode:ye,options:pe};le(j,Ne)&&(X.push(g),Y&&M.has(Y.type)||(ue(j,Ne)||Q(j,Ne))&&X.push(g),Q(j,Ne)&&X.push(g)),X.push(Ce),Y=j}},"children"),he?he(X):X}function Ee(fe){let pe=fe;for(;u(pe.children);)pe=t(pe.children);return pe}function q(fe){let pe;if(fe.type==="html")pe=fe.value.match(/^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/);else{let me;fe.type==="esComment"?me=fe:fe.type==="paragraph"&&fe.children.length===1&&fe.children[0].type==="esComment"&&(me=fe.children[0]),me&&(pe=me.value.match(/^prettier-ignore(?:-(start|end))?$/))}return pe?pe[1]?pe[1]:"next":!1}function le(fe,pe){let me=pe.parts.length===0,ce=_.includes(fe.type),he=fe.type==="html"&&O.includes(pe.parentNode.type);return!me&&!ce&&!he}function ue(fe,pe){let ce=(pe.prevNode&&pe.prevNode.type)===fe.type&&P.has(fe.type),he=pe.parentNode.type==="listItem"&&!pe.parentNode.loose,J=pe.prevNode&&pe.prevNode.type==="listItem"&&pe.prevNode.loose,ye=q(pe.prevNode)==="next",X=fe.type==="html"&&pe.prevNode&&pe.prevNode.type==="html"&&pe.prevNode.position.end.line+1===fe.position.start.line,Y=fe.type==="html"&&pe.parentNode.type==="listItem"&&pe.prevNode&&pe.prevNode.type==="paragraph"&&pe.prevNode.position.end.line+1===fe.position.start.line;return J||!(ce||he||ye||X||Y)}function Q(fe,pe){let me=pe.prevNode&&pe.prevNode.type==="list",ce=fe.type==="code"&&fe.isIndented;return me&&ce}function de(fe){let pe=ne(fe,["linkReference","imageReference"]);return pe&&(pe.type!=="linkReference"||pe.referenceType!=="full")}function ge(fe){let pe=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],me=[" ",...Array.isArray(pe)?pe:[pe]];return new RegExp(me.map(ce=>"\\".concat(ce)).join("|")).test(fe)?"<".concat(fe,">"):fe}function ve(fe,pe){let me=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;if(!fe)return"";if(me)return" "+ve(fe,pe,!1);if(fe=fe.replace(/\\(["')])/g,"$1"),fe.includes('"')&&fe.includes("'")&&!fe.includes(")"))return"(".concat(fe,")");let ce=fe.split("'").length-1,he=fe.split('"').length-1,J=ce>he?'"':he>ce||pe.singleQuote?"'":'"';return fe=fe.replace(/\\/,"\\\\"),fe=fe.replace(new RegExp("(".concat(J,")"),"g"),"\\$1"),"".concat(J).concat(fe).concat(J)}function xe(fe,pe,me){return fe<pe?pe:fe>me?me:fe}function we(fe){let pe=Number(fe.getName());if(pe===0)return!1;let me=fe.getParentNode().children[pe-1];return q(me)==="next"}n.exports={preprocess:y,print:G,embed:I,massageAstNode:o,hasPrettierIgnore:we,insertPragma:E}}}),Bd=Z({"src/language-markdown/options.js"(e,n){"use strict";ae();var t=Lt();n.exports={proseWrap:t.proseWrap,singleQuote:t.singleQuote}}}),Nd=Z({"src/language-markdown/parsers.js"(){ae()}}),di=Z({"node_modules/linguist-languages/data/Markdown.json"(e,n){n.exports={name:"Markdown",type:"prose",color:"#083fa1",aliases:["pandoc"],aceMode:"markdown",codemirrorMode:"gfm",codemirrorMimeType:"text/x-gfm",wrap:!0,extensions:[".md",".markdown",".mdown",".mdwn",".mdx",".mkd",".mkdn",".mkdown",".ronn",".scd",".workbook"],filenames:["contents.lr"],tmScope:"source.gfm",languageId:222}}}),wd=Z({"src/language-markdown/index.js"(e,n){"use strict";ae();var t=bt(),s=Td(),i=Bd(),r=Nd(),u=[t(di(),c=>({since:"1.8.0",parsers:["markdown"],vscodeLanguageIds:["markdown"],filenames:[...c.filenames,"README"],extensions:c.extensions.filter(l=>l!==".mdx")})),t(di(),()=>({name:"MDX",since:"1.15.0",parsers:["mdx"],vscodeLanguageIds:["mdx"],filenames:[],extensions:[".mdx"]}))],a={mdast:s};n.exports={languages:u,options:i,printers:a,parsers:r}}}),_d=Z({"src/language-html/clean.js"(e,n){"use strict";ae();var{isFrontMatterNode:t}=Ge(),s=new Set(["sourceSpan","startSourceSpan","endSourceSpan","nameSpan","valueSpan","parent"]);function i(r,u){if(r.type==="text"||r.type==="comment"||t(r)||r.type==="yaml"||r.type==="toml")return null;r.type==="attribute"&&delete u.value,r.type==="docType"&&delete u.value}i.ignoredProperties=s,n.exports=i}}),Pd=Z({"src/language-html/constants.evaluate.js"(e,n){n.exports={CSS_DISPLAY_TAGS:{area:"none",base:"none",basefont:"none",datalist:"none",head:"none",link:"none",meta:"none",noembed:"none",noframes:"none",param:"block",rp:"none",script:"block",source:"block",style:"none",template:"inline",track:"block",title:"none",html:"block",body:"block",address:"block",blockquote:"block",center:"block",div:"block",figure:"block",figcaption:"block",footer:"block",form:"block",header:"block",hr:"block",legend:"block",listing:"block",main:"block",p:"block",plaintext:"block",pre:"block",xmp:"block",slot:"contents",ruby:"ruby",rt:"ruby-text",article:"block",aside:"block",h1:"block",h2:"block",h3:"block",h4:"block",h5:"block",h6:"block",hgroup:"block",nav:"block",section:"block",dir:"block",dd:"block",dl:"block",dt:"block",ol:"block",ul:"block",li:"list-item",table:"table",caption:"table-caption",colgroup:"table-column-group",col:"table-column",thead:"table-header-group",tbody:"table-row-group",tfoot:"table-footer-group",tr:"table-row",td:"table-cell",th:"table-cell",fieldset:"block",button:"inline-block",details:"block",summary:"block",dialog:"block",meter:"inline-block",progress:"inline-block",object:"inline-block",video:"inline-block",audio:"inline-block",select:"inline-block",option:"block",optgroup:"block"},CSS_DISPLAY_DEFAULT:"inline",CSS_WHITE_SPACE_TAGS:{listing:"pre",plaintext:"pre",pre:"pre",xmp:"pre",nobr:"nowrap",table:"initial",textarea:"pre-wrap"},CSS_WHITE_SPACE_DEFAULT:"normal"}}}),Id=Z({"src/language-html/utils/is-unknown-namespace.js"(e,n){"use strict";ae();function t(s){return s.type==="element"&&!s.hasExplicitNamespace&&!["html","svg"].includes(s.namespace)}n.exports=t}}),Ot=Z({"src/language-html/utils/index.js"(e,n){"use strict";ae();var{inferParserByLanguage:t,isFrontMatterNode:s}=Ge(),{builders:{line:i,hardline:r,join:u},utils:{getDocParts:a,replaceTextEndOfLine:c}}=Le(),{CSS_DISPLAY_TAGS:l,CSS_DISPLAY_DEFAULT:C,CSS_WHITE_SPACE_TAGS:m,CSS_WHITE_SPACE_DEFAULT:g}=Pd(),p=Id(),f=new Set(["	",`
`,"\f","\r"," "]),h=j=>j.replace(/^[\t\n\f\r ]+/,""),N=j=>j.replace(/[\t\n\f\r ]+$/,""),T=j=>h(N(j)),A=j=>j.replace(/^[\t\f\r ]*\n/g,""),b=j=>A(N(j)),v=j=>j.split(/[\t\n\f\r ]+/),B=j=>j.match(/^[\t\n\f\r ]*/)[0],w=j=>{let[,Ce,Ne,je]=j.match(/^([\t\n\f\r ]*)(.*?)([\t\n\f\r ]*)$/s);return{leadingWhitespace:Ce,trailingWhitespace:je,text:Ne}},I=j=>/[\t\n\f\r ]/.test(j);function E(j,Ce){return!!(j.type==="ieConditionalComment"&&j.lastChild&&!j.lastChild.isSelfClosing&&!j.lastChild.endSourceSpan||j.type==="ieConditionalComment"&&!j.complete||de(j)&&j.children.some(Ne=>Ne.type!=="text"&&Ne.type!=="interpolation")||X(j,Ce)&&!o(j)&&j.type!=="interpolation")}function D(j){return j.type==="attribute"||!j.parent||!j.prev?!1:d(j.prev)}function d(j){return j.type==="comment"&&j.value.trim()==="prettier-ignore"}function y(j){return j.type==="text"||j.type==="comment"}function o(j){return j.type==="element"&&(j.fullName==="script"||j.fullName==="style"||j.fullName==="svg:style"||p(j)&&(j.name==="script"||j.name==="style"))}function x(j){return j.children&&!o(j)}function F(j){return o(j)||j.type==="interpolation"||S(j)}function S(j){return we(j).startsWith("pre")}function k(j,Ce){let Ne=je();if(Ne&&!j.prev&&j.parent&&j.parent.tagDefinition&&j.parent.tagDefinition.ignoreFirstLf)return j.type==="interpolation";return Ne;function je(){return s(j)?!1:(j.type==="text"||j.type==="interpolation")&&j.prev&&(j.prev.type==="text"||j.prev.type==="interpolation")?!0:!j.parent||j.parent.cssDisplay==="none"?!1:de(j.parent)?!0:!(!j.prev&&(j.parent.type==="root"||de(j)&&j.parent||o(j.parent)||J(j.parent,Ce)||!Ee(j.parent.cssDisplay))||j.prev&&!ue(j.prev.cssDisplay))}}function _(j,Ce){return s(j)?!1:(j.type==="text"||j.type==="interpolation")&&j.next&&(j.next.type==="text"||j.next.type==="interpolation")?!0:!j.parent||j.parent.cssDisplay==="none"?!1:de(j.parent)?!0:!(!j.next&&(j.parent.type==="root"||de(j)&&j.parent||o(j.parent)||J(j.parent,Ce)||!q(j.parent.cssDisplay))||j.next&&!le(j.next.cssDisplay))}function O(j){return Q(j.cssDisplay)&&!o(j)}function R(j){return s(j)||j.next&&j.sourceSpan.end&&j.sourceSpan.end.line+1<j.next.sourceSpan.start.line}function M(j){return H(j)||j.type==="element"&&j.children.length>0&&(["body","script","style"].includes(j.name)||j.children.some(Ce=>ne(Ce)))||j.firstChild&&j.firstChild===j.lastChild&&j.firstChild.type!=="text"&&$(j.firstChild)&&(!j.lastChild.isTrailingSpaceSensitive||W(j.lastChild))}function H(j){return j.type==="element"&&j.children.length>0&&(["html","head","ul","ol","select"].includes(j.name)||j.cssDisplay.startsWith("table")&&j.cssDisplay!=="table-cell")}function P(j){return ee(j)||j.prev&&G(j.prev)||re(j)}function G(j){return ee(j)||j.type==="element"&&j.fullName==="br"||re(j)}function re(j){return $(j)&&W(j)}function $(j){return j.hasLeadingSpaces&&(j.prev?j.prev.sourceSpan.end.line<j.sourceSpan.start.line:j.parent.type==="root"||j.parent.startSourceSpan.end.line<j.sourceSpan.start.line)}function W(j){return j.hasTrailingSpaces&&(j.next?j.next.sourceSpan.start.line>j.sourceSpan.end.line:j.parent.type==="root"||j.parent.endSourceSpan&&j.parent.endSourceSpan.start.line>j.sourceSpan.end.line)}function ee(j){switch(j.type){case"ieConditionalComment":case"comment":case"directive":return!0;case"element":return["script","select"].includes(j.name)}return!1}function U(j){return j.lastChild?U(j.lastChild):j}function ne(j){return j.children&&j.children.some(Ce=>Ce.type!=="text")}function se(j){let{type:Ce,lang:Ne}=j.attrMap;if(Ce==="module"||Ce==="text/javascript"||Ce==="text/babel"||Ce==="application/javascript"||Ne==="jsx")return"babel";if(Ce==="application/x-typescript"||Ne==="ts"||Ne==="tsx")return"typescript";if(Ce==="text/markdown")return"markdown";if(Ce==="text/html")return"html";if(Ce&&(Ce.endsWith("json")||Ce.endsWith("importmap")))return"json";if(Ce==="text/x-handlebars-template")return"glimmer"}function V(j){let{lang:Ce}=j.attrMap;if(!Ce||Ce==="postcss"||Ce==="css")return"css";if(Ce==="scss")return"scss";if(Ce==="less")return"less"}function oe(j,Ce){if(j.name==="script"&&!j.attrMap.src)return!j.attrMap.lang&&!j.attrMap.type?"babel":se(j);if(j.name==="style")return V(j);if(Ce&&X(j,Ce))return se(j)||!("src"in j.attrMap)&&t(j.attrMap.lang,Ce)}function K(j){return j==="block"||j==="list-item"||j.startsWith("table")}function Ee(j){return!K(j)&&j!=="inline-block"}function q(j){return!K(j)&&j!=="inline-block"}function le(j){return!K(j)}function ue(j){return!K(j)}function Q(j){return!K(j)&&j!=="inline-block"}function de(j){return we(j).startsWith("pre")}function ge(j,Ce){let Ne=0;for(let je=j.stack.length-1;je>=0;je--){let Ue=j.stack[je];Ue&&typeof Ue=="object"&&!Array.isArray(Ue)&&Ce(Ue)&&Ne++}return Ne}function ve(j,Ce){let Ne=j;for(;Ne;){if(Ce(Ne))return!0;Ne=Ne.parent}return!1}function xe(j,Ce){if(j.prev&&j.prev.type==="comment"){let je=j.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);if(je)return je[1]}let Ne=!1;if(j.type==="element"&&j.namespace==="svg")if(ve(j,je=>je.fullName==="svg:foreignObject"))Ne=!0;else return j.name==="svg"?"inline-block":"block";switch(Ce.htmlWhitespaceSensitivity){case"strict":return"inline";case"ignore":return"block";default:return Ce.parser==="vue"&&j.parent&&j.parent.type==="root"?"block":j.type==="element"&&(!j.namespace||Ne||p(j))&&l[j.name]||C}}function we(j){return j.type==="element"&&(!j.namespace||p(j))&&m[j.name]||g}function fe(j){let Ce=Number.POSITIVE_INFINITY;for(let Ne of j.split(`
`)){if(Ne.length===0)continue;if(!f.has(Ne[0]))return 0;let je=B(Ne).length;Ne.length!==je&&je<Ce&&(Ce=je)}return Ce===Number.POSITIVE_INFINITY?0:Ce}function pe(j){let Ce=arguments.length>1&&arguments[1]!==void 0?arguments[1]:fe(j);return Ce===0?j:j.split(`
`).map(Ne=>Ne.slice(Ce)).join(`
`)}function me(j,Ce){let Ne=0;for(let je=0;je<j.length;je++)j[je]===Ce&&Ne++;return Ne}function ce(j){return j.replace(/&apos;/g,"'").replace(/&quot;/g,'"')}var he=new Set(["template","style","script"]);function J(j,Ce){return ye(j,Ce)&&!he.has(j.fullName)}function ye(j,Ce){return Ce.parser==="vue"&&j.type==="element"&&j.parent.type==="root"&&j.fullName.toLowerCase()!=="html"}function X(j,Ce){return ye(j,Ce)&&(J(j,Ce)||j.attrMap.lang&&j.attrMap.lang!=="html")}function Y(j){let Ce=j.fullName;return Ce.charAt(0)==="#"||Ce==="slot-scope"||Ce==="v-slot"||Ce.startsWith("v-slot:")}function te(j,Ce){let Ne=j.parent;if(!ye(Ne,Ce))return!1;let je=Ne.fullName,Ue=j.fullName;return je==="script"&&Ue==="setup"||je==="style"&&Ue==="vars"}function z(j){let Ce=arguments.length>1&&arguments[1]!==void 0?arguments[1]:j.value;return j.parent.isWhitespaceSensitive?j.parent.isIndentationSensitive?c(Ce):c(pe(b(Ce)),r):a(u(i,v(Ce)))}n.exports={htmlTrim:T,htmlTrimPreserveIndentation:b,hasHtmlWhitespace:I,getLeadingAndTrailingHtmlWhitespace:w,canHaveInterpolation:x,countChars:me,countParents:ge,dedentString:pe,forceBreakChildren:H,forceBreakContent:M,forceNextEmptyLine:R,getLastDescendant:U,getNodeCssStyleDisplay:xe,getNodeCssStyleWhiteSpace:we,hasPrettierIgnore:D,inferScriptParser:oe,isVueCustomBlock:J,isVueNonHtmlBlock:X,isVueSlotAttribute:Y,isVueSfcBindingsAttribute:te,isDanglingSpaceSensitiveNode:O,isIndentationSensitiveNode:S,isLeadingSpaceSensitiveNode:k,isPreLikeNode:de,isScriptLikeTag:o,isTextLikeNode:y,isTrailingSpaceSensitiveNode:_,isWhitespaceSensitiveNode:F,isUnknownNamespace:p,preferHardlineAsLeadingSpaces:P,preferHardlineAsTrailingSpaces:G,shouldPreserveContent:E,unescapeQuoteEntities:ce,getTextValueParts:z}}}),kd=Z({"node_modules/angular-html-parser/lib/compiler/src/chars.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0}),e.$EOF=0,e.$BSPACE=8,e.$TAB=9,e.$LF=10,e.$VTAB=11,e.$FF=12,e.$CR=13,e.$SPACE=32,e.$BANG=33,e.$DQ=34,e.$HASH=35,e.$$=36,e.$PERCENT=37,e.$AMPERSAND=38,e.$SQ=39,e.$LPAREN=40,e.$RPAREN=41,e.$STAR=42,e.$PLUS=43,e.$COMMA=44,e.$MINUS=45,e.$PERIOD=46,e.$SLASH=47,e.$COLON=58,e.$SEMICOLON=59,e.$LT=60,e.$EQ=61,e.$GT=62,e.$QUESTION=63,e.$0=48,e.$7=55,e.$9=57,e.$A=65,e.$E=69,e.$F=70,e.$X=88,e.$Z=90,e.$LBRACKET=91,e.$BACKSLASH=92,e.$RBRACKET=93,e.$CARET=94,e.$_=95,e.$a=97,e.$b=98,e.$e=101,e.$f=102,e.$n=110,e.$r=114,e.$t=116,e.$u=117,e.$v=118,e.$x=120,e.$z=122,e.$LBRACE=123,e.$BAR=124,e.$RBRACE=125,e.$NBSP=160,e.$PIPE=124,e.$TILDA=126,e.$AT=64,e.$BT=96;function n(a){return a>=e.$TAB&&a<=e.$SPACE||a==e.$NBSP}e.isWhitespace=n;function t(a){return e.$0<=a&&a<=e.$9}e.isDigit=t;function s(a){return a>=e.$a&&a<=e.$z||a>=e.$A&&a<=e.$Z}e.isAsciiLetter=s;function i(a){return a>=e.$a&&a<=e.$f||a>=e.$A&&a<=e.$F||t(a)}e.isAsciiHexDigit=i;function r(a){return a===e.$LF||a===e.$CR}e.isNewLine=r;function u(a){return e.$0<=a&&a<=e.$7}e.isOctalDigit=u}}),Ld=Z({"node_modules/angular-html-parser/lib/compiler/src/aot/static_symbol.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=class{constructor(s,i,r){this.filePath=s,this.name=i,this.members=r}assertNoMembers(){if(this.members.length)throw new Error("Illegal state: symbol without members expected, but got ".concat(JSON.stringify(this),"."))}};e.StaticSymbol=n;var t=class{constructor(){this.cache=new Map}get(s,i,r){r=r||[];let u=r.length?".".concat(r.join(".")):"",a='"'.concat(s,'".').concat(i).concat(u),c=this.cache.get(a);return c||(c=new n(s,i,r),this.cache.set(a,c)),c}};e.StaticSymbolCache=t}}),Od=Z({"node_modules/angular-html-parser/lib/compiler/src/util.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=/-+([a-z0-9])/g;function t(o){return o.replace(n,function(){for(var x=arguments.length,F=new Array(x),S=0;S<x;S++)F[S]=arguments[S];return F[1].toUpperCase()})}e.dashCaseToCamelCase=t;function s(o,x){return r(o,":",x)}e.splitAtColon=s;function i(o,x){return r(o,".",x)}e.splitAtPeriod=i;function r(o,x,F){let S=o.indexOf(x);return S==-1?F:[o.slice(0,S).trim(),o.slice(S+1).trim()]}function u(o,x,F){return Array.isArray(o)?x.visitArray(o,F):A(o)?x.visitStringMap(o,F):o==null||typeof o=="string"||typeof o=="number"||typeof o=="boolean"?x.visitPrimitive(o,F):x.visitOther(o,F)}e.visitValue=u;function a(o){return o!=null}e.isDefined=a;function c(o){return o===void 0?null:o}e.noUndefined=c;var l=class{visitArray(o,x){return o.map(F=>u(F,this,x))}visitStringMap(o,x){let F={};return Object.keys(o).forEach(S=>{F[S]=u(o[S],this,x)}),F}visitPrimitive(o,x){return o}visitOther(o,x){return o}};e.ValueTransformer=l,e.SyncAsync={assertSync:o=>{if(w(o))throw new Error("Illegal state: value cannot be a promise");return o},then:(o,x)=>w(o)?o.then(x):x(o),all:o=>o.some(w)?Promise.all(o):o};function C(o){throw new Error("Internal Error: ".concat(o))}e.error=C;function m(o,x){let F=Error(o);return F[g]=!0,x&&(F[p]=x),F}e.syntaxError=m;var g="ngSyntaxError",p="ngParseErrors";function f(o){return o[g]}e.isSyntaxError=f;function h(o){return o[p]||[]}e.getParseErrors=h;function N(o){return o.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}e.escapeRegExp=N;var T=Object.getPrototypeOf({});function A(o){return typeof o=="object"&&o!==null&&Object.getPrototypeOf(o)===T}function b(o){let x="";for(let F=0;F<o.length;F++){let S=o.charCodeAt(F);if(S>=55296&&S<=56319&&o.length>F+1){let k=o.charCodeAt(F+1);k>=56320&&k<=57343&&(F++,S=(S-55296<<10)+k-56320+65536)}S<=127?x+=String.fromCharCode(S):S<=2047?x+=String.fromCharCode(S>>6&31|192,S&63|128):S<=65535?x+=String.fromCharCode(S>>12|224,S>>6&63|128,S&63|128):S<=2097151&&(x+=String.fromCharCode(S>>18&7|240,S>>12&63|128,S>>6&63|128,S&63|128))}return x}e.utf8Encode=b;function v(o){if(typeof o=="string")return o;if(o instanceof Array)return"["+o.map(v).join(", ")+"]";if(o==null)return""+o;if(o.overriddenName)return"".concat(o.overriddenName);if(o.name)return"".concat(o.name);if(!o.toString)return"object";let x=o.toString();if(x==null)return""+x;let F=x.indexOf(`
`);return F===-1?x:x.substring(0,F)}e.stringify=v;function B(o){return typeof o=="function"&&o.hasOwnProperty("__forward_ref__")?o():o}e.resolveForwardRef=B;function w(o){return!!o&&typeof o.then=="function"}e.isPromise=w;var I=class{constructor(o){this.full=o;let x=o.split(".");this.major=x[0],this.minor=x[1],this.patch=x.slice(2).join(".")}};e.Version=I;var E=typeof window<"u"&&window,D=typeof self<"u"&&typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&self,d=typeof globalThis<"u"&&globalThis,y=d||E||D;e.global=y}}),jd=Z({"node_modules/angular-html-parser/lib/compiler/src/compile_metadata.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=Ld(),t=Od(),s=/^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;function i(F){return F.replace(/\W/g,"_")}e.sanitizeIdentifier=i;var r=0;function u(F){if(!F||!F.reference)return null;let S=F.reference;if(S instanceof n.StaticSymbol)return S.name;if(S.__anonymousType)return S.__anonymousType;let k=t.stringify(S);return k.indexOf("(")>=0?(k="anonymous_".concat(r++),S.__anonymousType=k):k=i(k),k}e.identifierName=u;function a(F){let S=F.reference;return S instanceof n.StaticSymbol?S.filePath:"./".concat(t.stringify(S))}e.identifierModuleUrl=a;function c(F,S){return"View_".concat(u({reference:F}),"_").concat(S)}e.viewClassName=c;function l(F){return"RenderType_".concat(u({reference:F}))}e.rendererTypeName=l;function C(F){return"HostView_".concat(u({reference:F}))}e.hostViewClassName=C;function m(F){return"".concat(u({reference:F}),"NgFactory")}e.componentFactoryName=m;var g;(function(F){F[F.Pipe=0]="Pipe",F[F.Directive=1]="Directive",F[F.NgModule=2]="NgModule",F[F.Injectable=3]="Injectable"})(g=e.CompileSummaryKind||(e.CompileSummaryKind={}));function p(F){return F.value!=null?i(F.value):u(F.identifier)}e.tokenName=p;function f(F){return F.identifier!=null?F.identifier.reference:F.value}e.tokenReference=f;var h=class{constructor(){let{moduleUrl:F,styles:S,styleUrls:k}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.moduleUrl=F||null,this.styles=w(S),this.styleUrls=w(k)}};e.CompileStylesheetMetadata=h;var N=class{constructor(F){let{encapsulation:S,template:k,templateUrl:_,htmlAst:O,styles:R,styleUrls:M,externalStylesheets:H,animations:P,ngContentSelectors:G,interpolation:re,isInline:$,preserveWhitespaces:W}=F;if(this.encapsulation=S,this.template=k,this.templateUrl=_,this.htmlAst=O,this.styles=w(R),this.styleUrls=w(M),this.externalStylesheets=w(H),this.animations=P?E(P):[],this.ngContentSelectors=G||[],re&&re.length!=2)throw new Error("'interpolation' should have a start and an end symbol.");this.interpolation=re,this.isInline=$,this.preserveWhitespaces=W}toSummary(){return{ngContentSelectors:this.ngContentSelectors,encapsulation:this.encapsulation,styles:this.styles,animations:this.animations}}};e.CompileTemplateMetadata=N;var T=class{static create(F){let{isHost:S,type:k,isComponent:_,selector:O,exportAs:R,changeDetection:M,inputs:H,outputs:P,host:G,providers:re,viewProviders:$,queries:W,guards:ee,viewQueries:U,entryComponents:ne,template:se,componentViewType:V,rendererType:oe,componentFactory:K}=F,Ee={},q={},le={};G!=null&&Object.keys(G).forEach(de=>{let ge=G[de],ve=de.match(s);ve===null?le[de]=ge:ve[1]!=null?q[ve[1]]=ge:ve[2]!=null&&(Ee[ve[2]]=ge)});let ue={};H!=null&&H.forEach(de=>{let ge=t.splitAtColon(de,[de,de]);ue[ge[0]]=ge[1]});let Q={};return P!=null&&P.forEach(de=>{let ge=t.splitAtColon(de,[de,de]);Q[ge[0]]=ge[1]}),new T({isHost:S,type:k,isComponent:!!_,selector:O,exportAs:R,changeDetection:M,inputs:ue,outputs:Q,hostListeners:Ee,hostProperties:q,hostAttributes:le,providers:re,viewProviders:$,queries:W,guards:ee,viewQueries:U,entryComponents:ne,template:se,componentViewType:V,rendererType:oe,componentFactory:K})}constructor(F){let{isHost:S,type:k,isComponent:_,selector:O,exportAs:R,changeDetection:M,inputs:H,outputs:P,hostListeners:G,hostProperties:re,hostAttributes:$,providers:W,viewProviders:ee,queries:U,guards:ne,viewQueries:se,entryComponents:V,template:oe,componentViewType:K,rendererType:Ee,componentFactory:q}=F;this.isHost=!!S,this.type=k,this.isComponent=_,this.selector=O,this.exportAs=R,this.changeDetection=M,this.inputs=H,this.outputs=P,this.hostListeners=G,this.hostProperties=re,this.hostAttributes=$,this.providers=w(W),this.viewProviders=w(ee),this.queries=w(U),this.guards=ne,this.viewQueries=w(se),this.entryComponents=w(V),this.template=oe,this.componentViewType=K,this.rendererType=Ee,this.componentFactory=q}toSummary(){return{summaryKind:g.Directive,type:this.type,isComponent:this.isComponent,selector:this.selector,exportAs:this.exportAs,inputs:this.inputs,outputs:this.outputs,hostListeners:this.hostListeners,hostProperties:this.hostProperties,hostAttributes:this.hostAttributes,providers:this.providers,viewProviders:this.viewProviders,queries:this.queries,guards:this.guards,viewQueries:this.viewQueries,entryComponents:this.entryComponents,changeDetection:this.changeDetection,template:this.template&&this.template.toSummary(),componentViewType:this.componentViewType,rendererType:this.rendererType,componentFactory:this.componentFactory}}};e.CompileDirectiveMetadata=T;var A=class{constructor(F){let{type:S,name:k,pure:_}=F;this.type=S,this.name=k,this.pure=!!_}toSummary(){return{summaryKind:g.Pipe,type:this.type,name:this.name,pure:this.pure}}};e.CompilePipeMetadata=A;var b=class{};e.CompileShallowModuleMetadata=b;var v=class{constructor(F){let{type:S,providers:k,declaredDirectives:_,exportedDirectives:O,declaredPipes:R,exportedPipes:M,entryComponents:H,bootstrapComponents:P,importedModules:G,exportedModules:re,schemas:$,transitiveModule:W,id:ee}=F;this.type=S||null,this.declaredDirectives=w(_),this.exportedDirectives=w(O),this.declaredPipes=w(R),this.exportedPipes=w(M),this.providers=w(k),this.entryComponents=w(H),this.bootstrapComponents=w(P),this.importedModules=w(G),this.exportedModules=w(re),this.schemas=w($),this.id=ee||null,this.transitiveModule=W||null}toSummary(){let F=this.transitiveModule;return{summaryKind:g.NgModule,type:this.type,entryComponents:F.entryComponents,providers:F.providers,modules:F.modules,exportedDirectives:F.exportedDirectives,exportedPipes:F.exportedPipes}}};e.CompileNgModuleMetadata=v;var B=class{constructor(){this.directivesSet=new Set,this.directives=[],this.exportedDirectivesSet=new Set,this.exportedDirectives=[],this.pipesSet=new Set,this.pipes=[],this.exportedPipesSet=new Set,this.exportedPipes=[],this.modulesSet=new Set,this.modules=[],this.entryComponentsSet=new Set,this.entryComponents=[],this.providers=[]}addProvider(F,S){this.providers.push({provider:F,module:S})}addDirective(F){this.directivesSet.has(F.reference)||(this.directivesSet.add(F.reference),this.directives.push(F))}addExportedDirective(F){this.exportedDirectivesSet.has(F.reference)||(this.exportedDirectivesSet.add(F.reference),this.exportedDirectives.push(F))}addPipe(F){this.pipesSet.has(F.reference)||(this.pipesSet.add(F.reference),this.pipes.push(F))}addExportedPipe(F){this.exportedPipesSet.has(F.reference)||(this.exportedPipesSet.add(F.reference),this.exportedPipes.push(F))}addModule(F){this.modulesSet.has(F.reference)||(this.modulesSet.add(F.reference),this.modules.push(F))}addEntryComponent(F){this.entryComponentsSet.has(F.componentType)||(this.entryComponentsSet.add(F.componentType),this.entryComponents.push(F))}};e.TransitiveCompileNgModuleMetadata=B;function w(F){return F||[]}var I=class{constructor(F,S){let{useClass:k,useValue:_,useExisting:O,useFactory:R,deps:M,multi:H}=S;this.token=F,this.useClass=k||null,this.useValue=_,this.useExisting=O,this.useFactory=R||null,this.dependencies=M||null,this.multi=!!H}};e.ProviderMeta=I;function E(F){return F.reduce((S,k)=>{let _=Array.isArray(k)?E(k):k;return S.concat(_)},[])}e.flatten=E;function D(F){return F.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/,"ng:///")}function d(F,S,k){let _;return k.isInline?S.type.reference instanceof n.StaticSymbol?_="".concat(S.type.reference.filePath,".").concat(S.type.reference.name,".html"):_="".concat(u(F),"/").concat(u(S.type),".html"):_=k.templateUrl,S.type.reference instanceof n.StaticSymbol?_:D(_)}e.templateSourceUrl=d;function y(F,S){let k=F.moduleUrl.split(/\/\\/g),_=k[k.length-1];return D("css/".concat(S).concat(_,".ngstyle.js"))}e.sharedStylesheetJitUrl=y;function o(F){return D("".concat(u(F.type),"/module.ngfactory.js"))}e.ngModuleJitUrl=o;function x(F,S){return D("".concat(u(F),"/").concat(u(S.type),".ngfactory.js"))}e.templateJitUrl=x}}),qd=Z({"node_modules/angular-html-parser/lib/compiler/src/parse_util.js"(e){"use strict";ae(),Object.defineProperty(e,"__esModule",{value:!0});var n=kd(),t=jd(),s=class{constructor(C,m,g,p){this.file=C,this.offset=m,this.line=g,this.col=p}toString(){return this.offset!=null?"".concat(this.file.url,"@").concat(this.line,":").concat(this.col):this.file.url}moveBy(C){let m=this.file.content,g=m.length,p=this.offset,f=this.line,h=this.col;for(;p>0&&C<0;)if(p--,C++,m.charCodeAt(p)==n.$LF){f--;let T=m.substr(0,p-1).lastIndexOf(String.fromCharCode(n.$LF));h=T>0?p-T:p}else h--;for(;p<g&&C>0;){let N=m.charCodeAt(p);p++,C--,N==n.$LF?(f++,h=0):h++}return new s(this.file,p,f,h)}getContext(C,m){let g=this.file.content,p=this.offset;if(p!=null){p>g.length-1&&(p=g.length-1);let f=p,h=0,N=0;for(;h<C&&p>0&&(p--,h++,!(g[p]==`
`&&++N==m)););for(h=0,N=0;h<C&&f<g.length-1&&(f++,h++,!(g[f]==`
`&&++N==m)););return{before:g.substring(p,this.offset),after:g.substring(this.offset,f+1)}}return null}};e.ParseLocation=s;var i=class{constructor(C,m){this.content=C,this.url=m}};e.ParseSourceFile=i;var r=class{constructor(C,m){let g=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null;this.start=C,this.end=m,this.details=g}toString(){return this.start.file.content.substring(this.start.offset,this.end.offset)}};e.ParseSourceSpan=r,e.EMPTY_PARSE_LOCATION=new s(new i("",""),0,0,0),e.EMPTY_SOURCE_SPAN=new r(e.EMPTY_PARSE_LOCATION,e.EMPTY_PARSE_LOCATION);var u;(function(C){C[C.WARNING=0]="WARNING",C[C.ERROR=1]="ERROR"})(u=e.ParseErrorLevel||(e.ParseErrorLevel={}));var a=class{constructor(C,m){let g=arguments.length>2&&arguments[2]!==void 0?arguments[2]:u.ERROR;this.span=C,this.msg=m,this.level=g}contextualMessage(){let C=this.span.start.getContext(100,3);return C?"".concat(this.msg,' ("').concat(C.before,"[").concat(u[this.level]," ->]").concat(C.after,'")'):this.msg}toString(){let C=this.span.details?", ".concat(this.span.details):"";return"".concat(this.contextualMessage(),": ").concat(this.span.start).concat(C)}};e.ParseError=a;function c(C,m){let g=t.identifierModuleUrl(m),p=g!=null?"in ".concat(C," ").concat(t.identifierName(m)," in ").concat(g):"in ".concat(C," ").concat(t.identifierName(m)),f=new i("",p);return new r(new s(f,-1,-1,-1),new s(f,-1,-1,-1))}e.typeSourceSpan=c;function l(C,m,g){let p="in ".concat(C," ").concat(m," in ").concat(g),f=new i("",p);return new r(new s(f,-1,-1,-1),new s(f,-1,-1,-1))}e.r3JitTypeSourceSpan=l}}),Md=Z({"src/language-html/print-preprocess.js"(e,n){"use strict";ae();var{ParseSourceSpan:t}=qd(),{htmlTrim:s,getLeadingAndTrailingHtmlWhitespace:i,hasHtmlWhitespace:r,canHaveInterpolation:u,getNodeCssStyleDisplay:a,isDanglingSpaceSensitiveNode:c,isIndentationSensitiveNode:l,isLeadingSpaceSensitiveNode:C,isTrailingSpaceSensitiveNode:m,isWhitespaceSensitiveNode:g}=Ot(),p=[h,N,A,v,B,E,w,I,D,b];function f(d,y){for(let o of p)o(d,y);return d}function h(d){d.walk(y=>{if(y.type==="element"&&y.tagDefinition.ignoreFirstLf&&y.children.length>0&&y.children[0].type==="text"&&y.children[0].value[0]===`
`){let o=y.children[0];o.value.length===1?y.removeChild(o):o.value=o.value.slice(1)}})}function N(d){let y=o=>o.type==="element"&&o.prev&&o.prev.type==="ieConditionalStartComment"&&o.prev.sourceSpan.end.offset===o.startSourceSpan.start.offset&&o.firstChild&&o.firstChild.type==="ieConditionalEndComment"&&o.firstChild.sourceSpan.start.offset===o.startSourceSpan.end.offset;d.walk(o=>{if(o.children)for(let x=0;x<o.children.length;x++){let F=o.children[x];if(!y(F))continue;let S=F.prev,k=F.firstChild;o.removeChild(S),x--;let _=new t(S.sourceSpan.start,k.sourceSpan.end),O=new t(_.start,F.sourceSpan.end);F.condition=S.condition,F.sourceSpan=O,F.startSourceSpan=_,F.removeChild(k)}})}function T(d,y,o){d.walk(x=>{if(x.children)for(let F=0;F<x.children.length;F++){let S=x.children[F];if(S.type!=="text"&&!y(S))continue;S.type!=="text"&&(S.type="text",S.value=o(S));let k=S.prev;!k||k.type!=="text"||(k.value+=S.value,k.sourceSpan=new t(k.sourceSpan.start,S.sourceSpan.end),x.removeChild(S),F--)}})}function A(d){return T(d,y=>y.type==="cdata",y=>"<![CDATA[".concat(y.value,"]]>"))}function b(d){let y=o=>o.type==="element"&&o.attrs.length===0&&o.children.length===1&&o.firstChild.type==="text"&&!r(o.children[0].value)&&!o.firstChild.hasLeadingSpaces&&!o.firstChild.hasTrailingSpaces&&o.isLeadingSpaceSensitive&&!o.hasLeadingSpaces&&o.isTrailingSpaceSensitive&&!o.hasTrailingSpaces&&o.prev&&o.prev.type==="text"&&o.next&&o.next.type==="text";d.walk(o=>{if(o.children)for(let x=0;x<o.children.length;x++){let F=o.children[x];if(!y(F))continue;let S=F.prev,k=F.next;S.value+="<".concat(F.rawName,">")+F.firstChild.value+"</".concat(F.rawName,">")+k.value,S.sourceSpan=new t(S.sourceSpan.start,k.sourceSpan.end),S.isTrailingSpaceSensitive=k.isTrailingSpaceSensitive,S.hasTrailingSpaces=k.hasTrailingSpaces,o.removeChild(F),x--,o.removeChild(k)}})}function v(d,y){if(y.parser==="html")return;let o=/{{(.+?)}}/s;d.walk(x=>{if(!!u(x))for(let F of x.children){if(F.type!=="text")continue;let S=F.sourceSpan.start,k=null,_=F.value.split(o);for(let O=0;O<_.length;O++,S=k){let R=_[O];if(O%2===0){k=S.moveBy(R.length),R.length>0&&x.insertChildBefore(F,{type:"text",value:R,sourceSpan:new t(S,k)});continue}k=S.moveBy(R.length+4),x.insertChildBefore(F,{type:"interpolation",sourceSpan:new t(S,k),children:R.length===0?[]:[{type:"text",value:R,sourceSpan:new t(S.moveBy(2),k.moveBy(-2))}]})}x.removeChild(F)}})}function B(d){d.walk(y=>{if(!y.children)return;if(y.children.length===0||y.children.length===1&&y.children[0].type==="text"&&s(y.children[0].value).length===0){y.hasDanglingSpaces=y.children.length>0,y.children=[];return}let o=g(y),x=l(y);if(!o)for(let F=0;F<y.children.length;F++){let S=y.children[F];if(S.type!=="text")continue;let{leadingWhitespace:k,text:_,trailingWhitespace:O}=i(S.value),R=S.prev,M=S.next;_?(S.value=_,S.sourceSpan=new t(S.sourceSpan.start.moveBy(k.length),S.sourceSpan.end.moveBy(-O.length)),k&&(R&&(R.hasTrailingSpaces=!0),S.hasLeadingSpaces=!0),O&&(S.hasTrailingSpaces=!0,M&&(M.hasLeadingSpaces=!0))):(y.removeChild(S),F--,(k||O)&&(R&&(R.hasTrailingSpaces=!0),M&&(M.hasLeadingSpaces=!0)))}y.isWhitespaceSensitive=o,y.isIndentationSensitive=x})}function w(d){d.walk(y=>{y.isSelfClosing=!y.children||y.type==="element"&&(y.tagDefinition.isVoid||y.startSourceSpan===y.endSourceSpan)})}function I(d,y){d.walk(o=>{o.type==="element"&&(o.hasHtmComponentClosingTag=o.endSourceSpan&&/^<\s*\/\s*\/\s*>$/.test(y.originalText.slice(o.endSourceSpan.start.offset,o.endSourceSpan.end.offset)))})}function E(d,y){d.walk(o=>{o.cssDisplay=a(o,y)})}function D(d,y){d.walk(o=>{let{children:x}=o;if(!!x){if(x.length===0){o.isDanglingSpaceSensitive=c(o);return}for(let F of x)F.isLeadingSpaceSensitive=C(F,y),F.isTrailingSpaceSensitive=m(F,y);for(let F=0;F<x.length;F++){let S=x[F];S.isLeadingSpaceSensitive=(F===0||S.prev.isTrailingSpaceSensitive)&&S.isLeadingSpaceSensitive,S.isTrailingSpaceSensitive=(F===x.length-1||S.next.isLeadingSpaceSensitive)&&S.isTrailingSpaceSensitive}}})}n.exports=f}}),Rd=Z({"src/language-html/pragma.js"(e,n){"use strict";ae();function t(i){return/^\s*<!--\s*@(?:format|prettier)\s*-->/.test(i)}function s(i){return`<!-- @format -->

`+i.replace(/^\s*\n/,"")}n.exports={hasPragma:t,insertPragma:s}}}),Yn=Z({"src/language-html/loc.js"(e,n){"use strict";ae();function t(i){return i.sourceSpan.start.offset}function s(i){return i.sourceSpan.end.offset}n.exports={locStart:t,locEnd:s}}}),Qt=Z({"src/language-html/print/tag.js"(e,n){"use strict";ae();var t=Ut(),{isNonEmptyArray:s}=Ge(),{builders:{indent:i,join:r,line:u,softline:a,hardline:c},utils:{replaceTextEndOfLine:l}}=Le(),{locStart:C,locEnd:m}=Yn(),{isTextLikeNode:g,getLastDescendant:p,isPreLikeNode:f,hasPrettierIgnore:h,shouldPreserveContent:N}=Ot();function T(P,G){return[P.isSelfClosing?"":A(P,G),b(P,G)]}function A(P,G){return P.lastChild&&y(P.lastChild)?"":[v(P,G),w(P,G)]}function b(P,G){return(P.next?D(P.next):d(P.parent))?"":[I(P,G),B(P,G)]}function v(P,G){return d(P)?I(P.lastChild,G):""}function B(P,G){return y(P)?w(P.parent,G):o(P)?M(P.next):""}function w(P,G){if(t(!P.isSelfClosing),E(P,G))return"";switch(P.type){case"ieConditionalComment":return"<!";case"element":if(P.hasHtmComponentClosingTag)return"<//";default:return"</".concat(P.rawName)}}function I(P,G){if(E(P,G))return"";switch(P.type){case"ieConditionalComment":case"ieConditionalEndComment":return"[endif]-->";case"ieConditionalStartComment":return"]><!-->";case"interpolation":return"}}";case"element":if(P.isSelfClosing)return"/>";default:return">"}}function E(P,G){return!P.isSelfClosing&&!P.endSourceSpan&&(h(P)||N(P.parent,G))}function D(P){return P.prev&&P.prev.type!=="docType"&&!g(P.prev)&&P.isLeadingSpaceSensitive&&!P.hasLeadingSpaces}function d(P){return P.lastChild&&P.lastChild.isTrailingSpaceSensitive&&!P.lastChild.hasTrailingSpaces&&!g(p(P.lastChild))&&!f(P)}function y(P){return!P.next&&!P.hasTrailingSpaces&&P.isTrailingSpaceSensitive&&g(p(P))}function o(P){return P.next&&!g(P.next)&&g(P)&&P.isTrailingSpaceSensitive&&!P.hasTrailingSpaces}function x(P){let G=P.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);return G?G[1]?G[1].split(/\s+/):!0:!1}function F(P){return!P.prev&&P.isLeadingSpaceSensitive&&!P.hasLeadingSpaces}function S(P,G,re){let $=P.getValue();if(!s($.attrs))return $.isSelfClosing?" ":"";let W=$.prev&&$.prev.type==="comment"&&x($.prev.value),ee=typeof W=="boolean"?()=>W:Array.isArray(W)?oe=>W.includes(oe.rawName):()=>!1,U=P.map(oe=>{let K=oe.getValue();return ee(K)?l(G.originalText.slice(C(K),m(K))):re()},"attrs"),ne=$.type==="element"&&$.fullName==="script"&&$.attrs.length===1&&$.attrs[0].fullName==="src"&&$.children.length===0,se=G.singleAttributePerLine&&$.attrs.length>1?c:u,V=[i([ne?" ":u,r(se,U)])];return $.firstChild&&F($.firstChild)||$.isSelfClosing&&d($.parent)||ne?V.push($.isSelfClosing?" ":""):V.push(G.bracketSameLine?$.isSelfClosing?" ":"":$.isSelfClosing?u:a),V}function k(P){return P.firstChild&&F(P.firstChild)?"":H(P)}function _(P,G,re){let $=P.getValue();return[O($,G),S(P,G,re),$.isSelfClosing?"":k($)]}function O(P,G){return P.prev&&o(P.prev)?"":[R(P,G),M(P)]}function R(P,G){return F(P)?H(P.parent):D(P)?I(P.prev,G):""}function M(P){switch(P.type){case"ieConditionalComment":case"ieConditionalStartComment":return"<!--[if ".concat(P.condition);case"ieConditionalEndComment":return"<!--<!";case"interpolation":return"{{";case"docType":return"<!DOCTYPE";case"element":if(P.condition)return"<!--[if ".concat(P.condition,"]><!--><").concat(P.rawName);default:return"<".concat(P.rawName)}}function H(P){switch(t(!P.isSelfClosing),P.type){case"ieConditionalComment":return"]>";case"element":if(P.condition)return"><!--<![endif]-->";default:return">"}}n.exports={printClosingTag:T,printClosingTagStart:A,printClosingTagStartMarker:w,printClosingTagEndMarker:I,printClosingTagSuffix:B,printClosingTagEnd:b,needsToBorrowLastChildClosingTagEndMarker:d,needsToBorrowParentClosingTagStartMarker:y,needsToBorrowPrevClosingTagEndMarker:D,printOpeningTag:_,printOpeningTagStart:O,printOpeningTagPrefix:R,printOpeningTagStartMarker:M,printOpeningTagEndMarker:H,needsToBorrowNextOpeningTagStartMarker:o,needsToBorrowParentOpeningTagEndMarker:F}}}),Vd=Z({"node_modules/parse-srcset/src/parse-srcset.js"(e,n){ae(),function(t,s){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (s),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0}(e,function(){return function(t,s){var i=s&&s.logger||console;function r(I){return I===" "||I==="	"||I===`
`||I==="\f"||I==="\r"}function u(I){var E,D=I.exec(t.substring(b));if(D)return E=D[0],b+=E.length,E}for(var a=t.length,c=/^[ \t\n\r\u000c]+/,l=/^[, \t\n\r\u000c]+/,C=/^[^ \t\n\r\u000c]+/,m=/[,]+$/,g=/^\d+$/,p=/^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,f,h,N,T,A,b=0,v=[];;){if(u(l),b>=a)return v;f=u(C),h=[],f.slice(-1)===","?(f=f.replace(m,""),w()):B()}function B(){for(u(c),N="",T="in descriptor";;){if(A=t.charAt(b),T==="in descriptor")if(r(A))N&&(h.push(N),N="",T="after descriptor");else if(A===","){b+=1,N&&h.push(N),w();return}else if(A==="(")N=N+A,T="in parens";else if(A===""){N&&h.push(N),w();return}else N=N+A;else if(T==="in parens")if(A===")")N=N+A,T="in descriptor";else if(A===""){h.push(N),w();return}else N=N+A;else if(T==="after descriptor"&&!r(A))if(A===""){w();return}else T="in descriptor",b-=1;b+=1}}function w(){var I=!1,E,D,d,y,o={},x,F,S,k,_;for(y=0;y<h.length;y++)x=h[y],F=x[x.length-1],S=x.substring(0,x.length-1),k=parseInt(S,10),_=parseFloat(S),g.test(S)&&F==="w"?((E||D)&&(I=!0),k===0?I=!0:E=k):p.test(S)&&F==="x"?((E||D||d)&&(I=!0),_<0?I=!0:D=_):g.test(S)&&F==="h"?((d||D)&&(I=!0),k===0?I=!0:d=k):I=!0;I?i&&i.error&&i.error("Invalid srcset descriptor found in '"+t+"' at '"+x+"'."):(o.url=f,E&&(o.w=E),D&&(o.d=D),d&&(o.h=d),v.push(o))}}})}}),Wd=Z({"src/language-html/syntax-attribute.js"(e,n){"use strict";ae();var t=Vd(),{builders:{ifBreak:s,join:i,line:r}}=Le();function u(c){let l=t(c,{logger:{error(B){throw new Error(B)}}}),C=l.some(B=>{let{w}=B;return w}),m=l.some(B=>{let{h:w}=B;return w}),g=l.some(B=>{let{d:w}=B;return w});if(C+m+g>1)throw new Error("Mixed descriptor in srcset is not supported");let p=C?"w":m?"h":"d",f=C?"w":m?"h":"x",h=B=>Math.max(...B),N=l.map(B=>B.url),T=h(N.map(B=>B.length)),A=l.map(B=>B[p]).map(B=>B?B.toString():""),b=A.map(B=>{let w=B.indexOf(".");return w===-1?B.length:w}),v=h(b);return i([",",r],N.map((B,w)=>{let I=[B],E=A[w];if(E){let D=T-B.length+1,d=v-b[w],y=" ".repeat(D+d);I.push(s(y," "),E+f)}return I}))}function a(c){return c.trim().split(/\s+/).join(" ")}n.exports={printImgSrcset:u,printClassNames:a}}}),$d=Z({"src/language-html/syntax-vue.js"(e,n){"use strict";ae();var{builders:{group:t}}=Le();function s(a,c){let{left:l,operator:C,right:m}=i(a);return[t(c("function _(".concat(l,") {}"),{parser:"babel",__isVueForBindingLeft:!0}))," ",C," ",c(m,{parser:"__js_expression"},{stripTrailingHardline:!0})]}function i(a){let c=/(.*?)\s+(in|of)\s+(.*)/s,l=/,([^,\]}]*)(?:,([^,\]}]*))?$/,C=/^\(|\)$/g,m=a.match(c);if(!m)return;let g={};if(g.for=m[3].trim(),!g.for)return;let p=m[1].trim().replace(C,""),f=p.match(l);f?(g.alias=p.replace(l,""),g.iterator1=f[1].trim(),f[2]&&(g.iterator2=f[2].trim())):g.alias=p;let h=[g.alias,g.iterator1,g.iterator2];if(!h.some((N,T)=>!N&&(T===0||h.slice(T+1).some(Boolean))))return{left:h.filter(Boolean).join(","),operator:m[2],right:g.for}}function r(a,c){return c("function _(".concat(a,") {}"),{parser:"babel",__isVueBindings:!0})}function u(a){let c=/^(?:[\w$]+|\([^)]*\))\s*=>|^function\s*\(/,l=/^[$A-Z_a-z][\w$]*(?:\.[$A-Z_a-z][\w$]*|\['[^']*']|\["[^"]*"]|\[\d+]|\[[$A-Z_a-z][\w$]*])*$/,C=a.trim();return c.test(C)||l.test(C)}n.exports={isVueEventBindingExpression:u,printVueFor:s,printVueBindings:r}}}),mo=Z({"src/language-html/get-node-content.js"(e,n){"use strict";ae();var{needsToBorrowParentClosingTagStartMarker:t,printClosingTagStartMarker:s,needsToBorrowLastChildClosingTagEndMarker:i,printClosingTagEndMarker:r,needsToBorrowParentOpeningTagEndMarker:u,printOpeningTagEndMarker:a}=Qt();function c(l,C){let m=l.startSourceSpan.end.offset;l.firstChild&&u(l.firstChild)&&(m-=a(l).length);let g=l.endSourceSpan.start.offset;return l.lastChild&&t(l.lastChild)?g+=s(l,C).length:i(l)&&(g-=r(l.lastChild,C).length),C.originalText.slice(m,g)}n.exports=c}}),Hd=Z({"src/language-html/embed.js"(e,n){"use strict";ae();var{builders:{breakParent:t,group:s,hardline:i,indent:r,line:u,fill:a,softline:c},utils:{mapDoc:l,replaceTextEndOfLine:C}}=Le(),m=Xn(),{printClosingTag:g,printClosingTagSuffix:p,needsToBorrowPrevClosingTagEndMarker:f,printOpeningTagPrefix:h,printOpeningTag:N}=Qt(),{printImgSrcset:T,printClassNames:A}=Wd(),{printVueFor:b,printVueBindings:v,isVueEventBindingExpression:B}=$d(),{isScriptLikeTag:w,isVueNonHtmlBlock:I,inferScriptParser:E,htmlTrimPreserveIndentation:D,dedentString:d,unescapeQuoteEntities:y,isVueSlotAttribute:o,isVueSfcBindingsAttribute:x,getTextValueParts:F}=Ot(),S=mo();function k(O,R,M){let H=ne=>new RegExp(ne.join("|")).test(O.fullName),P=()=>y(O.value),G=!1,re=(ne,se)=>{let V=ne.type==="NGRoot"?ne.node.type==="NGMicrosyntax"&&ne.node.body.length===1&&ne.node.body[0].type==="NGMicrosyntaxExpression"?ne.node.body[0].expression:ne.node:ne.type==="JsExpressionRoot"?ne.node:ne;V&&(V.type==="ObjectExpression"||V.type==="ArrayExpression"||se.parser==="__vue_expression"&&(V.type==="TemplateLiteral"||V.type==="StringLiteral"))&&(G=!0)},$=ne=>s(ne),W=function(ne){let se=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return s([r([c,ne]),se?c:""])},ee=ne=>G?$(ne):W(ne),U=(ne,se)=>R(ne,Object.assign({__onHtmlBindingRoot:re,__embeddedInHtml:!0},se));if(O.fullName==="srcset"&&(O.parent.fullName==="img"||O.parent.fullName==="source"))return W(T(P()));if(O.fullName==="class"&&!M.parentParser){let ne=P();if(!ne.includes("{{"))return A(ne)}if(O.fullName==="style"&&!M.parentParser){let ne=P();if(!ne.includes("{{"))return W(U(ne,{parser:"css",__isHTMLStyleAttribute:!0}))}if(M.parser==="vue"){if(O.fullName==="v-for")return b(P(),U);if(o(O)||x(O,M))return v(P(),U);let ne=["^@","^v-on:"],se=["^:","^v-bind:"],V=["^v-"];if(H(ne)){let oe=P();return ee(U(oe,{parser:B(oe)?"__js_expression":"__vue_event_binding"}))}if(H(se))return ee(U(P(),{parser:"__vue_expression"}));if(H(V))return ee(U(P(),{parser:"__js_expression"}))}if(M.parser==="angular"){let ne=(le,ue)=>U(le,Object.assign(Object.assign({},ue),{},{trailingComma:"none"})),se=["^\\*"],V=["^\\(.+\\)$","^on-"],oe=["^\\[.+\\]$","^bind(on)?-","^ng-(if|show|hide|class|style)$"],K=["^i18n(-.+)?$"];if(H(V))return ee(ne(P(),{parser:"__ng_action"}));if(H(oe))return ee(ne(P(),{parser:"__ng_binding"}));if(H(K)){let le=P().trim();return W(a(F(O,le)),!le.includes("@@"))}if(H(se))return ee(ne(P(),{parser:"__ng_directive"}));let Ee=/{{(.+?)}}/s,q=P();if(Ee.test(q)){let le=[];for(let[ue,Q]of q.split(Ee).entries())if(ue%2===0)le.push(C(Q));else try{le.push(s(["{{",r([u,ne(Q,{parser:"__ng_interpolation",__isInHtmlInterpolation:!0})]),u,"}}"]))}catch{le.push("{{",C(Q),"}}")}return s(le)}}return null}function _(O,R,M,H){let P=O.getValue();switch(P.type){case"element":{if(w(P)||P.type==="interpolation")return;if(!P.isSelfClosing&&I(P,H)){let G=E(P,H);if(!G)return;let re=S(P,H),$=/^\s*$/.test(re),W="";return $||(W=M(D(re),{parser:G,__embeddedInHtml:!0},{stripTrailingHardline:!0}),$=W===""),[h(P,H),s(N(O,H,R)),$?"":i,W,$?"":i,g(P,H),p(P,H)]}break}case"text":{if(w(P.parent)){let G=E(P.parent);if(G){let re=G==="markdown"?d(P.value.replace(/^[^\S\n]*\n/,"")):P.value,$={parser:G,__embeddedInHtml:!0};if(H.parser==="html"&&G==="babel"){let W="script",{attrMap:ee}=P.parent;ee&&(ee.type==="module"||ee.type==="text/babel"&&ee["data-type"]==="module")&&(W="module"),$.__babelSourceType=W}return[t,h(P,H),M(re,$,{stripTrailingHardline:!0}),p(P,H)]}}else if(P.parent.type==="interpolation"){let G={__isInHtmlInterpolation:!0,__embeddedInHtml:!0};return H.parser==="angular"?(G.parser="__ng_interpolation",G.trailingComma="none"):H.parser==="vue"?G.parser="__vue_expression":G.parser="__js_expression",[r([u,M(P.value,G,{stripTrailingHardline:!0})]),P.parent.next&&f(P.parent.next)?" ":u]}break}case"attribute":{if(!P.value)break;if(/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(H.originalText.slice(P.valueSpan.start.offset,P.valueSpan.end.offset)))return[P.rawName,"=",P.value];if(H.parser==="lwc"&&/^{.*}$/s.test(H.originalText.slice(P.valueSpan.start.offset,P.valueSpan.end.offset)))return[P.rawName,"=",P.value];let G=k(P,(re,$)=>M(re,Object.assign({__isInHtmlAttribute:!0,__embeddedInHtml:!0},$),{stripTrailingHardline:!0}),H);if(G)return[P.rawName,'="',s(l(G,re=>typeof re=="string"?re.replace(/"/g,"&quot;"):re)),'"'];break}case"front-matter":return m(P,M)}}n.exports=_}}),go=Z({"src/language-html/print/children.js"(e,n){"use strict";ae();var{builders:{breakParent:t,group:s,ifBreak:i,line:r,softline:u,hardline:a},utils:{replaceTextEndOfLine:c}}=Le(),{locStart:l,locEnd:C}=Yn(),{forceBreakChildren:m,forceNextEmptyLine:g,isTextLikeNode:p,hasPrettierIgnore:f,preferHardlineAsLeadingSpaces:h}=Ot(),{printOpeningTagPrefix:N,needsToBorrowNextOpeningTagStartMarker:T,printOpeningTagStartMarker:A,needsToBorrowPrevClosingTagEndMarker:b,printClosingTagEndMarker:v,printClosingTagSuffix:B,needsToBorrowParentClosingTagStartMarker:w}=Qt();function I(d,y,o){let x=d.getValue();return f(x)?[N(x,y),...c(y.originalText.slice(l(x)+(x.prev&&T(x.prev)?A(x).length:0),C(x)-(x.next&&b(x.next)?v(x,y).length:0))),B(x,y)]:o()}function E(d,y){return p(d)&&p(y)?d.isTrailingSpaceSensitive?d.hasTrailingSpaces?h(y)?a:r:"":h(y)?a:u:T(d)&&(f(y)||y.firstChild||y.isSelfClosing||y.type==="element"&&y.attrs.length>0)||d.type==="element"&&d.isSelfClosing&&b(y)?"":!y.isLeadingSpaceSensitive||h(y)||b(y)&&d.lastChild&&w(d.lastChild)&&d.lastChild.lastChild&&w(d.lastChild.lastChild)?a:y.hasLeadingSpaces?r:u}function D(d,y,o){let x=d.getValue();if(m(x))return[t,...d.map(S=>{let k=S.getValue(),_=k.prev?E(k.prev,k):"";return[_?[_,g(k.prev)?a:""]:"",I(S,y,o)]},"children")];let F=x.children.map(()=>Symbol(""));return d.map((S,k)=>{let _=S.getValue();if(p(_)){if(_.prev&&p(_.prev)){let re=E(_.prev,_);if(re)return g(_.prev)?[a,a,I(S,y,o)]:[re,I(S,y,o)]}return I(S,y,o)}let O=[],R=[],M=[],H=[],P=_.prev?E(_.prev,_):"",G=_.next?E(_,_.next):"";return P&&(g(_.prev)?O.push(a,a):P===a?O.push(a):p(_.prev)?R.push(P):R.push(i("",u,{groupId:F[k-1]}))),G&&(g(_)?p(_.next)&&H.push(a,a):G===a?p(_.next)&&H.push(a):M.push(G)),[...O,s([...R,s([I(S,y,o),...M],{id:F[k]})]),...H]},"children")}n.exports={printChildren:D}}}),Gd=Z({"src/language-html/print/element.js"(e,n){"use strict";ae();var{builders:{breakParent:t,dedentToRoot:s,group:i,ifBreak:r,indentIfBreak:u,indent:a,line:c,softline:l},utils:{replaceTextEndOfLine:C}}=Le(),m=mo(),{shouldPreserveContent:g,isScriptLikeTag:p,isVueCustomBlock:f,countParents:h,forceBreakContent:N}=Ot(),{printOpeningTagPrefix:T,printOpeningTag:A,printClosingTagSuffix:b,printClosingTag:v,needsToBorrowPrevClosingTagEndMarker:B,needsToBorrowLastChildClosingTagEndMarker:w}=Qt(),{printChildren:I}=go();function E(D,d,y){let o=D.getValue();if(g(o,d))return[T(o,d),i(A(D,d,y)),...C(m(o,d)),...v(o,d),b(o,d)];let x=o.children.length===1&&o.firstChild.type==="interpolation"&&o.firstChild.isLeadingSpaceSensitive&&!o.firstChild.hasLeadingSpaces&&o.lastChild.isTrailingSpaceSensitive&&!o.lastChild.hasTrailingSpaces,F=Symbol("element-attr-group-id"),S=R=>i([i(A(D,d,y),{id:F}),R,v(o,d)]),k=R=>x?u(R,{groupId:F}):(p(o)||f(o,d))&&o.parent.type==="root"&&d.parser==="vue"&&!d.vueIndentScriptAndStyle?R:a(R),_=()=>x?r(l,"",{groupId:F}):o.firstChild.hasLeadingSpaces&&o.firstChild.isLeadingSpaceSensitive?c:o.firstChild.type==="text"&&o.isWhitespaceSensitive&&o.isIndentationSensitive?s(l):l,O=()=>(o.next?B(o.next):w(o.parent))?o.lastChild.hasTrailingSpaces&&o.lastChild.isTrailingSpaceSensitive?" ":"":x?r(l,"",{groupId:F}):o.lastChild.hasTrailingSpaces&&o.lastChild.isTrailingSpaceSensitive?c:(o.lastChild.type==="comment"||o.lastChild.type==="text"&&o.isWhitespaceSensitive&&o.isIndentationSensitive)&&new RegExp("\\n[\\t ]{".concat(d.tabWidth*h(D,M=>M.parent&&M.parent.type!=="root"),"}$")).test(o.lastChild.value)?"":l;return o.children.length===0?S(o.hasDanglingSpaces&&o.isDanglingSpaceSensitive?c:""):S([N(o)?t:"",k([_(),I(D,d,y)]),O()])}n.exports={printElement:E}}}),Jd=Z({"src/language-html/printer-html.js"(e,n){"use strict";ae();var{builders:{fill:t,group:s,hardline:i,literalline:r},utils:{cleanDoc:u,getDocParts:a,isConcat:c,replaceTextEndOfLine:l}}=Le(),C=_d(),{countChars:m,unescapeQuoteEntities:g,getTextValueParts:p}=Ot(),f=Md(),{insertPragma:h}=Rd(),{locStart:N,locEnd:T}=Yn(),A=Hd(),{printClosingTagSuffix:b,printClosingTagEnd:v,printOpeningTagPrefix:B,printOpeningTagStart:w}=Qt(),{printElement:I}=Gd(),{printChildren:E}=go();function D(d,y,o){let x=d.getValue();switch(x.type){case"front-matter":return l(x.raw);case"root":return y.__onHtmlRoot&&y.__onHtmlRoot(x),[s(E(d,y,o)),i];case"element":case"ieConditionalComment":return I(d,y,o);case"ieConditionalStartComment":case"ieConditionalEndComment":return[w(x),v(x)];case"interpolation":return[w(x,y),...d.map(o,"children"),v(x,y)];case"text":{if(x.parent.type==="interpolation"){let S=/\n[^\S\n]*$/,k=S.test(x.value),_=k?x.value.replace(S,""):x.value;return[...l(_),k?i:""]}let F=u([B(x,y),...p(x),b(x,y)]);return c(F)||F.type==="fill"?t(a(F)):F}case"docType":return[s([w(x,y)," ",x.value.replace(/^html\b/i,"html").replace(/\s+/g," ")]),v(x,y)];case"comment":return[B(x,y),...l(y.originalText.slice(N(x),T(x)),r),b(x,y)];case"attribute":{if(x.value===null)return x.rawName;let F=g(x.value),S=m(F,"'"),k=m(F,'"'),_=S<k?"'":'"';return[x.rawName,"=",_,...l(_==='"'?F.replace(/"/g,"&quot;"):F.replace(/'/g,"&apos;")),_]}default:throw new Error("Unexpected node type ".concat(x.type))}}n.exports={preprocess:f,print:D,insertPragma:h,massageAstNode:C,embed:A}}}),Ud=Z({"src/language-html/options.js"(e,n){"use strict";ae();var t=Lt(),s="HTML";n.exports={bracketSameLine:t.bracketSameLine,htmlWhitespaceSensitivity:{since:"1.15.0",category:s,type:"choice",default:"css",description:"How to handle whitespaces in HTML.",choices:[{value:"css",description:"Respect the default value of CSS display property."},{value:"strict",description:"Whitespaces are considered sensitive."},{value:"ignore",description:"Whitespaces are considered insensitive."}]},singleAttributePerLine:t.singleAttributePerLine,vueIndentScriptAndStyle:{since:"1.19.0",category:s,type:"boolean",default:!1,description:"Indent script and style tags in Vue files."}}}}),zd=Z({"src/language-html/parsers.js"(){ae()}}),An=Z({"node_modules/linguist-languages/data/HTML.json"(e,n){n.exports={name:"HTML",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[".html",".htm",".html.hl",".inc",".xht",".xhtml"],languageId:146}}}),Xd=Z({"node_modules/linguist-languages/data/Vue.json"(e,n){n.exports={name:"Vue",type:"markup",color:"#41b883",extensions:[".vue"],tmScope:"text.html.vue",aceMode:"html",languageId:391}}}),Kd=Z({"src/language-html/index.js"(e,n){"use strict";ae();var t=bt(),s=Jd(),i=Ud(),r=zd(),u=[t(An(),()=>({name:"Angular",since:"1.15.0",parsers:["angular"],vscodeLanguageIds:["html"],extensions:[".component.html"],filenames:[]})),t(An(),c=>({since:"1.15.0",parsers:["html"],vscodeLanguageIds:["html"],extensions:[...c.extensions,".mjml"]})),t(An(),()=>({name:"Lightning Web Components",since:"1.17.0",parsers:["lwc"],vscodeLanguageIds:["html"],extensions:[],filenames:[]})),t(Xd(),()=>({since:"1.10.0",parsers:["vue"],vscodeLanguageIds:["vue"]}))],a={html:s};n.exports={languages:u,printers:a,options:i,parsers:r}}}),Yd=Z({"src/language-yaml/pragma.js"(e,n){"use strict";ae();function t(r){return/^\s*@(?:prettier|format)\s*$/.test(r)}function s(r){return/^\s*#[^\S\n]*@(?:prettier|format)\s*?(?:\n|$)/.test(r)}function i(r){return`# @format

`.concat(r)}n.exports={isPragma:t,hasPragma:s,insertPragma:i}}}),Qd=Z({"src/language-yaml/loc.js"(e,n){"use strict";ae();function t(i){return i.position.start.offset}function s(i){return i.position.end.offset}n.exports={locStart:t,locEnd:s}}}),Zd=Z({"src/language-yaml/embed.js"(e,n){"use strict";ae();function t(s,i,r,u){if(s.getValue().type==="root"&&u.filepath&&/(?:[/\\]|^)\.(?:prettier|stylelint)rc$/.test(u.filepath))return r(u.originalText,Object.assign(Object.assign({},u),{},{parser:"json"}))}n.exports=t}}),jt=Z({"src/language-yaml/utils.js"(e,n){"use strict";ae();var{getLast:t,isNonEmptyArray:s}=Ge();function i(E,D){let d=0,y=E.stack.length-1;for(let o=0;o<y;o++){let x=E.stack[o];r(x)&&D(x)&&d++}return d}function r(E,D){return E&&typeof E.type=="string"&&(!D||D.includes(E.type))}function u(E,D,d){return D("children"in E?Object.assign(Object.assign({},E),{},{children:E.children.map(y=>u(y,D,E))}):E,d)}function a(E,D,d){Object.defineProperty(E,D,{get:d,enumerable:!1})}function c(E,D){let d=0,y=D.length;for(let o=E.position.end.offset-1;o<y;o++){let x=D[o];if(x===`
`&&d++,d===1&&/\S/.test(x))return!1;if(d===2)return!0}return!1}function l(E){switch(E.getValue().type){case"tag":case"anchor":case"comment":return!1}let d=E.stack.length;for(let y=1;y<d;y++){let o=E.stack[y],x=E.stack[y-1];if(Array.isArray(x)&&typeof o=="number"&&o!==x.length-1)return!1}return!0}function C(E){return s(E.children)?C(t(E.children)):E}function m(E){return E.value.trim()==="prettier-ignore"}function g(E){let D=E.getValue();if(D.type==="documentBody"){let d=E.getParentNode();return b(d.head)&&m(t(d.head.endComments))}return h(D)&&m(t(D.leadingComments))}function p(E){return!s(E.children)&&!f(E)}function f(E){return h(E)||N(E)||T(E)||A(E)||b(E)}function h(E){return E&&s(E.leadingComments)}function N(E){return E&&s(E.middleComments)}function T(E){return E&&E.indicatorComment}function A(E){return E&&E.trailingComment}function b(E){return E&&s(E.endComments)}function v(E){let D=[],d;for(let y of E.split(/( +)/))y!==" "?d===" "?D.push(y):D.push((D.pop()||"")+y):d===void 0&&D.unshift(""),d=y;return d===" "&&D.push((D.pop()||"")+" "),D[0]===""&&(D.shift(),D.unshift(" "+(D.shift()||""))),D}function B(E,D,d){let y=D.split(`
`).map((o,x,F)=>x===0&&x===F.length-1?o:x!==0&&x!==F.length-1?o.trim():x===0?o.trimEnd():o.trimStart());return d.proseWrap==="preserve"?y.map(o=>o.length===0?[]:[o]):y.map(o=>o.length===0?[]:v(o)).reduce((o,x,F)=>F!==0&&y[F-1].length>0&&x.length>0&&!(E==="quoteDouble"&&t(t(o)).endsWith("\\"))?[...o.slice(0,-1),[...t(o),...x]]:[...o,x],[]).map(o=>d.proseWrap==="never"?[o.join(" ")]:o)}function w(E,D){let{parentIndent:d,isLastDescendant:y,options:o}=D,x=E.position.start.line===E.position.end.line?"":o.originalText.slice(E.position.start.offset,E.position.end.offset).match(/^[^\n]*\n(.*)$/s)[1],F;if(E.indent===null){let _=x.match(/^(?<leadingSpace> *)[^\n\r ]/m);F=_?_.groups.leadingSpace.length:Number.POSITIVE_INFINITY}else F=E.indent-1+d;let S=x.split(`
`).map(_=>_.slice(F));if(o.proseWrap==="preserve"||E.type==="blockLiteral")return k(S.map(_=>_.length===0?[]:[_]));return k(S.map(_=>_.length===0?[]:v(_)).reduce((_,O,R)=>R!==0&&S[R-1].length>0&&O.length>0&&!/^\s/.test(O[0])&&!/^\s|\s$/.test(t(_))?[..._.slice(0,-1),[...t(_),...O]]:[..._,O],[]).map(_=>_.reduce((O,R)=>O.length>0&&/\s$/.test(t(O))?[...O.slice(0,-1),t(O)+" "+R]:[...O,R],[])).map(_=>o.proseWrap==="never"?[_.join(" ")]:_));function k(_){if(E.chomping==="keep")return t(_).length===0?_.slice(0,-1):_;let O=0;for(let R=_.length-1;R>=0&&_[R].length===0;R--)O++;return O===0?_:O>=2&&!y?_.slice(0,-(O-1)):_.slice(0,-O)}}function I(E){if(!E)return!0;switch(E.type){case"plain":case"quoteDouble":case"quoteSingle":case"alias":case"flowMapping":case"flowSequence":return!0;default:return!1}}n.exports={getLast:t,getAncestorCount:i,isNode:r,isEmptyNode:p,isInlineNode:I,mapNode:u,defineShortcut:a,isNextLineEmpty:c,isLastDescendantNode:l,getBlockValueLineContents:w,getFlowScalarLineContents:B,getLastDescendantNode:C,hasPrettierIgnore:g,hasLeadingComments:h,hasMiddleComments:N,hasIndicatorComment:T,hasTrailingComment:A,hasEndComments:b}}}),eg=Z({"src/language-yaml/print-preprocess.js"(e,n){"use strict";ae();var{defineShortcut:t,mapNode:s}=jt();function i(u){return s(u,r)}function r(u){switch(u.type){case"document":t(u,"head",()=>u.children[0]),t(u,"body",()=>u.children[1]);break;case"documentBody":case"sequenceItem":case"flowSequenceItem":case"mappingKey":case"mappingValue":t(u,"content",()=>u.children[0]);break;case"mappingItem":case"flowMappingItem":t(u,"key",()=>u.children[0]),t(u,"value",()=>u.children[1]);break}return u}n.exports=i}}),kr=Z({"src/language-yaml/print/misc.js"(e,n){"use strict";ae();var{builders:{softline:t,align:s}}=Le(),{hasEndComments:i,isNextLineEmpty:r,isNode:u}=jt(),a=new WeakMap;function c(m,g){let p=m.getValue(),f=m.stack[0],h;return a.has(f)?h=a.get(f):(h=new Set,a.set(f,h)),!h.has(p.position.end.line)&&(h.add(p.position.end.line),r(p,g)&&!l(m.getParentNode()))?t:""}function l(m){return i(m)&&!u(m,["documentHead","documentBody","flowMapping","flowSequence"])}function C(m,g){return s(" ".repeat(m),g)}n.exports={alignWithSpaces:C,shouldPrintEndComments:l,printNextEmptyLine:c}}}),tg=Z({"src/language-yaml/print/flow-mapping-sequence.js"(e,n){"use strict";ae();var{builders:{ifBreak:t,line:s,softline:i,hardline:r,join:u}}=Le(),{isEmptyNode:a,getLast:c,hasEndComments:l}=jt(),{printNextEmptyLine:C,alignWithSpaces:m}=kr();function g(f,h,N){let T=f.getValue(),A=T.type==="flowMapping",b=A?"{":"[",v=A?"}":"]",B=i;A&&T.children.length>0&&N.bracketSpacing&&(B=s);let w=c(T.children),I=w&&w.type==="flowMappingItem"&&a(w.key)&&a(w.value);return[b,m(N.tabWidth,[B,p(f,h,N),N.trailingComma==="none"?"":t(","),l(T)?[r,u(r,f.map(h,"endComments"))]:""]),I?"":B,v]}function p(f,h,N){let T=f.getValue();return f.map((b,v)=>[h(),v===T.children.length-1?"":[",",s,T.children[v].position.start.line!==T.children[v+1].position.start.line?C(b,N.originalText):""]],"children")}n.exports={printFlowMapping:g,printFlowSequence:g}}}),rg=Z({"src/language-yaml/print/mapping-item.js"(e,n){"use strict";ae();var{builders:{conditionalGroup:t,group:s,hardline:i,ifBreak:r,join:u,line:a}}=Le(),{hasLeadingComments:c,hasMiddleComments:l,hasTrailingComment:C,hasEndComments:m,isNode:g,isEmptyNode:p,isInlineNode:f}=jt(),{alignWithSpaces:h}=kr();function N(v,B,w,I,E){let{key:D,value:d}=v,y=p(D),o=p(d);if(y&&o)return": ";let x=I("key"),F=A(v)?" ":"";if(o)return v.type==="flowMappingItem"&&B.type==="flowMapping"?x:v.type==="mappingItem"&&T(D.content,E)&&!C(D.content)&&(!B.tag||B.tag.value!=="tag:yaml.org,2002:set")?[x,F,":"]:["? ",h(2,x)];let S=I("value");if(y)return[": ",h(2,S)];if(c(d)||!f(D.content))return["? ",h(2,x),i,u("",w.map(I,"value","leadingComments").map(H=>[H,i])),": ",h(2,S)];if(b(D.content)&&!c(D.content)&&!l(D.content)&&!C(D.content)&&!m(D)&&!c(d.content)&&!l(d.content)&&!m(d)&&T(d.content,E))return[x,F,": ",S];let k=Symbol("mappingKey"),_=s([r("? "),s(h(2,x),{id:k})]),O=[i,": ",h(2,S)],R=[F,":"];c(d.content)||m(d)&&d.content&&!g(d.content,["mapping","sequence"])||B.type==="mapping"&&C(D.content)&&f(d.content)||g(d.content,["mapping","sequence"])&&d.content.tag===null&&d.content.anchor===null?R.push(i):d.content&&R.push(a),R.push(S);let M=h(E.tabWidth,R);return T(D.content,E)&&!c(D.content)&&!l(D.content)&&!m(D)?t([[x,M]]):t([[_,r(O,M,{groupId:k})]])}function T(v,B){if(!v)return!0;switch(v.type){case"plain":case"quoteSingle":case"quoteDouble":break;case"alias":return!0;default:return!1}if(B.proseWrap==="preserve")return v.position.start.line===v.position.end.line;if(/\\$/m.test(B.originalText.slice(v.position.start.offset,v.position.end.offset)))return!1;switch(B.proseWrap){case"never":return!v.value.includes(`
`);case"always":return!/[\n ]/.test(v.value);default:return!1}}function A(v){return v.key.content&&v.key.content.type==="alias"}function b(v){if(!v)return!0;switch(v.type){case"plain":case"quoteDouble":case"quoteSingle":return v.position.start.line===v.position.end.line;case"alias":return!0;default:return!1}}n.exports=N}}),ng=Z({"src/language-yaml/print/block.js"(e,n){"use strict";ae();var{builders:{dedent:t,dedentToRoot:s,fill:i,hardline:r,join:u,line:a,literalline:c,markAsRoot:l},utils:{getDocParts:C}}=Le(),{getAncestorCount:m,getBlockValueLineContents:g,hasIndicatorComment:p,isLastDescendantNode:f,isNode:h}=jt(),{alignWithSpaces:N}=kr();function T(A,b,v){let B=A.getValue(),w=m(A,y=>h(y,["sequence","mapping"])),I=f(A),E=[B.type==="blockFolded"?">":"|"];B.indent!==null&&E.push(B.indent.toString()),B.chomping!=="clip"&&E.push(B.chomping==="keep"?"+":"-"),p(B)&&E.push(" ",b("indicatorComment"));let D=g(B,{parentIndent:w,isLastDescendant:I,options:v}),d=[];for(let[y,o]of D.entries())y===0&&d.push(r),d.push(i(C(u(a,o)))),y!==D.length-1?d.push(o.length===0?r:l(c)):B.chomping==="keep"&&I&&d.push(s(o.length===0?r:c));return B.indent===null?E.push(t(N(v.tabWidth,d))):E.push(s(N(B.indent-1+w,d))),E}n.exports=T}}),ug=Z({"src/language-yaml/printer-yaml.js"(e,n){"use strict";ae();var{builders:{breakParent:t,fill:s,group:i,hardline:r,join:u,line:a,lineSuffix:c,literalline:l},utils:{getDocParts:C,replaceTextEndOfLine:m}}=Le(),{isPreviousLineEmpty:g}=Ge(),{insertPragma:p,isPragma:f}=Yd(),{locStart:h}=Qd(),N=Zd(),{getFlowScalarLineContents:T,getLastDescendantNode:A,hasLeadingComments:b,hasMiddleComments:v,hasTrailingComment:B,hasEndComments:w,hasPrettierIgnore:I,isLastDescendantNode:E,isNode:D,isInlineNode:d}=jt(),y=eg(),{alignWithSpaces:o,printNextEmptyLine:x,shouldPrintEndComments:F}=kr(),{printFlowMapping:S,printFlowSequence:k}=tg(),_=rg(),O=ng();function R(W,ee,U){let ne=W.getValue(),se=[];ne.type!=="mappingValue"&&b(ne)&&se.push([u(r,W.map(U,"leadingComments")),r]);let{tag:V,anchor:oe}=ne;V&&se.push(U("tag")),V&&oe&&se.push(" "),oe&&se.push(U("anchor"));let K="";D(ne,["mapping","sequence","comment","directive","mappingItem","sequenceItem"])&&!E(W)&&(K=x(W,ee.originalText)),(V||oe)&&(D(ne,["sequence","mapping"])&&!v(ne)?se.push(r):se.push(" ")),v(ne)&&se.push([ne.middleComments.length===1?"":r,u(r,W.map(U,"middleComments")),r]);let Ee=W.getParentNode();return I(W)?se.push(m(ee.originalText.slice(ne.position.start.offset,ne.position.end.offset).trimEnd(),l)):se.push(i(M(ne,Ee,W,ee,U))),B(ne)&&!D(ne,["document","documentHead"])&&se.push(c([ne.type==="mappingValue"&&!ne.content?"":" ",Ee.type==="mappingKey"&&W.getParentNode(2).type==="mapping"&&d(ne)?"":t,U("trailingComment")])),F(ne)&&se.push(o(ne.type==="sequenceItem"?2:0,[r,u(r,W.map(q=>[g(ee.originalText,q.getValue(),h)?r:"",U()],"endComments"))])),se.push(K),se}function M(W,ee,U,ne,se){switch(W.type){case"root":{let{children:V}=W,oe=[];U.each((Ee,q)=>{let le=V[q],ue=V[q+1];q!==0&&oe.push(r),oe.push(se()),P(le,ue)?(oe.push(r,"..."),B(le)&&oe.push(" ",se("trailingComment"))):ue&&!B(ue.head)&&oe.push(r,"---")},"children");let K=A(W);return(!D(K,["blockLiteral","blockFolded"])||K.chomping!=="keep")&&oe.push(r),oe}case"document":{let V=ee.children[U.getName()+1],oe=[];return G(W,V,ee,ne)==="head"&&((W.head.children.length>0||W.head.endComments.length>0)&&oe.push(se("head")),B(W.head)?oe.push(["---"," ",se(["head","trailingComment"])]):oe.push("---")),H(W)&&oe.push(se("body")),u(r,oe)}case"documentHead":return u(r,[...U.map(se,"children"),...U.map(se,"endComments")]);case"documentBody":{let{children:V,endComments:oe}=W,K="";if(V.length>0&&oe.length>0){let Ee=A(W);D(Ee,["blockFolded","blockLiteral"])?Ee.chomping!=="keep"&&(K=[r,r]):K=r}return[u(r,U.map(se,"children")),K,u(r,U.map(se,"endComments"))]}case"directive":return["%",u(" ",[W.name,...W.parameters])];case"comment":return["#",W.value];case"alias":return["*",W.value];case"tag":return ne.originalText.slice(W.position.start.offset,W.position.end.offset);case"anchor":return["&",W.value];case"plain":return re(W.type,ne.originalText.slice(W.position.start.offset,W.position.end.offset),ne);case"quoteDouble":case"quoteSingle":{let V="'",oe='"',K=ne.originalText.slice(W.position.start.offset+1,W.position.end.offset-1);if(W.type==="quoteSingle"&&K.includes("\\")||W.type==="quoteDouble"&&/\\[^"]/.test(K)){let q=W.type==="quoteDouble"?oe:V;return[q,re(W.type,K,ne),q]}if(K.includes(oe))return[V,re(W.type,W.type==="quoteDouble"?K.replace(/\\"/g,oe).replace(/'/g,V.repeat(2)):K,ne),V];if(K.includes(V))return[oe,re(W.type,W.type==="quoteSingle"?K.replace(/''/g,V):K,ne),oe];let Ee=ne.singleQuote?V:oe;return[Ee,re(W.type,K,ne),Ee]}case"blockFolded":case"blockLiteral":return O(U,se,ne);case"mapping":case"sequence":return u(r,U.map(se,"children"));case"sequenceItem":return["- ",o(2,W.content?se("content"):"")];case"mappingKey":case"mappingValue":return W.content?se("content"):"";case"mappingItem":case"flowMappingItem":return _(W,ee,U,se,ne);case"flowMapping":return S(U,se,ne);case"flowSequence":return k(U,se,ne);case"flowSequenceItem":return se("content");default:throw new Error("Unexpected node type ".concat(W.type))}}function H(W){return W.body.children.length>0||w(W.body)}function P(W,ee){return B(W)||ee&&(ee.head.children.length>0||w(ee.head))}function G(W,ee,U,ne){return U.children[0]===W&&/---(?:\s|$)/.test(ne.originalText.slice(h(W),h(W)+4))||W.head.children.length>0||w(W.head)||B(W.head)?"head":P(W,ee)?!1:ee?"root":!1}function re(W,ee,U){let ne=T(W,ee,U);return u(r,ne.map(se=>s(C(u(a,se)))))}function $(W,ee){if(D(ee))switch(delete ee.position,ee.type){case"comment":if(f(ee.value))return null;break;case"quoteDouble":case"quoteSingle":ee.type="quote";break}}n.exports={preprocess:y,embed:N,print:R,massageAstNode:$,insertPragma:p}}}),sg=Z({"src/language-yaml/options.js"(e,n){"use strict";ae();var t=Lt();n.exports={bracketSpacing:t.bracketSpacing,singleQuote:t.singleQuote,proseWrap:t.proseWrap}}}),ag=Z({"src/language-yaml/parsers.js"(){ae()}}),ig=Z({"node_modules/linguist-languages/data/YAML.json"(e,n){n.exports={name:"YAML",type:"data",color:"#cb171e",tmScope:"source.yaml",aliases:["yml"],extensions:[".yml",".mir",".reek",".rviz",".sublime-syntax",".syntax",".yaml",".yaml-tmlanguage",".yaml.sed",".yml.mysql"],filenames:[".clang-format",".clang-tidy",".gemrc","glide.lock","yarn.lock"],aceMode:"yaml",codemirrorMode:"yaml",codemirrorMimeType:"text/x-yaml",languageId:407}}}),og=Z({"src/language-yaml/index.js"(e,n){"use strict";ae();var t=bt(),s=ug(),i=sg(),r=ag(),u=[t(ig(),a=>({since:"1.14.0",parsers:["yaml"],vscodeLanguageIds:["yaml","ansible","home-assistant"],filenames:[...a.filenames.filter(c=>c!=="yarn.lock"),".prettierrc",".stylelintrc"]}))];n.exports={languages:u,printers:{yaml:s},options:i,parsers:r}}}),cg=Z({"src/languages.js"(e,n){"use strict";ae(),n.exports=[$m(),id(),dd(),Fd(),wd(),Kd(),og()]}});ae();var{version:lg}=gi(),_t=om(),{getSupportInfo:pg}=Mn(),fg=cm(),Dg=cg(),mg=Le();function St(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;return function(){for(var t=arguments.length,s=new Array(t),i=0;i<t;i++)s[i]=arguments[i];let r=s[n]||{},u=r.plugins||[];return s[n]=Object.assign(Object.assign({},r),{},{plugins:[...Dg,...Array.isArray(u)?u:Object.values(u)]}),e(...s)}}var Sn=St(_t.formatWithCursor);yo.exports={formatWithCursor:Sn,format(e,n){return Sn(e,n).formatted},check(e,n){let{formatted:t}=Sn(e,n);return t===e},doc:mg,getSupportInfo:St(pg,0),version:lg,util:fg,__debug:{parse:St(_t.parse),formatAST:St(_t.formatAST),formatDoc:St(_t.formatDoc),printToDoc:St(_t.printToDoc),printDocToString:St(_t.printDocToString)}}});"use strict";return dg();});

/***/ }),

/***/ "../../node_modules/simple-swizzle/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/simple-swizzle/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var isArrayish = __webpack_require__(/*! is-arrayish */ "../../node_modules/is-arrayish/index.js");

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ "./structured-clone/index.ts":
/*!***********************************!*\
  !*** ./structured-clone/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "structuredClone": () => (/* binding */ structuredClone)
/* harmony export */ });
// @ts-nocheck
// globalThis polyfill from https://mathiasbynens.be/notes/globalthis
(function () {
    if (typeof globalThis === "object")
        return;
    Object.defineProperty(Object.prototype, "__magic__", {
        get: function () {
            return this;
        },
        configurable: true, // This makes it possible to `delete` the getter later.
    });
    __magic__.globalThis = __magic__; // lolwat
    delete Object.prototype.__magic__;
})();
const clone = typeof globalThis.structuredClone === "function"
    ? globalThis.structuredClone
    : (obj) => JSON.parse(JSON.stringify(obj));
/**
 * Wrapper around the built-in structured clone. Uses `JSON.parse(JSON.stringify(...))`
 * as a fallback.
 */
function structuredClone(obj) {
    return clone(obj);
}


/***/ }),

/***/ "./unified-latex-builder/index.ts":
/*!****************************************!*\
  !*** ./unified-latex-builder/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.SP),
/* harmony export */   "arg": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.arg),
/* harmony export */   "args": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.args),
/* harmony export */   "env": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.env),
/* harmony export */   "m": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.m),
/* harmony export */   "s": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.s)
/* harmony export */ });
/* harmony import */ var _libs_builders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/builders */ "./unified-latex-builder/libs/builders.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help build a `unified-latex` Abstract Syntax Tree (AST)
 * with [hyperscript](https://github.com/dominictarr/hyperscript)-like syntax.
 *
 * ## When should I use this?
 *
 * If you want to programmatically create `Ast.Node` nodes.
 *
 */


/***/ }),

/***/ "./unified-latex-builder/libs/builders.ts":
/*!************************************************!*\
  !*** ./unified-latex-builder/libs/builders.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* binding */ SP),
/* harmony export */   "arg": () => (/* binding */ arg),
/* harmony export */   "args": () => (/* binding */ args),
/* harmony export */   "env": () => (/* binding */ env),
/* harmony export */   "m": () => (/* binding */ m),
/* harmony export */   "s": () => (/* binding */ s)
/* harmony export */ });
function normalizeNode(node) {
    if (typeof node === "string") {
        return s(node);
    }
    return node;
}
function normalizeArgument(arg, openMark = "{", closeMark = "}") {
    if (typeof arg === "string") {
        return {
            type: "argument",
            openMark,
            closeMark,
            content: [s(arg)],
        };
    }
    if (arg.type === "argument") {
        return arg;
    }
    return { type: "argument", openMark, closeMark, content: [arg] };
}
function normalizeArgumentsList(args, openMark = "{", closeMark = "}") {
    if (args == null) {
        return [];
    }
    if (Array.isArray(args)) {
        return args.map((arg) => normalizeArgument(arg, openMark, closeMark));
    }
    return [normalizeArgument(args, openMark, closeMark)];
}
const BRACES_MAP = {
    "*": { openMark: "", closeMark: "" },
    "{": { openMark: "{", closeMark: "}" },
    "[": { openMark: "[", closeMark: "]" },
    "(": { openMark: "(", closeMark: ")" },
};
const CLOSE_BRACES = new Set(Object.values(BRACES_MAP)
    .map((x) => x.closeMark)
    .filter((x) => x));
/**
 * Turn a braces signature into an array of braces.
 */
function bracesToOpenAndCloseMarks(braces) {
    const ret = [];
    for (const char of braces.split("")) {
        if (CLOSE_BRACES.has(char)) {
            continue;
        }
        const braces = BRACES_MAP[char];
        if (braces == null) {
            throw new Error(`Unknown open/close mark type "${char}"`);
        }
        braces;
        ret.push(braces);
    }
    return ret;
}
/**
 * Create an Argument list. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * args(["a", "b"], { braces: "[]{}" });
 * ```
 * will result in arguments `[a]{b}`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function args(args, special) {
    var _a, _b;
    if (!Array.isArray(args)) {
        args = [args];
    }
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces.length !== args.length) {
            throw new Error(`There is a difference between the number of supplied braces and the number of supplied arguments. ${args.length} supplied with braces signature ${special.braces}`);
        }
        return args.map((arg, i) => normalizeArgument(arg, braces[i].openMark, braces[i].closeMark));
    }
    const openMark = (_a = special === null || special === void 0 ? void 0 : special.defaultOpenMark) !== null && _a !== void 0 ? _a : "{";
    const closeMark = (_b = special === null || special === void 0 ? void 0 : special.defaultCloseMark) !== null && _b !== void 0 ? _b : "}";
    return normalizeArgumentsList(args, openMark, closeMark);
}
/**
 * Create an Argument. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * arg("a", { braces: "[]" });
 * ```
 * will result in arguments `[a]`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function arg(args, special) {
    var _a, _b;
    if (typeof args === "string") {
        args = s(args);
    }
    if (!Array.isArray(args) && args.type === "argument") {
        return args;
    }
    let openMark = (_a = special === null || special === void 0 ? void 0 : special.openMark) !== null && _a !== void 0 ? _a : "{";
    let closeMark = (_b = special === null || special === void 0 ? void 0 : special.closeMark) !== null && _b !== void 0 ? _b : "}";
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces[0]) {
            openMark = braces[0].openMark;
            closeMark = braces[0].closeMark;
        }
    }
    if (!Array.isArray(args)) {
        args = [args];
    }
    return { type: "argument", content: args, openMark, closeMark };
}
/**
 * Create a Macro with the given `name`. The macro
 * may be followed by any number of arguments.
 */
function m(name, marcoArgs, special) {
    const args = normalizeArgumentsList(marcoArgs);
    const escapeToken = special === null || special === void 0 ? void 0 : special.escapeToken;
    const ret = { type: "macro", content: name };
    if (args.length > 0) {
        ret.args = args;
    }
    if (escapeToken != null) {
        ret.escapeToken = escapeToken;
    }
    return ret;
}
/**
 * Create a String node from `value`
 */
function s(value) {
    if (typeof value === "string") {
        return { type: "string", content: value };
    }
    return value;
}
/**
 * Create an Environment node.
 */
function env(name, body, envArgs, special) {
    if (!Array.isArray(body)) {
        body = [body];
    }
    const args = normalizeArgumentsList(envArgs, "[", "]");
    const ret = {
        type: "environment",
        env: name,
        content: body.map(normalizeNode),
    };
    if (args.length > 0) {
        ret.args = args;
    }
    return ret;
}
/**
 * Whitespace node.
 */
const SP = { type: "whitespace" };


/***/ }),

/***/ "./unified-latex-ctan/index.ts":
/*!*************************************!*\
  !*** ./unified-latex-ctan/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environmentInfo": () => (/* binding */ environmentInfo),
/* harmony export */   "macroInfo": () => (/* binding */ macroInfo)
/* harmony export */ });
/* harmony import */ var _package_cleveref__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./package/cleveref */ "./unified-latex-ctan/package/cleveref/index.ts");
/* harmony import */ var _package_exam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./package/exam */ "./unified-latex-ctan/package/exam/index.ts");
/* harmony import */ var _package_geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./package/geometry */ "./unified-latex-ctan/package/geometry/index.ts");
/* harmony import */ var _package_hyperref__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./package/hyperref */ "./unified-latex-ctan/package/hyperref/index.ts");
/* harmony import */ var _package_latex2e__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./package/latex2e */ "./unified-latex-ctan/package/latex2e/index.ts");
/* harmony import */ var _package_makeidx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./package/makeidx */ "./unified-latex-ctan/package/makeidx/index.ts");
/* harmony import */ var _package_mathtools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./package/mathtools */ "./unified-latex-ctan/package/mathtools/index.ts");
/* harmony import */ var _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./package/nicematrix */ "./unified-latex-ctan/package/nicematrix/index.ts");
/* harmony import */ var _package_systeme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package/systeme */ "./unified-latex-ctan/package/systeme/index.ts");
/* harmony import */ var _package_tikz__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./package/tikz */ "./unified-latex-ctan/package/tikz/index.ts");
/* harmony import */ var _package_xcolor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./package/xcolor */ "./unified-latex-ctan/package/xcolor/index.ts");
/* harmony import */ var _package_xparse__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./package/xparse */ "./unified-latex-ctan/package/xparse/index.ts");












/**
 * Info about the macros for available ctan packages. `latex2e` contains
 * the standard macros for LaTeX.
 */
const macroInfo = {
    cleveref: _package_cleveref__WEBPACK_IMPORTED_MODULE_0__.macros,
    exam: _package_exam__WEBPACK_IMPORTED_MODULE_1__.macros,
    geometry: _package_geometry__WEBPACK_IMPORTED_MODULE_2__.macros,
    hyperref: _package_hyperref__WEBPACK_IMPORTED_MODULE_3__.macros,
    latex2e: _package_latex2e__WEBPACK_IMPORTED_MODULE_4__.macros,
    makeidx: _package_makeidx__WEBPACK_IMPORTED_MODULE_5__.macros,
    mathtools: _package_mathtools__WEBPACK_IMPORTED_MODULE_6__.macros,
    nicematrix: _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__.macros,
    systeme: _package_systeme__WEBPACK_IMPORTED_MODULE_8__.macros,
    tikz: _package_tikz__WEBPACK_IMPORTED_MODULE_9__.macros,
    xcolor: _package_xcolor__WEBPACK_IMPORTED_MODULE_10__.macros,
    xparse: _package_xparse__WEBPACK_IMPORTED_MODULE_11__.macros,
};
/**
 * Info about the environments for available ctan packages. `latex2e` contains
 * the standard environments for LaTeX.
 */
const environmentInfo = {
    cleveref: _package_cleveref__WEBPACK_IMPORTED_MODULE_0__.environments,
    exam: _package_exam__WEBPACK_IMPORTED_MODULE_1__.environments,
    geometry: _package_geometry__WEBPACK_IMPORTED_MODULE_2__.environments,
    hyperref: _package_hyperref__WEBPACK_IMPORTED_MODULE_3__.environments,
    latex2e: _package_latex2e__WEBPACK_IMPORTED_MODULE_4__.environments,
    makeidx: _package_makeidx__WEBPACK_IMPORTED_MODULE_5__.environments,
    mathtools: _package_mathtools__WEBPACK_IMPORTED_MODULE_6__.environments,
    nicematrix: _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__.environments,
    systeme: _package_systeme__WEBPACK_IMPORTED_MODULE_8__.environments,
    tikz: _package_tikz__WEBPACK_IMPORTED_MODULE_9__.environments,
    xcolor: _package_xcolor__WEBPACK_IMPORTED_MODULE_10__.environments,
    xparse: _package_xparse__WEBPACK_IMPORTED_MODULE_11__.environments,
};
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Macro/environment definitions and utilities for specific LaTeX packages from CTAN.
 *
 * Note: basic LaTeX macro/environment definitions come from the `latex2e` package, even though
 * this is technically not a CTAN "package".
 *
 * ## When should I use this?
 *
 * If you want information about special functions/macros from particular CTAN packages, or
 * you need to parse special environments.
 */


/***/ }),

/***/ "./unified-latex-ctan/package/cleveref/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/cleveref/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/cleveref/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/cleveref/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/cleveref/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    cref: { signature: "s m" },
    Cref: { signature: "s m" },
    crefrange: { signature: "s m m" },
    Crefrange: { signature: "s m m" },
    cpageref: { signature: "s m" },
    Cpageref: { signature: "s m" },
    ref: { signature: "m" },
    pageref: { signature: "m" },
    namecref: { signature: "m" },
    nameCref: { signature: "m" },
    lcnamecref: { signature: "m" },
    namecrefs: { signature: "m" },
    nameCrefs: { signature: "m" },
    lcnamecrefs: { signature: "m" },
    labelcref: { signature: "m" },
    labelcpageref: { signature: "m" },
    crefalias: { signature: "m m" },
    crefname: { signature: "m m m" },
    // XXX there are many more obscure commands to add here
    // https://ctan.org/pkg/cleveref
    crefdefaultlabelformat: { signature: "m" },
    crefrangeconjunction: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/exam/index.ts":
/*!**************************************************!*\
  !*** ./unified-latex-ctan/package/exam/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/exam/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/exam/provides.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/exam/provides.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
/* harmony import */ var _utils_enumerate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/enumerate */ "./unified-latex-ctan/utils/enumerate.ts");

const macros = {
    answerline: { signature: "o" },
    fillin: { signature: "o o" },
    fullwidth: { signature: "m" },
    fillwidthlines: { signature: "m" },
    fillwidthdottedlines: { signature: "m" },
    fillwidthgrid: { signature: "m" },
    makeemptybox: { signature: "m" },
    CorrectChoiceEmphasis: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    SolutionEmphasis: { signature: "m", renderInfo: { breakAround: true } },
    uplevel: { signature: "m", renderInfo: { breakAround: true } },
    checkboxchar: { signature: "m", renderInfo: { breakAround: true } },
    checkedchar: { signature: "m", renderInfo: { breakAround: true } },
    pointname: { signature: "m", renderInfo: { breakAround: true } },
    marginpointname: { signature: "m", renderInfo: { breakAround: true } },
    extrawidth: { signature: "m", renderInfo: { breakAround: true } },
    pointformat: { signature: "m", renderInfo: { breakAround: true } },
    bonuspointformat: { signature: "m", renderInfo: { breakAround: true } },
    totalformat: { signature: "m", renderInfo: { breakAround: true } },
    qformat: { signature: "m", renderInfo: { breakAround: true } },
    titledquestion: { signature: "m o", renderInfo: { breakAround: true } },
    pointpoints: { signature: "m m", renderInfo: { breakAround: true } },
    bonuspointpoints: { signature: "m m", renderInfo: { breakAround: true } },
};
const environments = {
    choices: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    checkboxes: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    oneparchoices: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    oneparcheckboxes: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    parts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "part"),
    },
    subparts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "subpart"),
    },
    subsubparts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "subsubpart"),
    },
    questions: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "question"),
    },
};


/***/ }),

/***/ "./unified-latex-ctan/package/geometry/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/geometry/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/geometry/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/geometry/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/geometry/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    geometry: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/hyperref/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/hyperref/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/hyperref/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/hyperref/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/hyperref/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    hypersetup: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    href: { signature: "o m m" },
    url: { signature: "m" },
    nolinkurl: { signature: "m" },
    hyperbaseurl: { signature: "m" },
    hyperimage: { signature: "m m" },
    hyperdef: { signature: "m m m" },
    hyperref: { signature: "o m" },
    hyperlink: { signature: "m m" },
    hypertarget: { signature: "m m" },
    autoref: { signature: "s m" },
    pageref: { signature: "s m" },
    autopageref: { signature: "s m" },
    pdfstringdef: { signature: "m m" },
    pdfbookmark: { signature: "o m m" },
    currentpdfbookmark: { signature: "m m" },
    subpdfbookmark: { signature: "m m" },
    belowpdfbookmark: { signature: "m m" },
    texorpdfstring: { signature: "m m" },
    thispdfpagelabel: { signature: "m" },
    hypercalcbp: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/latex2e/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/latex2e/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/latex2e/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/latex2e/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/latex2e/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/enumerate */ "./unified-latex-ctan/utils/enumerate.ts");


const macros = {
    // Special
    "\\": { signature: "!s o" },
    _: { signature: "m", escapeToken: "" },
    "^": { signature: "m", escapeToken: "" },
    // \newcommand arg signature from https://www.texdev.net/2020/08/19/the-good-the-bad-and-the-ugly-creating-document-commands
    // List can be found in latex2e.pdf "An unofficial reference manual"
    newcommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    renewcommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    providecommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    // Counters
    newcounter: {
        signature: "m o",
        renderInfo: { breakAround: true },
    },
    usecounter: {
        signature: "m",
    },
    setcounter: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    addtocounter: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    stepcounter: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    refstepcounter: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    // Lengths
    newlength: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    addtolength: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settodepth: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settoheight: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settowidth: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    // Spaces
    stretch: { signature: "m" },
    hspace: { signature: "s m" },
    vspace: { signature: "s m", renderInfo: { breakAround: true } },
    vfill: { renderInfo: { breakAround: true } },
    indent: { renderInfo: { breakAround: true } },
    phantom: { signature: "m" },
    vphantom: { signature: "m" },
    hphantom: { signature: "m" },
    noindent: { renderInfo: { breakAround: true } },
    smallskip: { renderInfo: { breakAround: true } },
    medskip: { renderInfo: { breakAround: true } },
    bigskip: { renderInfo: { breakAround: true } },
    smallbreak: { renderInfo: { breakAround: true } },
    medbreak: { renderInfo: { breakAround: true } },
    bigbreak: { renderInfo: { breakAround: true } },
    newline: { renderInfo: { breakAround: true } },
    linebreak: { signature: "o", renderInfo: { breakAround: true } },
    nolinebreak: { signature: "o", renderInfo: { breakAround: true } },
    clearpage: { renderInfo: { breakAround: true } },
    cleardoublepage: { renderInfo: { breakAround: true } },
    newpage: { renderInfo: { breakAround: true } },
    enlargethispage: { signature: "s", renderInfo: { breakAround: true } },
    pagebreak: { signature: "o", renderInfo: { breakAround: true } },
    nopagebreak: { signature: "o", renderInfo: { breakAround: true } },
    // Boxes
    newsavebox: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    sbox: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    savebox: {
        signature: "m o o m",
        renderInfo: { breakAround: true },
    },
    mbox: { signature: "m" },
    makebox: { signature: "d() o o m", renderInfo: { breakAround: true } },
    fbox: { signature: "m" },
    framebox: { signature: "o o m", renderInfo: { breakAround: true } },
    frame: { signature: "m", renderInfo: { breakAround: true } },
    parbox: { signature: "o o o m m", renderInfo: { breakAround: true } },
    raisebox: { signature: "m o o m" },
    marginpar: { signature: "o m", renderInfo: { breakAround: true } },
    colorbox: { signature: "o m m", renderInfo: { breakAround: true } },
    fcolorbox: { signature: "o m m", renderInfo: { breakAround: true } },
    rotatebox: { signature: "o m m" },
    scalebox: { signature: "m o m" },
    reflectbox: { signature: "m" },
    resizebox: { signature: "s m m m" },
    // Define environments
    newenvironment: {
        signature: "s m o o m m",
        renderInfo: { breakAround: true },
    },
    renewenvironment: {
        signature: "s m o o m m",
        renderInfo: { breakAround: true },
    },
    newtheorem: {
        signature: "s m o m o",
        renderInfo: { breakAround: true },
    },
    newfont: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    // Counters
    alph: { signature: "m" },
    Alph: { signature: "m" },
    arabic: { signature: "m" },
    roman: { signature: "m" },
    Roman: { signature: "m" },
    fnsymbol: { signature: "m" },
    // Other
    documentclass: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    usepackage: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    item: { signature: "o", renderInfo: { hangingIndent: true } },
    value: { signature: "m" },
    centering: { renderInfo: { breakAround: true } },
    input: { signature: "m", renderInfo: { breakAround: true } },
    include: { signature: "m", renderInfo: { breakAround: true } },
    includeonly: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    discretionary: { signature: "m m m" },
    hyphenation: { signature: "m m m" },
    footnote: { signature: "o m", renderInfo: { inParMode: true } },
    footnotemark: { signature: "o" },
    footnotetext: { signature: "o m", renderInfo: { inParMode: true } },
    // Math Commands
    sqrt: { signature: "o m", renderInfo: { inMathMode: true } },
    frac: { signature: "m m", renderInfo: { inMathMode: true } },
    stackrel: { signature: "m m" },
    ensuremath: { signature: "m", renderInfo: { inMathMode: true } },
    // Layout commands
    maketitle: { renderInfo: { breakAround: true } },
    doublespacing: { renderInfo: { breakAround: true } },
    singlespacing: { renderInfo: { breakAround: true } },
    author: { signature: "m", renderInfo: { breakAround: true } },
    date: { signature: "m", renderInfo: { breakAround: true } },
    thanks: { signature: "m", renderInfo: { breakAround: true } },
    title: { signature: "m", renderInfo: { breakAround: true } },
    pagenumbering: { signature: "m", renderInfo: { breakAround: true } },
    pagestyle: { signature: "m", renderInfo: { breakAround: true } },
    thispagestyle: { signature: "m", renderInfo: { breakAround: true } },
    // Colors
    definecolor: { signature: "m m m", renderInfo: { breakAround: true } },
    pagecolor: { signature: "o m", renderInfo: { breakAround: true } },
    nopagecolor: { renderInfo: { breakAround: true } },
    multicolumn: { signature: "m m m" },
    // Graphics
    includegraphics: {
        signature: "s o o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    rule: { signature: "o m m" },
    // Sectioning
    part: { signature: "s o m", renderInfo: { breakAround: true } },
    chapter: { signature: "s o m", renderInfo: { breakAround: true } },
    section: { signature: "s o m", renderInfo: { breakAround: true } },
    subsection: { signature: "s o m", renderInfo: { breakAround: true } },
    subsubsection: { signature: "s o m", renderInfo: { breakAround: true } },
    paragraph: { signature: "s o m", renderInfo: { breakAround: true } },
    subparagraph: { signature: "s o m", renderInfo: { breakAround: true } },
    appendix: { renderInfo: { breakAround: true } },
    frontmatter: { renderInfo: { breakAround: true } },
    mainmatter: { renderInfo: { breakAround: true } },
    backmatter: { renderInfo: { breakAround: true } },
    // Citing and references
    bibitem: { signature: "o m" },
    cite: { signature: "o m" },
    // Fonts
    textrm: { signature: "m", renderInfo: { inParMode: true } },
    textit: { signature: "m", renderInfo: { inParMode: true } },
    textmd: { signature: "m", renderInfo: { inParMode: true } },
    textbf: { signature: "m", renderInfo: { inParMode: true } },
    textup: { signature: "m", renderInfo: { inParMode: true } },
    textsl: { signature: "m", renderInfo: { inParMode: true } },
    textsf: { signature: "m", renderInfo: { inParMode: true } },
    textsc: { signature: "m", renderInfo: { inParMode: true } },
    texttt: { signature: "m", renderInfo: { inParMode: true } },
    emph: { signature: "m", renderInfo: { inParMode: true } },
    textnormal: { signature: "m", renderInfo: { inParMode: true } },
    uppercase: { signature: "m", renderInfo: { inParMode: true } },
    mathbf: { signature: "m" },
    mathsf: { signature: "m" },
    mathtt: { signature: "m" },
    mathit: { signature: "m" },
    mathnormal: { signature: "m" },
    mathcal: { signature: "m" },
    mathrm: { signature: "m" },
    // Other
    setlength: { signature: "m m", renderInfo: { breakAround: true } },
    ref: { signature: "s m" },
    label: { signature: "o m" },
    printbibliography: { renderInfo: { breakAround: true } },
    addtocontents: { signature: "m m", renderInfo: { breakAround: true } },
    addcontentsline: { signature: "m m m", renderInfo: { breakAround: true } },
    contentsline: { signature: "m m m", renderInfo: { breakAround: true } },
    bibliography: { signature: "m", renderInfo: { breakAround: true } },
    bibliographystyle: { signature: "m", renderInfo: { breakAround: true } },
    caption: { signature: "m", renderInfo: { breakAround: true } },
};
const environments = {
    document: {
        processContent: (nodes) => {
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trim)(nodes);
            return nodes;
        },
    },
    array: { signature: "o m", renderInfo: { alignContent: true } },
    description: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    enumerate: {
        signature: "o",
        processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody,
        renderInfo: { pgfkeysArgs: true },
    },
    itemize: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    trivlist: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    list: { signature: "m m", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    figure: { signature: "o" },
    "figure*": { signature: "o" },
    filecontents: { signature: "o m" },
    "filecontents*": { signature: "o m" },
    minipage: { signature: "o o o m" },
    picture: { signature: "r() d()" },
    tabbing: { renderInfo: { alignContent: true } },
    table: { signature: "o" },
    tabular: { signature: "o m", renderInfo: { alignContent: true } },
    "tabular*": { signature: "m o m", renderInfo: { alignContent: true } },
    thebibliography: { signature: "m" },
    // Math
    math: { renderInfo: { inMathMode: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/makeidx/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/makeidx/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/makeidx/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/makeidx/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/makeidx/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    see: { signature: "m m" },
    seealso: { signature: "m m" },
    seename: { signature: "m" },
    alsoname: { signature: "m" },
    index: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/mathtools/index.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/mathtools/index.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/mathtools/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/mathtools/provides.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/mathtools/provides.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    mathtoolsset: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    mathllap: {
        signature: "o m",
    },
    mathrlap: {
        signature: "o m",
    },
    mathclap: {
        signature: "o m",
    },
    clap: {
        signature: "m",
    },
    mathmbox: {
        signature: "m",
    },
    mathmakebox: {
        signature: "o o m",
    },
    cramped: {
        signature: "o m",
    },
    crampedllap: {
        signature: "o m",
    },
    crampedrlap: {
        signature: "o m",
    },
    crampedclap: {
        signature: "o m",
    },
    crampedsubstack: {
        signature: "o m",
    },
    smashoperator: {
        signature: "o m",
    },
    newtagform: {
        signature: "m o m m",
    },
    renewtagform: {
        signature: "m o m m",
    },
    usetagform: {
        signature: "m",
    },
    xleftrightarrow: { signature: "o m" },
    xLeftarrow: { signature: "o m" },
    xhookleftarrow: { signature: "o m" },
    xmapsto: { signature: "o m" },
    xRightarrow: { signature: "o m" },
    xLeftrightarrow: { signature: "o m" },
    xhookrightarrow: { signature: "o m" },
    underbracket: { signature: "o o m" },
    overbracket: { signature: "o o m" },
    underbrace: { signature: "m" },
    overbrace: { signature: "m" },
    shoveleft: { signature: "o m" },
    shoveright: { signature: "o m" },
    ArrowBetweenLines: { signature: "s o" },
    vdotswithin: { signature: "m" },
    shortdotswithin: { signature: "s m" },
    DeclarePairedDelimiter: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclarePairedDelimiterX: {
        signature: "m o m m m",
        renderInfo: { breakAround: true },
    },
    DeclarePairedDelimiterXPP: {
        signature: "m o m m m m m",
        renderInfo: { breakAround: true },
    },
    prescript: { signature: "m m m" },
    DeclareMathSizes: { signature: "m m m m" },
    newgathered: { signature: "m m m m" },
    renewgathered: { signature: "m m m m" },
    splitfrac: { signature: "m m" },
    splitdfrac: { signature: "m m" },
    xmathstrut: { signature: "o m" },
    // amsthm
    newtheorem: { signature: "s m o m o", renderInfo: { breakAround: true } },
    theoremstyle: { signature: "m", renderInfo: { breakAround: true } },
    newtheoremstyle: {
        signature: "m m m m m m m m m",
        renderInfo: { breakAround: true },
    },
    // amsmath
    text: { signature: "m", renderInfo: { inMathMode: false } },
    // amsfonts
    mathbb: { signature: "m" },
    mathscr: { signature: "m" },
    mathfrak: { signature: "m" },
    frak: { signature: "m" },
    Bdd: { signature: "m" },
    bold: { signature: "m" },
    // amsopn
    operatorname: { signature: "s m" },
    DeclareMathOperator: {
        signature: "s m m",
        renderInfo: { breakAround: true },
    },
};
const environments = {
    crampedsubarray: {
        signature: "m",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    matrix: { renderInfo: { alignContent: true, inMathMode: true } },
    bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    pmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    smallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    psmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    "matrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "bmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "pmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "vmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Bmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Vmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "smallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "psmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "bsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "vsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Bsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Vsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    multilined: { signature: "o o", renderInfo: { inMathMode: true } },
    cases: { renderInfo: { alignContent: true, inMathMode: true } },
    "cases*": { renderInfo: { alignContent: true, inMathMode: true } },
    dcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "dcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    rcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "rcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    drcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "drcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    spreadlines: { signature: "m", renderInfo: { inMathMode: true } },
    lgathered: { signature: "o", renderInfo: { inMathMode: true } },
    rgathered: { signature: "o", renderInfo: { inMathMode: true } },
    // amsmath
    "align*": { renderInfo: { inMathMode: true, alignContent: true } },
    align: { renderInfo: { inMathMode: true, alignContent: true } },
    "alignat*": { renderInfo: { inMathMode: true, alignContent: true } },
    alignat: { renderInfo: { inMathMode: true, alignContent: true } },
    "equation*": { renderInfo: { inMathMode: true } },
    equation: { renderInfo: { inMathMode: true } },
    "gather*": { renderInfo: { inMathMode: true } },
    gather: { renderInfo: { inMathMode: true } },
    "multline*": { renderInfo: { inMathMode: true } },
    multline: { renderInfo: { inMathMode: true } },
    "flalign*": { renderInfo: { inMathMode: true, alignContent: true } },
    flalign: { renderInfo: { inMathMode: true, alignContent: true } },
    split: { renderInfo: { inMathMode: true } },
    // Math environments
    displaymath: { renderInfo: { inMathMode: true } },
    // Typical amsthm environments
    theorem: { signature: "o" },
    lemma: { signature: "o" },
    definition: { signature: "o" },
    proposition: { signature: "o" },
    corollary: { signature: "o" },
    remark: { signature: "!o" },
    example: { signature: "!o" },
};


/***/ }),

/***/ "./unified-latex-ctan/package/nicematrix/index.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/nicematrix/index.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/nicematrix/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/nicematrix/provides.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-ctan/package/nicematrix/provides.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    NiceMatrixOptions: {
        signature: "m",
        renderInfo: { pgfkeysArgs: true, breakAround: true },
    },
};
const environments = {
    NiceTabular: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceMatrixBlock: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceArrayWithDelims: {
        signature: "m m o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    pNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    bNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    BNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    vNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    VNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    pNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    bNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    BNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    vNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    VNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
};


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_parser__WEBPACK_IMPORTED_MODULE_1__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_2__.printRaw)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/systeme/provides.ts");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/parser */ "./unified-latex-ctan/package/systeme/libs/parser.ts");
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-ctan/package/systeme/libs/print-raw.ts");
/* harmony import */ var _libs_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/types */ "./unified-latex-ctan/package/systeme/libs/types.ts");






/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/parser.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/parser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");



function createMatchers({ at = "@", equals = "=", equationSeparator = ",", mathOperations = ["+", "-"], whitelistedVariables, } = {}) {
    let isVar = (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && !!node.content.match(/[a-zA-Z]/);
    if (whitelistedVariables) {
        // Unwrap all strings
        whitelistedVariables = whitelistedVariables.map((v) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(v) ? v.content : v);
        const macros = whitelistedVariables.filter((v) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyMacro(v));
        const strings = whitelistedVariables.filter((v) => typeof v === "string");
        const macroHash = Object.fromEntries(macros.map((v) => [v.content, v]));
        const stringHash = Object.fromEntries(strings.map((s) => [s, s]));
        const macroMatcher = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macroHash);
        isVar = (node) => macroMatcher(node) ||
            (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && !!stringHash[node.content]);
    }
    return {
        isSep: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, equationSeparator),
        isVar,
        isOperation: (node) => mathOperations.some((op) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, op)),
        isEquals: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, equals),
        isAt: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, at),
        isSubscript: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node, "_") && node.escapeToken === "",
        isWhitespace: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace,
        isSameLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && node.sameline,
        isOwnLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && !node.sameline,
    };
}
/**
 * Parse the contents of the `\systeme{...}` macro
 */
function parse(ast, options) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.SystemePegParser.parse(ast, createMatchers(options || {}));
}


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/print-raw.ts":
/*!**************************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/print-raw.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Print an `systeme` argument specification AST to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    switch (node.type) {
        case "annotation":
            return `${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.marker)}${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}`;
        case "item":
            return `${node.op ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.op) : ""}${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}`;
        case "equation":
            const left = node.left.map((n) => printRaw(n)).join("");
            const right = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.right);
            const equals = node.equals ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.equals) : "";
            return `${left}${equals}${right}`;
        case "line":
            const equation = node.equation ? printRaw(node.equation) : "";
            const annotation = node.annotation ? printRaw(node.annotation) : "";
            const sep = node.sep ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.sep) : "";
            const body = `${equation}${annotation}${sep}`;
            if (node.trailingComment) {
                return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)([body, node.trailingComment]);
            }
            return body;
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/systeme.ts":
/*!************************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/systeme.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachSystemeSettingsAsRenderInfo": () => (/* binding */ attachSystemeSettingsAsRenderInfo),
/* harmony export */   "extractVariables": () => (/* binding */ extractVariables),
/* harmony export */   "systemeContentsToArray": () => (/* binding */ systemeContentsToArray)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../unified-latex-util-split */ "./unified-latex-util-split/index.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parser */ "./unified-latex-ctan/package/systeme/libs/parser.ts");
/* harmony import */ var _structured_clone__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../structured-clone */ "./structured-clone/index.ts");
/* harmony import */ var _unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../unified-latex-util-comments */ "./unified-latex-util-comments/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");









const AMP = { type: "string", content: "&" };
const SEP = { type: "macro", content: "\\" };
const QUAD = { type: "macro", content: "quad" };
const PLUS = { type: "string", content: "+" };
const COLUMN_KERN_ADJUSTMENT = [
    { type: "string", content: "@" },
    {
        type: "group",
        content: [
            { type: "macro", content: "mkern" },
            { type: "string", content: "5mu" },
        ],
    },
];
/**
 * Return a map giving the sorted index of each variable in `vars`. There
 * may be duplicated variables in `vars`. The map will send duplicates to the same index.
 *
 * @param {Ast.Node[][]} vars
 * @returns
 */
function sortVariables(vars, whitelistedVariables) {
    const varMap = new Map(vars.map((v) => [v, (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(v)]));
    const varNames = Array.from(new Set(varMap.values()));
    varNames.sort();
    const nameToPos = whitelistedVariables
        ? new Map(whitelistedVariables.map((v, i) => [(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(v), i]))
        : new Map(varNames.map((name, i) => [name, i]));
    return new Map(Array.from(varMap.entries()).map(([variable, name]) => {
        var _a;
        return [variable, (_a = nameToPos.get(name)) !== null && _a !== void 0 ? _a : -1];
    }));
}
/**
 * Make an array of arrays representing the operation/content of each item in an equation
 * + the annotation. The return value is suitable to be joined with `&` for the body of an array.
 */
function processLine(line, numVars, varOrder, hasEquals, hasAnnotation) {
    const ret = [];
    if (line.equation) {
        // We need to combine all non-var items into a single expression
        const nonVarItems = line.equation.left.filter((item) => item.variable == null);
        const varItems = line.equation.left.filter((item) => item.variable != null);
        let nonVarTerm = null;
        if (nonVarItems.length === 1) {
            nonVarTerm = nonVarItems[0];
        }
        else if (nonVarItems.length > 1) {
            // We need to combine all the items. We do so by constructing a new item with the rest of the item's contents
            // added on the back
            nonVarTerm = Object.assign(Object.assign({}, nonVarItems[0]), { content: nonVarItems[0].content.concat(nonVarItems.slice(1).flatMap((item) => {
                    if (item.op) {
                        return [item.op, ...item.content];
                    }
                    return [PLUS, ...item.content];
                })) });
        }
        const allItems = nonVarTerm ? varItems.concat(nonVarTerm) : varItems;
        const indexToItem = new Map(allItems.map((item) => {
            if (item.variable == null) {
                return [numVars - 1, item];
            }
            return [varOrder.get(item.variable), item];
        }));
        let isFirstItem = true;
        for (let i = 0; i < numVars; i++) {
            const item = indexToItem.get(i);
            if (item) {
                if (isFirstItem &&
                    (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(item.op, "+") || item.op == null)) {
                    // If the first item starts with a plus or doesn't have a starting operation,
                    // we don't use a starting symbol.
                    ret.push([]);
                    ret.push(item.content);
                }
                else {
                    // If we are not the first item, we always push an operation
                    ret.push([item.op || PLUS]);
                    ret.push(item.content);
                }
                isFirstItem = false;
            }
            else {
                // If there is no item for this position, we push a blank operation and content
                ret.push([]);
                ret.push([]);
            }
        }
        // If we have an equals, we need to push its contents
        if (hasEquals) {
            const equalsPart = (line.equation.equals ? [line.equation.equals] : []).concat(line.equation.right);
            ret.push(equalsPart);
        }
    }
    // If we have an annotation, we need to push it or a blank
    if (hasAnnotation) {
        ret.push(line.annotation ? line.annotation.content : []);
    }
    return ret;
}
/**
 * Add kerning information to the array specification. E.g. `crl` becomes `c@{\mkern5mu}r@{\mkern5mu}l`.
 * This is so the operations when typesetting a system of equations are properly spaced.
 */
function arraySpecToSpacedArraySpec(spec, hasAnnotation) {
    const annotationSpec = hasAnnotation ? spec.charAt(spec.length - 1) : "";
    const bodySpec = hasAnnotation ? spec.slice(0, spec.length - 1) : spec;
    const bodyStrings = Array.from(bodySpec).map((x) => [
        { type: "string", content: x },
    ]);
    const body = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__.arrayJoin)(bodyStrings, COLUMN_KERN_ADJUSTMENT);
    return annotationSpec
        ? body.concat({ type: "string", content: annotationSpec })
        : body;
}
/**
 * Extract the variables from a systeme system of equations.
 */
function extractVariables(nodes) {
    return nodes.flatMap((node) => {
        if (node.type === "line" && node.equation) {
            return extractVariables(node.equation.left);
        }
        if (node.type === "equation") {
            return node.left.flatMap((item) => item.variable ? [item.variable] : []);
        }
        if (node.type === "item") {
            return node.variable ? [node.variable] : [];
        }
        return [];
    });
}
/**
 * Remove any whitespace from the variable list (including an explicit " " string).
 * As well, filter out any non-macro/non-string items.
 */
function normalizeVariableWhitelist(vars) {
    if (!vars) {
        return null;
    }
    const normalized = vars.map((v) => typeof v === "string" ? { type: "string", content: v } : v);
    const ret = normalized.filter((v) => (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.anyMacro(v) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.anyString(v)) &&
        !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(v, " ") &&
        !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespace(v));
    return ret;
}
/**
 * Lays out the contents of a \systeme{...} macro as an array. This function sorts the variables
 * in alphabetical order and lays out any annotations. An `\begin{array}...\end{array}` environment
 * is returned.
 *
 * If `properSpacing=true` then kerning information will be included in the array specification to space
 * the operators correctly. This kerning information will make the specification long (and may make it incompatible
 * with KaTeX).
 *
 * An optional whitelist of variables may be supplied. If supplied, only listed items will count as variables and
 * the order of variable appearance will be the same as the order of the whitelisted variables.
 */
function systemeContentsToArray(nodes, options) {
    nodes = (0,_structured_clone__WEBPACK_IMPORTED_MODULE_4__.structuredClone)(nodes);
    (0,_unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_5__.deleteComments)(nodes);
    const { properSpacing = true, whitelistedVariables } = options || {};
    const coercedWhitelistedVariables = normalizeVariableWhitelist(whitelistedVariables);
    const systemeAst = (0,_parser__WEBPACK_IMPORTED_MODULE_3__.parse)(nodes, { whitelistedVariables });
    const vars = extractVariables(systemeAst);
    const varOrder = sortVariables(vars, coercedWhitelistedVariables);
    let numVars = coercedWhitelistedVariables
        ? coercedWhitelistedVariables.length
        : Math.max(...Array.from(varOrder.values())) + 1;
    // If there are terms with no variable, we need a spot for them
    if (systemeAst.some((line) => {
        if (line.equation) {
            return line.equation.left.some((item) => item.variable == null);
        }
    })) {
        numVars += 1;
    }
    const hasEquals = systemeAst.some((line) => line.equation && line.equation.equals);
    const hasAnnotation = systemeAst.some((line) => line.annotation);
    let rows = systemeAst.map((line) => processLine(line, numVars, varOrder, hasEquals, hasAnnotation));
    // If we have no leading `-` signs (e.g., only leading `+` or bank signs)
    // We don't need space for the first operation to be stored
    const noLeadingOperation = rows.every((row) => row[0].length === 0);
    // Every item in an equation has a centered operation and a right-aligned variable part.
    let arraySignature = Array.from({ length: numVars }, () => "cr").join("");
    if (noLeadingOperation) {
        // We might not have a leading operation on the first item(s)
        arraySignature = arraySignature.slice(1);
        rows = rows.map((row) => row.slice(1));
    }
    if (hasEquals) {
        // The part after the equals is left-aligned
        arraySignature += "l";
    }
    if (hasAnnotation) {
        // The annotation is left-aligned
        arraySignature += "l";
        // We also manually insert space in front of any annotation
        rows = rows.map((row) => {
            if (row[row.length - 1].length === 0) {
                return row;
            }
            return [
                ...row.slice(0, row.length - 1),
                [QUAD, { type: "whitespace" }, ...row[row.length - 1]],
            ];
        });
    }
    // By default, the array signature will put lots of space between items.
    // We can correct for that manually.
    const arraySignatureWithSpacing = properSpacing
        ? arraySpecToSpacedArraySpec(arraySignature, hasAnnotation)
        : [{ type: "string", content: arraySignature }];
    const bodyRows = rows.map((row) => (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__.arrayJoin)(row, AMP));
    const body = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__.arrayJoin)(bodyRows, SEP);
    const ret = {
        type: "environment",
        env: "array",
        args: [
            {
                type: "argument",
                openMark: "{",
                closeMark: "}",
                content: arraySignatureWithSpacing,
            },
        ],
        content: body,
    };
    return ret;
}
/**
 * Find any systeme definitions, e.g. `\sysdelim{.}{.}`, and attach their information
 * to the renderInfo of of the systeme macros.
 *
 */
function attachSystemeSettingsAsRenderInfo(ast) {
    const systemeMatcher = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createMacroMatcher(["systeme", "sysdelim"]);
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_6__.visit)(ast, (nodes, info) => {
        if (!info.context.inMathMode || !nodes.some(systemeMatcher)) {
            return;
        }
        // Find the positions of the systeme and sysdelim macros
        const systemeLocations = nodes.flatMap((node, i) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(node, "systeme") ? i : []);
        const sysdelimLocations = nodes.flatMap((node, i) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(node, "sysdelim") ? i : []);
        if (systemeLocations.length === 0 ||
            sysdelimLocations.length === 0) {
            return;
        }
        for (const i of systemeLocations) {
            // Find any sysdelim macros that occur before
            const lastSysdelim = Math.max(...sysdelimLocations.filter((loc) => loc < i));
            if (lastSysdelim >= 0) {
                const node = nodes[i];
                const sysdelimMacro = nodes[lastSysdelim];
                if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.anyMacro(sysdelimMacro)) {
                    throw new Error(`Expecting sysdelim macro but found "${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(sysdelimMacro)}"`);
                }
                const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_8__.getArgsContent)(sysdelimMacro);
                (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_7__.updateRenderInfo)(node, { sysdelims: args });
            }
        }
    }, {
        test: Array.isArray,
        includeArrays: true,
    });
}


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/types.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/types.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-ctan/package/systeme/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    systeme: {
        signature: "s o o m",
        renderInfo: { inMathMode: true },
    },
    sysdelim: {
        signature: "m m",
    },
    syseqsep: { signature: "m" },
    sysalign: { signature: "m" },
    syssignspace: { signature: "m" },
    syseqspace: { signature: "m" },
    syslineskipcoeff: { signature: "m" },
    syseqivsign: { signature: "m" },
    sysaddeqsign: { signature: "m" },
    sysremoveeqsign: { signature: "m" },
    sysextracolonsign: { signature: "m" },
    syscodeextracol: { signature: "m" },
    sysautonum: { signature: "m" },
    syssubstitute: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/tabularx/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/tabularx/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros),
/* harmony export */   "parseTabularSpec": () => (/* reexport safe */ _libs_parser__WEBPACK_IMPORTED_MODULE_2__.parseTabularSpec),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/tabularx/provides.ts");
/* harmony import */ var _libs_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/types */ "./unified-latex-ctan/package/tabularx/libs/types.ts");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/parser */ "./unified-latex-ctan/package/tabularx/libs/parser.ts");
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-ctan/package/tabularx/libs/print-raw.ts");






/***/ }),

/***/ "./unified-latex-ctan/package/tabularx/libs/parser.ts":
/*!************************************************************!*\
  !*** ./unified-latex-ctan/package/tabularx/libs/parser.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseTabularSpec": () => (/* binding */ parseTabularSpec)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");



function createMatchers() {
    return {
        matchChar: (node, char) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(node, char),
        isWhitespace: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespace,
        isGroup: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.group,
    };
}
/**
 * Parse a tabular/tabularx specification, e.g. `"|c|r|r|"`. This parser assumes the specification has
 * already been parsed as LaTeX.
 */
function parseTabularSpec(ast) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // All tabular spec commands are single letters, so we pre-split all strings
    // for easy parsing.
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_2__.splitStringsIntoSingleChars)(ast);
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_2__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.TabularPegParser.parse(ast, createMatchers());
}


/***/ }),

/***/ "./unified-latex-ctan/package/tabularx/libs/print-raw.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-ctan/package/tabularx/libs/print-raw.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Print a tabular/tabularx argument specification AST to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    switch (node.type) {
        case "vert_divider":
            return "|";
        case "at_divider":
            return `@{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}}`;
        case "bang_divider":
            return `!{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}}`;
        case "alignment":
            if (node.alignment === "left") {
                return "l";
            }
            if (node.alignment === "right") {
                return "r";
            }
            if (node.alignment === "center") {
                return "c";
            }
            if (node.alignment === "X") {
                return "X";
            }
            if (node.alignment === "parbox") {
                if (node.baseline === "top") {
                    return `p{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.size)}}`;
                }
                if (node.baseline === "default") {
                    return `m{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.size)}}`;
                }
                if (node.baseline === "bottom") {
                    return `b{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.size)}}`;
                }
                return `w{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.baseline)}}{${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.size)}}`;
            }
            break;
        case "decl_code":
            return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.code);
        case "column":
            const end_code = node.before_end_code
                ? `<{${printRaw(node.before_end_code)}}`
                : "";
            const start_code = node.before_start_code
                ? `>{${printRaw(node.before_start_code)}}`
                : "";
            return [
                printRaw(node.pre_dividers),
                start_code,
                printRaw(node.alignment),
                end_code,
                printRaw(node.post_dividers),
            ].join("");
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
    return "";
}


/***/ }),

/***/ "./unified-latex-ctan/package/tabularx/libs/types.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-ctan/package/tabularx/libs/types.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-ctan/package/tabularx/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/tabularx/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {};
const environments = {
    tabularx: { signature: "m o m", renderInfo: { alignContent: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/tikz/index.ts":
/*!**************************************************!*\
  !*** ./unified-latex-ctan/package/tikz/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/tikz/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/tikz/provides.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/tikz/provides.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    pgfkeys: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    tikzoption: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    tikzstyle: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    usetikzlibrary: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    pgfplotsset: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    pgfplotstabletypeset: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
};
const environments = {
    tikzpicture: { signature: "o", renderInfo: { pgfkeysArgs: true } },
    axis: { signature: "o", renderInfo: { pgfkeysArgs: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/index.ts":
/*!****************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DVI_PS_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.DVI_PS_NAMES),
/* harmony export */   "PREDEFINED_XCOLOR_COLORS": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.PREDEFINED_XCOLOR_COLORS),
/* harmony export */   "SVG_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.SVG_NAMES),
/* harmony export */   "X11_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.X11_NAMES),
/* harmony export */   "XColorCoreModelToColor": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.XColorCoreModelToColor),
/* harmony export */   "colorToTextcolorMacro": () => (/* reexport safe */ _libs_color_to_textcolor_macro__WEBPACK_IMPORTED_MODULE_7__.colorToTextcolorMacro),
/* harmony export */   "computeColor": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.computeColor),
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_parser__WEBPACK_IMPORTED_MODULE_3__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_4__.printRaw),
/* harmony export */   "xcolorColorToHex": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.xcolorColorToHex),
/* harmony export */   "xcolorMacroToHex": () => (/* reexport safe */ _libs_xcolor_macro_to_hex__WEBPACK_IMPORTED_MODULE_6__.xcolorMacroToHex)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/xcolor/provides.ts");
/* harmony import */ var _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/xcolor */ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts");
/* harmony import */ var _libs_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/types */ "./unified-latex-ctan/package/xcolor/libs/types.ts");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/parser */ "./unified-latex-ctan/package/xcolor/libs/parser.ts");
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-ctan/package/xcolor/libs/print-raw.ts");
/* harmony import */ var _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./libs/predefined-colors */ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts");
/* harmony import */ var _libs_xcolor_macro_to_hex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./libs/xcolor-macro-to-hex */ "./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts");
/* harmony import */ var _libs_color_to_textcolor_macro__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./libs/color-to-textcolor-macro */ "./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts");










/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts":
/*!****************************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "colorToTextcolorMacro": () => (/* binding */ colorToTextcolorMacro)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-builder */ "./unified-latex-builder/index.ts");

/**
 * Create a `\textcolor` macro. Color arguments are taken from `origMacro`.
 */
function colorToTextcolorMacro(content, origMacro) {
    if (!Array.isArray(content)) {
        content = [content];
    }
    // Signature of \color is "o m".
    // We want to carry through the same arguments
    const args = (origMacro.args
        ? origMacro.args
        : [(0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)([], { closeMark: "", openMark: "" }), (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)([])]).concat((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(content));
    return {
        type: "macro",
        content: "textcolor",
        args,
        _renderInfo: { inParMode: true },
    };
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/parser.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/parser.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");

const parseCache = {};
/**
 * Parse an `xparse` argument specification string to an AST.
 * This function caches results. Don't mutate the returned AST!
 *
 * @param {string} [str=""] - LaTeX string input
 * @returns - AST for LaTeX string
 */
function parse(str = "") {
    parseCache[str] = parseCache[str] || _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.XColorPegParser.parse(str);
    return parseCache[str];
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DVI_PS_NAMES": () => (/* binding */ DVI_PS_NAMES),
/* harmony export */   "SVG_NAMES": () => (/* binding */ SVG_NAMES),
/* harmony export */   "X11_NAMES": () => (/* binding */ X11_NAMES)
/* harmony export */ });
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! color */ "../../node_modules/color/index.js");
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_0__);

const fromRgb = ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_0___default()([r * 255, g * 255, b * 255], "rgb");
const DVI_PS_NAMES = {
    Apricot: color__WEBPACK_IMPORTED_MODULE_0___default()("#FBB982"),
    Aquamarine: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B5BE"),
    Bittersweet: color__WEBPACK_IMPORTED_MODULE_0___default()("#C04F17"),
    Black: color__WEBPACK_IMPORTED_MODULE_0___default()("#221E1F"),
    Blue: color__WEBPACK_IMPORTED_MODULE_0___default()("#2D2F92"),
    BlueGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B3B8"),
    BlueViolet: color__WEBPACK_IMPORTED_MODULE_0___default()("#473992"),
    BrickRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#B6321C"),
    Brown: color__WEBPACK_IMPORTED_MODULE_0___default()("#792500"),
    BurntOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F7921D"),
    CadetBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#74729A"),
    CarnationPink: color__WEBPACK_IMPORTED_MODULE_0___default()("#F282B4"),
    Cerulean: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A2E3"),
    CornflowerBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#41B0E4"),
    Cyan: color__WEBPACK_IMPORTED_MODULE_0___default()("#00AEEF"),
    Dandelion: color__WEBPACK_IMPORTED_MODULE_0___default()("#FDBC42"),
    DarkOrchid: color__WEBPACK_IMPORTED_MODULE_0___default()("#A4538A"),
    Emerald: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A99D"),
    ForestGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#009B55"),
    Fuchsia: color__WEBPACK_IMPORTED_MODULE_0___default()("#8C368C"),
    Goldenrod: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFDF42"),
    Gray: color__WEBPACK_IMPORTED_MODULE_0___default()("#949698"),
    Green: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A64F"),
    GreenYellow: color__WEBPACK_IMPORTED_MODULE_0___default()("#DFE674"),
    JungleGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A99A"),
    Lavender: color__WEBPACK_IMPORTED_MODULE_0___default()("#F49EC4"),
    LimeGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#8DC73E"),
    Magenta: color__WEBPACK_IMPORTED_MODULE_0___default()("#EC008C"),
    Mahogany: color__WEBPACK_IMPORTED_MODULE_0___default()("#A9341F"),
    Maroon: color__WEBPACK_IMPORTED_MODULE_0___default()("#AF3235"),
    Melon: color__WEBPACK_IMPORTED_MODULE_0___default()("#F89E7B"),
    MidnightBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#006795"),
    Mulberry: color__WEBPACK_IMPORTED_MODULE_0___default()("#A93C93"),
    NavyBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#006EB8"),
    OliveGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#3C8031"),
    Orange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F58137"),
    OrangeRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED135A"),
    Orchid: color__WEBPACK_IMPORTED_MODULE_0___default()("#AF72B0"),
    Peach: color__WEBPACK_IMPORTED_MODULE_0___default()("#F7965A"),
    Periwinkle: color__WEBPACK_IMPORTED_MODULE_0___default()("#7977B8"),
    PineGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#008B72"),
    Plum: color__WEBPACK_IMPORTED_MODULE_0___default()("#92268F"),
    ProcessBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B0F0"),
    Purple: color__WEBPACK_IMPORTED_MODULE_0___default()("#99479B"),
    RawSienna: color__WEBPACK_IMPORTED_MODULE_0___default()("#974006"),
    Red: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED1B23"),
    RedOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F26035"),
    RedViolet: color__WEBPACK_IMPORTED_MODULE_0___default()("#A1246B"),
    Rhodamine: color__WEBPACK_IMPORTED_MODULE_0___default()("#EF559F"),
    RoyalBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#0071BC"),
    RoyalPurple: color__WEBPACK_IMPORTED_MODULE_0___default()("#613F99"),
    RubineRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED017D"),
    Salmon: color__WEBPACK_IMPORTED_MODULE_0___default()("#F69289"),
    SeaGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#3FBC9D"),
    Sepia: color__WEBPACK_IMPORTED_MODULE_0___default()("#671800"),
    SkyBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#46C5DD"),
    SpringGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#C6DC67"),
    Tan: color__WEBPACK_IMPORTED_MODULE_0___default()("#DA9D76"),
    TealBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#00AEB3"),
    Thistle: color__WEBPACK_IMPORTED_MODULE_0___default()("#D883B7"),
    Turquoise: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B4CE"),
    Violet: color__WEBPACK_IMPORTED_MODULE_0___default()("#58429B"),
    VioletRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#EF58A0"),
    White: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFFFFF"),
    WildStrawberry: color__WEBPACK_IMPORTED_MODULE_0___default()("#EE2967"),
    Yellow: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFF200"),
    YellowGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#98CC70"),
    YellowOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#FAA21A"),
};
const SVG_NAMES = {
    AliceBlue: fromRgb([0.94, 0.972, 1]),
    AntiqueWhite: fromRgb([0.98, 0.92, 0.844]),
    Aqua: fromRgb([0, 1, 1]),
    Aquamarine: fromRgb([0.498, 1, 0.83]),
    Azure: fromRgb([0.94, 1, 1]),
    Beige: fromRgb([0.96, 0.96, 0.864]),
    Bisque: fromRgb([1, 0.894, 0.77]),
    Black: fromRgb([0, 0, 0]),
    BlanchedAlmond: fromRgb([1, 0.92, 0.804]),
    Blue: fromRgb([0, 0, 1]),
    BlueViolet: fromRgb([0.54, 0.17, 0.888]),
    Brown: fromRgb([0.648, 0.165, 0.165]),
    BurlyWood: fromRgb([0.87, 0.72, 0.53]),
    CadetBlue: fromRgb([0.372, 0.62, 0.628]),
    Chartreuse: fromRgb([0.498, 1, 0]),
    Chocolate: fromRgb([0.824, 0.41, 0.116]),
    Coral: fromRgb([1, 0.498, 0.312]),
    CornflowerBlue: fromRgb([0.392, 0.585, 0.93]),
    Cornsilk: fromRgb([1, 0.972, 0.864]),
    Crimson: fromRgb([0.864, 0.08, 0.235]),
    Cyan: fromRgb([0, 1, 1]),
    DarkBlue: fromRgb([0, 0, 0.545]),
    DarkCyan: fromRgb([0, 0.545, 0.545]),
    DarkGoldenrod: fromRgb([0.72, 0.525, 0.044]),
    DarkGray: fromRgb([0.664, 0.664, 0.664]),
    DarkGreen: fromRgb([0, 0.392, 0]),
    DarkGrey: fromRgb([0.664, 0.664, 0.664]),
    DarkKhaki: fromRgb([0.74, 0.716, 0.42]),
    DarkMagenta: fromRgb([0.545, 0, 0.545]),
    DarkOliveGreen: fromRgb([0.332, 0.42, 0.185]),
    DarkOrange: fromRgb([1, 0.55, 0]),
    DarkOrchid: fromRgb([0.6, 0.196, 0.8]),
    DarkRed: fromRgb([0.545, 0, 0]),
    DarkSalmon: fromRgb([0.912, 0.59, 0.48]),
    DarkSeaGreen: fromRgb([0.56, 0.736, 0.56]),
    DarkSlateBlue: fromRgb([0.284, 0.24, 0.545]),
    DarkSlateGray: fromRgb([0.185, 0.31, 0.31]),
    DarkSlateGrey: fromRgb([0.185, 0.31, 0.31]),
    DarkTurquoise: fromRgb([0, 0.808, 0.82]),
    DarkViolet: fromRgb([0.58, 0, 0.828]),
    DeepPink: fromRgb([1, 0.08, 0.576]),
    DeepSkyBlue: fromRgb([0, 0.75, 1]),
    DimGray: fromRgb([0.41, 0.41, 0.41]),
    DimGrey: fromRgb([0.41, 0.41, 0.41]),
    DodgerBlue: fromRgb([0.116, 0.565, 1]),
    FireBrick: fromRgb([0.698, 0.132, 0.132]),
    FloralWhite: fromRgb([1, 0.98, 0.94]),
    ForestGreen: fromRgb([0.132, 0.545, 0.132]),
    Fuchsia: fromRgb([1, 0, 1]),
    Gainsboro: fromRgb([0.864, 0.864, 0.864]),
    GhostWhite: fromRgb([0.972, 0.972, 1]),
    Gold: fromRgb([1, 0.844, 0]),
    Goldenrod: fromRgb([0.855, 0.648, 0.125]),
    Gray: fromRgb([0.5, 0.5, 0.5]),
    Green: fromRgb([0, 0.5, 0]),
    GreenYellow: fromRgb([0.68, 1, 0.185]),
    Grey: fromRgb([0.5, 0.5, 0.5]),
    Honeydew: fromRgb([0.94, 1, 0.94]),
    HotPink: fromRgb([1, 0.41, 0.705]),
    IndianRed: fromRgb([0.804, 0.36, 0.36]),
    Indigo: fromRgb([0.294, 0, 0.51]),
    Ivory: fromRgb([1, 1, 0.94]),
    Khaki: fromRgb([0.94, 0.9, 0.55]),
    Lavender: fromRgb([0.9, 0.9, 0.98]),
    LavenderBlush: fromRgb([1, 0.94, 0.96]),
    LawnGreen: fromRgb([0.488, 0.99, 0]),
    LemonChiffon: fromRgb([1, 0.98, 0.804]),
    LightBlue: fromRgb([0.68, 0.848, 0.9]),
    LightCoral: fromRgb([0.94, 0.5, 0.5]),
    LightCyan: fromRgb([0.88, 1, 1]),
    LightGoldenrod: fromRgb([0.933, 0.867, 0.51]),
    LightGoldenrodYellow: fromRgb([0.98, 0.98, 0.824]),
    LightGray: fromRgb([0.828, 0.828, 0.828]),
    LightGreen: fromRgb([0.565, 0.932, 0.565]),
    LightGrey: fromRgb([0.828, 0.828, 0.828]),
    LightPink: fromRgb([1, 0.712, 0.756]),
    LightSalmon: fromRgb([1, 0.628, 0.48]),
    LightSeaGreen: fromRgb([0.125, 0.698, 0.668]),
    LightSkyBlue: fromRgb([0.53, 0.808, 0.98]),
    LightSlateBlue: fromRgb([0.518, 0.44, 1]),
    LightSlateGray: fromRgb([0.468, 0.532, 0.6]),
    LightSlateGrey: fromRgb([0.468, 0.532, 0.6]),
    LightSteelBlue: fromRgb([0.69, 0.77, 0.87]),
    LightYellow: fromRgb([1, 1, 0.88]),
    Lime: fromRgb([0, 1, 0]),
    LimeGreen: fromRgb([0.196, 0.804, 0.196]),
    Linen: fromRgb([0.98, 0.94, 0.9]),
    Magenta: fromRgb([1, 0, 1]),
    Maroon: fromRgb([0.5, 0, 0]),
    MediumAquamarine: fromRgb([0.4, 0.804, 0.668]),
    MediumBlue: fromRgb([0, 0, 0.804]),
    MediumOrchid: fromRgb([0.73, 0.332, 0.828]),
    MediumPurple: fromRgb([0.576, 0.44, 0.86]),
    MediumSeaGreen: fromRgb([0.235, 0.7, 0.444]),
    MediumSlateBlue: fromRgb([0.484, 0.408, 0.932]),
    MediumSpringGreen: fromRgb([0, 0.98, 0.604]),
    MediumTurquoise: fromRgb([0.284, 0.82, 0.8]),
    MediumVioletRed: fromRgb([0.78, 0.084, 0.52]),
    MidnightBlue: fromRgb([0.098, 0.098, 0.44]),
    MintCream: fromRgb([0.96, 1, 0.98]),
    MistyRose: fromRgb([1, 0.894, 0.884]),
    Moccasin: fromRgb([1, 0.894, 0.71]),
    NavajoWhite: fromRgb([1, 0.87, 0.68]),
    Navy: fromRgb([0, 0, 0.5]),
    NavyBlue: fromRgb([0, 0, 0.5]),
    OldLace: fromRgb([0.992, 0.96, 0.9]),
    Olive: fromRgb([0.5, 0.5, 0]),
    OliveDrab: fromRgb([0.42, 0.556, 0.136]),
    Orange: fromRgb([1, 0.648, 0]),
    OrangeRed: fromRgb([1, 0.27, 0]),
    Orchid: fromRgb([0.855, 0.44, 0.84]),
    PaleGoldenrod: fromRgb([0.932, 0.91, 0.668]),
    PaleGreen: fromRgb([0.596, 0.985, 0.596]),
    PaleTurquoise: fromRgb([0.688, 0.932, 0.932]),
    PaleVioletRed: fromRgb([0.86, 0.44, 0.576]),
    PapayaWhip: fromRgb([1, 0.936, 0.835]),
    PeachPuff: fromRgb([1, 0.855, 0.725]),
    Peru: fromRgb([0.804, 0.52, 0.248]),
    Pink: fromRgb([1, 0.752, 0.796]),
    Plum: fromRgb([0.868, 0.628, 0.868]),
    PowderBlue: fromRgb([0.69, 0.88, 0.9]),
    Purple: fromRgb([0.5, 0, 0.5]),
    Red: fromRgb([1, 0, 0]),
    RosyBrown: fromRgb([0.736, 0.56, 0.56]),
    RoyalBlue: fromRgb([0.255, 0.41, 0.884]),
    SaddleBrown: fromRgb([0.545, 0.27, 0.075]),
    Salmon: fromRgb([0.98, 0.5, 0.448]),
    SandyBrown: fromRgb([0.956, 0.644, 0.376]),
    SeaGreen: fromRgb([0.18, 0.545, 0.34]),
    Seashell: fromRgb([1, 0.96, 0.932]),
    Sienna: fromRgb([0.628, 0.32, 0.176]),
    Silver: fromRgb([0.752, 0.752, 0.752]),
    SkyBlue: fromRgb([0.53, 0.808, 0.92]),
    SlateBlue: fromRgb([0.415, 0.352, 0.804]),
    SlateGray: fromRgb([0.44, 0.5, 0.565]),
    SlateGrey: fromRgb([0.44, 0.5, 0.565]),
    Snow: fromRgb([1, 0.98, 0.98]),
    SpringGreen: fromRgb([0, 1, 0.498]),
    SteelBlue: fromRgb([0.275, 0.51, 0.705]),
    Tan: fromRgb([0.824, 0.705, 0.55]),
    Teal: fromRgb([0, 0.5, 0.5]),
    Thistle: fromRgb([0.848, 0.75, 0.848]),
    Tomato: fromRgb([1, 0.39, 0.28]),
    Turquoise: fromRgb([0.25, 0.88, 0.815]),
    Violet: fromRgb([0.932, 0.51, 0.932]),
    VioletRed: fromRgb([0.816, 0.125, 0.565]),
    Wheat: fromRgb([0.96, 0.87, 0.7]),
    White: fromRgb([1, 1, 1]),
    WhiteSmoke: fromRgb([0.96, 0.96, 0.96]),
    Yellow: fromRgb([1, 1, 0]),
    YellowGreen: fromRgb([0.604, 0.804, 0.196]),
};
const X11_NAMES = {
    AntiqueWhite1: fromRgb([1, 0.936, 0.86]),
    AntiqueWhite2: fromRgb([0.932, 0.875, 0.8]),
    AntiqueWhite3: fromRgb([0.804, 0.752, 0.69]),
    AntiqueWhite4: fromRgb([0.545, 0.512, 0.47]),
    Aquamarine1: fromRgb([0.498, 1, 0.83]),
    Aquamarine2: fromRgb([0.464, 0.932, 0.776]),
    Aquamarine3: fromRgb([0.4, 0.804, 0.668]),
    Aquamarine4: fromRgb([0.27, 0.545, 0.455]),
    Azure1: fromRgb([0.94, 1, 1]),
    Azure2: fromRgb([0.88, 0.932, 0.932]),
    Azure3: fromRgb([0.756, 0.804, 0.804]),
    Azure4: fromRgb([0.512, 0.545, 0.545]),
    Bisque1: fromRgb([1, 0.894, 0.77]),
    Bisque2: fromRgb([0.932, 0.835, 0.716]),
    Bisque3: fromRgb([0.804, 0.716, 0.62]),
    Bisque4: fromRgb([0.545, 0.49, 0.42]),
    Blue1: fromRgb([0, 0, 1]),
    Blue2: fromRgb([0, 0, 0.932]),
    Blue3: fromRgb([0, 0, 0.804]),
    Blue4: fromRgb([0, 0, 0.545]),
    Brown1: fromRgb([1, 0.25, 0.25]),
    Brown2: fromRgb([0.932, 0.23, 0.23]),
    Brown3: fromRgb([0.804, 0.2, 0.2]),
    Brown4: fromRgb([0.545, 0.136, 0.136]),
    Burlywood1: fromRgb([1, 0.828, 0.608]),
    Burlywood2: fromRgb([0.932, 0.772, 0.57]),
    Burlywood3: fromRgb([0.804, 0.668, 0.49]),
    Burlywood4: fromRgb([0.545, 0.45, 0.332]),
    CadetBlue1: fromRgb([0.596, 0.96, 1]),
    CadetBlue2: fromRgb([0.556, 0.898, 0.932]),
    CadetBlue3: fromRgb([0.48, 0.772, 0.804]),
    CadetBlue4: fromRgb([0.325, 0.525, 0.545]),
    Chartreuse1: fromRgb([0.498, 1, 0]),
    Chartreuse2: fromRgb([0.464, 0.932, 0]),
    Chartreuse3: fromRgb([0.4, 0.804, 0]),
    Chartreuse4: fromRgb([0.27, 0.545, 0]),
    Chocolate1: fromRgb([1, 0.498, 0.14]),
    Chocolate2: fromRgb([0.932, 0.464, 0.13]),
    Chocolate3: fromRgb([0.804, 0.4, 0.112]),
    Chocolate4: fromRgb([0.545, 0.27, 0.075]),
    Coral1: fromRgb([1, 0.448, 0.336]),
    Coral2: fromRgb([0.932, 0.415, 0.312]),
    Coral3: fromRgb([0.804, 0.356, 0.27]),
    Coral4: fromRgb([0.545, 0.244, 0.185]),
    Cornsilk1: fromRgb([1, 0.972, 0.864]),
    Cornsilk2: fromRgb([0.932, 0.91, 0.804]),
    Cornsilk3: fromRgb([0.804, 0.785, 0.694]),
    Cornsilk4: fromRgb([0.545, 0.532, 0.47]),
    Cyan1: fromRgb([0, 1, 1]),
    Cyan2: fromRgb([0, 0.932, 0.932]),
    Cyan3: fromRgb([0, 0.804, 0.804]),
    Cyan4: fromRgb([0, 0.545, 0.545]),
    DarkGoldenrod1: fromRgb([1, 0.725, 0.06]),
    DarkGoldenrod2: fromRgb([0.932, 0.68, 0.055]),
    DarkGoldenrod3: fromRgb([0.804, 0.585, 0.048]),
    DarkGoldenrod4: fromRgb([0.545, 0.396, 0.03]),
    DarkOliveGreen1: fromRgb([0.792, 1, 0.44]),
    DarkOliveGreen2: fromRgb([0.736, 0.932, 0.408]),
    DarkOliveGreen3: fromRgb([0.635, 0.804, 0.352]),
    DarkOliveGreen4: fromRgb([0.43, 0.545, 0.24]),
    DarkOrange1: fromRgb([1, 0.498, 0]),
    DarkOrange2: fromRgb([0.932, 0.464, 0]),
    DarkOrange3: fromRgb([0.804, 0.4, 0]),
    DarkOrange4: fromRgb([0.545, 0.27, 0]),
    DarkOrchid1: fromRgb([0.75, 0.244, 1]),
    DarkOrchid2: fromRgb([0.698, 0.228, 0.932]),
    DarkOrchid3: fromRgb([0.604, 0.196, 0.804]),
    DarkOrchid4: fromRgb([0.408, 0.132, 0.545]),
    DarkSeaGreen1: fromRgb([0.756, 1, 0.756]),
    DarkSeaGreen2: fromRgb([0.705, 0.932, 0.705]),
    DarkSeaGreen3: fromRgb([0.608, 0.804, 0.608]),
    DarkSeaGreen4: fromRgb([0.41, 0.545, 0.41]),
    DarkSlateGray1: fromRgb([0.592, 1, 1]),
    DarkSlateGray2: fromRgb([0.552, 0.932, 0.932]),
    DarkSlateGray3: fromRgb([0.475, 0.804, 0.804]),
    DarkSlateGray4: fromRgb([0.32, 0.545, 0.545]),
    DeepPink1: fromRgb([1, 0.08, 0.576]),
    DeepPink2: fromRgb([0.932, 0.07, 0.536]),
    DeepPink3: fromRgb([0.804, 0.064, 0.464]),
    DeepPink4: fromRgb([0.545, 0.04, 0.312]),
    DeepSkyBlue1: fromRgb([0, 0.75, 1]),
    DeepSkyBlue2: fromRgb([0, 0.698, 0.932]),
    DeepSkyBlue3: fromRgb([0, 0.604, 0.804]),
    DeepSkyBlue4: fromRgb([0, 0.408, 0.545]),
    DodgerBlue1: fromRgb([0.116, 0.565, 1]),
    DodgerBlue2: fromRgb([0.11, 0.525, 0.932]),
    DodgerBlue3: fromRgb([0.094, 0.455, 0.804]),
    DodgerBlue4: fromRgb([0.064, 0.305, 0.545]),
    Firebrick1: fromRgb([1, 0.19, 0.19]),
    Firebrick2: fromRgb([0.932, 0.172, 0.172]),
    Firebrick3: fromRgb([0.804, 0.15, 0.15]),
    Firebrick4: fromRgb([0.545, 0.1, 0.1]),
    Gold1: fromRgb([1, 0.844, 0]),
    Gold2: fromRgb([0.932, 0.79, 0]),
    Gold3: fromRgb([0.804, 0.68, 0]),
    Gold4: fromRgb([0.545, 0.46, 0]),
    Goldenrod1: fromRgb([1, 0.756, 0.145]),
    Goldenrod2: fromRgb([0.932, 0.705, 0.132]),
    Goldenrod3: fromRgb([0.804, 0.608, 0.112]),
    Goldenrod4: fromRgb([0.545, 0.41, 0.08]),
    Green1: fromRgb([0, 1, 0]),
    Green2: fromRgb([0, 0.932, 0]),
    Green3: fromRgb([0, 0.804, 0]),
    Green4: fromRgb([0, 0.545, 0]),
    Honeydew1: fromRgb([0.94, 1, 0.94]),
    Honeydew2: fromRgb([0.88, 0.932, 0.88]),
    Honeydew3: fromRgb([0.756, 0.804, 0.756]),
    Honeydew4: fromRgb([0.512, 0.545, 0.512]),
    HotPink1: fromRgb([1, 0.43, 0.705]),
    HotPink2: fromRgb([0.932, 0.415, 0.655]),
    HotPink3: fromRgb([0.804, 0.376, 0.565]),
    HotPink4: fromRgb([0.545, 0.228, 0.385]),
    IndianRed1: fromRgb([1, 0.415, 0.415]),
    IndianRed2: fromRgb([0.932, 0.39, 0.39]),
    IndianRed3: fromRgb([0.804, 0.332, 0.332]),
    IndianRed4: fromRgb([0.545, 0.228, 0.228]),
    Ivory1: fromRgb([1, 1, 0.94]),
    Ivory2: fromRgb([0.932, 0.932, 0.88]),
    Ivory3: fromRgb([0.804, 0.804, 0.756]),
    Ivory4: fromRgb([0.545, 0.545, 0.512]),
    Khaki1: fromRgb([1, 0.965, 0.56]),
    Khaki2: fromRgb([0.932, 0.9, 0.52]),
    Khaki3: fromRgb([0.804, 0.776, 0.45]),
    Khaki4: fromRgb([0.545, 0.525, 0.305]),
    LavenderBlush1: fromRgb([1, 0.94, 0.96]),
    LavenderBlush2: fromRgb([0.932, 0.88, 0.898]),
    LavenderBlush3: fromRgb([0.804, 0.756, 0.772]),
    LavenderBlush4: fromRgb([0.545, 0.512, 0.525]),
    LemonChiffon1: fromRgb([1, 0.98, 0.804]),
    LemonChiffon2: fromRgb([0.932, 0.912, 0.75]),
    LemonChiffon3: fromRgb([0.804, 0.79, 0.648]),
    LemonChiffon4: fromRgb([0.545, 0.536, 0.44]),
    LightBlue1: fromRgb([0.75, 0.936, 1]),
    LightBlue2: fromRgb([0.698, 0.875, 0.932]),
    LightBlue3: fromRgb([0.604, 0.752, 0.804]),
    LightBlue4: fromRgb([0.408, 0.512, 0.545]),
    LightCyan1: fromRgb([0.88, 1, 1]),
    LightCyan2: fromRgb([0.82, 0.932, 0.932]),
    LightCyan3: fromRgb([0.705, 0.804, 0.804]),
    LightCyan4: fromRgb([0.48, 0.545, 0.545]),
    LightGoldenrod1: fromRgb([1, 0.925, 0.545]),
    LightGoldenrod2: fromRgb([0.932, 0.864, 0.51]),
    LightGoldenrod3: fromRgb([0.804, 0.745, 0.44]),
    LightGoldenrod4: fromRgb([0.545, 0.505, 0.298]),
    LightPink1: fromRgb([1, 0.684, 0.725]),
    LightPink2: fromRgb([0.932, 0.635, 0.68]),
    LightPink3: fromRgb([0.804, 0.55, 0.585]),
    LightPink4: fromRgb([0.545, 0.372, 0.396]),
    LightSalmon1: fromRgb([1, 0.628, 0.48]),
    LightSalmon2: fromRgb([0.932, 0.585, 0.448]),
    LightSalmon3: fromRgb([0.804, 0.505, 0.385]),
    LightSalmon4: fromRgb([0.545, 0.34, 0.26]),
    LightSkyBlue1: fromRgb([0.69, 0.888, 1]),
    LightSkyBlue2: fromRgb([0.644, 0.828, 0.932]),
    LightSkyBlue3: fromRgb([0.552, 0.712, 0.804]),
    LightSkyBlue4: fromRgb([0.376, 0.484, 0.545]),
    LightSteelBlue1: fromRgb([0.792, 0.884, 1]),
    LightSteelBlue2: fromRgb([0.736, 0.824, 0.932]),
    LightSteelBlue3: fromRgb([0.635, 0.71, 0.804]),
    LightSteelBlue4: fromRgb([0.43, 0.484, 0.545]),
    LightYellow1: fromRgb([1, 1, 0.88]),
    LightYellow2: fromRgb([0.932, 0.932, 0.82]),
    LightYellow3: fromRgb([0.804, 0.804, 0.705]),
    LightYellow4: fromRgb([0.545, 0.545, 0.48]),
    Magenta1: fromRgb([1, 0, 1]),
    Magenta2: fromRgb([0.932, 0, 0.932]),
    Magenta3: fromRgb([0.804, 0, 0.804]),
    Magenta4: fromRgb([0.545, 0, 0.545]),
    Maroon1: fromRgb([1, 0.204, 0.7]),
    Maroon2: fromRgb([0.932, 0.19, 0.655]),
    Maroon3: fromRgb([0.804, 0.16, 0.565]),
    Maroon4: fromRgb([0.545, 0.11, 0.385]),
    MediumOrchid1: fromRgb([0.88, 0.4, 1]),
    MediumOrchid2: fromRgb([0.82, 0.372, 0.932]),
    MediumOrchid3: fromRgb([0.705, 0.32, 0.804]),
    MediumOrchid4: fromRgb([0.48, 0.215, 0.545]),
    MediumPurple1: fromRgb([0.67, 0.51, 1]),
    MediumPurple2: fromRgb([0.624, 0.475, 0.932]),
    MediumPurple3: fromRgb([0.536, 0.408, 0.804]),
    MediumPurple4: fromRgb([0.365, 0.28, 0.545]),
    MistyRose1: fromRgb([1, 0.894, 0.884]),
    MistyRose2: fromRgb([0.932, 0.835, 0.824]),
    MistyRose3: fromRgb([0.804, 0.716, 0.71]),
    MistyRose4: fromRgb([0.545, 0.49, 0.484]),
    NavajoWhite1: fromRgb([1, 0.87, 0.68]),
    NavajoWhite2: fromRgb([0.932, 0.81, 0.63]),
    NavajoWhite3: fromRgb([0.804, 0.7, 0.545]),
    NavajoWhite4: fromRgb([0.545, 0.475, 0.37]),
    OliveDrab1: fromRgb([0.752, 1, 0.244]),
    OliveDrab2: fromRgb([0.7, 0.932, 0.228]),
    OliveDrab3: fromRgb([0.604, 0.804, 0.196]),
    OliveDrab4: fromRgb([0.41, 0.545, 0.132]),
    Orange1: fromRgb([1, 0.648, 0]),
    Orange2: fromRgb([0.932, 0.604, 0]),
    Orange3: fromRgb([0.804, 0.52, 0]),
    Orange4: fromRgb([0.545, 0.352, 0]),
    OrangeRed1: fromRgb([1, 0.27, 0]),
    OrangeRed2: fromRgb([0.932, 0.25, 0]),
    OrangeRed3: fromRgb([0.804, 0.215, 0]),
    OrangeRed4: fromRgb([0.545, 0.145, 0]),
    Orchid1: fromRgb([1, 0.512, 0.98]),
    Orchid2: fromRgb([0.932, 0.48, 0.912]),
    Orchid3: fromRgb([0.804, 0.41, 0.79]),
    Orchid4: fromRgb([0.545, 0.28, 0.536]),
    PaleGreen1: fromRgb([0.604, 1, 0.604]),
    PaleGreen2: fromRgb([0.565, 0.932, 0.565]),
    PaleGreen3: fromRgb([0.488, 0.804, 0.488]),
    PaleGreen4: fromRgb([0.33, 0.545, 0.33]),
    PaleTurquoise1: fromRgb([0.732, 1, 1]),
    PaleTurquoise2: fromRgb([0.684, 0.932, 0.932]),
    PaleTurquoise3: fromRgb([0.59, 0.804, 0.804]),
    PaleTurquoise4: fromRgb([0.4, 0.545, 0.545]),
    PaleVioletRed1: fromRgb([1, 0.51, 0.67]),
    PaleVioletRed2: fromRgb([0.932, 0.475, 0.624]),
    PaleVioletRed3: fromRgb([0.804, 0.408, 0.536]),
    PaleVioletRed4: fromRgb([0.545, 0.28, 0.365]),
    PeachPuff1: fromRgb([1, 0.855, 0.725]),
    PeachPuff2: fromRgb([0.932, 0.796, 0.68]),
    PeachPuff3: fromRgb([0.804, 0.688, 0.585]),
    PeachPuff4: fromRgb([0.545, 0.468, 0.396]),
    Pink1: fromRgb([1, 0.71, 0.772]),
    Pink2: fromRgb([0.932, 0.664, 0.72]),
    Pink3: fromRgb([0.804, 0.57, 0.62]),
    Pink4: fromRgb([0.545, 0.39, 0.424]),
    Plum1: fromRgb([1, 0.732, 1]),
    Plum2: fromRgb([0.932, 0.684, 0.932]),
    Plum3: fromRgb([0.804, 0.59, 0.804]),
    Plum4: fromRgb([0.545, 0.4, 0.545]),
    Purple1: fromRgb([0.608, 0.19, 1]),
    Purple2: fromRgb([0.57, 0.172, 0.932]),
    Purple3: fromRgb([0.49, 0.15, 0.804]),
    Purple4: fromRgb([0.332, 0.1, 0.545]),
    Red1: fromRgb([1, 0, 0]),
    Red2: fromRgb([0.932, 0, 0]),
    Red3: fromRgb([0.804, 0, 0]),
    Red4: fromRgb([0.545, 0, 0]),
    RosyBrown1: fromRgb([1, 0.756, 0.756]),
    RosyBrown2: fromRgb([0.932, 0.705, 0.705]),
    RosyBrown3: fromRgb([0.804, 0.608, 0.608]),
    RosyBrown4: fromRgb([0.545, 0.41, 0.41]),
    RoyalBlue1: fromRgb([0.284, 0.464, 1]),
    RoyalBlue2: fromRgb([0.264, 0.43, 0.932]),
    RoyalBlue3: fromRgb([0.228, 0.372, 0.804]),
    RoyalBlue4: fromRgb([0.152, 0.25, 0.545]),
    Salmon1: fromRgb([1, 0.55, 0.41]),
    Salmon2: fromRgb([0.932, 0.51, 0.385]),
    Salmon3: fromRgb([0.804, 0.44, 0.33]),
    Salmon4: fromRgb([0.545, 0.298, 0.224]),
    SeaGreen1: fromRgb([0.33, 1, 0.624]),
    SeaGreen2: fromRgb([0.305, 0.932, 0.58]),
    SeaGreen3: fromRgb([0.264, 0.804, 0.5]),
    SeaGreen4: fromRgb([0.18, 0.545, 0.34]),
    Seashell1: fromRgb([1, 0.96, 0.932]),
    Seashell2: fromRgb([0.932, 0.898, 0.87]),
    Seashell3: fromRgb([0.804, 0.772, 0.75]),
    Seashell4: fromRgb([0.545, 0.525, 0.51]),
    Sienna1: fromRgb([1, 0.51, 0.28]),
    Sienna2: fromRgb([0.932, 0.475, 0.26]),
    Sienna3: fromRgb([0.804, 0.408, 0.224]),
    Sienna4: fromRgb([0.545, 0.28, 0.15]),
    SkyBlue1: fromRgb([0.53, 0.808, 1]),
    SkyBlue2: fromRgb([0.494, 0.752, 0.932]),
    SkyBlue3: fromRgb([0.424, 0.65, 0.804]),
    SkyBlue4: fromRgb([0.29, 0.44, 0.545]),
    SlateBlue1: fromRgb([0.512, 0.435, 1]),
    SlateBlue2: fromRgb([0.48, 0.404, 0.932]),
    SlateBlue3: fromRgb([0.41, 0.35, 0.804]),
    SlateBlue4: fromRgb([0.28, 0.235, 0.545]),
    SlateGray1: fromRgb([0.776, 0.888, 1]),
    SlateGray2: fromRgb([0.725, 0.828, 0.932]),
    SlateGray3: fromRgb([0.624, 0.712, 0.804]),
    SlateGray4: fromRgb([0.424, 0.484, 0.545]),
    Snow1: fromRgb([1, 0.98, 0.98]),
    Snow2: fromRgb([0.932, 0.912, 0.912]),
    Snow3: fromRgb([0.804, 0.79, 0.79]),
    Snow4: fromRgb([0.545, 0.536, 0.536]),
    SpringGreen1: fromRgb([0, 1, 0.498]),
    SpringGreen2: fromRgb([0, 0.932, 0.464]),
    SpringGreen3: fromRgb([0, 0.804, 0.4]),
    SpringGreen4: fromRgb([0, 0.545, 0.27]),
    SteelBlue1: fromRgb([0.39, 0.72, 1]),
    SteelBlue2: fromRgb([0.36, 0.675, 0.932]),
    SteelBlue3: fromRgb([0.31, 0.58, 0.804]),
    SteelBlue4: fromRgb([0.21, 0.392, 0.545]),
    Tan1: fromRgb([1, 0.648, 0.31]),
    Tan2: fromRgb([0.932, 0.604, 0.288]),
    Tan3: fromRgb([0.804, 0.52, 0.248]),
    Tan4: fromRgb([0.545, 0.352, 0.17]),
    Thistle1: fromRgb([1, 0.884, 1]),
    Thistle2: fromRgb([0.932, 0.824, 0.932]),
    Thistle3: fromRgb([0.804, 0.71, 0.804]),
    Thistle4: fromRgb([0.545, 0.484, 0.545]),
    Tomato1: fromRgb([1, 0.39, 0.28]),
    Tomato2: fromRgb([0.932, 0.36, 0.26]),
    Tomato3: fromRgb([0.804, 0.31, 0.224]),
    Tomato4: fromRgb([0.545, 0.21, 0.15]),
    Turquoise1: fromRgb([0, 0.96, 1]),
    Turquoise2: fromRgb([0, 0.898, 0.932]),
    Turquoise3: fromRgb([0, 0.772, 0.804]),
    Turquoise4: fromRgb([0, 0.525, 0.545]),
    VioletRed1: fromRgb([1, 0.244, 0.59]),
    VioletRed2: fromRgb([0.932, 0.228, 0.55]),
    VioletRed3: fromRgb([0.804, 0.196, 0.47]),
    VioletRed4: fromRgb([0.545, 0.132, 0.32]),
    Wheat1: fromRgb([1, 0.905, 0.73]),
    Wheat2: fromRgb([0.932, 0.848, 0.684]),
    Wheat3: fromRgb([0.804, 0.73, 0.59]),
    Wheat4: fromRgb([0.545, 0.494, 0.4]),
    Yellow1: fromRgb([1, 1, 0]),
    Yellow2: fromRgb([0.932, 0.932, 0]),
    Yellow3: fromRgb([0.804, 0.804, 0]),
    Yellow4: fromRgb([0.545, 0.545, 0]),
    Gray0: fromRgb([0.745, 0.745, 0.745]),
    Green0: fromRgb([0, 1, 0]),
    Grey0: fromRgb([0.745, 0.745, 0.745]),
    Maroon0: fromRgb([0.69, 0.19, 0.376]),
    Purple0: fromRgb([0.628, 0.125, 0.94]),
};


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/print-raw.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/print-raw.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/**
 * Print an `xcolor` argument specification AST to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    if (node.type === "invalid_spec") {
        return node.content;
    }
    switch (node.type) {
        case "postfix":
            if (node.plusses != null) {
                return `!!${node.plusses}`;
            }
            else {
                return `!![${node.num}]`;
            }
        case "complete_mix":
            return `!${node.mix_percent}!${node.name}`;
        case "partial_mix":
            return `!${node.mix_percent}`;
        case "expr":
            return `${node.prefix || ""}${node.name}${node.mix_expr
                .map((mix) => printRaw(mix))
                .join("")}${node.postfix ? printRaw(node.postfix) : ""}`;
        case "weighted_expr":
            return `${printRaw(node.color)},${node.weight}`;
        case "extended_expr":
            let prefix = node.core_model;
            if (node.div) {
                prefix += `,${node.div}`;
            }
            return `${prefix}:${node.expressions
                .map((expr) => printRaw(expr))
                .join(";")}`;
        case "function":
            return `>${node.name},${node.args.map((a) => "" + a).join(",")}`;
        case "color":
            return (printRaw(node.color) +
                node.functions.map((f) => printRaw(f)).join(""));
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/types.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/types.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts":
/*!***********************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xcolorMacroToHex": () => (/* binding */ xcolorMacroToHex)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _xcolor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xcolor */ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts");
/* harmony import */ var _structured_clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../structured-clone */ "./structured-clone/index.ts");
/* harmony import */ var _unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../unified-latex-util-comments */ "./unified-latex-util-comments/index.ts");





/**
 * Compute the hex representation of a color specified by an xcolor color command.
 * For example `\color[rgb]{1 .5 .5}` or `\textcolor{red}{foo}`. If the color cannot be parsed,
 * `null` is returned for the hex value. In all cases a css variable name (prefixed with "--"")
 * is returned. This can be used to set up CSS for custom colors.
 */
function xcolorMacroToHex(node) {
    // We do some destructive operations on the node, so clone it first.
    node = (0,_structured_clone__WEBPACK_IMPORTED_MODULE_3__.structuredClone)(node);
    (0,_unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_4__.deleteComments)(node);
    // We assume the node has signature "o m" where o is the model and
    // m is the color spec.
    const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_0__.getArgsContent)(node);
    const model = args[0] && (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(args[0]);
    const colorStr = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(args[1] || []);
    let hex = null;
    try {
        hex = (0,_xcolor__WEBPACK_IMPORTED_MODULE_2__.xcolorColorToHex)(colorStr, model);
    }
    catch (e) { }
    const cssVarName = "--" + colorStr.replace(/[^a-zA-Z0-9-_]/g, "-");
    return { hex, cssVarName };
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/xcolor.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PREDEFINED_XCOLOR_COLORS": () => (/* binding */ PREDEFINED_XCOLOR_COLORS),
/* harmony export */   "XColorCoreModelToColor": () => (/* binding */ XColorCoreModelToColor),
/* harmony export */   "computeColor": () => (/* binding */ computeColor),
/* harmony export */   "xcolorColorToHex": () => (/* binding */ xcolorColorToHex)
/* harmony export */ });
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! color */ "../../node_modules/color/index.js");
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _predefined_colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./predefined-colors */ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./unified-latex-ctan/package/xcolor/libs/parser.ts");



const CORE_MODELS = new Set(["rgb", "cmy", "cmyk", "hsb", "gray"]);
const XColorCoreModelToColor = {
    rgb: ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([r * 255, g * 255, b * 255], "rgb"),
    cmy: ([c, m, y]) => XColorCoreModelToColor.rgb([1 - c, 1 - m, 1 - y]),
    cmyk: ([c, m, y, k]) => color__WEBPACK_IMPORTED_MODULE_2___default()([c * 255, m * 255, y * 255, k * 100], "cmyk"),
    hsb: ([h, s, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([h * 360, s * 100, b * 100], "hsv"),
    gray: ([v]) => color__WEBPACK_IMPORTED_MODULE_2___default()([v * 255, v * 255, v * 255], "rgb"),
};
const XColorModelToColor = Object.assign({ wave: ([lambda]) => {
        // Constants according to the xcolor readme
        const gamma = 0.8;
        let baseRgb = [0, 0, 0];
        if (380 <= lambda && lambda < 440) {
            baseRgb = [(440 - lambda) / (440 - 380), 0, 1];
        }
        if (440 <= lambda && lambda < 490) {
            baseRgb = [0, (lambda - 440) / (490 - 440), 1];
        }
        if (490 <= lambda && lambda < 510) {
            baseRgb = [0, 1, (510 - lambda) / (510 - 490)];
        }
        if (510 <= lambda && lambda < 580) {
            baseRgb = [(lambda - 510) / (580 - 510), 1, 0];
        }
        if (580 <= lambda && lambda < 6450) {
            baseRgb = [1, (645 - lambda) / (645 - 580), 0];
        }
        if (645 <= lambda && lambda <= 780) {
            baseRgb = [1, 0, 0];
        }
        let f = 1.0;
        if (380 <= lambda && 420 < lambda) {
            f = 0.3 + (0.7 * (lambda - 380)) / (420 - 380);
        }
        if (700 < lambda && lambda <= 780) {
            f = 0.3 + (0.7 * (780 - lambda)) / (780 - 700);
        }
        const rgb = [
            Math.pow(baseRgb[0] * f, gamma),
            Math.pow(baseRgb[1] * f, gamma),
            Math.pow(baseRgb[2] * f, gamma),
        ];
        return color__WEBPACK_IMPORTED_MODULE_2___default()([rgb[0] * 255, rgb[1] * 255, rgb[2] * 255], "rgb");
    }, Hsb: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 360, s, b]), HSB: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 240, s / 240, b / 240]), HTML: ([v]) => (v.startsWith("#") ? color__WEBPACK_IMPORTED_MODULE_2___default()(v) : color__WEBPACK_IMPORTED_MODULE_2___default()(`#${v}`)), RGB: ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([r, g, b], "rgb"), Gray: ([v]) => XColorCoreModelToColor.gray([v / 15]) }, XColorCoreModelToColor);
const ColorToXColorModel = {
    rgb: (color) => color
        .rgb()
        .array()
        .map((v) => v / 255),
    cmy: (color) => [255 - color.red(), 255 - color.green(), 255 - color.blue()].map((v) => v / 255),
    cmyk: (color) => color
        .cmyk()
        .array()
        // The k component goes from 0-100
        .map((v, i) => (i === 3 ? v / 100 : v / 255)),
    hsb: (color) => [
        color.hue() / 360,
        color.saturationv() / 100,
        color.value() / 100,
    ],
    gray: (color) => [color.gray() / 100],
};
const PREDEFINED_XCOLOR_COLORS = Object.assign(Object.assign(Object.assign({ 
    // Core colors
    red: XColorCoreModelToColor.rgb([1, 0, 0]), green: XColorCoreModelToColor.rgb([0, 1, 0]), blue: XColorCoreModelToColor.rgb([0, 0, 1]), brown: XColorCoreModelToColor.rgb([0.75, 0.5, 0.25]), lime: XColorCoreModelToColor.rgb([0.75, 1, 0]), orange: XColorCoreModelToColor.rgb([1, 0.5, 0]), pink: XColorCoreModelToColor.rgb([1, 0.75, 0.75]), purple: XColorCoreModelToColor.rgb([0.75, 0, 0.25]), teal: XColorCoreModelToColor.rgb([0, 0.5, 0.5]), violet: XColorCoreModelToColor.rgb([0.5, 0, 0.5]), cyan: XColorCoreModelToColor.rgb([0, 1, 1]), magenta: XColorCoreModelToColor.rgb([1, 0, 1]), yellow: XColorCoreModelToColor.rgb([1, 1, 0]), olive: XColorCoreModelToColor.rgb([0.5, 0.5, 0]), black: XColorCoreModelToColor.rgb([0, 0, 0]), darkgray: XColorCoreModelToColor.rgb([0.25, 0.25, 0.25]), gray: XColorCoreModelToColor.rgb([0.5, 0.5, 0.5]), lightgray: XColorCoreModelToColor.rgb([0.75, 0.75, 0.75]), white: XColorCoreModelToColor.rgb([1, 1, 1]) }, _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.DVI_PS_NAMES), _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.SVG_NAMES), _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.X11_NAMES);
function scalarMul(scalar, vec) {
    return vec.map((v) => scalar * v);
}
function addVectors(...vecs) {
    return vecs.reduce((prev, current) => prev.map((v, i) => v + current[i]));
}
/**
 * Mix a color in color model `model` as per the algorithm in 2.3.3 of the xcolor manual.
 */
function mixInModel(model, colorsAndCoefficients) {
    if (!CORE_MODELS.has(model)) {
        throw new Error(`Cannot mix colors in model "${model}"; only core modes ${Array.from(CORE_MODELS).join(", ")} are supported`);
    }
    const toModel = ColorToXColorModel[model];
    const fromModel = XColorCoreModelToColor[model];
    const mixed = addVectors(...colorsAndCoefficients.map(([v, color]) => {
        const colorInModel = toModel(color);
        return scalarMul(v, colorInModel);
    }));
    return fromModel(mixed);
}
/**
 * Given a parsed `XColor`, compute the color and return a `Color` object
 * (that can be used in CSS, for example).
 */
function computeColor(expr, predefinedColors = {}) {
    if (expr.type !== "color") {
        throw new Error(`Can only compute the color of a "color" expression, not one of type ${expr.type}`);
    }
    const knownColors = Object.assign(Object.assign({}, PREDEFINED_XCOLOR_COLORS), predefinedColors);
    function getColor(name) {
        if (!knownColors[name]) {
            throw new Error(`Unknown color "${name}"`);
        }
        return knownColors[name];
    }
    const color = expr.color;
    let computedColor = color__WEBPACK_IMPORTED_MODULE_2___default()("#000000");
    if (color.type === "expr") {
        // From the algorithm in 2.3.2 of the xcolor manual
        // TODO: the suffix `!![num]` is not yet implemented.
        let base = getColor(color.name);
        for (const mix of color.mix_expr) {
            if (mix.type === "complete_mix") {
                const mixColor = getColor(mix.name);
                base = base.mix(mixColor, 1 - mix.mix_percent / 100);
            }
            else if (mix.type === "partial_mix") {
                base = base.mix(color__WEBPACK_IMPORTED_MODULE_2___default()("#FFFFFF"), 1 - mix.mix_percent / 100);
            }
        }
        if (color.prefix && color.prefix.length % 2 === 1) {
            base = base.rotate(180);
        }
        computedColor = base;
    }
    if (color.type === "extended_expr") {
        const model = color.core_model;
        const div = color.div ||
            color.expressions.reduce((a, expr) => a + expr.weight, 0);
        if (div <= 0) {
            throw new Error(`Cannot mix color with ratios that have a denominator of ${div}`);
        }
        const colorsToMix = color.expressions.map((expr) => [
            expr.weight / div,
            computeColor({
                type: "color",
                color: expr.color,
                functions: [],
            }),
        ]);
        computedColor = mixInModel(model, colorsToMix);
    }
    // Now we apply any color functions
    for (const func of expr.functions) {
        if (func.name === "wheel") {
            const angle = func.args[0];
            const circ = func.args[1] || 360;
            computedColor = computedColor.rotate((angle / circ) * 360);
        }
        if (func.name === "twheel") {
            // This function depends on the definition of \rangetHsb, which we
            // don't actually know, so we just use it's default, which is to
            // add a 60 deg. angle to everything. I think...
            const angle = func.args[0];
            const circ = func.args[1] || 360;
            computedColor = computedColor.rotate((angle / circ) * 360 + 60);
        }
    }
    return computedColor;
}
/**
 * Convert the xcolor defined color to RGB Hex representation.
 * If the color is unknown or cannot be computed, `null` is returned.
 *
 * If `model` is supplied,
 *
 * The most likely reason a color will be `null` is if the color is defined
 * using a pre-defined color that wasn't supplied as an argument.
 */
function xcolorColorToHex(color, model, options = { predefinedColors: {} }) {
    const { predefinedColors = {} } = options;
    const parsed = (0,_parser__WEBPACK_IMPORTED_MODULE_1__.parse)(color);
    // If a model was entered, the corresponding color was directly entered without
    // mixing, unless the parsed type was "color". This would through an error in `xcolor`,
    // but we won't error.
    if (model && model !== "default" && parsed.type !== "color") {
        if (!(model in XColorModelToColor)) {
            throw new Error(`Unknown color model "${model}"; known models are ${Object.keys(XColorModelToColor).join(", ")}`);
        }
        if (parsed.type !== "hex_spec" && parsed.type !== "num_spec") {
            throw new Error(`Cannot use model ${model} to compute the color "${color}"`);
        }
        if (model === "HTML" && parsed.type === "hex_spec") {
            return XColorModelToColor.HTML(parsed.content).hex();
        }
        else if (parsed.type === "num_spec") {
            return XColorModelToColor[model](parsed.content).hex();
        }
        throw new Error(`Don't know how to process color "${color}" in model "${model}"`);
    }
    if (Array.isArray(parsed) || parsed.type !== "color") {
        throw new Error(`Cannot the color "${color}" is not a valid color string`);
    }
    let computed = null;
    try {
        computed = computeColor(parsed, predefinedColors);
    }
    catch (e) { }
    return computed && computed.hex();
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/provides.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/provides.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    substitutecolormodel: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    selectcolormodel: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    definecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    providecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    colorlet: {
        signature: "o m o m",
        renderInfo: { breakAround: true },
    },
    definecolorset: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    providecolorset: {
        signature: "o m m m m",
        renderInfo: { breakAround: true },
    },
    preparecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    preparecolorset: {
        signature: "o m m m m",
        renderInfo: { breakAround: true },
    },
    DefineNamedColor: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    definecolors: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    providecolors: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    color: { signature: "o m", renderInfo: { breakAround: true } },
    textcolor: { signature: "o m m", renderInfo: { inParMode: true } },
    pagecolor: { signature: "o m" },
    colorbox: { signature: "o m m" },
    fcolorbox: { signature: "o m o m m" },
    boxframe: { signature: "o m" },
    testcolor: { signature: "o m" },
    blendcolors: { signature: "s m" },
    maskcolors: { signature: "o m" },
    definecolorseries: {
        signature: "m m m o m o m",
        renderInfo: { breakAround: true },
    },
    resetcolorseries: {
        signature: "o m",
        renderInfo: { breakAround: true },
    },
    rowcolors: { signature: "s o m m m" },
    extractcolorspec: { signature: "m m" },
    extractcolorspecs: { signature: "m m m" },
    convertcolorspec: { signature: "m m m m" },
};
const environments = {
    testcolors: { signature: "o", renderInfo: { pgfkeysArgs: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/xparse/index.ts":
/*!****************************************************!*\
  !*** ./unified-latex-ctan/package/xparse/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/xparse/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/xparse/provides.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/xparse/provides.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    NewDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RenewDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    ProvideDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclareDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    NewDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    RenewDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    ProvideDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    DeclareDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    NewExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RenewExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    ProvideExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclareExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RequirePackage: {
        signature: "o m",
        renderInfo: { pgfkeysArgs: true, breakAround: true },
    },
    DeclareOption: { signature: "m m", renderInfo: { breakAround: true } },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/utils/enumerate.ts":
/*!***********************************************!*\
  !*** ./unified-latex-ctan/utils/enumerate.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cleanEnumerateBody": () => (/* binding */ cleanEnumerateBody)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-split */ "./unified-latex-util-split/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");




/**
 * Clean up any whitespace issues in an enumerate environment. In particular,
 *      * Remove any leading or ending whitespace
 *      * Ensure there is a par between occurrences of `\item`
 *      * Ensure there is whitespace after each occurrence of `\item` provided there is content there
 * `itemName` can be used to set what the "item" macro is called.
 *
 * This function attaches content following a `\item` to the `\item` macro with
 * `openMark` and `closeMark` set to empty. This allows hanging-indents to be rendered.
 */
function cleanEnumerateBody(ast, itemName = "item") {
    let { segments, macros } = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__.splitOnMacro)(ast, itemName);
    // Trim the content of each block, but make sure there is a space
    // between each macro and the content. Since the first segment of content
    // appears *before* any macro, don't add a space there.
    for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__.trim)(segment);
        // The very first segment comes before any `\item` macros. It is either
        // blank or contains comments (or is invalid LaTeX). We don't insert a space
        // in this case.
        if (segment.length > 0 && i > 0) {
            segment.unshift({ type: "whitespace" });
        }
    }
    // We want a trailing indent for the `\item` nodes. We will
    // do this with a trick: we will add an argument to the index node
    // with openMark=" " and closeMark=""
    let body = macros.map((node, i) => {
        const segment = segments[i + 1];
        node.args = node.args || [];
        node.args.push((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(segment, { openMark: "", closeMark: "" }));
        (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__.updateRenderInfo)(node, { inParMode: true });
        return node;
    });
    // We want a parbreak between each `\item` block and the preceding
    // content. We may or may not start with content, so act accordingly
    if (segments[0].length === 0) {
        body = body.flatMap((macro, i) => i === 0 ? macro : [{ type: "parbreak" }, macro]);
    }
    else {
        body = body.flatMap((macro) => [{ type: "parbreak" }, macro]);
    }
    body.unshift(...segments[0]);
    return body;
}


/***/ }),

/***/ "./unified-latex-html-like/index.ts":
/*!******************************************!*\
  !*** ./unified-latex-html-like/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extractFromHtmlLike": () => (/* reexport safe */ _libs_extractors__WEBPACK_IMPORTED_MODULE_1__.extractFromHtmlLike),
/* harmony export */   "htmlLike": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.htmlLike),
/* harmony export */   "isHtmlLike": () => (/* reexport safe */ _libs_extractors__WEBPACK_IMPORTED_MODULE_1__.isHtmlLike),
/* harmony export */   "isHtmlLikeAttribute": () => (/* reexport safe */ _libs_extractors__WEBPACK_IMPORTED_MODULE_1__.isHtmlLikeAttribute),
/* harmony export */   "isHtmlLikeTag": () => (/* reexport safe */ _libs_extractors__WEBPACK_IMPORTED_MODULE_1__.isHtmlLikeTag)
/* harmony export */ });
/* harmony import */ var _libs_builders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/builders */ "./unified-latex-html-like/libs/builders.ts");
/* harmony import */ var _libs_extractors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/extractors */ "./unified-latex-html-like/libs/extractors.ts");


// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help with making html-like nodes in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * For example, `<p>foo</p>` can be stored as `\html-tag:p{foo}` in `unified-latex`. Because `-` and `:`
 * are special characters, they cannot appear in a macro name, so there is no risk of name conflicts.
 * These macros are created programmatically, so special characters can be inserted.
 *
 * ## When should I use this?
 *
 * If you are converting LaTeX to HTML, these functions may be used as an intermediate format.
 *
 */


/***/ }),

/***/ "./unified-latex-html-like/libs/builders.ts":
/*!**************************************************!*\
  !*** ./unified-latex-html-like/libs/builders.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlLike": () => (/* binding */ htmlLike)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _mangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mangle */ "./unified-latex-html-like/libs/mangle.ts");


/**
 * Make an html-like node storing `content`. The node is a macro and `content` as well
 * as any attributes can be extracted or further processed. Collisions are avoided with existing
 * macros because all macros are prefixed with `html-tag:` or `html-attribute:`, which contain
 * special characters that normal macros cannot have.
 */
function htmlLike({ tag, content, attributes, }) {
    if (!content) {
        content = [];
    }
    if (content && !Array.isArray(content)) {
        content = [content];
    }
    attributes = attributes || {};
    const attrs = Object.entries(attributes).map(([name, value]) => {
        value = JSON.stringify(value);
        return (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)((0,_mangle__WEBPACK_IMPORTED_MODULE_1__.attributeName)(name), (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(value));
    });
    return (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)((0,_mangle__WEBPACK_IMPORTED_MODULE_1__.tagName)(tag), (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(attrs.concat(content)));
}


/***/ }),

/***/ "./unified-latex-html-like/libs/extractors.ts":
/*!****************************************************!*\
  !*** ./unified-latex-html-like/libs/extractors.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extractFromHtmlLike": () => (/* binding */ extractFromHtmlLike),
/* harmony export */   "isHtmlLike": () => (/* binding */ isHtmlLike),
/* harmony export */   "isHtmlLikeAttribute": () => (/* binding */ isHtmlLikeAttribute),
/* harmony export */   "isHtmlLikeTag": () => (/* binding */ isHtmlLikeTag)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _mangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mangle */ "./unified-latex-html-like/libs/mangle.ts");



/**
 * Extract the contents/attributes/tag from an html-like macro.
 */
function extractFromHtmlLike(macro) {
    if (!isHtmlLikeTag(macro)) {
        throw new Error("Attempting to extract html contents from a node that is not html-like.");
    }
    const args = macro.args || [];
    if (args.length > 1) {
        throw new Error(`html-like macros should have 0 or 1 args, but ${args.length} found`);
    }
    const argContent = args.length > 0 ? args[0].content : [];
    const tag = (0,_mangle__WEBPACK_IMPORTED_MODULE_2__.getTagNameFromString)(macro.content);
    const attributes = {};
    let i = 0;
    for (; i < argContent.length; i++) {
        const node = argContent[i];
        if (isHtmlLikeAttribute(node)) {
            const attrName = (0,_mangle__WEBPACK_IMPORTED_MODULE_2__.getAttributeNameFromString)(node.content);
            let attrValue = true;
            if (node.args && node.args.length > 0) {
                attrValue = JSON.parse((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.args[0].content));
            }
            attributes[attrName] = attrValue;
            continue;
        }
        break;
    }
    return { tag, attributes, content: argContent.slice(i) };
}
/**
 * Determine whether the node is an html-like macro.
 */
function isHtmlLike(node) {
    return _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node) && node.content.startsWith("html-");
}
/**
 * Determine whether the node is an html-like macro for a tag.
 */
function isHtmlLikeTag(node) {
    return _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node) && node.content.startsWith("html-tag:");
}
/**
 * Determine whether the node is an html-like macro for an attribute.
 */
function isHtmlLikeAttribute(node) {
    return _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node) && node.content.startsWith("html-attr:");
}


/***/ }),

/***/ "./unified-latex-html-like/libs/mangle.ts":
/*!************************************************!*\
  !*** ./unified-latex-html-like/libs/mangle.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attributeName": () => (/* binding */ attributeName),
/* harmony export */   "getAttributeNameFromString": () => (/* binding */ getAttributeNameFromString),
/* harmony export */   "getTagNameFromString": () => (/* binding */ getTagNameFromString),
/* harmony export */   "tagName": () => (/* binding */ tagName)
/* harmony export */ });
/**
 * Convert `tag` into an escaped macro name.
 */
function tagName(tag) {
    return `html-tag:${tag}`;
}
/**
 * Convert `attribute` into an escaped macro name.
 */
function attributeName(attribute) {
    return `html-attr:${attribute}`;
}
/**
 * Extract a tag name from an escaped macro name.
 */
function getTagNameFromString(tagName) {
    const match = tagName.match(/:.*/);
    if (match) {
        return match[0].slice(1);
    }
    throw new Error(`Could not find tag name in ${tagName}`);
}
/**
 * Extract an attribute name from an escaped macro name.
 */
function getAttributeNameFromString(tagName) {
    const match = tagName.match(/:.*/);
    if (match) {
        return match[0].slice(1);
    }
    throw new Error(`Could not find attribute name in ${tagName}`);
}


/***/ }),

/***/ "./unified-latex-lint/rules/unified-latex-lint-no-tex-font-shaping-commands/index.ts":
/*!*******************************************************************************************!*\
  !*** ./unified-latex-lint/rules/unified-latex-lint-no-tex-font-shaping-commands/index.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DESCRIPTION": () => (/* binding */ DESCRIPTION),
/* harmony export */   "unifiedLatexLintNoTexFontShapingCommands": () => (/* binding */ unifiedLatexLintNoTexFontShapingCommands)
/* harmony export */ });
/* harmony import */ var unified_lint_rule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unified-lint-rule */ "../../node_modules/unified-lint-rule/lib/index.js");
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _utils_replace_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/replace-node */ "./unified-latex-lint/utils/replace-node.ts");






const REPLACEMENTS = {
    bf: "bfseries",
    it: "itshape",
    rm: "rmfamily",
    sc: "scshape",
    sf: "sffamily",
    sl: "slshape",
    tt: "ttfamily",
};
const isReplaceable = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createMacroMatcher(REPLACEMENTS);
const DESCRIPTION = `## Lint Rule

Avoid using TeX font changing commands like \\bf, \\it, etc. Prefer LaTeX \\bfseries, \\itshape, etc.. 

This rule flags any usage of \`${Object.keys(REPLACEMENTS)
    .map((r) => (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)(r)))
    .join("` `")}\`

### See

CTAN l2tabuen Section 2.`;
const unifiedLatexLintNoTexFontShapingCommands = (0,unified_lint_rule__WEBPACK_IMPORTED_MODULE_5__.lintRule)({ origin: "unified-latex-lint:no-tex-font-shaping-commands" }, (tree, file, options) => {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (node, info) => {
        const macroName = node.content;
        file.message(`Replace "${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node)}" with "${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)(REPLACEMENTS[macroName]))}"`, node);
        if (options === null || options === void 0 ? void 0 : options.fix) {
            (0,_utils_replace_node__WEBPACK_IMPORTED_MODULE_4__.replaceNodeDuringVisit)((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)(REPLACEMENTS[macroName]), info);
        }
    }, { test: isReplaceable });
});


/***/ }),

/***/ "./unified-latex-lint/utils/replace-node.ts":
/*!**************************************************!*\
  !*** ./unified-latex-lint/utils/replace-node.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNodeDuringVisit": () => (/* binding */ replaceNodeDuringVisit)
/* harmony export */ });
/**
 * Replaces the current node with `replacement`. It is assumed that the current
 * node is in an array that is a child of a parent element. If this is not the case,
 * the function will error.
 */
function replaceNodeDuringVisit(replacement, info) {
    const parent = info.parents[0];
    if (!parent) {
        throw new Error(`Cannot replace node: parent not found`);
    }
    const container = parent[info.key];
    if (!Array.isArray(container)) {
        throw new Error(`Cannot replace node: containing array not found`);
    }
    if (info.index == null) {
        throw new Error(`Cannot replace node: node index undefined`);
    }
    if (!Array.isArray(replacement)) {
        container[info.index] = replacement;
    }
    else {
        container.splice(info.index, 1, ...replacement);
    }
}


/***/ }),

/***/ "./unified-latex-prettier/index.ts":
/*!*****************************************!*\
  !*** ./unified-latex-prettier/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prettierPluginLatex": () => (/* reexport safe */ _libs_prettier_plugin_latex__WEBPACK_IMPORTED_MODULE_1__.prettierPluginLatex),
/* harmony export */   "printLatexAst": () => (/* reexport safe */ _libs_printer__WEBPACK_IMPORTED_MODULE_0__.printLatexAst),
/* harmony export */   "printer": () => (/* reexport safe */ _libs_printer__WEBPACK_IMPORTED_MODULE_0__.printer)
/* harmony export */ });
/* harmony import */ var _libs_printer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/printer */ "./unified-latex-prettier/libs/printer/index.ts");
/* harmony import */ var _libs_prettier_plugin_latex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/prettier-plugin-latex */ "./unified-latex-prettier/libs/prettier-plugin-latex.ts");


// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * A [Prettier](https://prettier.io/) plugin for formatting and pretty-printing LaTeX source code.
 *
 * ## When should I use this?
 *
 * If you want to construct a `Prettier` instance that has LaTeX parsing abilities.
 *
 * You should probably use the `prettier-plugin-latex` package instead of directly accessing this package.
 */


/***/ }),

/***/ "./unified-latex-prettier/libs/prettier-plugin-latex.ts":
/*!**************************************************************!*\
  !*** ./unified-latex-prettier/libs/prettier-plugin-latex.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prettierPluginLatex": () => (/* binding */ prettierPluginLatex)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-parse */ "./unified-latex-util-parse/index.ts");
/* harmony import */ var _printer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./printer */ "./unified-latex-prettier/libs/printer/index.ts");


const languages = [
    {
        name: "latex",
        extensions: [".tex"],
        parsers: ["latex-parser"],
    },
];
const parsers = {
    "latex-parser": {
        parse: _unified_latex_util_parse__WEBPACK_IMPORTED_MODULE_0__.parse,
        astFormat: "latex-ast",
        locStart: (node) => node.position ? node.position.start.offset : 0,
        locEnd: (node) => node.position ? node.position.end.offset : 1,
    },
};
const printers = {
    "latex-ast": {
        print: _printer__WEBPACK_IMPORTED_MODULE_1__.printLatexAst,
    },
};
const prettierPluginLatex = { languages, parsers, printers };



/***/ }),

/***/ "./unified-latex-prettier/libs/printer/argument.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/argument.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printArgument": () => (/* binding */ printArgument)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_pgfkeys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-util-pgfkeys */ "./unified-latex-util-pgfkeys/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");





function printArgument(path, print, options) {
    const node = path.getNode();
    const { renderInfo, previousNode, nextNode, referenceMap } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    const openMark = node.openMark;
    const closeMark = node.closeMark;
    let content = path.map(print, "content");
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatDocArray)(node.content, content, options);
    // if the last item is a comment, we need to insert a hardline
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_3__.match.comment(node.content[node.content.length - 1])) {
        content.push(_common__WEBPACK_IMPORTED_MODULE_0__.hardline);
    }
    const rawRet = [openMark, ...content, closeMark];
    if (referenceMap) {
        // Save the raw rendered data in case a renderer higher up
        // wants to unwrap it
        referenceMap.setRenderCache(node, rawRet);
    }
    if (path.getParentNode()) {
        const parentNode = path.getParentNode();
        const { renderInfo: parentRenderInfo } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(parentNode, options);
        if (parentRenderInfo.pgfkeysArgs) {
            const leadingComment = node.content.length > 0 &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_3__.match.comment(node.content[0]) &&
                node.content[0].sameline
                ? node.content[0]
                : null;
            const content = leadingComment
                ? node.content.slice(1)
                : node.content;
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_4__.trim)(content);
            return printPgfkeysArgument(content, {
                openMark: node.openMark,
                closeMark: node.closeMark,
                leadingComment,
            });
        }
    }
    return rawRet;
}
/**
 * Format a sequence of Pgfkeys key-value pairs. `nodes` will be parsed
 * by a grammar defining Pgfkeys
 *
 * @param {Ast.Node[]} nodes
 * @param {{ openMark: string; closeMark: string; leadingComment: Ast.Comment | null }} braces - A `leadingComment` is a comment that appears as the first item in the environment (e.g. `\pgfkeys{%comment\na,b,c}`)
 * @returns {Doc}
 */
function printPgfkeysArgument(nodes, braces) {
    const parsed = (0,_unified_latex_util_pgfkeys__WEBPACK_IMPORTED_MODULE_2__.parsePgfkeys)(nodes);
    const content = [];
    for (const part of parsed) {
        const isLastItem = part === parsed[parsed.length - 1];
        if (part.itemParts) {
            // parts are printed using `printRaw`, `hardline` is used in place
            // of "\n"
            const parts = part.itemParts.map((node) => (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node, { asArray: true }).map((token) => token === _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.linebreak ? _common__WEBPACK_IMPORTED_MODULE_0__.hardline : token));
            const row = (0,_common__WEBPACK_IMPORTED_MODULE_0__.join)("=", parts);
            content.push(row);
            if (part.trailingComma) {
                content.push(",");
            }
        }
        if (part.trailingComment) {
            const leadingContent = part.itemParts ? [" "] : [];
            if (part.leadingParbreak) {
                // We preserve parbreaks before comments, so if we have
                // one, insert an extra hardline
                leadingContent.push(_common__WEBPACK_IMPORTED_MODULE_0__.hardline);
            }
            content.push(...leadingContent, 
            // We're carefully and manually controlling the newlines,
            // so print the comment directly without any newlines
            "%", part.trailingComment.content, _common__WEBPACK_IMPORTED_MODULE_0__.breakParent);
        }
        if (!isLastItem) {
            content.push(_common__WEBPACK_IMPORTED_MODULE_0__.line);
        }
    }
    let leadingComment = [""];
    if (braces.leadingComment) {
        if (braces.leadingComment.leadingWhitespace) {
            leadingComment.push(" ");
        }
        leadingComment.push("%" + braces.leadingComment.content, _common__WEBPACK_IMPORTED_MODULE_0__.breakParent);
    }
    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.group)([
        braces.openMark,
        ...leadingComment,
        // If there is no content, we don't want to push an extra `softline`.
        // This matters because the braces group could still be broken by `leadingComment`
        content.length > 0 ? (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)([_common__WEBPACK_IMPORTED_MODULE_0__.softline, ...content]) : "",
        _common__WEBPACK_IMPORTED_MODULE_0__.softline,
        braces.closeMark,
    ]);
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/comment.ts":
/*!********************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/comment.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printComment": () => (/* binding */ printComment)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

function printComment(path, _print, _options) {
    const node = path.getNode();
    // If a comment is on the same line as other content and it has leading whitespace,
    // add a single whitespace token.
    let leadingWhitespace = "";
    if (node.leadingWhitespace && node.sameline) {
        leadingWhitespace = " ";
    }
    const content = [leadingWhitespace, "%" + (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)];
    return content;
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/common.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/common.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ESCAPE": () => (/* binding */ ESCAPE),
/* harmony export */   "breakParent": () => (/* binding */ breakParent),
/* harmony export */   "concat": () => (/* binding */ concat),
/* harmony export */   "fill": () => (/* binding */ fill),
/* harmony export */   "formatDocArray": () => (/* binding */ formatDocArray),
/* harmony export */   "formatEnvSurround": () => (/* binding */ formatEnvSurround),
/* harmony export */   "getNodeInfo": () => (/* binding */ getNodeInfo),
/* harmony export */   "group": () => (/* binding */ group),
/* harmony export */   "hardline": () => (/* binding */ hardline),
/* harmony export */   "ifBreak": () => (/* binding */ ifBreak),
/* harmony export */   "indent": () => (/* binding */ indent),
/* harmony export */   "join": () => (/* binding */ join),
/* harmony export */   "joinWithSoftline": () => (/* binding */ joinWithSoftline),
/* harmony export */   "line": () => (/* binding */ line),
/* harmony export */   "lineSuffix": () => (/* binding */ lineSuffix),
/* harmony export */   "lineSuffixBoundary": () => (/* binding */ lineSuffixBoundary),
/* harmony export */   "markAsRoot": () => (/* binding */ markAsRoot),
/* harmony export */   "softline": () => (/* binding */ softline)
/* harmony export */ });
/* harmony import */ var prettier_doc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prettier/doc */ "../../node_modules/prettier/doc.js");
/* harmony import */ var prettier_doc__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prettier_doc__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");



/**
 * Computes the environment name, start/end, and args.
 * E.g., for "\begin{x}abc\end{x}", it returns
 * ```
 * {
 *  envName: "x",
 *  start: "\\begin{x}",
 *  end: "\\end{x}",
 * }
 * ```
 *
 * @param {*} node
 * @returns
 */
function formatEnvSurround(node) {
    const env = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.env);
    return {
        envName: env,
        start: ESCAPE + "begin{" + env + "}",
        end: ESCAPE + "end{" + env + "}",
    };
}
/**
 * Join an array with `softline`. However, if a `line` is
 * found, do not insert an additional softline. For example
 * `[a, b, c]` -> `[a, softline, b, softline, c]`
 *
 * but
 *
 * `[a, line, b, c]` -> `[a, line, b, softline, c]`
 *
 * @param {*} arr
 * @returns
 */
function joinWithSoftline(arr) {
    if (arr.length === 0 || arr.length === 1) {
        return arr;
    }
    const ret = [arr[0]];
    for (let i = 1; i < arr.length; i++) {
        const prevNode = arr[i - 1];
        const nextNode = arr[i];
        if (nextNode.type !== "line" && prevNode.type !== "line") {
            ret.push(softline);
        }
        ret.push(nextNode);
    }
    return ret;
}
function getNodeInfo(node, options) {
    const renderInfo = node._renderInfo || {};
    const previousNode = options.referenceMap && options.referenceMap.getPreviousNode(node);
    const nextNode = options.referenceMap && options.referenceMap.getNextNode(node);
    const renderCache = options.referenceMap && options.referenceMap.getRenderCache(node);
    // It's useful to know whether we're the start or end node in an array,
    // so compute this information.
    return {
        renderInfo,
        renderCache,
        previousNode,
        nextNode,
        referenceMap: options.referenceMap,
    };
}
const ESCAPE = "\\";
// Commands to build the prettier syntax tree
const { concat, group, fill, ifBreak, line, softline, hardline, lineSuffix, lineSuffixBoundary, breakParent, indent, markAsRoot, join, } = prettier_doc__WEBPACK_IMPORTED_MODULE_0__.builders;
/**
 * Given an array of nodes and the corresponding printed versions, prepares
 * a final Doc array. This function does things like ensures there are `hardlines`
 * around environments and that there aren't excess hardlines at the start or end.
 * It also unwraps `inParMode` macro contents.
 *
 * @export
 * @param {Ast.Node[]} nodes
 * @param {Doc[]} docArray
 * @param {*} options
 * @returns {Doc[]}
 */
function formatDocArray(nodes, docArray, options) {
    const ret = [];
    for (let i = 0; i < nodes.length; i++) {
        const rawNode = nodes[i];
        const printedNode = docArray[i];
        const { renderInfo, referenceMap, previousNode, nextNode } = getNodeInfo(rawNode, options);
        const renderCache = referenceMap && referenceMap.getRenderCache(rawNode);
        switch (rawNode.type) {
            case "comment":
                // Comments don't insert hardlines themselves; they depend on appropriate
                // hardlines being inserted here.
                // This comment printer inserts hardlines after comments, so do not insert
                // a hardline before a comment if there is a comment right before.
                if (!rawNode.sameline &&
                    previousNode &&
                    !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.comment(previousNode) &&
                    !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.parbreak(previousNode)) {
                    ret.push(hardline);
                }
                ret.push(printedNode);
                if (nextNode && !rawNode.suffixParbreak) {
                    ret.push(hardline);
                }
                break;
            case "environment":
            case "displaymath":
            case "mathenv":
                // Environments always start on a new line (unless they are the first
                // item). Peek to see if there is a newline inserted already.
                if (previousNode && (previousNode === null || previousNode === void 0 ? void 0 : previousNode.type) !== "parbreak") {
                    if (ret[ret.length - 1] === line) {
                        // A preceding `line` should be converted into a `hardline`.
                        // Remove the line so a hardline can be added
                        ret.pop();
                    }
                    if (ret[ret.length - 1] !== hardline) {
                        ret.push(hardline);
                    }
                }
                ret.push(printedNode);
                // If an environment is followed by whitespace, replace it with a hardline
                // instead
                if ((nextNode === null || nextNode === void 0 ? void 0 : nextNode.type) === "whitespace") {
                    ret.push(hardline);
                    i++;
                }
                break;
            case "macro":
                if (renderInfo.breakBefore || renderInfo.breakAround) {
                    // Commands like \section{} should always be preceded by a hardline
                    if (previousNode) {
                        if (ret[ret.length - 1] === line ||
                            ret[ret.length - 1] === hardline) {
                            // We may be replacing a hardline here for no reason. However,
                            // if there is already a hardline, we don't want to continue
                            // and accidentally add too many linebreaks
                            ret.pop();
                            ret.push(hardline);
                        }
                        else if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.comment(previousNode) &&
                            !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.parbreak(previousNode)) {
                            ret.push(hardline);
                        }
                    }
                }
                // Macros marked as `inParMode` should be unwrapped
                // unless they have a hanging indent, in which case the macro
                // has already be wrapped in an `indent` block
                if (renderInfo.inParMode &&
                    !renderInfo.hangingIndent &&
                    renderCache) {
                    ret.push(renderCache.content, ...(renderCache.rawArgs || []));
                }
                else {
                    ret.push(printedNode);
                }
                if (renderInfo.breakAfter || renderInfo.breakAround) {
                    // Commands like \section{} should always be followed by a hardline
                    if (nextNode) {
                        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.whitespace(nextNode)) {
                            ret.push(hardline);
                            i++;
                        }
                        else if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.comment(nextNode)) {
                            ret.push(hardline);
                        }
                    }
                }
                break;
            case "parbreak":
                ret.push(hardline, hardline);
                break;
            default:
                ret.push(printedNode);
                break;
        }
    }
    return ret;
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/environment.ts":
/*!************************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/environment.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatAlignedContent": () => (/* binding */ formatAlignedContent),
/* harmony export */   "printAlignedEnvironment": () => (/* binding */ printAlignedEnvironment),
/* harmony export */   "printEnvironment": () => (/* binding */ printEnvironment),
/* harmony export */   "printVerbatimEnvironment": () => (/* binding */ printVerbatimEnvironment)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_align__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-util-align */ "./unified-latex-util-align/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");




function printVerbatimEnvironment(path, print, options) {
    const node = path.getNode();
    const env = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatEnvSurround)(node);
    return [env.start, node.content, env.end];
}
function printEnvironment(path, print, options) {
    const node = path.getNode();
    const { renderInfo, previousNode, nextNode, referenceMap } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    const args = node.args ? path.map(print, "args") : [];
    const env = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatEnvSurround)(node);
    let content = path.map(print, "content");
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatDocArray)(node.content, content, options);
    if (renderInfo.inMathMode) {
        content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.joinWithSoftline)(content);
    }
    // If we start with a comment on the same line as the environment
    // We should not insert a newline at the start of the environment body
    let bodyStartToken = [_common__WEBPACK_IMPORTED_MODULE_0__.hardline];
    if (node.content.length === 0 ||
        (node.content[0].type === "comment" && node.content[0].sameline)) {
        bodyStartToken.pop();
    }
    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.concat)([
        env.start,
        ...args,
        (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)((0,_common__WEBPACK_IMPORTED_MODULE_0__.fill)(bodyStartToken.concat(content))),
        _common__WEBPACK_IMPORTED_MODULE_0__.hardline,
        env.end,
    ]);
}
function printAlignedEnvironment(path, print, options) {
    const node = path.getNode();
    const { renderInfo, previousNode, nextNode, referenceMap } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    const args = node.args ? path.map(print, "args") : [];
    const env = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatEnvSurround)(node);
    // If an aligned environment starts with a same-line comment, we want
    // to ignore it. It will be printed by the environment itself.
    const leadingComment = node.content[0] &&
        node.content[0].type === "comment" &&
        node.content[0].sameline
        ? node.content[0]
        : null;
    const { rows, rowSeps, trailingComments } = formatAlignedContent(leadingComment ? node.content.slice(1) : node.content);
    const content = [];
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const rowSep = rowSeps[i];
        const trailingComment = trailingComments[i];
        // A row has
        // 1) Content
        // 2) (optional) rowSep (e.g., `\\`)
        // 3) (optional) comment
        // We want there to be exactly one space before the rowsep and exactly one space
        // before any comment.
        content.push(row);
        if (rowSep) {
            content.push((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(rowSep));
        }
        if (rowSep && trailingComment) {
            content.push(" ");
        }
        if (trailingComment) {
            content.push(["%", (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(trailingComment.content)]);
        }
        if (rowSep || trailingComment) {
            content.push(_common__WEBPACK_IMPORTED_MODULE_0__.hardline);
        }
    }
    // Make sure the last item is not a `hardline`.
    if (content[content.length - 1] === _common__WEBPACK_IMPORTED_MODULE_0__.hardline) {
        content.pop();
    }
    if (leadingComment) {
        content.unshift(leadingComment.leadingWhitespace ? " " : "", "%" + (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(leadingComment.content), _common__WEBPACK_IMPORTED_MODULE_0__.hardline);
        return [env.start, ...args, (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)(content), _common__WEBPACK_IMPORTED_MODULE_0__.hardline, env.end];
    }
    return [
        env.start,
        ...args,
        (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)([_common__WEBPACK_IMPORTED_MODULE_0__.hardline, ...content]),
        _common__WEBPACK_IMPORTED_MODULE_0__.hardline,
        env.end,
    ];
}
/**
 * Formats the content of an aligned/tabular environment's content.
 * Ensures the "&" delimiters all line up.
 *
 * @export
 * @param {[object]} nodes
 * @returns {{rows: [string], rowSeps: [object]}}
 */
function formatAlignedContent(nodes) {
    function getSpace(len = 1) {
        return " ".repeat(len);
    }
    const rows = (0,_unified_latex_util_align__WEBPACK_IMPORTED_MODULE_2__.parseAlignEnvironment)(nodes);
    // Find the number of columns
    const numCols = Math.max(...rows.map((r) => r.cells.length));
    const rowSeps = rows.map(({ rowSep }) => (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(rowSep || []));
    const trailingComments = rows.map(({ trailingComment }) => trailingComment);
    // Get the widths of each column.
    // Column widths will be the width of column contents plus the width
    // of the separator. This way, even multi-character separators
    // can be accommodated when rendering.
    const renderedRows = rows.map(({ cells, colSeps }) => ({
        cells: cells.map((nodes) => {
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__.trim)(nodes);
            return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(nodes);
        }),
        seps: colSeps.map((nodes) => (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(nodes)),
    }));
    const colWidths = [];
    for (let i = 0; i < numCols; i++) {
        colWidths.push(Math.max(...renderedRows.map(({ cells, seps }) => ((cells[i] || "") + (seps[i] || "")).length)));
    }
    const joinedRows = renderedRows.map(({ cells, seps }) => {
        if (cells.length === 1 && cells[0] === "") {
            return "";
        }
        let ret = "";
        for (let i = 0; i < cells.length; i++) {
            // There are at least as many cells as there are `seps`. Possibly one extra
            const width = colWidths[i] - (seps[i] || "").length;
            // Insert a space at the start so we don't run into the prior separator.
            // We'll trim this off in the end, in case it's not needed.
            ret +=
                (i === 0 ? "" : " ") +
                    cells[i] +
                    getSpace(width - cells[i].length + 1) +
                    (seps[i] || "");
        }
        return ret;
    });
    return { rows: joinedRows, rowSeps, trailingComments };
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printLatexAst": () => (/* reexport safe */ _printer__WEBPACK_IMPORTED_MODULE_0__.printLatexAst),
/* harmony export */   "printer": () => (/* reexport safe */ _printer__WEBPACK_IMPORTED_MODULE_0__.printLatexAst)
/* harmony export */ });
/* harmony import */ var _printer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./printer */ "./unified-latex-prettier/libs/printer/printer.ts");




/***/ }),

/***/ "./unified-latex-prettier/libs/printer/macro.ts":
/*!******************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/macro.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printMacro": () => (/* binding */ printMacro)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");
/* harmony import */ var _zip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../zip */ "./unified-latex-prettier/libs/zip.ts");


function printMacro(path, print, options) {
    const node = path.getNode();
    const { renderInfo, previousNode, nextNode, referenceMap } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    const content = (node.escapeToken != null ? node.escapeToken : _common__WEBPACK_IMPORTED_MODULE_0__.ESCAPE) + node.content;
    const args = node.args ? path.map(print, "args") : [];
    // Some of the arguments want to be printed "inline".
    // We loop through the arguments and unwrap the inline ones.
    const rawArgs = [];
    for (const [arg, printedArg] of (0,_zip__WEBPACK_IMPORTED_MODULE_1__.zip)(node.args || [], args)) {
        const renderCache = referenceMap && referenceMap.getRenderCache(arg);
        if (renderInfo.inParMode && renderCache) {
            rawArgs.push(...renderCache);
        }
        else {
            rawArgs.push(printedArg);
        }
    }
    if (referenceMap) {
        referenceMap.setRenderCache(node, { rawArgs, content });
    }
    if (renderInfo.hangingIndent) {
        return (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)((0,_common__WEBPACK_IMPORTED_MODULE_0__.fill)([content, ...rawArgs]));
    }
    return [content, ...rawArgs];
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/math.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/math.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printDisplayMath": () => (/* binding */ printDisplayMath),
/* harmony export */   "printInlineMath": () => (/* binding */ printInlineMath)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");

function printInlineMath(path, print, options) {
    const node = path.getNode();
    // Since `$$` starts display math mode (in plain TeX),
    // an empty inline math environment must be printed as `$ $`.
    // We special case this.
    if (node.content.length === 0) {
        // We won't allow an empty math environment to be broken
        return ["$", " ", "$"];
    }
    let content = path.map(print, "content");
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatDocArray)(node.content, content, options);
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.joinWithSoftline)(content);
    // If the last node is a comment, we need a linebreak before the closing `$`
    if (node.content[node.content.length - 1].type === "comment") {
        content.push(_common__WEBPACK_IMPORTED_MODULE_0__.hardline);
    }
    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.fill)(["$", ...content, "$"]);
}
function printDisplayMath(path, print, options) {
    const node = path.getNode();
    let content = path.map(print, "content");
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatDocArray)(node.content, content, options);
    content = (0,_common__WEBPACK_IMPORTED_MODULE_0__.joinWithSoftline)(content);
    // If we start with a comment on the same line as the environment
    // We should not insert a newline at the start of the environment body
    const bodyStartToken = [_common__WEBPACK_IMPORTED_MODULE_0__.hardline];
    if (node.content.length === 0 ||
        (node.content[0].type === "comment" && node.content[0].sameline)) {
        bodyStartToken.pop();
    }
    return [
        _common__WEBPACK_IMPORTED_MODULE_0__.ESCAPE + "[",
        (0,_common__WEBPACK_IMPORTED_MODULE_0__.indent)(bodyStartToken.concat(content)),
        _common__WEBPACK_IMPORTED_MODULE_0__.hardline,
        _common__WEBPACK_IMPORTED_MODULE_0__.ESCAPE + "]",
    ];
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/printer.ts":
/*!********************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/printer.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printLatexAst": () => (/* binding */ printLatexAst)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");
/* harmony import */ var _macro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./macro */ "./unified-latex-prettier/libs/printer/macro.ts");
/* harmony import */ var _argument__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./argument */ "./unified-latex-prettier/libs/printer/argument.ts");
/* harmony import */ var _root__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./root */ "./unified-latex-prettier/libs/printer/root.ts");
/* harmony import */ var _comment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comment */ "./unified-latex-prettier/libs/printer/comment.ts");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./math */ "./unified-latex-prettier/libs/printer/math.ts");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./environment */ "./unified-latex-prettier/libs/printer/environment.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _reference_map__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reference-map */ "./unified-latex-prettier/libs/reference-map.ts");









function printLatexAst(path, options, print) {
    const node = path.getValue();
    const { renderInfo } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    if (node == null) {
        return node;
    }
    if (typeof node === "string") {
        return node;
    }
    switch (node.type) {
        case "root":
            // Create the ReferenceMap from the root node, so that
            // it can traverse the entire AST
            if (options.referenceMap) {
                console.warn("Processing root node, but ReferenceMap already exists. Are there multiple nodes of type 'root'?");
            }
            options.referenceMap = new _reference_map__WEBPACK_IMPORTED_MODULE_8__.ReferenceMap(node);
            return (0,_root__WEBPACK_IMPORTED_MODULE_3__.printRoot)(path, print, options);
        case "argument":
            return (0,_argument__WEBPACK_IMPORTED_MODULE_2__.printArgument)(path, print, options);
        case "comment":
            return (0,_comment__WEBPACK_IMPORTED_MODULE_4__.printComment)(path, print, options);
        case "environment":
        case "mathenv":
            if (renderInfo.alignContent) {
                return (0,_environment__WEBPACK_IMPORTED_MODULE_6__.printAlignedEnvironment)(path, print, options);
            }
            return (0,_environment__WEBPACK_IMPORTED_MODULE_6__.printEnvironment)(path, print, options);
        case "displaymath":
            return (0,_math__WEBPACK_IMPORTED_MODULE_5__.printDisplayMath)(path, print, options);
        case "group":
            // When we print a group, we are conservative and do a raw print of its contents.
            // However, we want to use `linebreak`s instead of literal `\n` tokens.
            const content = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_7__.printRaw)(node.content, {
                asArray: true,
            }).map((token) => (token === _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_7__.linebreak ? _common__WEBPACK_IMPORTED_MODULE_0__.hardline : token));
            return ["{", ...content, "}"];
        case "inlinemath":
            return (0,_math__WEBPACK_IMPORTED_MODULE_5__.printInlineMath)(path, print, options);
        case "macro":
            return (0,_macro__WEBPACK_IMPORTED_MODULE_1__.printMacro)(path, print, options);
        case "parbreak":
            return [_common__WEBPACK_IMPORTED_MODULE_0__.hardline, _common__WEBPACK_IMPORTED_MODULE_0__.hardline];
        case "string":
            return node.content;
        case "verb":
            return [
                _common__WEBPACK_IMPORTED_MODULE_0__.ESCAPE,
                node.env,
                node.escape,
                (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_7__.printRaw)(node.content),
                node.escape,
            ];
        case "verbatim":
            return (0,_environment__WEBPACK_IMPORTED_MODULE_6__.printVerbatimEnvironment)(path, print, options);
        case "whitespace":
            return _common__WEBPACK_IMPORTED_MODULE_0__.line;
        default:
            console.warn("Printing unknown type", node);
            return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_7__.printRaw)(node);
    }
}


/***/ }),

/***/ "./unified-latex-prettier/libs/printer/root.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-prettier/libs/printer/root.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasPreambleCode": () => (/* binding */ hasPreambleCode),
/* harmony export */   "printRoot": () => (/* binding */ printRoot)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./unified-latex-prettier/libs/printer/common.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");


/**
 * Returns true if a `\documentclass` macro is detected,
 * which would indicate that the node list contains the preamble.
 *
 * @param {[object]} nodes
 */
function hasPreambleCode(nodes) {
    return nodes.some((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(node, "documentclass"));
}
function printRoot(path, print, options) {
    const node = path.getNode();
    const { renderInfo, previousNode, nextNode, referenceMap } = (0,_common__WEBPACK_IMPORTED_MODULE_0__.getNodeInfo)(node, options);
    const content = path.map(print, "content");
    const rawContent = (0,_common__WEBPACK_IMPORTED_MODULE_0__.formatDocArray)(node.content, content, options);
    const concatFunction = hasPreambleCode(node.content) ? (x) => x : _common__WEBPACK_IMPORTED_MODULE_0__.fill;
    return concatFunction(rawContent);
}


/***/ }),

/***/ "./unified-latex-prettier/libs/reference-map.ts":
/*!******************************************************!*\
  !*** ./unified-latex-prettier/libs/reference-map.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReferenceMap": () => (/* binding */ ReferenceMap)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");

/**
 * Generate a data structure that can be queried
 * for the next/previous node. This allows for "peeking"
 * during the rendering process.
 *
 * @class ReferenceMap
 */
class ReferenceMap {
    constructor(ast) {
        this.ast = ast;
        this.map = new Map();
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(this.ast, (nodeList) => {
            for (let i = 0; i < nodeList.length; i++) {
                this.map.set(nodeList[i], {
                    previous: nodeList[i - 1],
                    next: nodeList[i + 1],
                });
            }
        }, { includeArrays: true, test: Array.isArray });
    }
    /**
     * Associate render-specific data with this node. This data
     * will be overwritten if `setRenderCache` is called twice.
     *
     * @param {Ast.Ast} node
     * @param {*} data
     * @memberof ReferenceMap
     */
    setRenderCache(node, data) {
        const currData = this.map.get(node) || {};
        this.map.set(node, Object.assign(Object.assign({}, currData), { renderCache: data }));
    }
    /**
     * Retrieve data associated with `node` via `setRenderCache`
     *
     * @param {Ast.Ast} node
     * @returns {(object | undefined)}
     * @memberof ReferenceMap
     */
    getRenderCache(node) {
        var _a;
        return (_a = this.map.get(node)) === null || _a === void 0 ? void 0 : _a.renderCache;
    }
    getPreviousNode(node) {
        return (this.map.get(node) || {}).previous;
    }
    getNextNode(node) {
        return (this.map.get(node) || {}).next;
    }
}


/***/ }),

/***/ "./unified-latex-prettier/libs/zip.ts":
/*!********************************************!*\
  !*** ./unified-latex-prettier/libs/zip.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zip": () => (/* binding */ zip)
/* harmony export */ });
function zip(array1, array2) {
    const ret = [];
    const len = Math.min(array1.length, array2.length);
    for (let i = 0; i < len; i++) {
        ret.push([array1[i], array2[i]]);
    }
    return ret;
}


/***/ }),

/***/ "./unified-latex-to-hast/libs/convert-to-html.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-to-hast/libs/convert-to-html.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertToHtml": () => (/* binding */ convertToHtml)
/* harmony export */ });
/* harmony import */ var rehype_stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rehype-stringify */ "../../node_modules/rehype-stringify/lib/index.js");
/* harmony import */ var _unified_latex_util_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-parse */ "./unified-latex-util-parse/index.ts");
/* harmony import */ var _unified_latex_plugin_to_hast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unified-latex-plugin-to-hast */ "./unified-latex-to-hast/libs/unified-latex-plugin-to-hast.ts");



const processor = (0,_unified_latex_util_parse__WEBPACK_IMPORTED_MODULE_0__.processLatexViaUnified)()
    .use(_unified_latex_plugin_to_hast__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexToHast)
    .use(rehype_stringify__WEBPACK_IMPORTED_MODULE_2__["default"]);
/**
 * Convert the `unified-latex` AST `tree` into an HTML string. If you need
 * more precise control or further processing, consider using `unified`
 * directly with the `unifiedLatexToHast` plugin.
 *
 * For example,
 * ```
 * unified()
 *      .use(unifiedLatexToHast)
 *      .use(rehypeStringify)
 *      .processSync("\\LaTeX to convert")
 * ```
 */
function convertToHtml(tree) {
    if (!Array.isArray(tree) && tree.type !== "root") {
        tree = { type: "root", content: [tree] };
    }
    if (Array.isArray(tree)) {
        tree = { type: "root", content: tree };
    }
    const hast = processor.runSync(tree);
    return processor.stringify(hast);
}


/***/ }),

/***/ "./unified-latex-to-hast/libs/html-subs/to-hast.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-to-hast/libs/html-subs/to-hast.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toHast": () => (/* binding */ toHast),
/* harmony export */   "toHastWithLoggerFactory": () => (/* binding */ toHastWithLoggerFactory)
/* harmony export */ });
/* harmony import */ var hastscript__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hastscript */ "../../node_modules/hastscript/lib/html.js");
/* harmony import */ var _unified_latex_html_like__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-html-like */ "./unified-latex-html-like/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");



/**
 * Create a `toHast` function that will log by making a call to `logger`.
 */
function toHastWithLoggerFactory(logger) {
    /**
     * Convert Ast.Node to Hast nodes.
     */
    return function toHast(node) {
        // Because `isHtmlLikeTag` is a type guard, if we use it directly on
        // `node` here, then in the switch statement `node.type === "macro"` will be `never`.
        // We rename the variable to avoid this issue.
        const htmlNode = node;
        if ((0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_0__.isHtmlLikeTag)(htmlNode)) {
            const extracted = (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_0__.extractFromHtmlLike)(htmlNode);
            const attributes = extracted.attributes;
            return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)(extracted.tag, attributes, extracted.content.flatMap(toHast));
        }
        switch (node.type) {
            case "string":
                return {
                    type: "text",
                    value: node.content,
                    position: node.position,
                };
            case "comment":
                return {
                    type: "comment",
                    value: node.content,
                    position: node.position,
                };
            case "inlinemath":
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("span", { className: "inline-math" }, (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.content));
            case "mathenv":
            case "displaymath":
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("div", { className: "display-math" }, (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.content));
            case "verb":
            case "verbatim":
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("pre", { className: node.env }, node.content);
            case "whitespace":
                return { type: "text", value: " ", position: node.position };
            case "parbreak":
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("br");
            case "group":
                // Groups are just ignored.
                return node.content.flatMap(toHast);
            case "environment":
                logger(`Unknown environment when converting to HTML "${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.env)}"`, node);
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("div", { className: ["environment", (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.env)] }, node.content.flatMap(toHast));
            case "macro":
                logger(`Unknown environment when converting to HTML "${JSON.stringify(node)}"`, node);
                return (0,hastscript__WEBPACK_IMPORTED_MODULE_2__.h)("span", { className: ["macro", `macro-${node.content}`] }, (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.args || ""));
            case "root":
                return node.content.flatMap(toHast);
            default:
                throw new Error(`Unknown node type; cannot convert to HAST ${JSON.stringify(node)}`);
        }
    };
}
/**
 * Convert Ast.Node to Hast nodes.
 */
const toHast = toHastWithLoggerFactory(console.warn);


/***/ }),

/***/ "./unified-latex-to-hast/libs/pre-html-subs/environment-subs.ts":
/*!**********************************************************************!*\
  !*** ./unified-latex-to-hast/libs/pre-html-subs/environment-subs.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environmentReplacements": () => (/* binding */ environmentReplacements)
/* harmony export */ });
/* harmony import */ var cssesc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cssesc */ "../../node_modules/cssesc/cssesc.js");
/* harmony import */ var cssesc__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cssesc__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _unified_latex_ctan_package_tabularx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-ctan/package/tabularx */ "./unified-latex-ctan/package/tabularx/index.ts");
/* harmony import */ var _unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-html-like */ "./unified-latex-html-like/index.ts");
/* harmony import */ var _unified_latex_util_align__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../unified-latex-util-align */ "./unified-latex-util-align/index.ts");
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _wrap_pars__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../wrap-pars */ "./unified-latex-to-hast/libs/wrap-pars.ts");








function enumerateFactory(parentTag = "ol", className = "enumerate") {
    return function enumerateToHtml(env) {
        // The body of an enumerate has already been processed and all relevant parts have
        // been attached to \item macros as arguments.
        const items = env.content.filter((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_5__.match.macro(node, "item"));
        const content = items.flatMap((node) => {
            if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_5__.match.macro(node) || !node.args) {
                return [];
            }
            const attributes = {};
            // Figure out if there any manually-specified item labels. If there are,
            // we need to specify a custom list-style-type.
            // We test the open mark to see if an optional argument was actually supplied
            // (rather than testing if the arg's contents have length) because
            // typing `\item[]` is a common way to make a list item without a marker/bullet
            if (node.args[0].openMark === "[") {
                const formattedLabel = cssesc__WEBPACK_IMPORTED_MODULE_0___default()((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_6__.printRaw)(node.args[0].content));
                attributes.style = {
                    // Note the space after `formattedLabel`. That is on purpose!
                    "list-style-type": formattedLabel
                        ? `'${formattedLabel} '`
                        : "none",
                };
            }
            const body = node.args[1].content;
            return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({
                tag: "li",
                content: (0,_wrap_pars__WEBPACK_IMPORTED_MODULE_7__.wrapPars)(body),
                attributes,
            });
        });
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({
            tag: parentTag,
            attributes: { className },
            content,
        });
    };
}
function createCenteredElement(env) {
    return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({
        tag: "center",
        attributes: { className: "center" },
        content: env.content,
    });
}
function createTableFromTabular(env) {
    const tabularBody = (0,_unified_latex_util_align__WEBPACK_IMPORTED_MODULE_3__.parseAlignEnvironment)(env.content);
    const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_4__.getArgsContent)(env);
    let columnSpecs = [];
    try {
        columnSpecs = (0,_unified_latex_ctan_package_tabularx__WEBPACK_IMPORTED_MODULE_1__.parseTabularSpec)(args[1] || []);
    }
    catch (e) { }
    const tableBody = tabularBody.map((row) => {
        const content = row.cells.map((cell, i) => {
            const columnSpec = columnSpecs[i];
            const styles = {};
            if (columnSpec) {
                const { alignment } = columnSpec;
                if (alignment.alignment === "center") {
                    styles["text-align"] = "center";
                }
                if (alignment.alignment === "right") {
                    styles["text-align"] = "right";
                }
                if (columnSpec.pre_dividers.some((div) => div.type === "vert_divider")) {
                    styles["border-left"] = "1px solid";
                }
                if (columnSpec.post_dividers.some((div) => div.type === "vert_divider")) {
                    styles["border-right"] = "1px solid";
                }
            }
            return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)(Object.keys(styles).length > 0
                ? {
                    tag: "td",
                    content: cell,
                    attributes: { style: styles },
                }
                : {
                    tag: "td",
                    content: cell,
                });
        });
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({ tag: "tr", content });
    });
    return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({
        tag: "table",
        content: [
            (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_2__.htmlLike)({
                tag: "tbody",
                content: tableBody,
            }),
        ],
        attributes: { className: "tabular" },
    });
}
/**
 * Rules for replacing a macro with an html-like macro
 * that will render has html when printed.
 */
const environmentReplacements = {
    enumerate: enumerateFactory("ol"),
    itemize: enumerateFactory("ul", "itemize"),
    center: createCenteredElement,
    tabular: createTableFromTabular,
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/pre-html-subs/katex-subs.ts":
/*!****************************************************************!*\
  !*** ./unified-latex-to-hast/libs/pre-html-subs/katex-subs.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KATEX_SUPPORT": () => (/* binding */ KATEX_SUPPORT),
/* harmony export */   "attachNeededRenderInfo": () => (/* binding */ attachNeededRenderInfo),
/* harmony export */   "katexSpecificEnvironmentReplacements": () => (/* binding */ katexSpecificEnvironmentReplacements),
/* harmony export */   "katexSpecificMacroReplacements": () => (/* binding */ katexSpecificMacroReplacements)
/* harmony export */ });
/* harmony import */ var _unified_latex_ctan_package_systeme_libs_systeme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-ctan/package/systeme/libs/systeme */ "./unified-latex-ctan/package/systeme/libs/systeme.ts");
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _support_tables_katex_support_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../support-tables/katex-support.json */ "./support-tables/katex-support.json");



const LEFT = { type: "macro", content: "left" };
const RIGHT = { type: "macro", content: "right" };
const DEFAULT_LEFT_DELIM = { type: "macro", content: "{" };
const DEFAULT_RIGHT_DELIM = { type: "string", content: "." };
const katexSpecificMacroReplacements = {
    systeme: (node) => {
        var _a, _b;
        try {
            const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_1__.getArgsContent)(node);
            const whitelistedVariables = (args[1] || undefined);
            const equations = args[3] || [];
            const ret = (0,_unified_latex_ctan_package_systeme_libs_systeme__WEBPACK_IMPORTED_MODULE_0__.systemeContentsToArray)(equations, {
                properSpacing: false,
                whitelistedVariables,
            });
            // If we have information about the sysdelims, then apply them
            if ((_a = node._renderInfo) === null || _a === void 0 ? void 0 : _a.sysdelims) {
                const [frontDelim, backDelim] = (_b = node._renderInfo) === null || _b === void 0 ? void 0 : _b.sysdelims;
                return [LEFT, frontDelim, ret, RIGHT, backDelim];
            }
            return [LEFT, DEFAULT_LEFT_DELIM, ret, RIGHT, DEFAULT_RIGHT_DELIM];
        }
        catch (e) {
            return node;
        }
    },
    sysdelim: () => [],
};
function wrapInDisplayMath(ast) {
    const content = Array.isArray(ast) ? ast : [ast];
    return { type: "displaymath", content };
}
const katexSpecificEnvironmentReplacements = {
    // katex supports the align environments, but it will only render them
    // if you are already in math mode. Warning: these will produce invalid latex!
    align: wrapInDisplayMath,
    "align*": wrapInDisplayMath,
    alignat: wrapInDisplayMath,
    "alignat*": wrapInDisplayMath,
    equation: wrapInDisplayMath,
    "equation*": wrapInDisplayMath,
};
/**
 * Attach `renderInfo` needed for converting some macros into their
 * katex equivalents.
 */
function attachNeededRenderInfo(ast) {
    (0,_unified_latex_ctan_package_systeme_libs_systeme__WEBPACK_IMPORTED_MODULE_0__.attachSystemeSettingsAsRenderInfo)(ast);
}
const KATEX_SUPPORT = {
    macros: _support_tables_katex_support_json__WEBPACK_IMPORTED_MODULE_2__.KATEX_MACROS,
    environments: _support_tables_katex_support_json__WEBPACK_IMPORTED_MODULE_2__.KATEX_ENVIRONMENTS,
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/pre-html-subs/macro-subs.ts":
/*!****************************************************************!*\
  !*** ./unified-latex-to-hast/libs/pre-html-subs/macro-subs.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "macroReplacements": () => (/* binding */ macroReplacements)
/* harmony export */ });
/* harmony import */ var _unified_latex_ctan_package_xcolor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-ctan/package/xcolor */ "./unified-latex-ctan/package/xcolor/index.ts");
/* harmony import */ var _unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-html-like */ "./unified-latex-html-like/index.ts");
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");




/**
 * Factory function that generates html-like macros that wrap their contents.
 */
function factory(tag, attributes) {
    return (macro) => {
        if (!macro.args) {
            throw new Error(`Found macro to replace but couldn't find content ${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(macro)}`);
        }
        const content = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(macro)[0] || [];
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({ tag, content, attributes });
    };
}
function createHeading(tag) {
    return (macro) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(macro);
        const starred = !!args[0];
        const attributes = starred
            ? { className: "starred" }
            : {};
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag,
            content: args[2] || [],
            attributes,
        });
    };
}
const macroReplacements = {
    emph: factory("em", { className: "emph" }),
    textrm: factory("span", { className: "textrm" }),
    textsf: factory("span", { className: "textsf" }),
    texttt: factory("span", { className: "texttt" }),
    textsl: factory("span", { className: "textsl" }),
    textit: factory("i", { className: "textit" }),
    textbf: factory("b", { className: "textbf" }),
    underline: factory("span", { className: "underline" }),
    mbox: factory("span", { className: "mbox" }),
    part: createHeading("h1"),
    chapter: createHeading("h2"),
    section: createHeading("h3"),
    subsection: createHeading("h4"),
    subsubsection: createHeading("h5"),
    appendix: createHeading("h2"),
    smallskip: () => (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
        tag: "br",
        attributes: { className: "smallskip" },
    }),
    medskip: () => (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
        tag: "br",
        attributes: { className: "medskip" },
    }),
    bigskip: () => (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
        tag: "br",
        attributes: { className: "bigskip" },
    }),
    url: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        const url = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(args[0] || "#");
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag: "a",
            attributes: {
                className: "url",
                href: url,
            },
            content: [{ type: "string", content: url }],
        });
    },
    href: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        const url = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(args[1] || "#");
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag: "a",
            attributes: {
                className: "href",
                href: url,
            },
            content: args[2] || [],
        });
    },
    "\\": () => (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
        tag: "br",
        attributes: { className: "linebreak" },
    }),
    vspace: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag: "vspace",
            attributes: {
                className: "vspace",
                amount: (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(args[1] || []),
            },
            content: [],
        });
    },
    textcolor: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        const computedColor = (0,_unified_latex_ctan_package_xcolor__WEBPACK_IMPORTED_MODULE_0__.xcolorMacroToHex)(node);
        const color = computedColor.hex;
        if (color) {
            return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
                tag: "span",
                attributes: { style: `color: ${color};` },
                content: args[2] || [],
            });
        }
        else {
            // If we couldn't compute the color, it's probably a named
            // color that wasn't supplied. In this case, we fall back to a css variable
            return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
                tag: "span",
                attributes: {
                    style: `color: var(${computedColor.cssVarName});`,
                },
                content: args[2] || [],
            });
        }
    },
    textsize: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        const textSize = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(args[0] || []);
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag: "span",
            attributes: {
                className: `textsize-${textSize}`,
            },
            content: args[1] || [],
        });
    },
    makebox: (node) => {
        const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_2__.getArgsContent)(node);
        return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_1__.htmlLike)({
            tag: "span",
            attributes: {
                className: `latex-box`,
                style: "display: inline-block;",
            },
            content: args[3] || [],
        });
    },
    noindent: (node) => ({ type: "string", content: "" }),
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/pre-html-subs/streaming-command-subs.ts":
/*!****************************************************************************!*\
  !*** ./unified-latex-to-hast/libs/pre-html-subs/streaming-command-subs.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "streamingMacroReplacements": () => (/* binding */ streamingMacroReplacements)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _unified_latex_ctan_package_xcolor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-ctan/package/xcolor */ "./unified-latex-ctan/package/xcolor/index.ts");


/**
 * Factory function that generates a macro with bound arguments.
 *
 * e.g.
 * ```
 * factory("foo")("bar") -> `\foo{bar}`
 * ```
 *
 * ```
 * factory("foo", "baz")("bar") -> `\foo{baz}{bar}`
 * ```
 */
function factory(macroName, ...boundArgs) {
    return (content, originalCommand) => {
        return (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.m)(macroName, boundArgs.map((a) => (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(a)).concat((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(content)));
    };
}
const streamingMacroReplacements = {
    color: _unified_latex_ctan_package_xcolor__WEBPACK_IMPORTED_MODULE_1__.colorToTextcolorMacro,
    bfseries: factory("textbf"),
    itshape: factory("textit"),
    rmfamily: factory("textrm"),
    scshape: factory("textsc"),
    sffamily: factory("textsf"),
    slshape: factory("textsl"),
    ttfamily: factory("texttt"),
    Huge: factory("textsize", "Huge"),
    huge: factory("textsize", "huge"),
    LARGE: factory("textsize", "LARGE"),
    Large: factory("textsize", "Large"),
    large: factory("textsize", "large"),
    normalsize: factory("textsize", "normalsize"),
    small: factory("textsize", "small"),
    footnotesize: factory("textsize", "footnotesize"),
    scriptsize: factory("textsize", "scriptsize"),
    tiny: factory("textsize", "tiny"),
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/split-for-pars.ts":
/*!******************************************************!*\
  !*** ./unified-latex-to-hast/libs/split-for-pars.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitForPars": () => (/* binding */ splitForPars)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");


/**
 * Takes an array of nodes and splits it into chunks that should be wrapped
 * in HTML `<p>...</p>` tags, vs. not. By default environments are not wrapped
 * unless they are specified, and macros are included in a par unless they are excluded.
 *
 */
function splitForPars(nodes, options) {
    const ret = [];
    let currBody = [];
    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.trim)(nodes);
    const isParBreakingMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(options.macrosThatBreakPars);
    const isEnvThatShouldNotBreakPar = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createEnvironmentMatcher(options.environmentsThatDontBreakPars);
    /**
     * Push and clear the contents of `currBody` to the return array.
     * If there are any contents, it should be wrapped in an array.
     */
    function pushBody() {
        if (currBody.length > 0) {
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.trim)(currBody);
            ret.push({ content: currBody, wrapInPar: true });
            currBody = [];
        }
    }
    for (const node of nodes) {
        if (isParBreakingMacro(node)) {
            pushBody();
            ret.push({ content: [node], wrapInPar: false });
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyEnvironment(node) && !isEnvThatShouldNotBreakPar(node)) {
            pushBody();
            ret.push({ content: [node], wrapInPar: false });
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node, "par")) {
            pushBody();
            continue;
        }
        currBody.push(node);
    }
    pushBody();
    return ret;
}


/***/ }),

/***/ "./unified-latex-to-hast/libs/unified-latex-plugin-to-hast.ts":
/*!********************************************************************!*\
  !*** ./unified-latex-to-hast/libs/unified-latex-plugin-to-hast.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexToHast": () => (/* binding */ unifiedLatexToHast)
/* harmony export */ });
/* harmony import */ var hastscript__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hastscript */ "../../node_modules/hastscript/lib/html.js");
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unified */ "../../node_modules/unified/lib/index.js");
/* harmony import */ var _unified_latex_util_ligatures_libs_expand_unicode_ligatures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-ligatures/libs/expand-unicode-ligatures */ "./unified-latex-util-ligatures/libs/expand-unicode-ligatures.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _html_subs_to_hast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./html-subs/to-hast */ "./unified-latex-to-hast/libs/html-subs/to-hast.ts");
/* harmony import */ var _unified_latex_plugin_to_html_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./unified-latex-plugin-to-html-like */ "./unified-latex-to-hast/libs/unified-latex-plugin-to-html-like.ts");







/**
 * Unified plugin to convert a `unified-latex` AST into a `hast` AST.
 */
const unifiedLatexToHast = function unifiedLatexAttachMacroArguments(options) {
    return (tree, file) => {
        (0,unified__WEBPACK_IMPORTED_MODULE_5__.unified)().use(_unified_latex_plugin_to_html_like__WEBPACK_IMPORTED_MODULE_4__.unifiedLatexToHtmlLike).run(tree);
        // This should happen right before converting to HTML because macros like `\&` should
        // be expanded via html rules first (and not turned into their corresponding ligature directly)
        (0,_unified_latex_util_ligatures_libs_expand_unicode_ligatures__WEBPACK_IMPORTED_MODULE_0__.expandUnicodeLigatures)(tree);
        // If there is a \begin{document}...\end{document}, that's the only
        // content we want to convert.
        let content = tree.content;
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_2__.visit)(tree, (env) => {
            content = env.content;
        }, {
            test: ((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.environment(node, "document")),
        });
        const toHast = (0,_html_subs_to_hast__WEBPACK_IMPORTED_MODULE_3__.toHastWithLoggerFactory)(file.message.bind(file));
        let converted = toHast(tree);
        if (!Array.isArray(converted)) {
            converted = [converted];
        }
        // Wrap everything in a Hast.Root node
        const ret = (0,hastscript__WEBPACK_IMPORTED_MODULE_6__.h)();
        ret.children = converted;
        return ret;
    };
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/unified-latex-plugin-to-html-like.ts":
/*!*************************************************************************!*\
  !*** ./unified-latex-to-hast/libs/unified-latex-plugin-to-html-like.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexToHtmlLike": () => (/* binding */ unifiedLatexToHtmlLike)
/* harmony export */ });
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! unified */ "../../node_modules/unified/lib/index.js");
/* harmony import */ var _unified_latex_lint_rules_unified_latex_lint_no_tex_font_shaping_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-lint/rules/unified-latex-lint-no-tex-font-shaping-commands */ "./unified-latex-lint/rules/unified-latex-lint-no-tex-font-shaping-commands/index.ts");
/* harmony import */ var _unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-comments */ "./unified-latex-util-comments/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../unified-latex-util-replace */ "./unified-latex-util-replace/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _pre_html_subs_environment_subs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pre-html-subs/environment-subs */ "./unified-latex-to-hast/libs/pre-html-subs/environment-subs.ts");
/* harmony import */ var _pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pre-html-subs/katex-subs */ "./unified-latex-to-hast/libs/pre-html-subs/katex-subs.ts");
/* harmony import */ var _pre_html_subs_macro_subs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pre-html-subs/macro-subs */ "./unified-latex-to-hast/libs/pre-html-subs/macro-subs.ts");
/* harmony import */ var _pre_html_subs_streaming_command_subs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pre-html-subs/streaming-command-subs */ "./unified-latex-to-hast/libs/pre-html-subs/streaming-command-subs.ts");
/* harmony import */ var _unified_latex_wrap_pars__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unified-latex-wrap-pars */ "./unified-latex-to-hast/libs/unified-latex-wrap-pars.ts");












/**
 * Unified plugin to convert a `unified-latex` AST into an html-like AST. This replaces nodes
 * with html-like macros `\html-tag:p{...}`, etc. macros. It is a step along the way to converting to HTML.
 * **It is unlikely you want to use this plugin directly**.
 *
 * Note: this plugin only wraps paragraphs in `p` tags if there are multiple paragraphs. Otherwise it omits the <p> tags.
 */
const unifiedLatexToHtmlLike = function unifiedLatexToHtmlLike() {
    const isReplaceableMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createMacroMatcher(_pre_html_subs_macro_subs__WEBPACK_IMPORTED_MODULE_8__.macroReplacements);
    const isReplaceableEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createEnvironmentMatcher(_pre_html_subs_environment_subs__WEBPACK_IMPORTED_MODULE_6__.environmentReplacements);
    const isKatexMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createMacroMatcher(_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__.katexSpecificMacroReplacements);
    const isKatexEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createEnvironmentMatcher(_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__.katexSpecificEnvironmentReplacements);
    return (tree) => {
        // NOTE: These operations need to be done in a particular order.
        // We _could_ keep comments around in html, but that can complicate dealing with whitespace,
        // so we remove them.
        (0,_unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_1__.deleteComments)(tree);
        let processor = (0,unified__WEBPACK_IMPORTED_MODULE_11__.unified)()
            // Replace `\bf` etc. with `\bfseries`. Only the latter are auto-recognized streaming commands
            .use(_unified_latex_lint_rules_unified_latex_lint_no_tex_font_shaping_commands__WEBPACK_IMPORTED_MODULE_0__.unifiedLatexLintNoTexFontShapingCommands, { fix: true })
            .use(_unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_4__.unifiedLatexReplaceStreamingCommands, {
            replacers: _pre_html_subs_streaming_command_subs__WEBPACK_IMPORTED_MODULE_9__.streamingMacroReplacements,
        });
        // Must be done *after* streaming commands are replaced.
        // We only wrap PARs if we *need* to. That is, if the content contains multiple paragraphs
        if (shouldBeWrappedInPars(tree)) {
            processor = processor.use(_unified_latex_wrap_pars__WEBPACK_IMPORTED_MODULE_10__.unifiedLatexWrapPars);
        }
        processor.run(tree);
        // Replace text-mode macros
        (0,_unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_4__.replaceNode)(tree, (node, context) => {
            // Children of math-mode are rendered by KaTeX/MathJax and so we shouldn't touch them!
            if (context.hasMathModeAncestor) {
                return;
            }
            if (isReplaceableMacro(node)) {
                return _pre_html_subs_macro_subs__WEBPACK_IMPORTED_MODULE_8__.macroReplacements[node.content](node);
            }
            if (isReplaceableEnvironment(node)) {
                return _pre_html_subs_environment_subs__WEBPACK_IMPORTED_MODULE_6__.environmentReplacements[(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(node.env)](node);
            }
        });
        // Replace math-mode macros for appropriate KaTeX rendering
        (0,_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__.attachNeededRenderInfo)(tree);
        (0,_unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_4__.replaceNode)(tree, (node) => {
            if (isKatexMacro(node)) {
                return _pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__.katexSpecificMacroReplacements[node.content](node);
            }
            if (isKatexEnvironment(node)) {
                return _pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_7__.katexSpecificEnvironmentReplacements[(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(node.env)](node);
            }
        });
    };
};
/**
 * Does the content contain multiple paragraphs? If so, it should be wrapped in `p` tags.
 */
function shouldBeWrappedInPars(tree) {
    let content = tree.content;
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_5__.visit)(tree, (env) => {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.anyEnvironment(env)) {
            content = env.content;
        }
    }, { test: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.environment(node, "document") });
    return content.some((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.parbreak(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.macro(node, "par"));
}


/***/ }),

/***/ "./unified-latex-to-hast/libs/unified-latex-wrap-pars.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-to-hast/libs/unified-latex-wrap-pars.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexWrapPars": () => (/* binding */ unifiedLatexWrapPars)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _wrap_pars__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrap-pars */ "./unified-latex-to-hast/libs/wrap-pars.ts");



/**
 * Unified plugin to wrap paragraphs in `\html-tag:p{...}` macros.
 * Because `-` and `:` cannot occur in regular macros, there is no risk of
 * a conflict.
 */
const unifiedLatexWrapPars = function unifiedLatexWrapPars(options) {
    const { macrosThatBreakPars, environmentsThatDontBreakPars } = options || {};
    return (tree) => {
        // If \begin{document}...\end{document} is present, we only wrap pars inside of it.
        let hasDocumentEnv = false;
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, (env) => {
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.environment(env, "document")) {
                hasDocumentEnv = true;
                // While we're here, we might as well wrap the pars!
                env.content = (0,_wrap_pars__WEBPACK_IMPORTED_MODULE_2__.wrapPars)(env.content, {
                    macrosThatBreakPars,
                    environmentsThatDontBreakPars,
                });
                return _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__.EXIT;
            }
        }, { test: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyEnvironment });
        if (!hasDocumentEnv) {
            // If there is no \begin{document}...\end{document}, we wrap top-level pars only.
            tree.content = (0,_wrap_pars__WEBPACK_IMPORTED_MODULE_2__.wrapPars)(tree.content, {
                macrosThatBreakPars,
                environmentsThatDontBreakPars,
            });
        }
    };
};


/***/ }),

/***/ "./unified-latex-to-hast/libs/wrap-pars.ts":
/*!*************************************************!*\
  !*** ./unified-latex-to-hast/libs/wrap-pars.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapPars": () => (/* binding */ wrapPars)
/* harmony export */ });
/* harmony import */ var _unified_latex_html_like__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-html-like */ "./unified-latex-html-like/index.ts");
/* harmony import */ var _split_for_pars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./split-for-pars */ "./unified-latex-to-hast/libs/split-for-pars.ts");


/**
 * Wrap paragraphs in `<p>...</p>` tags.
 *
 * Paragraphs are inserted at
 *   * parbreak tokens
 *   * macros listed in `macrosThatBreakPars`
 *   * environments not listed in `environmentsThatDontBreakPars`
 */
function wrapPars(nodes, options) {
    const { macrosThatBreakPars = [
        "part",
        "chapter",
        "section",
        "subsection",
        "subsubsection",
        "vspace",
        "smallskip",
        "medskip",
        "bigskip",
        "hfill",
    ], environmentsThatDontBreakPars = [], } = options || {};
    const parSplits = (0,_split_for_pars__WEBPACK_IMPORTED_MODULE_1__.splitForPars)(nodes, {
        macrosThatBreakPars,
        environmentsThatDontBreakPars,
    });
    return parSplits.flatMap((part) => {
        if (part.wrapInPar) {
            return (0,_unified_latex_html_like__WEBPACK_IMPORTED_MODULE_0__.htmlLike)({ tag: "p", content: part.content });
        }
        else {
            return part.content;
        }
    });
}


/***/ }),

/***/ "./unified-latex-util-align/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-align/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatchers": () => (/* reexport safe */ _libs_parse_align_environment__WEBPACK_IMPORTED_MODULE_0__.createMatchers),
/* harmony export */   "parseAlignEnvironment": () => (/* reexport safe */ _libs_parse_align_environment__WEBPACK_IMPORTED_MODULE_0__.parseAlignEnvironment)
/* harmony export */ });
/* harmony import */ var _libs_parse_align_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/parse-align-environment */ "./unified-latex-util-align/libs/parse-align-environment.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to parse an analyze "align" environments like `\begin{align}...\end{align}` or
 * `\begin{bmatrix}...\end{bmatrix}`.
 *
 * ## When should I use this?
 *
 * If you need to process the contents of an align environment for, e.g., pretty-printing.
 */


/***/ }),

/***/ "./unified-latex-util-align/libs/parse-align-environment.ts":
/*!******************************************************************!*\
  !*** ./unified-latex-util-align/libs/parse-align-environment.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatchers": () => (/* binding */ createMatchers),
/* harmony export */   "parseAlignEnvironment": () => (/* binding */ parseAlignEnvironment)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");


function createMatchers(rowSepMacros, colSep) {
    const isRowSep = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(rowSepMacros);
    return {
        isRowSep,
        isColSep: (node) => colSep.some((sep) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, sep)),
        isWhitespace: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node),
        isSameLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && node.sameline,
        isOwnLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && !node.sameline,
    };
}
/**
 * Parse the content of an align environment into an array of row objects.
 * Each row object looks like
 * ```
 *  {
 *    cells: [...],
 *    colSeps: [...],
 *    rowSep: ...,
 *    trailingComment: ...
 *  }
 * ```
 * `...` may be an ast node or `null`.
 *
 * @export
 * @param {[object]} ast
 * @param {string} [colSep=["&"]]
 * @param {string} [rowSepMacros=["\\", "hline", "cr"]]
 * @returns
 */
function parseAlignEnvironment(ast, colSep = ["&"], rowSepMacros = ["\\", "hline", "cr"]) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.AlignEnvironmentPegParser.parse(ast, createMatchers(rowSepMacros, colSep));
}


/***/ }),

/***/ "./unified-latex-util-argspec/index.ts":
/*!*********************************************!*\
  !*** ./unified-latex-util-argspec/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgSpecAst": () => (/* reexport module object */ _libs_argspec_types__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__.printRaw)
/* harmony export */ });
/* harmony import */ var _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/argspec-parser */ "./unified-latex-util-argspec/libs/argspec-parser.ts");
/* harmony import */ var _libs_argspec_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/argspec-types */ "./unified-latex-util-argspec/libs/argspec-types.ts");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Tools to deal with `xparse` argument signatures. (E.g., `"o m"` for optional followed by mandatory
 * argument).
 *
 * ## When should I use this?
 *
 * If you are working on the internals of `unified-latex`.
 */


/***/ }),

/***/ "./unified-latex-util-argspec/libs/argspec-parser.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-util-argspec/libs/argspec-parser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");

/**
 * Produce a string containing any decorators for the argspec node.
 * For example, `!` in front of a node means "don't accept leading whitespace"
 */
function getDecorators(node) {
    let ret = "";
    if (node.noLeadingWhitespace) {
        ret += "!";
    }
    return ret;
}
/**
 * Print an `xparse` argument specification AST
 * to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    const decorators = getDecorators(node);
    const defaultArg = node.defaultArg
        ? printRaw(node.defaultArg)
        : "";
    let spec = decorators;
    switch (node.type) {
        case "body":
            return decorators + "b";
        case "optionalStar":
            return decorators + "s";
        case "optionalToken":
            return spec + "t" + node.token;
        case "optional":
            // [...] is the default enclosure for optional arguments
            if (node.openBrace === "[" && node.closeBrace === "]") {
                spec += node.defaultArg ? "O" : "o";
            }
            else {
                spec += node.defaultArg ? "D" : "d";
                spec += node.openBrace + node.closeBrace;
            }
            return spec + defaultArg;
        case "mandatory":
            // {...} is the default enclosure for mandatory arguments
            if (node.openBrace === "{" && node.closeBrace === "}") {
                spec += "m";
            }
            else {
                spec += node.defaultArg ? "R" : "r";
                spec += node.openBrace + node.closeBrace;
            }
            return spec + defaultArg;
        case "embellishment":
            spec += node.defaultArg ? "E" : "e";
            return (spec +
                "{" +
                printRaw(node.embellishmentTokens) +
                "}" +
                defaultArg);
        case "verbatim":
            return spec + "v" + node.openBrace;
        case "group":
            return spec + "{" + printRaw(node.content) + "}";
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}
const parseCache = {};
/**
 * Parse an `xparse` argument specification string to an AST.
 * This function caches results. Don't mutate the returned AST!
 *
 * @param {string} [str=""] - LaTeX string input
 * @returns - AST for LaTeX string
 */
function parse(str = "") {
    parseCache[str] = parseCache[str] || _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.ArgSpecPegParser.parse(str);
    return parseCache[str];
}


/***/ }),

/***/ "./unified-latex-util-argspec/libs/argspec-types.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-util-argspec/libs/argspec-types.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-util-arguments/index.ts":
/*!***********************************************!*\
  !*** ./unified-latex-util-arguments/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachMacroArgs": () => (/* reexport safe */ _libs_attach_arguments__WEBPACK_IMPORTED_MODULE_1__.attachMacroArgs),
/* harmony export */   "getArgsContent": () => (/* reexport safe */ _libs_get_args_content__WEBPACK_IMPORTED_MODULE_3__.getArgsContent),
/* harmony export */   "gobbleArguments": () => (/* reexport safe */ _libs_gobble_arguments__WEBPACK_IMPORTED_MODULE_0__.gobbleArguments),
/* harmony export */   "unifiedLatexAttachMacroArguments": () => (/* reexport safe */ _libs_unified_latex_attach_macro_arguments__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexAttachMacroArguments)
/* harmony export */ });
/* harmony import */ var _libs_gobble_arguments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/gobble-arguments */ "./unified-latex-util-arguments/libs/gobble-arguments.ts");
/* harmony import */ var _libs_attach_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/attach-arguments */ "./unified-latex-util-arguments/libs/attach-arguments.ts");
/* harmony import */ var _libs_unified_latex_attach_macro_arguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unified-latex-attach-macro-arguments */ "./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts");
/* harmony import */ var _libs_get_args_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/get-args-content */ "./unified-latex-util-arguments/libs/get-args-content.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify and attach arguments to macros in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * By default, TeX doesn't actually have a concept of macro "arguments". Instead, TeX searches the
 * tokens after a macro and processes them according to the macro's rules. However, LaTeX attempts
 * to make macros look like functions that accept arguments. To attach the "arguments" to a macro
 * node, the `unified-latex` AST needs to be reparsed and manipulated.
 *
 * ## When should I use this?
 *
 * If you have custom macros that you want arguments attached to.
 *
 * If you know ahead of time which macros need arguments attached to them, use `unified-latex-util-parse`
 * and pass in the appropriate macro info instead.
 */


/***/ }),

/***/ "./unified-latex-util-arguments/libs/attach-arguments.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/attach-arguments.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachMacroArgs": () => (/* binding */ attachMacroArgs),
/* harmony export */   "attachMacroArgsInArray": () => (/* binding */ attachMacroArgsInArray)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _gobble_arguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gobble-arguments */ "./unified-latex-util-arguments/libs/gobble-arguments.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");




/**
 * Search (in a right-associative way) through the array for instances of
 * `macros` and attach arguments to the macro. Argument signatures are
 * specified by `macros[].signature`.
 *
 * Info stored in `macros[].renderInfo` will be attached to the node
 * with attribute `_renderInfo`.
 */
function attachMacroArgsInArray(nodes, macros) {
    // Some preliminaries that are only used if `ast` is an array.
    let currIndex;
    /**
     * Determine whether `node` matches one of the macros in `macros`.
     * Care is taken when matching because not all macros have
     * `\` as their escape token.
     */
    const isRelevantMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macros);
    function gobbleUntilMacro() {
        // Step backwards until we find the required macro
        while (currIndex >= 0 && !isRelevantMacro(nodes[currIndex])) {
            currIndex--;
        }
    }
    // Search for an occurrence of any of the macros `macroName` and its arguments.
    // Some macros are right-associative, so we should start searching from
    // the right
    currIndex = nodes.length - 1;
    while (currIndex >= 0) {
        gobbleUntilMacro();
        if (currIndex < 0) {
            // We didn't find an occurrence of the macro
            return;
        }
        // Store the currIndex, which is where the macro is. Start searching
        // for its arguments at the next index.
        const macroIndex = currIndex;
        const macro = nodes[macroIndex];
        const macroName = macro.content;
        const macroInfo = macros[macroName];
        // Add `._renderInfo` if we have any
        (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__.updateRenderInfo)(macro, macroInfo.renderInfo);
        // If the macro has no signature, it shouldn't consume any arguments. Just move along.
        // Node: It is important that this happens *after* `updateRenderInfo` is called, since
        // we still want to update the render info even if there are no args.
        if (macroInfo.signature == null) {
            currIndex--;
            continue;
        }
        // We don't want to search for macro arguments if we already
        // found them. If the macro has arguments, we assume that
        // they've already been attached
        if (macro.args != null) {
            currIndex = macroIndex - 1;
            continue;
        }
        // `currIndex` is the position of the macro. We want to start
        // looking for the arguments right after the macro
        currIndex++;
        const { args } = (0,_gobble_arguments__WEBPACK_IMPORTED_MODULE_2__.gobbleArguments)(nodes, macroInfo.signature, currIndex);
        macro.args = args;
        // After we've gobbled the arguments, set
        // ourselves one space before the macro so we can continue.
        currIndex = macroIndex - 1;
    }
}
/**
 * Recursively search for and attach the arguments for a
 * particular macro to its AST node. `macros` should
 * contain a `signature` property which specifies the arguments
 * signature in xparse syntax.
 */
function attachMacroArgs(tree, macros) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (nodes) => {
        attachMacroArgsInArray(nodes, macros);
    }, { includeArrays: true, test: Array.isArray });
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/get-args-content.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/get-args-content.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getArgsContent": () => (/* binding */ getArgsContent)
/* harmony export */ });
/**
 * Returns the content of `args` for a macro or environment as an array. If an argument
 * was omitted (e.g., because it was an optional arg that wasn't included), then `null` is returned.
 */
function getArgsContent(node) {
    if (!Array.isArray(node.args)) {
        return [];
    }
    return node.args.map((arg) => {
        if (arg.openMark === "" && arg.content.length === 0) {
            return null;
        }
        return arg.content;
    });
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/gobble-arguments.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/gobble-arguments.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gobbleArguments": () => (/* binding */ gobbleArguments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_argspec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-argspec */ "./unified-latex-util-argspec/index.ts");
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _gobble_single_argument__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gobble-single-argument */ "./unified-latex-util-arguments/libs/gobble-single-argument.ts");



/**
 * Gobbles an argument of whose type is specified
 * by `argSpec` starting at the position `startPos`. If an argument couldn't be found,
 * `argument` will be `null`.
 */
function gobbleArguments(nodes, argSpec, startPos = 0) {
    if (typeof argSpec === "string") {
        argSpec = (0,_unified_latex_util_argspec__WEBPACK_IMPORTED_MODULE_0__.parse)(argSpec);
    }
    const args = [];
    let nodesRemoved = 0;
    for (const spec of argSpec) {
        const { argument, nodesRemoved: removed } = (0,_gobble_single_argument__WEBPACK_IMPORTED_MODULE_2__.gobbleSingleArgument)(nodes, spec, startPos);
        if (argument) {
            args.push(argument);
            nodesRemoved += removed;
        }
        else {
            args.push((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)([], { openMark: "", closeMark: "" }));
        }
    }
    return { args, nodesRemoved };
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/gobble-single-argument.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/gobble-single-argument.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gobbleSingleArgument": () => (/* binding */ gobbleSingleArgument)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");


/**
 * Gobbles an argument of whose type is specified
 * by `argSpec` starting at the position `startPos`. If an argument couldn't be found,
 * `argument` will be `null`.
 */
function gobbleSingleArgument(nodes, argSpec, startPos = 0) {
    if (typeof argSpec === "string" || !argSpec.type) {
        throw new Error(`argSpec must be an already-parsed argument specification, not "${JSON.stringify(argSpec)}"`);
    }
    let argument = null;
    let currPos = startPos;
    // Gobble whitespace from `currPos` onward, updating `currPos`.
    // If `argSpec` specifies leading whitespace is not allowed,
    // this function does nothing.
    const gobbleWhitespace = argSpec
        .noLeadingWhitespace
        ? () => { }
        : () => {
            while (currPos < nodes.length) {
                if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(nodes[currPos])) {
                    break;
                }
                currPos++;
            }
        };
    const openMark = argSpec.openBrace || "";
    const closeMark = argSpec.closeBrace || "";
    // Only mandatory arguments can be wrapped in {...}.
    // Since we already parse such things as groups, we need to
    // check the open and closing symbols to see if we allow for
    // groups to be accepted as arguments
    const acceptGroup = argSpec.type === "mandatory" && openMark === "{" && closeMark === "}";
    // Find the position of the open brace and the closing brace.
    // The position(s) are null if the brace isn't found.
    function findBracePositions() {
        let openMarkPos = null;
        if (openMark) {
            openMarkPos = nodes.findIndex((node, i) => i >= currPos && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, openMark));
            if (openMarkPos < currPos) {
                openMarkPos = null;
            }
        }
        let closeMarkPos = null;
        if (openMarkPos != null) {
            closeMarkPos = nodes.findIndex((node, i) => i >= openMarkPos + 1 &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, closeMark));
            if (closeMarkPos < openMarkPos + 1) {
                closeMarkPos = null;
            }
        }
        return [openMarkPos, closeMarkPos];
    }
    // Do the actual matching
    gobbleWhitespace();
    const currNode = nodes[currPos];
    if (currNode == null ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(currNode) ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(currNode)) {
        return { argument, nodesRemoved: 0 };
    }
    switch (argSpec.type) {
        case "mandatory":
            if (acceptGroup) {
                let content = [currNode];
                if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(currNode)) {
                    // Unwrap a group if there is one.
                    content = currNode.content;
                }
                argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)(content, {
                    openMark,
                    closeMark,
                });
                currPos++;
                break;
            }
        // The fallthrough here is on purpose! Matching a mandatory
        // argument and an optional argument is the same for our purposes.
        // We're not going to fail to parse because of a missing argument.
        case "optional":
            // We have already gobbled whitespace, so at this point, `currNode`
            // is either an openMark or we don't have an optional argument.
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(currNode, openMark)) {
                // If we're here, we have custom braces to match
                const [openMarkPos, closeMarkPos] = findBracePositions();
                if (openMarkPos != null && closeMarkPos != null) {
                    argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)(nodes.slice(openMarkPos + 1, closeMarkPos), {
                        openMark,
                        closeMark,
                    });
                    currPos = closeMarkPos + 1;
                    break;
                }
            }
            break;
        case "optionalStar":
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(currNode, "*")) {
                argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)([currNode], { openMark: "", closeMark: "" });
                currPos++;
                break;
            }
            break;
        default:
            console.warn(`Don't know how to find an argument of argspec type "${argSpec.type}"`);
    }
    // `currPos` is has already stepped past any whitespace. However,
    // if we did not consume an argument, we don't want to consume the whitespace.
    const nodesRemoved = argument ? currPos - startPos : 0;
    nodes.splice(startPos, nodesRemoved);
    return { argument, nodesRemoved };
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts":
/*!***********************************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexAttachMacroArguments": () => (/* binding */ unifiedLatexAttachMacroArguments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _attach_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attach-arguments */ "./unified-latex-util-arguments/libs/attach-arguments.ts");


/**
 * Unified plugin to attach macro arguments to the macros specified via the `macros`
 * option.
 *
 * @param macros An object whose keys are macro names and values contains information about the macro and its argument signature.
 */
const unifiedLatexAttachMacroArguments = function unifiedLatexAttachMacroArguments(options) {
    return (tree) => {
        const { macros = {} } = options || {};
        if (Object.keys(macros).length === 0) {
            console.warn("Attempting to attach macro arguments but no macros are specified.");
        }
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, (nodes) => {
            (0,_attach_arguments__WEBPACK_IMPORTED_MODULE_1__.attachMacroArgsInArray)(nodes, macros);
        }, { includeArrays: true, test: Array.isArray });
    };
};


/***/ }),

/***/ "./unified-latex-util-comments/index.ts":
/*!**********************************************!*\
  !*** ./unified-latex-util-comments/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteComments": () => (/* reexport safe */ _libs_delete_comments__WEBPACK_IMPORTED_MODULE_0__.deleteComments)
/* harmony export */ });
/* harmony import */ var _libs_delete_comments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/delete-comments */ "./unified-latex-util-comments/libs/delete-comments.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify comments in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to process comments in a `unified-latex` AST.
 */


/***/ }),

/***/ "./unified-latex-util-comments/libs/delete-comments.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-comments/libs/delete-comments.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteComments": () => (/* binding */ deleteComments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-replace */ "./unified-latex-util-replace/index.ts");


/**
 * Returns a new AST with all comments removed. Care is taken to preserve whitespace.
 * For example
 * ```
 * x%
 * y
 * ```
 * becomes `xy` but
 * ```
 * x %
 * y
 * ```
 * becomes `x y`
 */
function deleteComments(ast) {
    return (0,_unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_1__.replaceNode)(ast, (node) => {
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            return;
        }
        if (node.leadingWhitespace) {
            return { type: "whitespace" };
        }
        return null;
    });
}


/***/ }),

/***/ "./unified-latex-util-environments/index.ts":
/*!**************************************************!*\
  !*** ./unified-latex-util-environments/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processEnvironment": () => (/* reexport safe */ _libs_process_environment__WEBPACK_IMPORTED_MODULE_0__.processEnvironment),
/* harmony export */   "processEnvironments": () => (/* reexport safe */ _libs_process_environment__WEBPACK_IMPORTED_MODULE_0__.processEnvironments),
/* harmony export */   "unifiedLatexProcessEnvironments": () => (/* reexport safe */ _libs_unified_latex_process_environment__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexProcessEnvironments)
/* harmony export */ });
/* harmony import */ var _libs_process_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/process-environment */ "./unified-latex-util-environments/libs/process-environment.ts");
/* harmony import */ var _libs_unified_latex_process_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-process-environment */ "./unified-latex-util-environments/libs/unified-latex-process-environment.ts");


// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to report on/manipulate environments in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you are working on the internals of `unified-latex-util-parse` or need to make a custom parser
 * that treats environments differently.
 */


/***/ }),

/***/ "./unified-latex-util-environments/libs/process-environment.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-environments/libs/process-environment.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processEnvironment": () => (/* binding */ processEnvironment),
/* harmony export */   "processEnvironments": () => (/* binding */ processEnvironments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");





/**
 * Performs any needed processing on the environment (as specified by `envInfo`)
 * include attaching arguments and possibly manipulating the environment's body.
 */
function processEnvironment(envNode, envInfo) {
    if (envInfo.signature && envNode.args == null) {
        const { args } = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_1__.gobbleArguments)(envNode.content, envInfo.signature);
        envNode.args = args;
    }
    (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_0__.updateRenderInfo)(envNode, envInfo.renderInfo);
    if (typeof envInfo.processContent === "function") {
        envNode.content = envInfo.processContent(envNode.content);
    }
}
/**
 * Recursively search for and process the specified environments. Arguments are
 * consumed according to the `signature` specified. The body is processed
 * with the specified `processContent` function (if given). Any specified `renderInfo`
 * is attached to the environment node.
 */
function processEnvironments(tree, environments) {
    const isRelevantEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_2__.match.createEnvironmentMatcher(environments);
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, {
        leave: (node) => {
            const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_4__.printRaw)(node.env);
            const envInfo = environments[envName];
            if (!envInfo) {
                throw new Error(`Could not find environment info for environment "${envName}"`);
            }
            processEnvironment(node, envInfo);
        },
    }, { test: isRelevantEnvironment });
}


/***/ }),

/***/ "./unified-latex-util-environments/libs/unified-latex-process-environment.ts":
/*!***********************************************************************************!*\
  !*** ./unified-latex-util-environments/libs/unified-latex-process-environment.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexProcessEnvironments": () => (/* binding */ unifiedLatexProcessEnvironments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _process_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./process-environment */ "./unified-latex-util-environments/libs/process-environment.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");




/**
 * Unified plugin to process environment content and attach arguments.
 *
 * @param environments An object whose keys are environment names and values contains information about the environment and its argument signature.
 */
const unifiedLatexProcessEnvironments = function unifiedLatexAttachMacroArguments(options) {
    const { environments = {} } = options || {};
    const isRelevantEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createEnvironmentMatcher(environments);
    return (tree) => {
        if (Object.keys(environments).length === 0) {
            console.warn("Attempting to attach macro arguments but no macros are specified.");
        }
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, {
            leave: (node) => {
                const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_3__.printRaw)(node.env);
                const envInfo = environments[envName];
                if (!envInfo) {
                    throw new Error(`Could not find environment info for environment "${envName}"`);
                }
                (0,_process_environment__WEBPACK_IMPORTED_MODULE_2__.processEnvironment)(node, envInfo);
            },
        }, { test: isRelevantEnvironment });
    };
};


/***/ }),

/***/ "./unified-latex-util-ligatures/libs/expand-unicode-ligatures.ts":
/*!***********************************************************************!*\
  !*** ./unified-latex-util-ligatures/libs/expand-unicode-ligatures.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandUnicodeLigatures": () => (/* binding */ expandUnicodeLigatures)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse */ "./unified-latex-util-ligatures/libs/parse.ts");


/**
 * Turn all ligatures into their unicode equivalent. For example,
 * `---` -> an em-dash and `\^o` to `ô`. This only applies in non-math mode,
 * since programs like katex will process math ligatures.
 */
function expandUnicodeLigatures(tree) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, (nodes, info) => {
        // KaTeX/MathJax will process ligatures in math mode. This includes
        // ligatures in `\text{...}` macros inside of math mode. So, avoid
        // processing them in this case.
        if (info.context.inMathMode || info.context.hasMathModeAncestor) {
            return;
        }
        const parsed = (0,_parse__WEBPACK_IMPORTED_MODULE_1__.parseLigatures)(nodes);
        nodes.length = 0;
        nodes.push(...parsed);
    }, { includeArrays: true, test: Array.isArray });
}


/***/ }),

/***/ "./unified-latex-util-ligatures/libs/ligature-lookup.ts":
/*!**************************************************************!*\
  !*** ./unified-latex-util-ligatures/libs/ligature-lookup.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ligatureToUnicode": () => (/* binding */ ligatureToUnicode)
/* harmony export */ });
/* harmony import */ var _support_tables_ligature_macros_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../support-tables/ligature-macros.json */ "./support-tables/ligature-macros.json");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");


function makeString(content) {
    return { type: "string", content };
}
const mappedLigatures = _support_tables_ligature_macros_json__WEBPACK_IMPORTED_MODULE_0__.map(([macro, str]) => [macro, makeString(str)]);
const SUBSTITUTION_MAP = new Map([
    // We cannot use the basic lookup to replace a `\ ` macro, since it
    // may be confused with a macro that has no arguments. We will replace this
    // macro manually.
    //["\\ ", makeString(" ")],
    ["\\,", makeString("\u2009")],
    ["\\thinspace", makeString("\u2009")],
    ["\\:", makeString("\u2005")],
    ["\\>", makeString("\u2005")],
    ["\\medspace", makeString("\u2005")],
    // There's no exact unicode versions of `\medspace` or `\thickspace`, so we approximate
    ["\\;", makeString("\u2005")],
    ["\\thickspace", makeString("\u2005")],
    ["\\enspace", makeString("\u2002")],
    ["\\quad", makeString("\u2003")],
    ["\\qquad", makeString("\u2003\u2003")],
    // Marks the punctuation as ending a sentence; no substitute.
    ["\\@", makeString("")],
    // Italic correction; no substitute
    ["\\/", makeString("")],
    // Non-breaking space
    ["~", makeString("\u00A0")],
    ["- - -", makeString("—")],
    ["- -", makeString("–")],
    ["` `", makeString("“")],
    ["' '", makeString("”")],
    ["`", makeString("‘")],
    ["'", makeString("’")],
    ["\\$", makeString("$")],
    ["\\%", makeString("%")],
    ["\\_", makeString("_")],
    ["\\&", makeString("&")],
    ["\\#", makeString("#")],
    ["\\{", makeString("{")],
    ["\\}", makeString("}")],
    ["\\P", makeString("¶")],
    ["\\S", makeString("§")],
    ["\\dots", makeString("…")],
    ["\\ldots", makeString("…")],
    ["\\pounds", makeString("£")],
    ["\\copyright", makeString("©")],
    ...mappedLigatures,
]);
/**
 * Hash a sequence of nodes for quick lookup. This function assumes
 * that a space character does not appear in the content of any of the nodes.
 */
function hashNodes(nodes) {
    return nodes
        .map((node) => (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(node) ? `\\${node.content}` : node.content))
        .join(" ");
}
function isMacroOrStringArray(nodes) {
    return nodes.some((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(node));
}
/**
 * Map a sequence of nodes to its corresponding unicode ligature. E.g.,
 * `---` will be converted to `–` (an em-dash).
 *
 * This function assumes that `nodes` is a pure token stream with all whitespace
 * removed and an surrogate letters popped from their groups. (e.g. `\: o` and `\:{o}`
 * should be normalized to `["\:", "o"]` before calling this function.)
 */
function ligatureToUnicode(nodes) {
    if (!isMacroOrStringArray(nodes)) {
        return null;
    }
    if (nodes.length === 1 &&
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.macro(nodes[0], " ") &&
        nodes[0].escapeToken == null) {
        // In this case we are the `\ ` macro. This cannot be handled by the hash-lookup method,
        // so we handle it manually.
        return makeString(" ");
    }
    return SUBSTITUTION_MAP.get(hashNodes(nodes)) || null;
}


/***/ }),

/***/ "./unified-latex-util-ligatures/libs/parse.ts":
/*!****************************************************!*\
  !*** ./unified-latex-util-ligatures/libs/parse.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatchers": () => (/* binding */ createMatchers),
/* harmony export */   "parseLigatures": () => (/* binding */ parseLigatures)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");
/* harmony import */ var _ligature_lookup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ligature-lookup */ "./unified-latex-util-ligatures/libs/ligature-lookup.ts");



function createMatchers() {
    return {
        isMacro: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyMacro,
        isWhitespace: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace,
        isRecognized: (nodes, whitespaceAllowed = false) => {
            // If the first argument is a macro, the second token may be wrapped in a group.
            // In this case we want to unwrap the group
            const nodesToTest = [...nodes];
            if (nodes.length === 2 && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(nodes[0])) {
                const arg = nodes[1];
                if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(arg) && arg.content.length === 1) {
                    nodesToTest[1] = arg.content[0];
                }
            }
            return (0,_ligature_lookup__WEBPACK_IMPORTED_MODULE_2__.ligatureToUnicode)(nodesToTest);
        },
        isSplitable: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && node.content.length > 1,
        split: (node) => [
            { type: "string", content: node.content.charAt(0) },
            { type: "string", content: node.content.slice(1) },
        ],
    };
}
/**
 * Parse for recognized ligatures like `---` and `\:o`, etc. These are
 * replaced with string nodes with the appropriate unicode character subbed in.
 */
function parseLigatures(ast) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.LigaturesPegParser.parse(ast, createMatchers());
}


/***/ }),

/***/ "./unified-latex-util-match/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-match/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "anyEnvironment": () => (/* binding */ anyEnvironment),
/* harmony export */   "anyMacro": () => (/* binding */ anyMacro),
/* harmony export */   "anyString": () => (/* binding */ anyString),
/* harmony export */   "argument": () => (/* binding */ argument),
/* harmony export */   "blankArgument": () => (/* binding */ blankArgument),
/* harmony export */   "comment": () => (/* binding */ comment),
/* harmony export */   "environment": () => (/* binding */ environment),
/* harmony export */   "group": () => (/* binding */ group),
/* harmony export */   "macro": () => (/* binding */ macro),
/* harmony export */   "match": () => (/* reexport safe */ _libs_match__WEBPACK_IMPORTED_MODULE_0__.match),
/* harmony export */   "math": () => (/* binding */ math),
/* harmony export */   "parbreak": () => (/* binding */ parbreak),
/* harmony export */   "string": () => (/* binding */ string),
/* harmony export */   "whitespace": () => (/* binding */ whitespace)
/* harmony export */ });
/* harmony import */ var _libs_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/match */ "./unified-latex-util-match/libs/match.ts");


const { anyEnvironment, anyMacro, anyString, argument, blankArgument, comment, environment, group, macro, math, parbreak, string, whitespace, } = _libs_match__WEBPACK_IMPORTED_MODULE_0__.match;
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to match different `Ast.Node` types in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you need a type-guard to ensure a node is of a certain type; for example, during a call to `unified-latex-until-visit`.
 */


/***/ }),

/***/ "./unified-latex-util-match/libs/match.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-match/libs/match.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "match": () => (/* binding */ match)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createMacroMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const macrosHash = Array.isArray(macros)
        ? macros.length > 0
            ? typeof macros[0] === "string"
                ? Object.fromEntries(macros.map((macro) => {
                    if (typeof macro !== "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    return [macro, {}];
                }))
                : Object.fromEntries(macros.map((macro) => {
                    if (typeof macro === "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    if (macro.escapeToken != null) {
                        return [
                            macro.content,
                            { escapeToken: macro.escapeToken },
                        ];
                    }
                    return [macro.content, {}];
                }))
            : {}
        : macros;
    return function matchAgainstMacros(node) {
        if (node == null || node.type !== "macro") {
            return false;
        }
        // At this point we have a macro type
        const spec = macrosHash[node.content];
        if (!spec) {
            return false;
        }
        if (typeof spec === "object" && "escapeToken" in spec) {
            return (spec.escapeToken == null ||
                spec.escapeToken === node.escapeToken);
        }
        return true;
    };
}
/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createEnvironmentMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const environmentsHash = Array.isArray(macros)
        ? Object.fromEntries(macros.map((str) => {
            return [str, {}];
        }))
        : macros;
    return function matchAgainstEnvironments(node) {
        if (!match.anyEnvironment(node)) {
            return false;
        }
        // At this point we have an environment type
        const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env);
        const spec = environmentsHash[envName];
        if (!spec) {
            return false;
        }
        return true;
    };
}
/**
 * Functions to match different types of nodes.
 */
const match = {
    macro(node, macroName) {
        if (node == null) {
            return false;
        }
        return (node.type === "macro" &&
            (macroName == null || node.content === macroName));
    },
    anyMacro(node) {
        return match.macro(node);
    },
    environment(node, envName) {
        if (node == null) {
            return false;
        }
        return ((node.type === "environment" || node.type === "mathenv") &&
            (envName == null || (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env) === envName));
    },
    anyEnvironment(node) {
        return match.environment(node);
    },
    comment(node) {
        if (node == null) {
            return false;
        }
        return node.type === "comment";
    },
    parbreak(node) {
        if (node == null) {
            return false;
        }
        return node.type === "parbreak";
    },
    whitespace(node) {
        if (node == null) {
            return false;
        }
        return node.type === "whitespace";
    },
    /**
     * Matches whitespace or a comment with leading whitespace.
     */
    whitespaceLike(node) {
        if (node == null) {
            return false;
        }
        return (node.type === "whitespace" ||
            (node.type === "whitespace" && node.leadingWhitespace === true));
    },
    string(node, value) {
        if (node == null) {
            return false;
        }
        return (node.type === "string" && (value == null || node.content === value));
    },
    anyString(node) {
        return match.string(node);
    },
    group(node) {
        if (node == null) {
            return false;
        }
        return node.type === "group";
    },
    argument(node) {
        if (node == null) {
            return false;
        }
        return node.type === "argument";
    },
    blankArgument(node) {
        if (!match.argument(node)) {
            return false;
        }
        return (node.openMark === "" &&
            node.closeMark === "" &&
            node.content.length === 0);
    },
    math(node) {
        if (node == null) {
            return false;
        }
        return node.type === "displaymath" || node.type === "inlinemath";
    },
    createMacroMatcher,
    createEnvironmentMatcher,
};


/***/ }),

/***/ "./unified-latex-util-parse/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-parse/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* reexport safe */ _libs_parse__WEBPACK_IMPORTED_MODULE_5__.parse),
/* harmony export */   "parseMath": () => (/* reexport safe */ _libs_parse_math__WEBPACK_IMPORTED_MODULE_6__.parseMath),
/* harmony export */   "parseMathMinimal": () => (/* reexport safe */ _libs_parse_minimal__WEBPACK_IMPORTED_MODULE_4__.parseMathMinimal),
/* harmony export */   "parseMinimal": () => (/* reexport safe */ _libs_parse_minimal__WEBPACK_IMPORTED_MODULE_4__.parseMinimal),
/* harmony export */   "processLatexToAstViaUnified": () => (/* binding */ processLatexToAstViaUnified),
/* harmony export */   "processLatexViaUnified": () => (/* binding */ processLatexViaUnified),
/* harmony export */   "unifiedLatexAstComplier": () => (/* reexport safe */ _libs_compiler_ast__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexAstComplier),
/* harmony export */   "unifiedLatexFromString": () => (/* reexport safe */ _libs_plugin_from_string__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexFromString),
/* harmony export */   "unifiedLatexFromStringMinimal": () => (/* reexport safe */ _libs_plugin_from_string_minimal__WEBPACK_IMPORTED_MODULE_3__.unifiedLatexFromStringMinimal),
/* harmony export */   "unifiedLatexStringComplier": () => (/* reexport safe */ _libs_compiler_string__WEBPACK_IMPORTED_MODULE_0__.unifiedLatexStringComplier)
/* harmony export */ });
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unified */ "../../node_modules/unified/lib/index.js");
/* harmony import */ var _libs_compiler_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/compiler-string */ "./unified-latex-util-parse/libs/compiler-string.ts");
/* harmony import */ var _libs_compiler_ast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/compiler-ast */ "./unified-latex-util-parse/libs/compiler-ast.ts");
/* harmony import */ var _libs_plugin_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/plugin-from-string */ "./unified-latex-util-parse/libs/plugin-from-string.ts");
/* harmony import */ var _libs_plugin_from_string_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/plugin-from-string-minimal */ "./unified-latex-util-parse/libs/plugin-from-string-minimal.ts");
/* harmony import */ var _libs_parse_minimal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libs/parse-minimal */ "./unified-latex-util-parse/libs/parse-minimal.ts");
/* harmony import */ var _libs_parse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./libs/parse */ "./unified-latex-util-parse/libs/parse.ts");
/* harmony import */ var _libs_parse_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./libs/parse-math */ "./unified-latex-util-parse/libs/parse-math.ts");











/**
 * Use `unified()` to a string to an `Ast.Ast` and then pretty-print it.
 */
const processLatexViaUnified = () => {
    return (0,unified__WEBPACK_IMPORTED_MODULE_7__.unified)()
        .use(_libs_plugin_from_string__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexFromString)
        .use(_libs_compiler_string__WEBPACK_IMPORTED_MODULE_0__.unifiedLatexStringComplier, { pretty: true });
};
/**
 * Use `unified()` to a string to an `Ast.Ast` and then return it. This function
 * will not print/pretty-print the `Ast.Ast` back to a string.
 */
const processLatexToAstViaUnified = () => {
    return (0,unified__WEBPACK_IMPORTED_MODULE_7__.unified)().use(_libs_plugin_from_string__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexFromString).use(_libs_compiler_ast__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexAstComplier);
};
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions parse strings to a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you have a string that you would like to parse to a `unified-latex` `Ast.Ast`, or
 * if you are building a plugin for `unified()` that manipulates LaTeX.
 */


/***/ }),

/***/ "./unified-latex-util-parse/libs/compiler-ast.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-util-parse/libs/compiler-ast.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexAstComplier": () => (/* binding */ unifiedLatexAstComplier)
/* harmony export */ });
/**
 * Unified complier plugin that passes through a LaTeX AST without modification.
 */
const unifiedLatexAstComplier = function unifiedLatexAstComplier() {
    Object.assign(this, { Compiler: (x) => x });
};


/***/ }),

/***/ "./unified-latex-util-parse/libs/compiler-string.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-util-parse/libs/compiler-string.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexStringComplier": () => (/* binding */ unifiedLatexStringComplier)
/* harmony export */ });
/* harmony import */ var prettier_standalone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prettier/standalone */ "../../node_modules/prettier/standalone.js");
/* harmony import */ var prettier_standalone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prettier_standalone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _unified_latex_prettier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-prettier */ "./unified-latex-prettier/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");



/**
 * Unified complier plugin that prints a LaTeX AST as a string.
 */
const unifiedLatexStringComplier = function unifiedLatexStringComplier(options) {
    const prettyPrinter = (ast) => {
        // We have already processed the AST. All we want prettier to do is the final
        // text formatting. We create a dummy parser and directly return the ast.
        // Note: if prettier is asked to format the empty string, it will not call the parsers, so we pass in "_"
        return prettier_standalone__WEBPACK_IMPORTED_MODULE_0___default().format("_", Object.assign({ useTabs: true, parser: "latex-dummy-parser", plugins: [
                {
                    languages: [
                        {
                            name: "latex",
                            extensions: [".tex"],
                            parsers: ["latex-dummy-parser"],
                        },
                    ],
                    parsers: {
                        "latex-dummy-parser": {
                            parse: () => ast,
                            astFormat: "latex-ast",
                            locStart: () => 0,
                            locEnd: () => 1,
                        },
                    },
                    printers: {
                        "latex-ast": {
                            print: _unified_latex_prettier__WEBPACK_IMPORTED_MODULE_1__.printLatexAst,
                        },
                    },
                },
            ] }, (options || {})));
    };
    Object.assign(this, {
        Compiler: (ast) => {
            if (!(options === null || options === void 0 ? void 0 : options.pretty)) {
                return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_2__.printRaw)(ast);
            }
            return prettyPrinter(ast);
        },
    });
};


/***/ }),

/***/ "./unified-latex-util-parse/libs/parse-math.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-util-parse/libs/parse-math.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseMath": () => (/* binding */ parseMath)
/* harmony export */ });
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unified */ "../../node_modules/unified/lib/index.js");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _compiler_ast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compiler-ast */ "./unified-latex-util-parse/libs/compiler-ast.ts");
/* harmony import */ var _plugin_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugin-from-string */ "./unified-latex-util-parse/libs/plugin-from-string.ts");




/**
 * Parse `str` into an AST. Parsing starts in math mode and a list of
 * nodes is returned (instead of a "root" node).
 */
function parseMath(str) {
    if (typeof str !== "string") {
        str = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(str);
    }
    const file = (0,unified__WEBPACK_IMPORTED_MODULE_3__.unified)()
        .use(_plugin_from_string__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexFromString, { mode: "math" })
        .use(_compiler_ast__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexAstComplier)
        .processSync({ value: str });
    return file.result.content;
}


/***/ }),

/***/ "./unified-latex-util-parse/libs/parse-minimal.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-parse/libs/parse-minimal.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseMathMinimal": () => (/* binding */ parseMathMinimal),
/* harmony export */   "parseMinimal": () => (/* binding */ parseMinimal)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");

/**
 * Parse `str` to an AST with minimal processing. E.g., macro
 * arguments are not attached to macros, etc. when parsed with this
 * function.
 */
function parseMinimal(str) {
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.LatexPegParser.parse(str);
}
/**
 * Parse `str` to an AST with minimal processing. E.g., macro
 * arguments are not attached to macros, etc. when parsed with this
 * function.
 *
 * The parsing assumes a math-mode context, so, for example, `^` and `_` are
 * parsed as macros (even though arguments are not attached to them).
 */
function parseMathMinimal(str) {
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.LatexPegParser.parse(str, { startRule: "math" });
}


/***/ }),

/***/ "./unified-latex-util-parse/libs/parse.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-parse/libs/parse.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ "./unified-latex-util-parse/index.ts");

/**
 * Parse the string into an AST.
 */
function parse(str) {
    const file = (0,___WEBPACK_IMPORTED_MODULE_0__.processLatexToAstViaUnified)().processSync({ value: str });
    return file.result;
}


/***/ }),

/***/ "./unified-latex-util-parse/libs/plugin-from-string-minimal.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-parse/libs/plugin-from-string-minimal.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexFromStringMinimal": () => (/* binding */ unifiedLatexFromStringMinimal)
/* harmony export */ });
/* harmony import */ var _parse_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-minimal */ "./unified-latex-util-parse/libs/parse-minimal.ts");

/**
 * Parse a string to a LaTeX AST with no post processing. For example,
 * no macro arguments will be attached, etc.
 */
const unifiedLatexFromStringMinimal = function unifiedLatexFromStringMinimal(options) {
    const parser = (str) => {
        if ((options === null || options === void 0 ? void 0 : options.mode) === "math") {
            return {
                type: "root",
                content: (0,_parse_minimal__WEBPACK_IMPORTED_MODULE_0__.parseMathMinimal)(str),
                _renderInfo: { inMathMode: true },
            };
        }
        return (0,_parse_minimal__WEBPACK_IMPORTED_MODULE_0__.parseMinimal)(str);
    };
    Object.assign(this, { Parser: parser });
};


/***/ }),

/***/ "./unified-latex-util-parse/libs/plugin-from-string.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-parse/libs/plugin-from-string.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexFromString": () => (/* binding */ unifiedLatexFromString)
/* harmony export */ });
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unified */ "../../node_modules/unified/lib/index.js");
/* harmony import */ var _unified_latex_ctan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-ctan */ "./unified-latex-ctan/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _compiler_ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compiler-ast */ "./unified-latex-util-parse/libs/compiler-ast.ts");
/* harmony import */ var _plugin_from_string_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugin-from-string-minimal */ "./unified-latex-util-parse/libs/plugin-from-string-minimal.ts");
/* harmony import */ var _process_macros_and_environments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./process-macros-and-environments */ "./unified-latex-util-parse/libs/process-macros-and-environments.ts");






/**
 * Parse a string to a LaTeX AST.
 */
const unifiedLatexFromString = function unifiedLatexFromString(options) {
    const { mode = "regular", macros = {}, environments = {}, } = options || {};
    // Build up a parsing plugin with only unified components
    const allMacroInfo = Object.assign({}, macros, ...Object.values(_unified_latex_ctan__WEBPACK_IMPORTED_MODULE_0__.macroInfo));
    const allEnvInfo = Object.assign({}, environments, ...Object.values(_unified_latex_ctan__WEBPACK_IMPORTED_MODULE_0__.environmentInfo));
    // Build up a parser that will perform all the needed steps
    const fullParser = (0,unified__WEBPACK_IMPORTED_MODULE_5__.unified)()
        .use(_plugin_from_string_minimal__WEBPACK_IMPORTED_MODULE_3__.unifiedLatexFromStringMinimal, { mode })
        // Math environments that aren't hardcoded into the PEG grammar need to be re-parsed,
        // so do a minimal pass first with just those environments.
        .use(_process_macros_and_environments__WEBPACK_IMPORTED_MODULE_4__.unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse, {
        macros: allMacroInfo,
        environments: allEnvInfo,
    })
        .use(_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexTrimEnvironmentContents)
        .use(_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexTrimRoot)
        .use(_compiler_ast__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexAstComplier);
    const parser = (str) => {
        const file = fullParser.processSync({ value: str });
        return file.result;
    };
    Object.assign(this, { Parser: parser });
};


/***/ }),

/***/ "./unified-latex-util-parse/libs/process-macros-and-environments.ts":
/*!**************************************************************************!*\
  !*** ./unified-latex-util-parse/libs/process-macros-and-environments.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse": () => (/* binding */ unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _reparse_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reparse-math */ "./unified-latex-util-parse/libs/reparse-math.ts");
/* harmony import */ var _unified_latex_util_arguments_libs_attach_arguments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../unified-latex-util-arguments/libs/attach-arguments */ "./unified-latex-util-arguments/libs/attach-arguments.ts");
/* harmony import */ var _unified_latex_util_environments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../unified-latex-util-environments */ "./unified-latex-util-environments/index.ts");






/**
 * Unified plugin to process macros and environments. Any environments that contain math content
 * are reparsed (if needed) in math mode.
 */
const unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse = function unifiedLatexAttachMacroArguments(options) {
    const { environments = {}, macros = {} } = options || {};
    const mathMacros = Object.fromEntries(Object.entries(macros).filter(([_, info]) => { var _a; return ((_a = info.renderInfo) === null || _a === void 0 ? void 0 : _a.inMathMode) === true; }));
    const mathEnvs = Object.fromEntries(Object.entries(environments).filter(([_, info]) => { var _a; return ((_a = info.renderInfo) === null || _a === void 0 ? void 0 : _a.inMathMode) === true; }));
    const mathReparser = (0,_reparse_math__WEBPACK_IMPORTED_MODULE_3__.unifiedLatexReparseMathConstructPlugin)({
        mathEnvs: Object.keys(mathEnvs),
        mathMacros: Object.keys(mathMacros),
    });
    const isRelevantEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createEnvironmentMatcher(environments);
    const isRelevantMathEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createEnvironmentMatcher(mathEnvs);
    return (tree) => {
        // First we attach all arguments/process all nodes/environments that have math content
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, {
            enter: (nodes) => {
                if (!Array.isArray(nodes)) {
                    return;
                }
                (0,_unified_latex_util_arguments_libs_attach_arguments__WEBPACK_IMPORTED_MODULE_4__.attachMacroArgsInArray)(nodes, mathMacros);
            },
            leave: (node) => {
                if (!isRelevantMathEnvironment(node)) {
                    return;
                }
                const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_2__.printRaw)(node.env);
                const envInfo = environments[envName];
                if (!envInfo) {
                    throw new Error(`Could not find environment info for environment "${envName}"`);
                }
                (0,_unified_latex_util_environments__WEBPACK_IMPORTED_MODULE_5__.processEnvironment)(node, envInfo);
            },
        }, { includeArrays: true });
        // Next we reparse macros/envs that may not have been parsed in math mode
        mathReparser(tree);
        // Now we attach all arguments/process all environment bodies
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, {
            enter: (nodes) => {
                if (!Array.isArray(nodes)) {
                    return;
                }
                (0,_unified_latex_util_arguments_libs_attach_arguments__WEBPACK_IMPORTED_MODULE_4__.attachMacroArgsInArray)(nodes, macros);
            },
            leave: (node) => {
                if (!isRelevantEnvironment(node)) {
                    return;
                }
                const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_2__.printRaw)(node.env);
                const envInfo = environments[envName];
                if (!envInfo) {
                    throw new Error(`Could not find environment info for environment "${envName}"`);
                }
                (0,_unified_latex_util_environments__WEBPACK_IMPORTED_MODULE_5__.processEnvironment)(node, envInfo);
            },
        }, { includeArrays: true });
    };
};


/***/ }),

/***/ "./unified-latex-util-parse/libs/reparse-math.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-util-parse/libs/reparse-math.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexReparseMath": () => (/* binding */ unifiedLatexReparseMath),
/* harmony export */   "unifiedLatexReparseMathConstructPlugin": () => (/* binding */ unifiedLatexReparseMathConstructPlugin)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _parse_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parse-minimal */ "./unified-latex-util-parse/libs/parse-minimal.ts");




/**
 * Reparse math environments/macro contents that should have been parsed in math mode but weren't.
 */
const unifiedLatexReparseMath = function unifiedLatexReparseMath(options) {
    const { mathEnvs = [], mathMacros = [] } = options || {};
    return unifiedLatexReparseMathConstructPlugin({ mathMacros, mathEnvs });
};
/**
 * Construct the inner function for the `unifiedLatexReparseMath` plugin. This function should not be used by libraries.
 */
function unifiedLatexReparseMathConstructPlugin({ mathEnvs, mathMacros, }) {
    const isMathEnvironment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createEnvironmentMatcher(mathEnvs);
    const isMathMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(mathMacros);
    return (tree) => {
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_2__.visit)(tree, (node) => {
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyMacro(node)) {
                for (const arg of node.args || []) {
                    if (arg.content.length > 0 &&
                        !wasParsedInMathMode(arg.content)) {
                        arg.content = (0,_parse_minimal__WEBPACK_IMPORTED_MODULE_3__.parseMathMinimal)((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(arg.content));
                    }
                }
            }
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyEnvironment(node)) {
                if (!wasParsedInMathMode(node.content)) {
                    node.content = (0,_parse_minimal__WEBPACK_IMPORTED_MODULE_3__.parseMathMinimal)((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.content));
                }
            }
        }, {
            test: (node) => isMathEnvironment(node) || isMathMacro(node),
        });
    };
}
/**
 * Use a heuristic to decide whether a string was parsed in math mode. The heuristic
 * looks for strings of length greater than 1 or the failure for "_" and "^" to be parsed
 * as a macro.
 */
function wasParsedInMathMode(nodes) {
    return !nodes.some((node) => 
    // If there are multi-char strings or ^ and _ have been parsed as strings, we know
    // that we were not parsed in math mode.
    (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && node.content.length > 1) ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, "^") ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, "_"));
}


/***/ }),

/***/ "./unified-latex-util-pegjs/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-pegjs/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlignEnvironmentPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.AlignEnvironmentPegParser),
/* harmony export */   "ArgSpecPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.ArgSpecPegParser),
/* harmony export */   "GluePegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.GluePegParser),
/* harmony export */   "LatexPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.LatexPegParser),
/* harmony export */   "LigaturesPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.LigaturesPegParser),
/* harmony export */   "MacroSubstitutionPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.MacroSubstitutionPegParser),
/* harmony export */   "PgfkeysPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.PgfkeysPegParser),
/* harmony export */   "SystemePegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.SystemePegParser),
/* harmony export */   "TabularPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.TabularPegParser),
/* harmony export */   "XColorPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.XColorPegParser),
/* harmony export */   "decorateArrayForPegjs": () => (/* reexport safe */ _libs_decorate_array_for_pegjs__WEBPACK_IMPORTED_MODULE_0__.decorateArrayForPegjs),
/* harmony export */   "splitStringsIntoSingleChars": () => (/* reexport safe */ _libs_split_strings__WEBPACK_IMPORTED_MODULE_1__.splitStringsIntoSingleChars)
/* harmony export */ });
/* harmony import */ var _libs_decorate_array_for_pegjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/decorate-array-for-pegjs */ "./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts");
/* harmony import */ var _libs_split_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/split-strings */ "./unified-latex-util-pegjs/libs/split-strings.ts");
/* harmony import */ var _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Pegjs grammars to help parse strings into a `unified-latex` Abstract Syntax Tree (AST). Note,
 * because of the dynamic nature of LaTeX, to get a full AST with arguments attached to macros, etc.,
 * the tree is parsed multiple times.
 *
 * Also included are functions to decorate a `Ast.Node[]` array so that Pegjs can process it as if it were
 * a string. This allows for complex second-pass parsing.
 *
 * ## When should I use this?
 *
 * If you are building libraries to parse specific LaTeX syntax (e.g., to parse `tabular` environments or
 * `systeme` environments, etc.).
 */


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decorateArrayForPegjs": () => (/* binding */ decorateArrayForPegjs)
/* harmony export */ });
/**
 * Pegjs operates on strings. However, strings and arrays are very similar!
 * This function adds `charAt`, `charCodeAt`, and `substring` methods to
 * `array` so that `array` can then be fed to a Pegjs generated parser.
 *
 * @param {[object]} array
 * @returns {[object]}
 */
function decorateArrayForPegjs(array) {
    array.charAt = function (i) {
        return this[i];
    };
    // We don't have a hope of imitating `charCodeAt`, so
    // make it something that won't interfere
    array.charCodeAt = () => 0;
    array.substring = function (i, j) {
        return this.slice(i, j);
    };
    // This function is called when reporting an error,
    // so we convert back to a string.
    array.replace = function (a, b) {
        const ret = JSON.stringify(this);
        return ret.replace(a, b);
    };
    return array;
}


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/split-strings.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/split-strings.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitStringsIntoSingleChars": () => (/* binding */ splitStringsIntoSingleChars)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Splits all multi-character strings into strings that are all single characters.
 */
function splitStringsIntoSingleChars(nodes) {
    return nodes.flatMap((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node)
        ? Array.from(node.content).map((c) => ({
            type: "string",
            content: c,
        }))
        : node);
}


/***/ }),

/***/ "./unified-latex-util-pgfkeys/index.ts":
/*!*********************************************!*\
  !*** ./unified-latex-util-pgfkeys/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatchers": () => (/* reexport safe */ _libs_pgfkeys_parser__WEBPACK_IMPORTED_MODULE_0__.createMatchers),
/* harmony export */   "parsePgfkeys": () => (/* reexport safe */ _libs_pgfkeys_parser__WEBPACK_IMPORTED_MODULE_0__.parsePgfkeys),
/* harmony export */   "pgfkeysArgToObject": () => (/* reexport safe */ _libs_pgfkeys_to_object__WEBPACK_IMPORTED_MODULE_1__.pgfkeysArgToObject)
/* harmony export */ });
/* harmony import */ var _libs_pgfkeys_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/pgfkeys-parser */ "./unified-latex-util-pgfkeys/libs/pgfkeys-parser.ts");
/* harmony import */ var _libs_pgfkeys_to_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/pgfkeys-to-object */ "./unified-latex-util-pgfkeys/libs/pgfkeys-to-object.ts");


// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help manipulate `unified-latex` Abstract Syntax Tree (AST) that contain
 * pgfkeys-style arguments. Note that pgfkeys aren't built into `Ast.Ast`. Instead, parsing
 * nodes as pgfkeys will produce a new (incompatible) AST.
 *
 * ## When should I use this?
 *
 * If you want to parse or manipulate macros/environments with pgfkeys-style arguments.
 */


/***/ }),

/***/ "./unified-latex-util-pgfkeys/libs/pgfkeys-parser.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-util-pgfkeys/libs/pgfkeys-parser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatchers": () => (/* binding */ createMatchers),
/* harmony export */   "parsePgfkeys": () => (/* binding */ parsePgfkeys)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");



function createMatchers() {
    return {
        isComma: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(node, ","),
        isEquals: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(node, "="),
        isWhitespace: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespace(node),
        isParbreak: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.parbreak(node),
        isSameLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.comment(node) && node.sameline,
        isOwnLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.comment(node) && !node.sameline,
    };
}
/**
 * Parse the arguments of a Pgfkeys macro. The `ast`
 * is expected to be a comma separated list of `Item`s.
 * Each item can have 0 or more item parts, which are separated
 * by "=". If `itemPart` is undefined,
 *
 * @export
 * @param {Ast.Node[]} ast
 * @returns {Item[]}
 */
function parsePgfkeys(ast) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_2__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.PgfkeysPegParser.parse(ast, createMatchers());
}


/***/ }),

/***/ "./unified-latex-util-pgfkeys/libs/pgfkeys-to-object.ts":
/*!**************************************************************!*\
  !*** ./unified-latex-util-pgfkeys/libs/pgfkeys-to-object.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pgfkeysArgToObject": () => (/* binding */ pgfkeysArgToObject)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _pgfkeys_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pgfkeys-parser */ "./unified-latex-util-pgfkeys/libs/pgfkeys-parser.ts");



/**
 * Parse `arg` as pgfkeys and return a JavaScript object with the results.
 * The keys will be normalized to strings and the values will be arrays of nodes.
 */
function pgfkeysArgToObject(arg) {
    function parseFront(nodes) {
        return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(nodes);
    }
    function parseBack(nodes) {
        if (!nodes) {
            return [];
        }
        // If the only element is a group, we unwrap it
        if (nodes.length === 1 && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(nodes[0])) {
            return nodes[0].content;
        }
        return nodes;
    }
    let nodeList;
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.argument(arg)) {
        nodeList = arg.content;
    }
    else {
        nodeList = arg;
    }
    const parsedArgs = (0,_pgfkeys_parser__WEBPACK_IMPORTED_MODULE_2__.parsePgfkeys)(nodeList);
    return Object.fromEntries(parsedArgs
        .filter((part) => part.itemParts)
        .map((part) => [
        parseFront(part.itemParts[0]),
        parseBack(part.itemParts[1]),
    ]));
}


/***/ }),

/***/ "./unified-latex-util-print-raw/index.ts":
/*!***********************************************!*\
  !*** ./unified-latex-util-print-raw/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.linebreak),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)
/* harmony export */ });
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-util-print-raw/libs/print-raw.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to print a `unified-latex` Abstract Syntax Tree (AST) to a string.
 *
 * ## When should I use this?
 *
 * If you want to directly print an `Ast.Ast` to a string without any pretty printing or formatting.
 */


/***/ }),

/***/ "./unified-latex-util-print-raw/libs/print-raw.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-print-raw/libs/print-raw.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* binding */ linebreak),
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
const linebreak = Symbol("linebreak");
const ESCAPE = "\\";
/**
 * Renders the AST to an array inserting `linebreak` where needed;
 * This array may be nested.
 *
 * @param {*} node
 */
function _printRaw(node) {
    if (typeof node === "string") {
        return [node];
    }
    if (Array.isArray(node)) {
        return [].concat(...node.map((n) => _printRaw(n)));
    }
    // tmp variables
    let argsString, escape;
    switch (node.type) {
        case "root":
            return _printRaw(node.content);
        case "argument":
            return [node.openMark, ..._printRaw(node.content), node.closeMark];
        case "comment":
            var suffix = node.suffixParbreak ? "" : linebreak;
            // A comment is responsible for printing its own leading whitespace
            var leadingWhitespace = "";
            if (node.sameline && node.leadingWhitespace) {
                leadingWhitespace = " ";
            }
            if (node.sameline) {
                return [
                    leadingWhitespace,
                    "%",
                    ..._printRaw(node.content),
                    suffix,
                ];
            }
            return [linebreak, "%", ..._printRaw(node.content), suffix];
        case "environment":
        case "mathenv":
        case "verbatim":
            var env = _printRaw(node.env);
            var envStart = [ESCAPE + "begin{", ...env, "}"];
            var envEnd = [ESCAPE + "end{", ...env, "}"];
            argsString =
                node.args == null ? [] : _printRaw(node.args);
            return [
                ...envStart,
                ...argsString,
                ..._printRaw(node.content),
                ...envEnd,
            ];
        case "displaymath":
            return [ESCAPE + "[", ..._printRaw(node.content), ESCAPE + "]"];
        case "group":
            return ["{", ..._printRaw(node.content), "}"];
        case "inlinemath":
            return ["$", ..._printRaw(node.content), "$"];
        case "macro":
            argsString = node.args == null ? [] : _printRaw(node.args);
            escape = node.escapeToken == null ? ESCAPE : node.escapeToken;
            return [escape, ..._printRaw(node.content), ...argsString];
        case "parbreak":
            return [linebreak, linebreak];
        case "string":
            return [node.content];
        case "verb":
            return [
                ESCAPE,
                node.env,
                node.escape,
                ..._printRaw(node.content),
                node.escape,
            ];
        case "whitespace":
            return [" "];
        default:
            console.warn("Cannot find render for node ", node, `(of type ${typeof node})`);
            return ["" + node];
    }
}
function printRaw(node, options) {
    const asArray = options != null ? options.asArray : false;
    const printedTokens = _printRaw(node);
    if (asArray) {
        return printedTokens;
    }
    return printedTokens.map((x) => (x === linebreak ? "\n" : x)).join("");
}


/***/ }),

/***/ "./unified-latex-util-render-info/index.ts":
/*!*************************************************!*\
  !*** ./unified-latex-util-render-info/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trimRenderInfo": () => (/* binding */ trimRenderInfo),
/* harmony export */   "updateRenderInfo": () => (/* binding */ updateRenderInfo)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");

/**
 * Updates the `._renderInfo` property on a node to include
 * whatever has been supplied to `renderInfo`. If `renderInfo`
 * is null, no update is performed.
 *
 * *This operation mutates `node`*
 */
function updateRenderInfo(node, renderInfo) {
    if (renderInfo != null) {
        node._renderInfo = Object.assign(Object.assign({}, (node._renderInfo || {})), renderInfo);
    }
    return node;
}
/**
 * Removes any `_renderInfo` and `position` tags present in the AST. This
 * operation is _destructive_.
 */
function trimRenderInfo(ast) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, (node) => {
        delete node._renderInfo;
        delete node.position;
    });
    return ast;
}
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify the `_renderInfo` of a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to compare the structure of an AST without position information or extra information
 * that is kept for pretty-printing, these functions can be used to remove/modify the `_renderInfo`
 * of an `Ast.Node`.
 */


/***/ }),

/***/ "./unified-latex-util-replace/index.ts":
/*!*********************************************!*\
  !*** ./unified-latex-util-replace/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNode": () => (/* reexport safe */ _libs_replace_node__WEBPACK_IMPORTED_MODULE_0__.replaceNode),
/* harmony export */   "replaceStreamingCommand": () => (/* reexport safe */ _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__.replaceStreamingCommand),
/* harmony export */   "replaceStreamingCommandInGroup": () => (/* reexport safe */ _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__.replaceStreamingCommandInGroup),
/* harmony export */   "unifiedLatexReplaceStreamingCommands": () => (/* reexport safe */ _libs_unified_latex_streaming_command__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexReplaceStreamingCommands)
/* harmony export */ });
/* harmony import */ var _libs_replace_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/replace-node */ "./unified-latex-util-replace/libs/replace-node.ts");
/* harmony import */ var _libs_unified_latex_streaming_command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-streaming-command */ "./unified-latex-util-replace/libs/unified-latex-streaming-command.ts");
/* harmony import */ var _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/replace-streaming-command */ "./unified-latex-util-replace/libs/replace-streaming-command.ts");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to recursively replace particular AST nodes.
 */


/***/ }),

/***/ "./unified-latex-util-replace/libs/replace-node.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-util-replace/libs/replace-node.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNode": () => (/* binding */ replaceNode)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");

/**
 * Recursively replace nodes in `ast`. The `visitor` function is called on each node. If
 * `visitor` returns a node or an array of nodes, those nodes replace the node passed to `visitor`.
 * If `null` is returned, the node is deleted. If `undefined` is returned, no replacement happens.
 */
function replaceNode(ast, visitor) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, (node, info) => {
        let replacement = visitor(node, info.context);
        // Returning `undefined` or the same node means we shouldn't replace that node
        if (typeof replacement === "undefined" || replacement === node) {
            return;
        }
        if (!info.containingArray || info.index == null) {
            throw new Error("Trying to delete node, but cannot find containing array");
        }
        if (replacement === null ||
            (Array.isArray(replacement) && replacement.length === 0)) {
            // A null return means that we delete the current node
            info.containingArray.splice(info.index, 1);
            return info.index;
        }
        if (!Array.isArray(replacement)) {
            replacement = [replacement];
        }
        info.containingArray.splice(info.index, 1, ...replacement);
        // We don't want to *reprocess* the nodes we just inserted into the array,
        // lest we get stuck in a recursive loop if the replacement contains the original.
        // Thus we jump to the index after our replacements.
        return info.index + replacement.length;
    });
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/replace-streaming-command.ts":
/*!**********************************************************************!*\
  !*** ./unified-latex-util-replace/libs/replace-streaming-command.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceStreamingCommand": () => (/* binding */ replaceStreamingCommand),
/* harmony export */   "replaceStreamingCommandInGroup": () => (/* binding */ replaceStreamingCommandInGroup)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-split */ "./unified-latex-util-split/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _utils_first_significant_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/first-significant-node */ "./unified-latex-util-replace/libs/utils/first-significant-node.ts");
/* harmony import */ var _utils_replace_streaming_command_in_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/replace-streaming-command-in-array */ "./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts");
/* harmony import */ var _utils_wrap_significant_content__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/wrap-significant-content */ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts");






/**
 * Process streaming commands in a group. If needed, "escape" the group.
 * For example, `{\bfseries xx}` -> `\textbf{xx}`, but `{foo \bfseries xx}` -> `{foo \textbf{xx}}`.
 */
function replaceStreamingCommandInGroup(group, isStreamingCommand, replacer) {
    const content = group.content;
    // If the group started with a streaming command, we want to pop
    // out of the group. E.g. `{\bfseries foo}` -> `\textbf{foo}` and not `{\textbf{foo}}`
    let popFromGroup = isStreamingCommand((0,_utils_first_significant_node__WEBPACK_IMPORTED_MODULE_3__.firstSignificantNode)(content));
    let innerProcessed = replaceStreamingCommand(content, isStreamingCommand, replacer);
    // If the group consisted of just streaming commands (for some reason...)
    // it should be eliminated
    if (innerProcessed.length === 0) {
        return [];
    }
    if (popFromGroup) {
        return innerProcessed;
    }
    else {
        return [{ type: "group", content: innerProcessed }];
    }
}
/**
 * Given a group or a node array, look for streaming commands (e.g., `\bfseries`) and replace them
 * with the specified macro. The "arguments" of the streaming command are passed to `replacer` and the return
 * value of `replacer` is inserted into the stream.
 *
 * By default, this command will split at parbreaks (since commands like `\textbf{...} do not accept parbreaks in their
 * contents) and call `replacer` multiple times, once per paragraph.
 */
function replaceStreamingCommand(ast, isStreamingCommand, replacer) {
    if (typeof isStreamingCommand !== "function") {
        throw new Error(`'isStreamingCommand' must be a function, not '${typeof isStreamingCommand}'`);
    }
    let processedContent = [];
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(ast)) {
        processedContent = replaceStreamingCommandInGroup(ast, isStreamingCommand, replacer);
    }
    if (Array.isArray(ast)) {
        // Streaming commands that come at the end of a sequence of nodes don't do anything.
        // They also will consume whitespace, so we should remove them and the whitespace.
        const nodes = ast;
        let scanIndex = nodes.length;
        let sliceIndex = scanIndex;
        while (scanIndex > 0 &&
            (isStreamingCommand(nodes[scanIndex - 1]) ||
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(nodes[scanIndex - 1]))) {
            scanIndex--;
            if (isStreamingCommand(nodes[scanIndex])) {
                sliceIndex = scanIndex;
            }
        }
        if (sliceIndex !== nodes.length) {
            nodes.splice(sliceIndex);
        }
        const isPar = (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node, "par");
        // We split on both a parbreak and a literal `\par`. But we will
        // normalize everything to be parbreaks
        const splitByPar = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition)(nodes, isPar);
        splitByPar.separators = splitByPar.separators.map((sep) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(sep) ? sep : { type: "parbreak" });
        const replacers = [];
        let segments = splitByPar.segments.map((segment) => {
            function applyAccumulatedReplacers(nodes) {
                if (replacers.length === 0) {
                    return nodes;
                }
                return (0,_utils_wrap_significant_content__WEBPACK_IMPORTED_MODULE_5__.wrapSignificantContent)(nodes, composeReplacers(replacers));
            }
            const { foundStreamingCommands } = (0,_utils_replace_streaming_command_in_array__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommandInArray)(segment, isStreamingCommand, replacer);
            // All streaming commands in `segment` have now been replaced. However,
            // there might be commands from the previous paragraphs that should wrap
            // the current segment!
            const ret = applyAccumulatedReplacers(segment);
            // Any streaming commands from this segment will carry over to the next,
            // so keep track of them.
            foundStreamingCommands.forEach((macro) => {
                replacers.push((nodes) => {
                    const ret = replacer(nodes, macro);
                    if (!Array.isArray(ret)) {
                        return [ret];
                    }
                    return ret;
                });
            });
            return ret;
        });
        // Leading/trailing whitespace was hoisted in front/back of each replacer.
        // Since we're separated by parbreaks, we can safely trim all that whitespace.
        if (segments.length > 1) {
            segments.forEach((segment, i) => {
                if (i === 0) {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(segment);
                }
                else if (i === segments.length - 1) {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(segment);
                }
                else {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trim)(segment);
                }
            });
        }
        processedContent = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__.unsplitOnMacro)({
            segments: segments,
            macros: splitByPar.separators,
        });
    }
    return processedContent;
}
/**
 * Given a sequence of replacer functions `[f, g, h]` return
 * `h \circ g \circ f`
 *
 * @param {((nodes: Ast.Node[]) => Ast.Node)[]} replacers
 * @returns {(nodes: Ast.Node[]) => Ast.Node}
 */
function composeReplacers(replacers) {
    if (replacers.length === 0) {
        throw new Error("Cannot compose zero replacement functions");
    }
    return (nodes) => {
        let ret = nodes;
        for (let i = 0; i < replacers.length; i++) {
            const func = replacers[i];
            ret = func(ret);
        }
        return ret;
    };
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/unified-latex-streaming-command.ts":
/*!****************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/unified-latex-streaming-command.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexReplaceStreamingCommands": () => (/* binding */ unifiedLatexReplaceStreamingCommands)
/* harmony export */ });
/* harmony import */ var _unified_latex_lint_utils_replace_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-lint/utils/replace-node */ "./unified-latex-lint/utils/replace-node.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./replace-streaming-command */ "./unified-latex-util-replace/libs/replace-streaming-command.ts");





/**
 * Unified plugin to replace all found streaming commands with their argument-style equivalents.
 * This only applies to sections of the tree with no math ancestor.
 *
 * @param options.replacer A record of macro names and replacer functions. A replacer function accepts content and the original streaming command and is expected to return the argument-style command. It may be called multiple times per streaming command.
 */
const unifiedLatexReplaceStreamingCommands = function unifiedLatexReplaceStreamingCommands(options) {
    const { replacers = {} } = options || {};
    const isReplaceable = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createMacroMatcher(replacers);
    return (tree) => {
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (group, info) => {
            if (info.context.hasMathModeAncestor ||
                !group.content.some(isReplaceable)) {
                return;
            }
            let fixed = (0,_replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommand)(group, isReplaceable, (content, command) => {
                return replacers[command.content](content, command);
            });
            // We cannot replace the node unless we can access the containing array.
            if (!info.containingArray || info.index == null) {
                return;
            }
            // `fixed` may consist of only whitespace. If this is the case,
            // surrounding whitespace must trimmed before
            // inserting the group's contents.
            const prevToken = info.containingArray[info.index - 1];
            const nextToken = info.containingArray[info.index + 1];
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(prevToken) &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(fixed[0])) {
                (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(fixed);
            }
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(nextToken) &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(fixed[fixed.length - 1])) {
                (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(fixed);
            }
            (0,_unified_latex_lint_utils_replace_node__WEBPACK_IMPORTED_MODULE_0__.replaceNodeDuringVisit)(fixed, info);
        }, { test: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.group });
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (nodes, info) => {
            if (info.context.hasMathModeAncestor ||
                !nodes.some(isReplaceable)) {
                return;
            }
            const replaced = (0,_replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommand)(nodes, isReplaceable, (content, command) => {
                return replacers[command.content](content, command);
            });
            // If we get back a different array than we input, the replacement did
            // not happen in-place. In this case we need to manipulate `nodes`.
            if (replaced !== nodes) {
                nodes.length = 0;
                nodes.push(...replaced);
            }
        }, { includeArrays: true, test: Array.isArray });
    };
};


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/first-significant-node.ts":
/*!*************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/first-significant-node.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "firstSignificantNode": () => (/* binding */ firstSignificantNode)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Returns the first non-whitespace/non-comment node in `nodes`. If there is no such
 * node, `null` is returned.
 */
function firstSignificantNode(nodes) {
    let firstNode = null;
    for (const node of nodes) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            continue;
        }
        firstNode = node;
        break;
    }
    return firstNode;
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts":
/*!*********************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "joinWithoutExcessWhitespace": () => (/* binding */ joinWithoutExcessWhitespace)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");


/**
 * Is the node space-like? I.e., is it whitespace or
 * a comment with leading whitespace?
 */
function isSpaceLike(node) {
    return (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) ||
        (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && Boolean(node.leadingWhitespace)));
}
/**
 * Similar to `head.push(...tail)` except that whitespace at the start
 * of `tail` and the end of `head` is collapsed.
 */
function joinWithoutExcessWhitespace(head, tail) {
    if (tail.length === 0) {
        return;
    }
    if (head.length === 0) {
        head.push(...tail);
        return;
    }
    const headEnd = head[head.length - 1];
    const tailStart = tail[0];
    // Whitespace we can just trim off from either end
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(tailStart)) {
        head.push(...tail.slice(1));
        return;
    }
    // If there's no whitespace at one of the ends, no need to worry
    // unless `tailStart` is a comment, in which case it should "eat"
    // the whitespace
    if (!isSpaceLike(headEnd) || !isSpaceLike(tailStart)) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(tailStart)) {
            const comment = {
                type: "comment",
                content: tailStart.content,
                sameline: true,
                leadingWhitespace: true,
            };
            tail = tail.slice(1);
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.trimStart)(tail);
            head.pop();
            head.push(comment, ...tail);
            return;
        }
        head.push(...tail);
        return;
    }
    // If we're here, we have a comment with leading whitespace on one side
    // and whitespace/comments on the other.
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(tailStart)) {
        if (tailStart.leadingWhitespace || tailStart.sameline) {
            head.push({ type: "comment", content: tailStart.content }, ...tail.slice(1));
            return;
        }
        head.push(...tail);
        return;
    }
    // Exactly one side is a comment, so we should trim the whitespace and keep the comment,
    // but make sure the comment has leading whitespace!
    let comment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(headEnd) ? headEnd : tailStart;
    if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(comment)) {
        throw new Error(`Expected a comment but found ${JSON.stringify(comment)}`);
    }
    if (!comment.leadingWhitespace || !comment.sameline) {
        comment = {
            type: "comment",
            content: comment.content,
            leadingWhitespace: true,
            sameline: true,
        };
    }
    head.pop();
    head.push(comment, ...tail.slice(1));
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts":
/*!*************************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceStreamingCommandInArray": () => (/* binding */ replaceStreamingCommandInArray)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _join_without_excess_whitespace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./join-without-excess-whitespace */ "./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts");
/* harmony import */ var _wrap_significant_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrap-significant-content */ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts");



/**
 * Replace commands identified by `isStreamingCommand` with the return value of `replacer`.
 * E.g., the array `[head, streamingCommand, ...tail]` will become `[head, replacer(tail, streamingCommand)]`.
 * This function does not split based on parbreaks/etc.. It is right-associative and returns
 * the streaming commands that were encountered.
 */
function replaceStreamingCommandInArray(nodes, isStreamingCommand, replacer) {
    // Streaming commands that come at the end don't do anything,
    // so we should remove them
    while (nodes.length > 0 && isStreamingCommand(nodes[nodes.length - 1])) {
        nodes.pop();
        (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trimEnd)(nodes);
    }
    const foundStreamingCommands = [];
    for (let i = nodes.length - 1; i >= 0; i--) {
        const node = nodes[i];
        if (isStreamingCommand(node)) {
            const wrapper = (content) => replacer(content, node);
            let tail = nodes.slice(i + 1);
            // Streaming commands are followed by whitespace, which becomes unneeded when the commands are replaced.
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trimStart)(tail);
            tail = (0,_wrap_significant_content__WEBPACK_IMPORTED_MODULE_2__.wrapSignificantContent)(tail, wrapper);
            foundStreamingCommands.push(node);
            // Trim off what we're about to replace!
            nodes.splice(i);
            (0,_join_without_excess_whitespace__WEBPACK_IMPORTED_MODULE_1__.joinWithoutExcessWhitespace)(nodes, tail);
        }
    }
    return { foundStreamingCommands };
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts":
/*!***************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/wrap-significant-content.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapSignificantContent": () => (/* binding */ wrapSignificantContent)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Wraps `content` in the specified wrapper. This command is roughly equivalent to
 * `wrapper(content)` except that leading and trailing whitespace and comments are extracted
 * from `content` and moved to the front or back of the return array. For example,
 * `[" ", "foo", "bar", "% xxx"]` -> `[" ", wrapped(["foo", "bar"]), "% xxx"]`.
 *
 */
function wrapSignificantContent(content, wrapper) {
    let hoistUntil = 0;
    let hoistAfter = content.length;
    for (let i = 0; i < content.length; i++) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(content[i]) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(content[i])) {
            hoistUntil = i + 1;
            continue;
        }
        break;
    }
    for (let j = content.length - 1; j >= 0; j--) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(content[j]) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(content[j])) {
            hoistAfter = j;
            continue;
        }
        break;
    }
    if (hoistUntil === 0 && hoistAfter === content.length) {
        return ensureArray(wrapper(content));
    }
    const frontMatter = content.slice(0, hoistUntil);
    const middle = content.slice(hoistUntil, hoistAfter);
    const backMatter = content.slice(hoistAfter, content.length);
    return frontMatter.concat(wrapper(middle), backMatter);
}
function ensureArray(x) {
    if (!Array.isArray(x)) {
        return [x];
    }
    return x;
}


/***/ }),

/***/ "./unified-latex-util-split/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-split/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayJoin": () => (/* reexport safe */ _libs_array_join__WEBPACK_IMPORTED_MODULE_3__.arrayJoin),
/* harmony export */   "splitOnCondition": () => (/* reexport safe */ _libs_split_on_condition__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition),
/* harmony export */   "splitOnMacro": () => (/* reexport safe */ _libs_split_on_macro__WEBPACK_IMPORTED_MODULE_0__.splitOnMacro),
/* harmony export */   "unsplitOnMacro": () => (/* reexport safe */ _libs_unsplit_on_macro__WEBPACK_IMPORTED_MODULE_2__.unsplitOnMacro)
/* harmony export */ });
/* harmony import */ var _libs_split_on_macro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/split-on-macro */ "./unified-latex-util-split/libs/split-on-macro.ts");
/* harmony import */ var _libs_split_on_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/split-on-condition */ "./unified-latex-util-split/libs/split-on-condition.ts");
/* harmony import */ var _libs_unsplit_on_macro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unsplit-on-macro */ "./unified-latex-util-split/libs/unsplit-on-macro.ts");
/* harmony import */ var _libs_array_join__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/array-join */ "./unified-latex-util-split/libs/array-join.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to manipulate `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want break apart or join an array of nodes based on a condition. For example,
 * this is used to split on `&` characters in the `align` environment.
 */ 


/***/ }),

/***/ "./unified-latex-util-split/libs/array-join.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-util-split/libs/array-join.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayJoin": () => (/* binding */ arrayJoin)
/* harmony export */ });
/**
 * Joins an array of arrays with the item `sep`
 */
function arrayJoin(array, sep) {
    return array.flatMap((item, i) => {
        if (i === 0) {
            return item;
        }
        if (Array.isArray(sep)) {
            return [...sep, ...item];
        }
        else {
            return [sep, ...item];
        }
    });
}


/***/ }),

/***/ "./unified-latex-util-split/libs/split-on-condition.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-split/libs/split-on-condition.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitOnCondition": () => (/* binding */ splitOnCondition)
/* harmony export */ });
/**
 * Split a list of nodes based on whether `splitFunc` returns `true`.
 * If `onlySplitOnFirstOccurrence` is set to true in the `options` object, then
 * there will be at most two segments returned.
 */
function splitOnCondition(nodes, splitFunc = () => false, options) {
    if (!Array.isArray(nodes)) {
        throw new Error(`Can only split an Array, not ${nodes}`);
    }
    const { onlySplitOnFirstOccurrence = false } = options || {};
    const splitIndices = [];
    for (let i = 0; i < nodes.length; i++) {
        if (splitFunc(nodes[i])) {
            splitIndices.push(i);
            if (onlySplitOnFirstOccurrence) {
                break;
            }
        }
    }
    // Short circuit if there is no splitting to be done
    if (splitIndices.length === 0) {
        return { segments: [nodes], separators: [] };
    }
    let separators = splitIndices.map((i) => nodes[i]);
    let segments = splitIndices.map((splitEnd, i) => {
        const splitStart = i === 0 ? 0 : splitIndices[i - 1] + 1;
        return nodes.slice(splitStart, splitEnd);
    });
    segments.push(nodes.slice(splitIndices[splitIndices.length - 1] + 1, nodes.length));
    return { segments, separators };
}


/***/ }),

/***/ "./unified-latex-util-split/libs/split-on-macro.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-util-split/libs/split-on-macro.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitOnMacro": () => (/* binding */ splitOnMacro)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _split_on_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./split-on-condition */ "./unified-latex-util-split/libs/split-on-condition.ts");


/**
 * Split an array of AST nodes based on a macro. An object `{segments: [], macros: []}`
 * is returned. The original array is reconstructed as
 * `segments[0] + macros[0] + segments[1] + ...`.
 *
 * @param {[object]} ast
 * @param {(string|[string])} macroName
 * @returns {{segments: [object], macros: [object]}}
 */
function splitOnMacro(ast, macroName) {
    if (typeof macroName === "string") {
        macroName = [macroName];
    }
    if (!Array.isArray(macroName)) {
        throw new Error("Type coercion failed");
    }
    const isSeparator = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macroName);
    const { segments, separators } = (0,_split_on_condition__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition)(ast, isSeparator);
    return { segments, macros: separators };
}


/***/ }),

/***/ "./unified-latex-util-split/libs/unsplit-on-macro.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-util-split/libs/unsplit-on-macro.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsplitOnMacro": () => (/* binding */ unsplitOnMacro)
/* harmony export */ });
/**
 * Does the reverse of `splitOnMacro`
 */
function unsplitOnMacro({ segments, macros, }) {
    if (segments.length === 0) {
        console.warn("Trying to join zero segments");
        return [];
    }
    if (segments.length !== macros.length + 1) {
        console.warn("Mismatch between lengths of macros and segments when trying to unsplit");
    }
    let ret = segments[0];
    for (let i = 0; i < macros.length; i++) {
        // Even though the type of macros[i] is node and not array,
        // Array.concat still works
        ret = ret.concat(macros[i]).concat(segments[i + 1]);
    }
    return ret;
}


/***/ }),

/***/ "./unified-latex-util-trim/index.ts":
/*!******************************************!*\
  !*** ./unified-latex-util-trim/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasWhitespaceEquivalent": () => (/* reexport safe */ _libs_has_whitespace_equivalent__WEBPACK_IMPORTED_MODULE_3__.hasWhitespaceEquivalent),
/* harmony export */   "trim": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trim),
/* harmony export */   "trimEnd": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trimEnd),
/* harmony export */   "trimStart": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trimStart),
/* harmony export */   "unifiedLatexTrimEnvironmentContents": () => (/* reexport safe */ _libs_unified_latex_trim_environment_contents__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexTrimEnvironmentContents),
/* harmony export */   "unifiedLatexTrimRoot": () => (/* reexport safe */ _libs_unified_latex_trim_root__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexTrimRoot)
/* harmony export */ });
/* harmony import */ var _libs_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/trim */ "./unified-latex-util-trim/libs/trim.ts");
/* harmony import */ var _libs_unified_latex_trim_environment_contents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-trim-environment-contents */ "./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts");
/* harmony import */ var _libs_unified_latex_trim_root__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unified-latex-trim-root */ "./unified-latex-util-trim/libs/unified-latex-trim-root.ts");
/* harmony import */ var _libs_has_whitespace_equivalent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/has-whitespace-equivalent */ "./unified-latex-util-trim/libs/has-whitespace-equivalent.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to remove whitespace from the ends of an array of nodes.
 *
 * Note that whitespace can come from a `Ast.Whitespace` node or from an
 * `Ast.Comment` node that has leading whitespace. These functions take care
 * to deal with both situations.
 */


/***/ }),

/***/ "./unified-latex-util-trim/libs/has-whitespace-equivalent.ts":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-trim/libs/has-whitespace-equivalent.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasWhitespaceEquivalent": () => (/* binding */ hasWhitespaceEquivalent)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Returns whether the array has whitespace at the start/end. Comments with `leadingWhitespace === true`
 * are counted as whitespace. Other comments are ignored.
 */
function hasWhitespaceEquivalent(nodes) {
    let start = false;
    let end = false;
    for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            // A comment with leading whitespace will render with leading whitespace,
            // so if we encounter one, we should consider ourselves to have leading whitespace.
            if (node.leadingWhitespace) {
                start = true;
                break;
            }
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node)) {
            start = true;
        }
        break;
    }
    for (let j = nodes.length - 1; j >= 0; j--) {
        const node = nodes[j];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            if (node.leadingWhitespace) {
                end = true;
                break;
            }
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node)) {
            end = true;
        }
        break;
    }
    return { start, end };
}


/***/ }),

/***/ "./unified-latex-util-trim/libs/trim.ts":
/*!**********************************************!*\
  !*** ./unified-latex-util-trim/libs/trim.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trim": () => (/* binding */ trim),
/* harmony export */   "trimEnd": () => (/* binding */ trimEnd),
/* harmony export */   "trimStart": () => (/* binding */ trimStart)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Trims whitespace and parbreaks from the start and end
 * of an array. The number of trimmed nodes is returned.
 * Special care is taken to preserve comments, though any whitespace
 * before the first comment(s) or after the last comment(s) is trimmed.
 */
function trim(nodes) {
    if (!Array.isArray(nodes)) {
        console.warn("Trying to trim a non-array ast", nodes);
        return nodes;
    }
    const { trimmedStart } = trimStart(nodes);
    const { trimmedEnd } = trimEnd(nodes);
    return { trimmedStart, trimmedEnd };
}
/**
 * Trim whitespace and parbreaks from the left of an array.
 */
function trimStart(nodes) {
    const { start } = amountOfLeadingAndTrailingWhitespace(nodes);
    nodes.splice(0, start);
    // If there are comments at the start, they might have leading whitespace.
    // This leading whitespace should be trimmed
    for (const leadingToken of nodes) {
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(leadingToken)) {
            break;
        }
        if (leadingToken.leadingWhitespace || leadingToken.sameline) {
            leadingToken.leadingWhitespace = false;
            // We remove the position information from this token to indicate that we've edited it
            delete leadingToken.position;
        }
        // Special care must be taken. If the comment was on the same line as a
        // parskip, it will no longer be on the same line after the trimming.
        // Thus, we must modify the comment.
        if (start > 0 && leadingToken.sameline) {
            leadingToken.sameline = false;
            delete leadingToken.position;
        }
    }
    return { trimmedStart: start };
}
/**
 * Trim whitespace and parbreaks from the right of an array.
 */
function trimEnd(nodes) {
    const { end } = amountOfLeadingAndTrailingWhitespace(nodes);
    nodes.splice(nodes.length - end, end);
    // Trim off any spaces belonging to trailing comments
    for (let i = nodes.length - 1; i >= 0; i--) {
        const trailingToken = nodes[i];
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(trailingToken)) {
            break;
        }
        // We don't trim spaces before trailing same-line comments. This is a stylistic choice
        // so that
        // `foo %xxx` does not become `foo%xxx`.
        // The latter is strictly "correct" for a trim function, but it is prettier to format
        // code preserving the space before the sameline comment
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(trailingToken) &&
            trailingToken.leadingWhitespace &&
            !trailingToken.sameline) {
            trailingToken.leadingWhitespace = false;
            delete trailingToken.position;
        }
    }
    return { trimmedEnd: end };
}
/**
 * Returns the number of whitespace/parbreak nodes at the start and end of an array.
 */
function amountOfLeadingAndTrailingWhitespace(ast) {
    let start = 0;
    let end = 0;
    for (const node of ast) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node)) {
            start++;
        }
        else {
            break;
        }
    }
    if (start === ast.length) {
        return { start, end: 0 };
    }
    // Find the padding on the right
    for (let i = ast.length - 1; i >= 0; i--) {
        const node = ast[i];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node)) {
            end++;
        }
        else {
            break;
        }
    }
    return { start, end };
}


/***/ }),

/***/ "./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts":
/*!*********************************************************************************!*\
  !*** ./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexTrimEnvironmentContents": () => (/* binding */ unifiedLatexTrimEnvironmentContents)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./trim */ "./unified-latex-util-trim/libs/trim.ts");



/**
 * Unified plugin to trim the whitespace from the start/end of any environments, including
 * math environments.
 */
const unifiedLatexTrimEnvironmentContents = function unifiedLatexTrimEnvironmentContents() {
    return (tree) => {
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, (node) => {
            if (!(_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.math(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyEnvironment(node))) {
                return;
            }
            // If the first thing in the environment is a sameline comment,
            // we actually want to start trimming *after* it.
            let firstNode = node.content[0];
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(firstNode) && firstNode.sameline) {
                firstNode.suffixParbreak = false;
                (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(node.content);
                // We play a nasty trick here. This call to `trimStart`
                // will actually modify `node.content` if `node.content.slice(1)` starts
                // with a comment that has leading whitespace (it will remove that whitespace).
                // However, it won't remove any elements from `node.content`; we need
                // to do that ourselves.
                const { trimmedStart } = (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(node.content.slice(1));
                node.content.splice(1, trimmedStart);
            }
            else {
                (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trim)(node.content);
            }
        });
    };
};


/***/ }),

/***/ "./unified-latex-util-trim/libs/unified-latex-trim-root.ts":
/*!*****************************************************************!*\
  !*** ./unified-latex-util-trim/libs/unified-latex-trim-root.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexTrimRoot": () => (/* binding */ unifiedLatexTrimRoot)
/* harmony export */ });
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trim */ "./unified-latex-util-trim/libs/trim.ts");

/**
 * Unified plugin to trim the whitespace from the start/end of the root element.
 */
const unifiedLatexTrimRoot = function unifiedLatexTrimRoot() {
    return (tree) => {
        (0,_trim__WEBPACK_IMPORTED_MODULE_0__.trim)(tree.content);
    };
};


/***/ }),

/***/ "./unified-latex-util-visit/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-visit/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.CONTINUE),
/* harmony export */   "EXIT": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.EXIT),
/* harmony export */   "SKIP": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.SKIP),
/* harmony export */   "visit": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.visit)
/* harmony export */ });
/* harmony import */ var _libs_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/visit */ "./unified-latex-util-visit/libs/visit.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to traverse a `unified-latex` Abstract Syntax Tree (AST). `visit` is
 * very similar to [estree-util-visit](https://github.com/syntax-tree/estree-util-visit).
 *
 * ## When should I use this?
 *
 * If you want to recursively replace particular AST nodes.
 */


/***/ }),

/***/ "./unified-latex-util-visit/libs/list-math-children.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-visit/libs/list-math-children.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "listMathChildren": () => (/* binding */ listMathChildren)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * List all props of the current node that should be processed
 * in math mode or not in math mode. If math mode is not specified in the node's render
 * info, empty lists are returned.
 *
 * For example `\text{foo}` will report that `args` should *not* be processed in math mode,
 * since it's contents should always be processed in text mode.
 */
function listMathChildren(node) {
    const NULL_RETURN = { enter: [], leave: [] };
    if (Array.isArray(node)) {
        return NULL_RETURN;
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.math(node)) {
        // When we enter a math environment, our content is always
        // considered math mode
        return { enter: ["content"], leave: [] };
    }
    const renderInfo = node._renderInfo || {};
    if (renderInfo.inMathMode == null) {
        return NULL_RETURN;
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node)) {
        if (renderInfo.inMathMode === true) {
            return { enter: ["args"], leave: [] };
        }
        else if (renderInfo.inMathMode === false) {
            return { enter: [], leave: ["args"] };
        }
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.environment(node)) {
        if (renderInfo.inMathMode === true) {
            return { enter: ["content"], leave: [] };
        }
        else {
            return { enter: [], leave: ["content"] };
        }
    }
    return NULL_RETURN;
}


/***/ }),

/***/ "./unified-latex-util-visit/libs/visit.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-visit/libs/visit.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": () => (/* binding */ CONTINUE),
/* harmony export */   "EXIT": () => (/* binding */ EXIT),
/* harmony export */   "SKIP": () => (/* binding */ SKIP),
/* harmony export */   "visit": () => (/* binding */ visit)
/* harmony export */ });
/* harmony import */ var _list_math_children__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-math-children */ "./unified-latex-util-visit/libs/list-math-children.ts");

/**
 * Continue traversing as normal
 */
const CONTINUE = Symbol("continue");
/**
 * Do not traverse this node’s children
 */
const SKIP = Symbol("skip");
/**
 * Stop traversing immediately
 */
const EXIT = Symbol("exit");
const DEFAULT_CONTEXT = {
    inMathMode: false,
    hasMathModeAncestor: false,
};
/**
 * Visit children of tree which pass a test
 *
 * @param {Node} tree Abstract syntax tree to walk
 * @param {Visitor|Visitors} [visitor] Function to run for each node
 */
function visit(tree, visitor, options) {
    const { startingContext = DEFAULT_CONTEXT, test = () => true, includeArrays = false, } = options || {};
    let enter;
    let leave;
    if (typeof visitor === "function") {
        enter = visitor;
    }
    else if (visitor && typeof visitor === "object") {
        enter = visitor.enter;
        leave = visitor.leave;
    }
    walk(tree, {
        key: undefined,
        index: undefined,
        parents: [],
        containingArray: undefined,
        context: Object.assign({}, startingContext),
    });
    /**
     * @param {Node} node
     * @param {string?} key
     * @param {number?} index
     * @param {Array.<Node>} parents
     */
    function walk(node, { key, index, parents, context, containingArray }) {
        const nodePassesTest = includeArrays
            ? test(node, { key, index, parents, context, containingArray })
            : !Array.isArray(node) &&
                test(node, { key, index, parents, context, containingArray });
        const result = enter && nodePassesTest
            ? toResult(enter(node, {
                key,
                index,
                parents,
                context,
                containingArray,
            }))
            : [CONTINUE];
        if (result[0] === EXIT) {
            return result;
        }
        if (result[0] === SKIP) {
            return leave && nodePassesTest
                ? toResult(leave(node, {
                    key,
                    index,
                    parents,
                    context,
                    containingArray,
                }))
                : result;
        }
        if (Array.isArray(node)) {
            // The `value` array might be modified in place as we traverse it, so
            // we use a traditional for loop.
            for (let index = 0; index > -1 && index < node.length; index++) {
                const item = node[index];
                const result = walk(item, {
                    key,
                    index,
                    parents,
                    context,
                    containingArray: node,
                });
                if (result[0] === EXIT) {
                    return result;
                }
                if (typeof result[1] === "number") {
                    // The for loop will increment i every pass. However,
                    // if an index was returned, that's where we want to start next time.
                    index = result[1] - 1;
                }
            }
        }
        else {
            // We don't want to recursively apply to the `content`
            // of all types (e.g., comments and macros), so specify
            // a blacklist.
            let childProps = ["content", "args"];
            switch (node.type) {
                case "macro":
                    childProps = ["args"];
                    break;
                case "comment":
                case "string":
                case "verb":
                case "verbatim":
                    childProps = [];
                    break;
                default:
                    break;
            }
            const mathModeProps = (0,_list_math_children__WEBPACK_IMPORTED_MODULE_0__.listMathChildren)(node);
            for (const key of childProps) {
                const value = node[key];
                const grandparents = [node].concat(parents);
                if (value == null) {
                    continue;
                }
                // We may switch in/out of math mode as we pass to node[key]
                const newContext = Object.assign({}, context);
                if (mathModeProps.enter.includes(key)) {
                    newContext.inMathMode = true;
                    newContext.hasMathModeAncestor = true;
                }
                else if (mathModeProps.leave.includes(key)) {
                    newContext.inMathMode = false;
                }
                const result = walk(value, {
                    key,
                    index: undefined,
                    parents: grandparents,
                    context: newContext,
                    containingArray: undefined,
                });
                if (result[0] === EXIT) {
                    return result;
                }
            }
        }
        return leave && nodePassesTest
            ? toResult(leave(node, {
                key,
                index,
                parents,
                context,
                containingArray,
            }))
            : result;
    }
}
/**
 * Ensures a result is an `ActionTuple`s
 */
function toResult(value) {
    if (value == null) {
        return [CONTINUE];
    }
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === "number") {
        return [CONTINUE, value];
    }
    return [value];
}


/***/ }),

/***/ "../../node_modules/bail/index.js":
/*!****************************************!*\
  !*** ../../node_modules/bail/index.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bail": () => (/* binding */ bail)
/* harmony export */ });
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
function bail(error) {
  if (error) {
    throw error
  }
}


/***/ }),

/***/ "../../node_modules/ccount/index.js":
/*!******************************************!*\
  !*** ../../node_modules/ccount/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ccount": () => (/* binding */ ccount)
/* harmony export */ });
/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */
function ccount(value, character) {
  const source = String(value)

  if (typeof character !== 'string') {
    throw new TypeError('Expected character')
  }

  let count = 0
  let index = source.indexOf(character)

  while (index !== -1) {
    count++
    index = source.indexOf(character, index + character.length)
  }

  return count
}


/***/ }),

/***/ "../../node_modules/character-entities-html4/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/character-entities-html4/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "characterEntitiesHtml4": () => (/* binding */ characterEntitiesHtml4)
/* harmony export */ });
/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */
const characterEntitiesHtml4 = {
  nbsp: ' ',
  iexcl: '¡',
  cent: '¢',
  pound: '£',
  curren: '¤',
  yen: '¥',
  brvbar: '¦',
  sect: '§',
  uml: '¨',
  copy: '©',
  ordf: 'ª',
  laquo: '«',
  not: '¬',
  shy: '­',
  reg: '®',
  macr: '¯',
  deg: '°',
  plusmn: '±',
  sup2: '²',
  sup3: '³',
  acute: '´',
  micro: 'µ',
  para: '¶',
  middot: '·',
  cedil: '¸',
  sup1: '¹',
  ordm: 'º',
  raquo: '»',
  frac14: '¼',
  frac12: '½',
  frac34: '¾',
  iquest: '¿',
  Agrave: 'À',
  Aacute: 'Á',
  Acirc: 'Â',
  Atilde: 'Ã',
  Auml: 'Ä',
  Aring: 'Å',
  AElig: 'Æ',
  Ccedil: 'Ç',
  Egrave: 'È',
  Eacute: 'É',
  Ecirc: 'Ê',
  Euml: 'Ë',
  Igrave: 'Ì',
  Iacute: 'Í',
  Icirc: 'Î',
  Iuml: 'Ï',
  ETH: 'Ð',
  Ntilde: 'Ñ',
  Ograve: 'Ò',
  Oacute: 'Ó',
  Ocirc: 'Ô',
  Otilde: 'Õ',
  Ouml: 'Ö',
  times: '×',
  Oslash: 'Ø',
  Ugrave: 'Ù',
  Uacute: 'Ú',
  Ucirc: 'Û',
  Uuml: 'Ü',
  Yacute: 'Ý',
  THORN: 'Þ',
  szlig: 'ß',
  agrave: 'à',
  aacute: 'á',
  acirc: 'â',
  atilde: 'ã',
  auml: 'ä',
  aring: 'å',
  aelig: 'æ',
  ccedil: 'ç',
  egrave: 'è',
  eacute: 'é',
  ecirc: 'ê',
  euml: 'ë',
  igrave: 'ì',
  iacute: 'í',
  icirc: 'î',
  iuml: 'ï',
  eth: 'ð',
  ntilde: 'ñ',
  ograve: 'ò',
  oacute: 'ó',
  ocirc: 'ô',
  otilde: 'õ',
  ouml: 'ö',
  divide: '÷',
  oslash: 'ø',
  ugrave: 'ù',
  uacute: 'ú',
  ucirc: 'û',
  uuml: 'ü',
  yacute: 'ý',
  thorn: 'þ',
  yuml: 'ÿ',
  fnof: 'ƒ',
  Alpha: 'Α',
  Beta: 'Β',
  Gamma: 'Γ',
  Delta: 'Δ',
  Epsilon: 'Ε',
  Zeta: 'Ζ',
  Eta: 'Η',
  Theta: 'Θ',
  Iota: 'Ι',
  Kappa: 'Κ',
  Lambda: 'Λ',
  Mu: 'Μ',
  Nu: 'Ν',
  Xi: 'Ξ',
  Omicron: 'Ο',
  Pi: 'Π',
  Rho: 'Ρ',
  Sigma: 'Σ',
  Tau: 'Τ',
  Upsilon: 'Υ',
  Phi: 'Φ',
  Chi: 'Χ',
  Psi: 'Ψ',
  Omega: 'Ω',
  alpha: 'α',
  beta: 'β',
  gamma: 'γ',
  delta: 'δ',
  epsilon: 'ε',
  zeta: 'ζ',
  eta: 'η',
  theta: 'θ',
  iota: 'ι',
  kappa: 'κ',
  lambda: 'λ',
  mu: 'μ',
  nu: 'ν',
  xi: 'ξ',
  omicron: 'ο',
  pi: 'π',
  rho: 'ρ',
  sigmaf: 'ς',
  sigma: 'σ',
  tau: 'τ',
  upsilon: 'υ',
  phi: 'φ',
  chi: 'χ',
  psi: 'ψ',
  omega: 'ω',
  thetasym: 'ϑ',
  upsih: 'ϒ',
  piv: 'ϖ',
  bull: '•',
  hellip: '…',
  prime: '′',
  Prime: '″',
  oline: '‾',
  frasl: '⁄',
  weierp: '℘',
  image: 'ℑ',
  real: 'ℜ',
  trade: '™',
  alefsym: 'ℵ',
  larr: '←',
  uarr: '↑',
  rarr: '→',
  darr: '↓',
  harr: '↔',
  crarr: '↵',
  lArr: '⇐',
  uArr: '⇑',
  rArr: '⇒',
  dArr: '⇓',
  hArr: '⇔',
  forall: '∀',
  part: '∂',
  exist: '∃',
  empty: '∅',
  nabla: '∇',
  isin: '∈',
  notin: '∉',
  ni: '∋',
  prod: '∏',
  sum: '∑',
  minus: '−',
  lowast: '∗',
  radic: '√',
  prop: '∝',
  infin: '∞',
  ang: '∠',
  and: '∧',
  or: '∨',
  cap: '∩',
  cup: '∪',
  int: '∫',
  there4: '∴',
  sim: '∼',
  cong: '≅',
  asymp: '≈',
  ne: '≠',
  equiv: '≡',
  le: '≤',
  ge: '≥',
  sub: '⊂',
  sup: '⊃',
  nsub: '⊄',
  sube: '⊆',
  supe: '⊇',
  oplus: '⊕',
  otimes: '⊗',
  perp: '⊥',
  sdot: '⋅',
  lceil: '⌈',
  rceil: '⌉',
  lfloor: '⌊',
  rfloor: '⌋',
  lang: '〈',
  rang: '〉',
  loz: '◊',
  spades: '♠',
  clubs: '♣',
  hearts: '♥',
  diams: '♦',
  quot: '"',
  amp: '&',
  lt: '<',
  gt: '>',
  OElig: 'Œ',
  oelig: 'œ',
  Scaron: 'Š',
  scaron: 'š',
  Yuml: 'Ÿ',
  circ: 'ˆ',
  tilde: '˜',
  ensp: ' ',
  emsp: ' ',
  thinsp: ' ',
  zwnj: '‌',
  zwj: '‍',
  lrm: '‎',
  rlm: '‏',
  ndash: '–',
  mdash: '—',
  lsquo: '‘',
  rsquo: '’',
  sbquo: '‚',
  ldquo: '“',
  rdquo: '”',
  bdquo: '„',
  dagger: '†',
  Dagger: '‡',
  permil: '‰',
  lsaquo: '‹',
  rsaquo: '›',
  euro: '€'
}


/***/ }),

/***/ "../../node_modules/character-entities-legacy/index.js":
/*!*************************************************************!*\
  !*** ../../node_modules/character-entities-legacy/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "characterEntitiesLegacy": () => (/* binding */ characterEntitiesLegacy)
/* harmony export */ });
/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */
const characterEntitiesLegacy = [
  'AElig',
  'AMP',
  'Aacute',
  'Acirc',
  'Agrave',
  'Aring',
  'Atilde',
  'Auml',
  'COPY',
  'Ccedil',
  'ETH',
  'Eacute',
  'Ecirc',
  'Egrave',
  'Euml',
  'GT',
  'Iacute',
  'Icirc',
  'Igrave',
  'Iuml',
  'LT',
  'Ntilde',
  'Oacute',
  'Ocirc',
  'Ograve',
  'Oslash',
  'Otilde',
  'Ouml',
  'QUOT',
  'REG',
  'THORN',
  'Uacute',
  'Ucirc',
  'Ugrave',
  'Uuml',
  'Yacute',
  'aacute',
  'acirc',
  'acute',
  'aelig',
  'agrave',
  'amp',
  'aring',
  'atilde',
  'auml',
  'brvbar',
  'ccedil',
  'cedil',
  'cent',
  'copy',
  'curren',
  'deg',
  'divide',
  'eacute',
  'ecirc',
  'egrave',
  'eth',
  'euml',
  'frac12',
  'frac14',
  'frac34',
  'gt',
  'iacute',
  'icirc',
  'iexcl',
  'igrave',
  'iquest',
  'iuml',
  'laquo',
  'lt',
  'macr',
  'micro',
  'middot',
  'nbsp',
  'not',
  'ntilde',
  'oacute',
  'ocirc',
  'ograve',
  'ordf',
  'ordm',
  'oslash',
  'otilde',
  'ouml',
  'para',
  'plusmn',
  'pound',
  'quot',
  'raquo',
  'reg',
  'sect',
  'shy',
  'sup1',
  'sup2',
  'sup3',
  'szlig',
  'thorn',
  'times',
  'uacute',
  'ucirc',
  'ugrave',
  'uml',
  'uuml',
  'yacute',
  'yen',
  'yuml'
]


/***/ }),

/***/ "../../node_modules/comma-separated-tokens/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/comma-separated-tokens/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "stringify": () => (/* binding */ stringify)
/* harmony export */ });
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function parse(value) {
  /** @type {Array.<string>} */
  var tokens = []
  var input = String(value || '')
  var index = input.indexOf(',')
  var start = 0
  /** @type {boolean} */
  var end
  /** @type {string} */
  var token

  while (!end) {
    if (index === -1) {
      index = input.length
      end = true
    }

    token = input.slice(start, index).trim()

    if (token || !end) {
      tokens.push(token)
    }

    start = index + 1
    index = input.indexOf(',', start)
  }

  return tokens
}

/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */
function stringify(values, options) {
  var settings = options || {}

  // Ensure the last empty entry is seen.
  if (values[values.length - 1] === '') {
    values = values.concat('')
  }

  return values
    .join(
      (settings.padRight ? ' ' : '') +
        ',' +
        (settings.padLeft === false ? '' : ' ')
    )
    .trim()
}


/***/ }),

/***/ "../../node_modules/hast-util-is-element/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/hast-util-is-element/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertElement": () => (/* binding */ convertElement),
/* harmony export */   "isElement": () => (/* binding */ isElement)
/* harmony export */ });
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('hast').Element} Element
 *
 * @typedef {string} TagName
 * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test
 */

/**
 * @template {Element} T
 * @typedef {null|undefined|T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>} PredicateTest
 */

/**
 * Check if an element passes a test
 *
 * @callback TestFunctionAnything
 * @param {Element} element
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean|void}
 */

/**
 * Check if an element passes a certain node test
 *
 * @template {Element} X
 * @callback TestFunctionPredicate
 * @param {Element} element
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {element is X}
 */

/**
 * Check if a node is an element and passes a certain node test
 *
 * @callback AssertAnything
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean}
 */

/**
 * Check if a node is an element and passes a certain node test
 *
 * @template {Element} Y
 * @callback AssertPredicate
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is Y}
 */

// Check if `node` is an `element` and whether it passes the given test.
const isElement =
  /**
   * Check if a node is an element and passes a test.
   * When a `parent` node is known the `index` of node should also be given.
   *
   * @type {(
   *   (() => false) &
   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &
   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
   * )}
   */
  (
    /**
     * Check if a node passes a test.
     * When a `parent` node is known the `index` of node should also be given.
     *
     * @param {unknown} [node] Node to check
     * @param {Test} [test] When nullish, checks if `node` is a `Node`.
     * When `string`, works like passing `function (node) {return node.type === test}`.
     * When `function` checks if function passed the node is true.
     * When `array`, checks any one of the subtests pass.
     * @param {number} [index] Position of `node` in `parent`
     * @param {Parent} [parent] Parent of `node`
     * @param {unknown} [context] Context object to invoke `test` with
     * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).
     */
    // eslint-disable-next-line max-params
    function (node, test, index, parent, context) {
      const check = convertElement(test)

      if (
        index !== undefined &&
        index !== null &&
        (typeof index !== 'number' ||
          index < 0 ||
          index === Number.POSITIVE_INFINITY)
      ) {
        throw new Error('Expected positive finite index for child node')
      }

      if (
        parent !== undefined &&
        parent !== null &&
        (!parent.type || !parent.children)
      ) {
        throw new Error('Expected parent node')
      }

      // @ts-expect-error Looks like a node.
      if (!node || !node.type || typeof node.type !== 'string') {
        return false
      }

      if (
        (parent === undefined || parent === null) !==
        (index === undefined || index === null)
      ) {
        throw new Error('Expected both parent and index')
      }

      return check.call(context, node, index, parent)
    }
  )

const convertElement =
  /**
   * @type {(
   *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  (
    /**
     * Generate an assertion from a check.
     * @param {Test} [test]
     * When nullish, checks if `node` is a `Node`.
     * When `string`, works like passing `function (node) {return node.type === test}`.
     * When `function` checks if function passed the node is true.
     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
     * When `array`, checks any one of the subtests pass.
     * @returns {AssertAnything}
     */
    function (test) {
      if (test === undefined || test === null) {
        return element
      }

      if (typeof test === 'string') {
        return tagNameFactory(test)
      }

      if (typeof test === 'object') {
        return anyFactory(test)
      }

      if (typeof test === 'function') {
        return castFactory(test)
      }

      throw new Error('Expected function, string, or array as test')
    }
  )

/**
 * @param {Array.<TagName|TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */
function anyFactory(tests) {
  /** @type {Array.<AssertAnything>} */
  const checks = []
  let index = -1

  while (++index < tests.length) {
    checks[index] = convertElement(tests[index])
  }

  return castFactory(any)

  /**
   * @this {unknown}
   * @param {unknown[]} parameters
   * @returns {boolean}
   */
  function any(...parameters) {
    let index = -1

    while (++index < checks.length) {
      if (checks[index].call(this, ...parameters)) {
        return true
      }
    }

    return false
  }
}

/**
 * Utility to convert a string into a function which checks a given node’s tag
 * name for said string.
 *
 * @param {TagName} check
 * @returns {AssertAnything}
 */
function tagNameFactory(check) {
  return tagName

  /**
   * @param {unknown} node
   * @returns {boolean}
   */
  function tagName(node) {
    return element(node) && node.tagName === check
  }
}

/**
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */
function castFactory(check) {
  return assertion

  /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array.<unknown>} parameters
   * @returns {boolean}
   */
  function assertion(node, ...parameters) {
    // @ts-expect-error: fine.
    return element(node) && Boolean(check.call(this, node, ...parameters))
  }
}

/**
 * Utility to return true if this is an element.
 * @param {unknown} node
 * @returns {node is Element}
 */
function element(node) {
  return Boolean(
    node &&
      typeof node === 'object' &&
      // @ts-expect-error Looks like a node.
      node.type === 'element' &&
      // @ts-expect-error Looks like an element.
      typeof node.tagName === 'string'
  )
}


/***/ }),

/***/ "../../node_modules/hast-util-parse-selector/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/hast-util-parse-selector/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseSelector": () => (/* binding */ parseSelector)
/* harmony export */ });
/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 */

var search = /[#.]/g

/**
 * Create a hast element from a simple CSS selector.
 *
 * @param selector A simple CSS selector.
 *   Can contain a tag-name (`foo`), classes (`.bar`), and an ID (`#baz`).
 *   Multiple classes are allowed.
 *   Uses the last ID if multiple IDs are found.
 * @param [defaultTagName='div'] Tag name to use if `selector` does not specify one.
 */
const parseSelector =
  /**
   * @type {(
   *  <Selector extends string, DefaultTagName extends string = 'div'>(selector?: Selector, defaultTagName?: DefaultTagName) => Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}
   * )}
   */
  (
    /**
     * @param {string} [selector]
     * @param {string} [defaultTagName='div']
     * @returns {Element}
     */
    function (selector, defaultTagName = 'div') {
      var value = selector || ''
      /** @type {Properties} */
      var props = {}
      var start = 0
      /** @type {string} */
      var subvalue
      /** @type {string} */
      var previous
      /** @type {RegExpMatchArray} */
      var match

      while (start < value.length) {
        search.lastIndex = start
        match = search.exec(value)
        subvalue = value.slice(start, match ? match.index : value.length)

        if (subvalue) {
          if (!previous) {
            defaultTagName = subvalue
          } else if (previous === '#') {
            props.id = subvalue
          } else if (Array.isArray(props.className)) {
            props.className.push(subvalue)
          } else {
            props.className = [subvalue]
          }

          start += subvalue.length
        }

        if (match) {
          previous = match[0]
          start++
        }
      }

      return {
        type: 'element',
        tagName: defaultTagName,
        properties: props,
        children: []
      }
    }
  )


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/comment.js":
/*!***********************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/comment.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comment": () => (/* binding */ comment)
/* harmony export */ });
/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stringify-entities */ "../../node_modules/stringify-entities/lib/index.js");
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Comment} Comment
 */



/**
 * @type {Handle}
 * @param {Comment} node
 */
function comment(ctx, node) {
  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
  return ctx.bogusComments
    ? '<?' +
        (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(
          node.value,
          Object.assign({}, ctx.entities, {subset: ['>']})
        ) +
        '>'
    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'

  /**
   * @param {string} $0
   */
  function encode($0) {
    return (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(
      $0,
      Object.assign({}, ctx.entities, {subset: ['<', '>']})
    )
  }
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/constants.js":
/*!*************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/constants.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constants": () => (/* binding */ constants)
/* harmony export */ });
// Maps of subsets.
// Each value is a matrix of tuples.
// The first value causes parse errors, the second is valid.
// Of both values, the first value is unsafe, and the second is safe.
const constants = {
  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
  name: [
    ['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')],
    ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
  unquoted: [
    ['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')],
    ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
  single: [
    ["&'".split(''), '"&\'`'.split('')],
    ["\0&'".split(''), '\0"&\'`'.split('')]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
  double: [
    ['"&'.split(''), '"&\'`'.split('')],
    ['\0"&'.split(''), '\0"&\'`'.split('')]
  ]
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/doctype.js":
/*!***********************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/doctype.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "doctype": () => (/* binding */ doctype)
/* harmony export */ });
/**
 * @typedef {import('./types.js').Handle} Handle
 */

/**
 * @type {Handle}
 */
function doctype(ctx) {
  return (
    '<!' +
    (ctx.upperDoctype ? 'DOCTYPE' : 'doctype') +
    (ctx.tightDoctype ? '' : ' ') +
    'html>'
  )
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toHtml": () => (/* binding */ toHtml)
/* harmony export */ });
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/index.js");
/* harmony import */ var html_void_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! html-void-elements */ "../../node_modules/html-void-elements/index.js");
/* harmony import */ var _omission_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./omission/index.js */ "../../node_modules/hast-util-to-html/lib/omission/index.js");
/* harmony import */ var _tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tree.js */ "../../node_modules/hast-util-to-html/lib/tree.js");
/**
 * @typedef {import('./types.js').Node} Node
 * @typedef {import('./types.js').Options} Options
 * @typedef {import('./types.js').Context} Context
 * @typedef {import('./types.js').Quote} Quote
 */






/**
 * @param {Node|Array.<Node>} node
 * @param {Options} [options]
 * @returns {string}
 */
function toHtml(node, options = {}) {
  const quote = options.quote || '"'
  /** @type {Quote} */
  const alternative = quote === '"' ? "'" : '"'

  if (quote !== '"' && quote !== "'") {
    throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`')
  }

  /** @type {Context} */
  const context = {
    valid: options.allowParseErrors ? 0 : 1,
    safe: options.allowDangerousCharacters ? 0 : 1,
    schema: options.space === 'svg' ? property_information__WEBPACK_IMPORTED_MODULE_0__.svg : property_information__WEBPACK_IMPORTED_MODULE_0__.html,
    omit: options.omitOptionalTags ? _omission_index_js__WEBPACK_IMPORTED_MODULE_1__.omission : undefined,
    quote,
    alternative,
    smart: options.quoteSmart,
    unquoted: options.preferUnquoted,
    tight: options.tightAttributes,
    upperDoctype: options.upperDoctype,
    tightDoctype: options.tightDoctype,
    bogusComments: options.bogusComments,
    tightLists: options.tightCommaSeparatedLists,
    tightClose: options.tightSelfClosing,
    collapseEmpty: options.collapseEmptyAttributes,
    dangerous: options.allowDangerousHtml,
    voids: options.voids || html_void_elements__WEBPACK_IMPORTED_MODULE_2__.htmlVoidElements.concat(),
    entities: options.entities || {},
    close: options.closeSelfClosing,
    closeEmpty: options.closeEmptyElements
  }

  return (0,_tree_js__WEBPACK_IMPORTED_MODULE_3__.one)(
    context,
    // @ts-ignore Assume `node` does not contain a root.
    Array.isArray(node) ? {type: 'root', children: node} : node,
    null,
    null
  )
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/closing.js":
/*!********************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/closing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "closing": () => (/* binding */ closing)
/* harmony export */ });
/* harmony import */ var hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hast-util-is-element */ "../../node_modules/hast-util-is-element/index.js");
/* harmony import */ var _util_comment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/comment.js */ "../../node_modules/hast-util-to-html/lib/omission/util/comment.js");
/* harmony import */ var _util_siblings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/siblings.js */ "../../node_modules/hast-util-to-html/lib/omission/util/siblings.js");
/* harmony import */ var _util_whitespace_start_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/whitespace-start.js */ "../../node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js");
/* harmony import */ var _omission_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./omission.js */ "../../node_modules/hast-util-to-html/lib/omission/omission.js");
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 */







const closing = (0,_omission_js__WEBPACK_IMPORTED_MODULE_0__.omission)({
  html,
  head: headOrColgroupOrCaption,
  body,
  p,
  li,
  dt,
  dd,
  rt: rubyElement,
  rp: rubyElement,
  optgroup,
  option,
  menuitem,
  colgroup: headOrColgroupOrCaption,
  caption: headOrColgroupOrCaption,
  thead,
  tbody,
  tfoot,
  tr,
  td: cells,
  th: cells
})

/**
 * Macro for `</head>`, `</colgroup>`, and `</caption>`.
 *
 * @type {OmitHandle}
 */
function headOrColgroupOrCaption(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index, true)
  return !next || (!(0,_util_comment_js__WEBPACK_IMPORTED_MODULE_2__.comment)(next) && !(0,_util_whitespace_start_js__WEBPACK_IMPORTED_MODULE_3__.whitespaceStart)(next))
}

/**
 * Whether to omit `</html>`.
 *
 * @type {OmitHandle}
 */
function html(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || !(0,_util_comment_js__WEBPACK_IMPORTED_MODULE_2__.comment)(next)
}

/**
 * Whether to omit `</body>`.
 *
 * @type {OmitHandle}
 */
function body(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || !(0,_util_comment_js__WEBPACK_IMPORTED_MODULE_2__.comment)(next)
}

/**
 * Whether to omit `</p>`.
 *
 * @type {OmitHandle}
 */
function p(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return next
    ? (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, [
        'address',
        'article',
        'aside',
        'blockquote',
        'details',
        'div',
        'dl',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'header',
        'hgroup',
        'hr',
        'main',
        'menu',
        'nav',
        'ol',
        'p',
        'pre',
        'section',
        'table',
        'ul'
      ])
    : !parent ||
        // Confusing parent.
        !(0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(parent, [
          'a',
          'audio',
          'del',
          'ins',
          'map',
          'noscript',
          'video'
        ])
}

/**
 * Whether to omit `</li>`.
 *
 * @type {OmitHandle}
 */
function li(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, 'li')
}

/**
 * Whether to omit `</dt>`.
 *
 * @type {OmitHandle}
 */
function dt(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return next && (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['dt', 'dd'])
}

/**
 * Whether to omit `</dd>`.
 *
 * @type {OmitHandle}
 */
function dd(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['dt', 'dd'])
}

/**
 * Whether to omit `</rt>` or `</rp>`.
 *
 * @type {OmitHandle}
 */
function rubyElement(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['rp', 'rt'])
}

/**
 * Whether to omit `</optgroup>`.
 *
 * @type {OmitHandle}
 */
function optgroup(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, 'optgroup')
}

/**
 * Whether to omit `</option>`.
 *
 * @type {OmitHandle}
 */
function option(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['option', 'optgroup'])
}

/**
 * Whether to omit `</menuitem>`.
 *
 * @type {OmitHandle}
 */
function menuitem(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['menuitem', 'hr', 'menu'])
}

/**
 * Whether to omit `</thead>`.
 *
 * @type {OmitHandle}
 */
function thead(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return next && (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['tbody', 'tfoot'])
}

/**
 * Whether to omit `</tbody>`.
 *
 * @type {OmitHandle}
 */
function tbody(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['tbody', 'tfoot'])
}

/**
 * Whether to omit `</tfoot>`.
 *
 * @type {OmitHandle}
 */
function tfoot(_, index, parent) {
  return !(0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
}

/**
 * Whether to omit `</tr>`.
 *
 * @type {OmitHandle}
 */
function tr(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, 'tr')
}

/**
 * Whether to omit `</td>` or `</th>`.
 *
 * @type {OmitHandle}
 */
function cells(_, index, parent) {
  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)
  return !next || (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_4__.isElement)(next, ['td', 'th'])
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/index.js":
/*!******************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "omission": () => (/* binding */ omission)
/* harmony export */ });
/* harmony import */ var _opening_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opening.js */ "../../node_modules/hast-util-to-html/lib/omission/opening.js");
/* harmony import */ var _closing_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./closing.js */ "../../node_modules/hast-util-to-html/lib/omission/closing.js");
/**
 * @typedef {import('../types.js').Omission} Omission
 */




/** @type {Omission} */
const omission = {opening: _opening_js__WEBPACK_IMPORTED_MODULE_0__.opening, closing: _closing_js__WEBPACK_IMPORTED_MODULE_1__.closing}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/omission.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/omission.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "omission": () => (/* binding */ omission)
/* harmony export */ });
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 */

const own = {}.hasOwnProperty

/**
 * Factory to check if a given node can have a tag omitted.
 *
 * @param {Object.<string, OmitHandle>} handlers
 * @returns {OmitHandle}
 */
function omission(handlers) {
  return omit

  /**
   * Check if a given node can have a tag omitted.
   *
   * @type {OmitHandle}
   */
  function omit(node, index, parent) {
    return (
      own.call(handlers, node.tagName) &&
      handlers[node.tagName](node, index, parent)
    )
  }
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/opening.js":
/*!********************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/opening.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "opening": () => (/* binding */ opening)
/* harmony export */ });
/* harmony import */ var hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-is-element */ "../../node_modules/hast-util-is-element/index.js");
/* harmony import */ var _util_comment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/comment.js */ "../../node_modules/hast-util-to-html/lib/omission/util/comment.js");
/* harmony import */ var _util_siblings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/siblings.js */ "../../node_modules/hast-util-to-html/lib/omission/util/siblings.js");
/* harmony import */ var _util_whitespace_start_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/whitespace-start.js */ "../../node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js");
/* harmony import */ var _closing_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./closing.js */ "../../node_modules/hast-util-to-html/lib/omission/closing.js");
/* harmony import */ var _omission_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./omission.js */ "../../node_modules/hast-util-to-html/lib/omission/omission.js");
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 * @typedef {import('../types.js').Child} Child
 */








const opening = (0,_omission_js__WEBPACK_IMPORTED_MODULE_0__.omission)({
  html,
  head,
  body,
  colgroup,
  tbody
})

/**
 * Whether to omit `<html>`.
 *
 * @type {OmitHandle}
 */
function html(node) {
  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1)
  return !head || !(0,_util_comment_js__WEBPACK_IMPORTED_MODULE_2__.comment)(head)
}

/**
 * Whether to omit `<head>`.
 *
 * @type {OmitHandle}
 */
function head(node) {
  const children = node.children
  /** @type {Array.<string>} */
  const seen = []
  let index = -1
  /** @type {Child} */
  let child

  while (++index < children.length) {
    child = children[index]
    if ((0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(child, ['title', 'base'])) {
      if (seen.includes(child.tagName)) return false
      seen.push(child.tagName)
    }
  }

  return children.length > 0
}

/**
 * Whether to omit `<body>`.
 *
 * @type {OmitHandle}
 */
function body(node) {
  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1, true)

  return (
    !head ||
    (!(0,_util_comment_js__WEBPACK_IMPORTED_MODULE_2__.comment)(head) &&
      !(0,_util_whitespace_start_js__WEBPACK_IMPORTED_MODULE_4__.whitespaceStart)(head) &&
      !(0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(head, ['meta', 'link', 'script', 'style', 'template']))
  )
}

/**
 * Whether to omit `<colgroup>`.
 * The spec describes some logic for the opening tag, but it’s easier to
 * implement in the closing tag, to the same effect, so we handle it there
 * instead.
 *
 * @type {OmitHandle}
 */
function colgroup(node, index, parent) {
  const previous = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingBefore)(parent, index)
  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1, true)

  // Previous colgroup was already omitted.
  if (
    (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(previous, 'colgroup') &&
    (0,_closing_js__WEBPACK_IMPORTED_MODULE_5__.closing)(previous, parent.children.indexOf(previous), parent)
  ) {
    return false
  }

  return head && (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(head, 'col')
}

/**
 * Whether to omit `<tbody>`.
 *
 * @type {OmitHandle}
 */
function tbody(node, index, parent) {
  const previous = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingBefore)(parent, index)
  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1)

  // Previous table section was already omitted.
  if (
    (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(previous, ['thead', 'tbody']) &&
    (0,_closing_js__WEBPACK_IMPORTED_MODULE_5__.closing)(previous, parent.children.indexOf(previous), parent)
  ) {
    return false
  }

  return head && (0,hast_util_is_element__WEBPACK_IMPORTED_MODULE_3__.isElement)(head, 'tr')
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/util/comment.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/util/comment.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comment": () => (/* binding */ comment)
/* harmony export */ });
/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ "../../node_modules/unist-util-is/index.js");
/**
 * @typedef {import('../../types.js').Comment} Comment
 */



/** @type {import('unist-util-is').AssertPredicate<Comment>} */
// @ts-ignore
const comment = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)('comment')


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/util/siblings.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/util/siblings.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "siblingAfter": () => (/* binding */ siblingAfter),
/* harmony export */   "siblingBefore": () => (/* binding */ siblingBefore)
/* harmony export */ });
/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-whitespace */ "../../node_modules/hast-util-whitespace/index.js");
/**
 * @typedef {import('../../types.js').Parent} Parent
 * @typedef {import('../../types.js').Child} Child
 */



const siblingAfter = siblings(1)
const siblingBefore = siblings(-1)

/**
 * Factory to check siblings in a direction.
 *
 * @param {number} increment
 */
function siblings(increment) {
  return sibling

  /**
   * Find applicable siblings in a direction.
   *
   * @param {Parent} parent
   * @param {number} index
   * @param {boolean} [includeWhitespace=false]
   * @returns {Child}
   */
  function sibling(parent, index, includeWhitespace) {
    const siblings = parent && parent.children
    let offset = index + increment
    let next = siblings && siblings[offset]

    if (!includeWhitespace) {
      while (next && (0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_0__.whitespace)(next)) {
        offset += increment
        next = siblings[offset]
      }
    }

    return next
  }
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whitespaceStart": () => (/* binding */ whitespaceStart)
/* harmony export */ });
/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ "../../node_modules/unist-util-is/index.js");
/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hast-util-whitespace */ "../../node_modules/hast-util-whitespace/index.js");
/**
 * @typedef {import('../../types.js').Node} Node
 * @typedef {import('../../types.js').Text} Text
 */




/** @type {import('unist-util-is').AssertPredicate<Text>} */
// @ts-ignore
const isText = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)('text')

/**
 * Check if `node` starts with whitespace.
 *
 * @param {Node} node
 * @returns {boolean}
 */
function whitespaceStart(node) {
  return isText(node) && (0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_1__.whitespace)(node.value.charAt(0))
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/raw.js":
/*!*******************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/raw.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raw": () => (/* binding */ raw)
/* harmony export */ });
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.js */ "../../node_modules/hast-util-to-html/lib/text.js");
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Raw} Raw
 */



/**
 * @type {Handle}
 * @param {Raw} node
 */
function raw(ctx, node, index, parent) {
  // @ts-ignore Hush.
  return ctx.dangerous ? node.value : (0,_text_js__WEBPACK_IMPORTED_MODULE_0__.text)(ctx, node, index, parent)
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/text.js":
/*!********************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/text.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "text": () => (/* binding */ text)
/* harmony export */ });
/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stringify-entities */ "../../node_modules/stringify-entities/lib/index.js");
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Text} Text
 */



/**
 * @type {Handle}
 * @param {Text} node
 */
function text(ctx, node, _, parent) {
  // Check if content of `node` should be escaped.
  return parent &&
    parent.type === 'element' &&
    // @ts-expect-error: hush.
    (parent.tagName === 'script' || parent.tagName === 'style')
    ? node.value
    : (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(
        node.value,
        Object.assign({}, ctx.entities, {subset: ['<', '&']})
      )
}


/***/ }),

/***/ "../../node_modules/hast-util-to-html/lib/tree.js":
/*!********************************************************!*\
  !*** ../../node_modules/hast-util-to-html/lib/tree.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": () => (/* binding */ all),
/* harmony export */   "element": () => (/* binding */ element),
/* harmony export */   "one": () => (/* binding */ one)
/* harmony export */ });
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/index.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/lib/find.js");
/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! space-separated-tokens */ "../../node_modules/space-separated-tokens/index.js");
/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! comma-separated-tokens */ "../../node_modules/comma-separated-tokens/index.js");
/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stringify-entities */ "../../node_modules/stringify-entities/lib/index.js");
/* harmony import */ var ccount__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ccount */ "../../node_modules/ccount/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ "../../node_modules/hast-util-to-html/lib/constants.js");
/* harmony import */ var _comment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comment.js */ "../../node_modules/hast-util-to-html/lib/comment.js");
/* harmony import */ var _doctype_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./doctype.js */ "../../node_modules/hast-util-to-html/lib/doctype.js");
/* harmony import */ var _raw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./raw.js */ "../../node_modules/hast-util-to-html/lib/raw.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text.js */ "../../node_modules/hast-util-to-html/lib/text.js");
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Context} Context
 * @typedef {import('./types.js').Properties} Properties
 * @typedef {import('./types.js').PropertyValue} PropertyValue
 * @typedef {import('./types.js').Parent} Parent
 */












/**
 * @type {Object.<string, Handle>}
 */
const handlers = {
  comment: _comment_js__WEBPACK_IMPORTED_MODULE_0__.comment,
  doctype: _doctype_js__WEBPACK_IMPORTED_MODULE_1__.doctype,
  element,
  // @ts-ignore `raw` is nonstandard
  raw: _raw_js__WEBPACK_IMPORTED_MODULE_2__.raw,
  // @ts-ignore `root` is a parent.
  root: all,
  text: _text_js__WEBPACK_IMPORTED_MODULE_3__.text
}

const own = {}.hasOwnProperty

/**
 * @type {Handle}
 */
function one(ctx, node, index, parent) {
  if (!node || !node.type) {
    throw new Error('Expected node, not `' + node + '`')
  }

  if (!own.call(handlers, node.type)) {
    throw new Error('Cannot compile unknown node `' + node.type + '`')
  }

  return handlers[node.type](ctx, node, index, parent)
}

/**
 * Serialize all children of `parent`.
 *
 * @type {Handle}
 * @param {Parent} parent
 */
function all(ctx, parent) {
  /** @type {Array.<string>} */
  const results = []
  const children = (parent && parent.children) || []
  let index = -1

  while (++index < children.length) {
    results[index] = one(ctx, children[index], index, parent)
  }

  return results.join('')
}

/**
 * @type {Handle}
 * @param {Element} node
 */
// eslint-disable-next-line complexity
function element(ctx, node, index, parent) {
  const schema = ctx.schema
  const omit = schema.space === 'svg' ? undefined : ctx.omit
  let selfClosing =
    schema.space === 'svg'
      ? ctx.closeEmpty
      : ctx.voids.includes(node.tagName.toLowerCase())
  /** @type {Array.<string>} */
  const parts = []
  /** @type {string} */
  let last

  if (schema.space === 'html' && node.tagName === 'svg') {
    ctx.schema = property_information__WEBPACK_IMPORTED_MODULE_4__.svg
  }

  const attrs = serializeAttributes(ctx, node.properties)

  const content = all(
    ctx,
    schema.space === 'html' && node.tagName === 'template' ? node.content : node
  )

  ctx.schema = schema

  // If the node is categorised as void, but it has children, remove the
  // categorisation.
  // This enables for example `menuitem`s, which are void in W3C HTML but not
  // void in WHATWG HTML, to be stringified properly.
  if (content) selfClosing = false

  if (attrs || !omit || !omit.opening(node, index, parent)) {
    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')

    if (selfClosing && (schema.space === 'svg' || ctx.close)) {
      last = attrs.charAt(attrs.length - 1)
      if (
        !ctx.tightClose ||
        last === '/' ||
        (last && last !== '"' && last !== "'")
      ) {
        parts.push(' ')
      }

      parts.push('/')
    }

    parts.push('>')
  }

  parts.push(content)

  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {
    parts.push('</' + node.tagName + '>')
  }

  return parts.join('')
}

/**
 * @param {Context} ctx
 * @param {Properties} props
 * @returns {string}
 */
function serializeAttributes(ctx, props) {
  /** @type {Array.<string>} */
  const values = []
  let index = -1
  /** @type {string} */
  let key
  /** @type {string} */
  let value
  /** @type {string} */
  let last

  for (key in props) {
    if (props[key] !== undefined && props[key] !== null) {
      value = serializeAttribute(ctx, key, props[key])
      if (value) values.push(value)
    }
  }

  while (++index < values.length) {
    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null

    // In tight mode, don’t add a space after quoted attributes.
    if (index !== values.length - 1 && last !== '"' && last !== "'") {
      values[index] += ' '
    }
  }

  return values.join('')
}

/**
 * @param {Context} ctx
 * @param {string} key
 * @param {PropertyValue} value
 * @returns {string}
 */
// eslint-disable-next-line complexity
function serializeAttribute(ctx, key, value) {
  const info = (0,property_information__WEBPACK_IMPORTED_MODULE_5__.find)(ctx.schema, key)
  let quote = ctx.quote
  /** @type {string} */
  let result

  if (info.overloadedBoolean && (value === info.attribute || value === '')) {
    value = true
  } else if (
    info.boolean ||
    (info.overloadedBoolean && typeof value !== 'string')
  ) {
    value = Boolean(value)
  }

  if (
    value === undefined ||
    value === null ||
    value === false ||
    (typeof value === 'number' && Number.isNaN(value))
  ) {
    return ''
  }

  const name = (0,stringify_entities__WEBPACK_IMPORTED_MODULE_6__.stringifyEntities)(
    info.attribute,
    Object.assign({}, ctx.entities, {
      // Always encode without parse errors in non-HTML.
      subset:
        _constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]
    })
  )

  // No value.
  // There is currently only one boolean property in SVG: `[download]` on
  // `<a>`.
  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t
  // test if dropping the value works.
  // But I assume that it should:
  //
  // ```html
  // <!doctype html>
  // <svg viewBox="0 0 100 100">
  //   <a href=https://example.com download>
  //     <circle cx=50 cy=40 r=35 />
  //   </a>
  // </svg>
  // ```
  //
  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
  if (value === true) return name

  value =
    typeof value === 'object' && 'length' in value
      ? // `spaces` doesn’t accept a second argument, but it’s given here just to
        // keep the code cleaner.
        (info.commaSeparated ? comma_separated_tokens__WEBPACK_IMPORTED_MODULE_8__.stringify : space_separated_tokens__WEBPACK_IMPORTED_MODULE_9__.stringify)(value, {
          padLeft: !ctx.tightLists
        })
      : String(value)

  if (ctx.collapseEmpty && !value) return name

  // Check unquoted value.
  if (ctx.unquoted) {
    result = (0,stringify_entities__WEBPACK_IMPORTED_MODULE_6__.stringifyEntities)(
      value,
      Object.assign({}, ctx.entities, {
        subset: _constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.unquoted[ctx.valid][ctx.safe],
        attribute: true
      })
    )
  }

  // If we don’t want unquoted, or if `value` contains character references when
  // unquoted…
  if (result !== value) {
    // If the alternative is less common than `quote`, switch.
    if (ctx.smart && (0,ccount__WEBPACK_IMPORTED_MODULE_10__.ccount)(value, quote) > (0,ccount__WEBPACK_IMPORTED_MODULE_10__.ccount)(value, ctx.alternative)) {
      quote = ctx.alternative
    }

    result =
      quote +
      (0,stringify_entities__WEBPACK_IMPORTED_MODULE_6__.stringifyEntities)(
        value,
        Object.assign({}, ctx.entities, {
          // Always encode without parse errors in non-HTML.
          subset: (quote === "'" ? _constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.single : _constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.double)[
            ctx.schema.space === 'html' ? ctx.valid : 1
          ][ctx.safe],
          attribute: true
        })
      ) +
      quote
  }

  // Don’t add a `=` for unquoted empties.
  return name + (result ? '=' + result : result)
}


/***/ }),

/***/ "../../node_modules/hast-util-whitespace/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/hast-util-whitespace/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whitespace": () => (/* binding */ whitespace)
/* harmony export */ });
/**
 * @param {unknown} thing
 * @returns {boolean}
 */
function whitespace(thing) {
  /** @type {string} */
  var value =
    // @ts-ignore looks like a node.
    thing && typeof thing === 'object' && thing.type === 'text'
      ? // @ts-ignore looks like a text.
        thing.value || ''
      : thing

  // HTML whitespace expression.
  // See <https://html.spec.whatwg.org/#space-character>.
  return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === ''
}


/***/ }),

/***/ "../../node_modules/hastscript/lib/core.js":
/*!*************************************************!*\
  !*** ../../node_modules/hastscript/lib/core.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "core": () => (/* binding */ core)
/* harmony export */ });
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/lib/find.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/lib/normalize.js");
/* harmony import */ var hast_util_parse_selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-parse-selector */ "../../node_modules/hast-util-parse-selector/index.js");
/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! space-separated-tokens */ "../../node_modules/space-separated-tokens/index.js");
/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! comma-separated-tokens */ "../../node_modules/comma-separated-tokens/index.js");
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {Root['children'][number]} Child
 * @typedef {Child|Root} Node
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 *
 * @typedef {Root|Element} HResult
 * @typedef {string|number} HStyleValue
 * @typedef {Object.<string, HStyleValue>} HStyle
 * @typedef {string|number|boolean|null|undefined} HPrimitiveValue
 * @typedef {Array.<string|number>} HArrayValue
 * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue
 * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties
 *
 * @typedef {string|number|null|undefined} HPrimitiveChild
 * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild
 * @typedef {Node|HPrimitiveChild|HArrayChild} HChild
 */






const buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])

const own = {}.hasOwnProperty

/**
 * @param {Schema} schema
 * @param {string} defaultTagName
 * @param {Array.<string>} [caseSensitive]
 */
function core(schema, defaultTagName, caseSensitive) {
  const adjust = caseSensitive && createAdjustMap(caseSensitive)

  const h =
    /**
     * @type {{
     *   (): Root
     *   (selector: null|undefined, ...children: HChild[]): Root
     *   (selector: string, properties?: HProperties, ...children: HChild[]): Element
     *   (selector: string, ...children: HChild[]): Element
     * }}
     */
    (
      /**
       * Hyperscript compatible DSL for creating virtual hast trees.
       *
       * @param {string|null} [selector]
       * @param {HProperties|HChild} [properties]
       * @param {HChild[]} children
       * @returns {HResult}
       */
      function (selector, properties, ...children) {
        let index = -1
        /** @type {HResult} */
        let node

        if (selector === undefined || selector === null) {
          node = {type: 'root', children: []}
          // @ts-expect-error Properties are not supported for roots.
          children.unshift(properties)
        } else {
          node = (0,hast_util_parse_selector__WEBPACK_IMPORTED_MODULE_0__.parseSelector)(selector, defaultTagName)
          // Normalize the name.
          node.tagName = node.tagName.toLowerCase()
          if (adjust && own.call(adjust, node.tagName)) {
            node.tagName = adjust[node.tagName]
          }

          // Handle props.
          if (isProperties(properties, node.tagName)) {
            /** @type {string} */
            let key

            for (key in properties) {
              if (own.call(properties, key)) {
                // @ts-expect-error `node.properties` is set.
                addProperty(schema, node.properties, key, properties[key])
              }
            }
          } else {
            children.unshift(properties)
          }
        }

        // Handle children.
        while (++index < children.length) {
          addChild(node.children, children[index])
        }

        if (node.type === 'element' && node.tagName === 'template') {
          node.content = {type: 'root', children: node.children}
          node.children = []
        }

        return node
      }
    )

  return h
}

/**
 * @param {HProperties|HChild} value
 * @param {string} name
 * @returns {value is HProperties}
 */
function isProperties(value, name) {
  if (
    value === null ||
    value === undefined ||
    typeof value !== 'object' ||
    Array.isArray(value)
  ) {
    return false
  }

  if (name === 'input' || !value.type || typeof value.type !== 'string') {
    return true
  }

  if ('children' in value && Array.isArray(value.children)) {
    return false
  }

  if (name === 'button') {
    return buttonTypes.has(value.type.toLowerCase())
  }

  return !('value' in value)
}

/**
 * @param {Schema} schema
 * @param {Properties} properties
 * @param {string} key
 * @param {HStyle|HPropertyValue} value
 * @returns {void}
 */
function addProperty(schema, properties, key, value) {
  const info = (0,property_information__WEBPACK_IMPORTED_MODULE_1__.find)(schema, key)
  let index = -1
  /** @type {HPropertyValue} */
  let result

  // Ignore nullish and NaN values.
  if (value === undefined || value === null) return

  if (typeof value === 'number') {
    // Ignore NaN.
    if (Number.isNaN(value)) return

    result = value
  }
  // Booleans.
  else if (typeof value === 'boolean') {
    result = value
  }
  // Handle list values.
  else if (typeof value === 'string') {
    if (info.spaceSeparated) {
      result = (0,space_separated_tokens__WEBPACK_IMPORTED_MODULE_2__.parse)(value)
    } else if (info.commaSeparated) {
      result = (0,comma_separated_tokens__WEBPACK_IMPORTED_MODULE_3__.parse)(value)
    } else if (info.commaOrSpaceSeparated) {
      result = (0,space_separated_tokens__WEBPACK_IMPORTED_MODULE_2__.parse)((0,comma_separated_tokens__WEBPACK_IMPORTED_MODULE_3__.parse)(value).join(' '))
    } else {
      result = parsePrimitive(info, info.property, value)
    }
  } else if (Array.isArray(value)) {
    result = value.concat()
  } else {
    result = info.property === 'style' ? style(value) : String(value)
  }

  if (Array.isArray(result)) {
    /** @type {Array.<string|number>} */
    const finalResult = []

    while (++index < result.length) {
      // @ts-expect-error Assume no booleans in array.
      finalResult[index] = parsePrimitive(info, info.property, result[index])
    }

    result = finalResult
  }

  // Class names (which can be added both on the `selector` and here).
  if (info.property === 'className' && Array.isArray(properties.className)) {
    // @ts-expect-error Assume no booleans in `className`.
    result = properties.className.concat(result)
  }

  properties[info.property] = result
}

/**
 * @param {Array.<Child>} nodes
 * @param {HChild} value
 * @returns {void}
 */
function addChild(nodes, value) {
  let index = -1

  if (value === undefined || value === null) {
    // Empty.
  } else if (typeof value === 'string' || typeof value === 'number') {
    nodes.push({type: 'text', value: String(value)})
  } else if (Array.isArray(value)) {
    while (++index < value.length) {
      addChild(nodes, value[index])
    }
  } else if (typeof value === 'object' && 'type' in value) {
    if (value.type === 'root') {
      addChild(nodes, value.children)
    } else {
      nodes.push(value)
    }
  } else {
    throw new Error('Expected node, nodes, or string, got `' + value + '`')
  }
}

/**
 * Parse a single primitives.
 *
 * @param {Info} info
 * @param {string} name
 * @param {HPrimitiveValue} value
 * @returns {HPrimitiveValue}
 */
function parsePrimitive(info, name, value) {
  if (typeof value === 'string') {
    if (info.number && value && !Number.isNaN(Number(value))) {
      return Number(value)
    }

    if (
      (info.boolean || info.overloadedBoolean) &&
      (value === '' || (0,property_information__WEBPACK_IMPORTED_MODULE_4__.normalize)(value) === (0,property_information__WEBPACK_IMPORTED_MODULE_4__.normalize)(name))
    ) {
      return true
    }
  }

  return value
}

/**
 * @param {HStyle} value
 * @returns {string}
 */
function style(value) {
  /** @type {Array.<string>} */
  const result = []
  /** @type {string} */
  let key

  for (key in value) {
    if (own.call(value, key)) {
      result.push([key, value[key]].join(': '))
    }
  }

  return result.join('; ')
}

/**
 * @param {Array.<string>} values
 * @returns {Object.<string, string>}
 */
function createAdjustMap(values) {
  /** @type {Object.<string, string>} */
  const result = {}
  let index = -1

  while (++index < values.length) {
    result[values[index].toLowerCase()] = values[index]
  }

  return result
}


/***/ }),

/***/ "../../node_modules/hastscript/lib/html.js":
/*!*************************************************!*\
  !*** ../../node_modules/hastscript/lib/html.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ h)
/* harmony export */ });
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! property-information */ "../../node_modules/property-information/index.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ "../../node_modules/hastscript/lib/core.js");
/**
 * @typedef {import('./core.js').HChild} Child Acceptable child value
 * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
 *
 * @typedef {import('./jsx-classic').Element} h.JSX.Element
 * @typedef {import('./jsx-classic').IntrinsicAttributes} h.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic').IntrinsicElements} h.JSX.IntrinsicElements
 * @typedef {import('./jsx-classic').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
 */




const h = (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.core)(property_information__WEBPACK_IMPORTED_MODULE_1__.html, 'div')


/***/ }),

/***/ "../../node_modules/html-void-elements/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/html-void-elements/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlVoidElements": () => (/* binding */ htmlVoidElements)
/* harmony export */ });
/**
 * List of HTML void tag names.
 *
 * @type {Array<string>}
 */
const htmlVoidElements = [
  'area',
  'base',
  'basefont',
  'bgsound',
  'br',
  'col',
  'command',
  'embed',
  'frame',
  'hr',
  'image',
  'img',
  'input',
  'isindex',
  'keygen',
  'link',
  'menuitem',
  'meta',
  'nextid',
  'param',
  'source',
  'track',
  'wbr'
]


/***/ }),

/***/ "../../node_modules/is-plain-obj/index.js":
/*!************************************************!*\
  !*** ../../node_modules/is-plain-obj/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isPlainObject)
/* harmony export */ });
function isPlainObject(value) {
	if (Object.prototype.toString.call(value) !== '[object Object]') {
		return false;
	}

	const prototype = Object.getPrototypeOf(value);
	return prototype === null || prototype === Object.prototype;
}


/***/ }),

/***/ "../../node_modules/property-information/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/property-information/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": () => (/* reexport safe */ _lib_find_js__WEBPACK_IMPORTED_MODULE_0__.find),
/* harmony export */   "hastToReact": () => (/* reexport safe */ _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_1__.hastToReact),
/* harmony export */   "html": () => (/* binding */ html),
/* harmony export */   "normalize": () => (/* reexport safe */ _lib_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalize),
/* harmony export */   "svg": () => (/* binding */ svg)
/* harmony export */ });
/* harmony import */ var _lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/util/merge.js */ "../../node_modules/property-information/lib/util/merge.js");
/* harmony import */ var _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/xlink.js */ "../../node_modules/property-information/lib/xlink.js");
/* harmony import */ var _lib_xml_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/xml.js */ "../../node_modules/property-information/lib/xml.js");
/* harmony import */ var _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/xmlns.js */ "../../node_modules/property-information/lib/xmlns.js");
/* harmony import */ var _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/aria.js */ "../../node_modules/property-information/lib/aria.js");
/* harmony import */ var _lib_html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/html.js */ "../../node_modules/property-information/lib/html.js");
/* harmony import */ var _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/svg.js */ "../../node_modules/property-information/lib/svg.js");
/* harmony import */ var _lib_find_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/find.js */ "../../node_modules/property-information/lib/find.js");
/* harmony import */ var _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/hast-to-react.js */ "../../node_modules/property-information/lib/hast-to-react.js");
/* harmony import */ var _lib_normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/normalize.js */ "../../node_modules/property-information/lib/normalize.js");
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */












const html = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__.merge)([_lib_xml_js__WEBPACK_IMPORTED_MODULE_4__.xml, _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__.xlink, _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__.xmlns, _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__.aria, _lib_html_js__WEBPACK_IMPORTED_MODULE_8__.html], 'html')
const svg = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__.merge)([_lib_xml_js__WEBPACK_IMPORTED_MODULE_4__.xml, _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__.xlink, _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__.xmlns, _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__.aria, _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__.svg], 'svg')


/***/ }),

/***/ "../../node_modules/property-information/lib/aria.js":
/*!***********************************************************!*\
  !*** ../../node_modules/property-information/lib/aria.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aria": () => (/* binding */ aria)
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/types.js */ "../../node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");



const aria = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaAutoComplete: null,
    ariaBusy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaChecked: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaColCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaColIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaColSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaControls: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaDetails: null,
    ariaDisabled: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaDropEffect: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaFlowTo: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaGrabbed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaHasPopup: null,
    ariaHidden: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaLevel: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaLive: null,
    ariaModal: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaMultiLine: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaMultiSelectable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaOrientation: null,
    ariaOwns: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaPressed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaReadOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaRelevant: null,
    ariaRequired: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaRoleDescription: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaRowCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaRowIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaRowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaSelected: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaSetSize: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaSort: null,
    ariaValueMax: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueMin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueNow: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueText: null,
    role: null
  }
})


/***/ }),

/***/ "../../node_modules/property-information/lib/find.js":
/*!***********************************************************!*\
  !*** ../../node_modules/property-information/lib/find.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": () => (/* binding */ find)
/* harmony export */ });
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize.js */ "../../node_modules/property-information/lib/normalize.js");
/* harmony import */ var _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/defined-info.js */ "../../node_modules/property-information/lib/util/defined-info.js");
/* harmony import */ var _util_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/info.js */ "../../node_modules/property-information/lib/util/info.js");
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */





const valid = /^data[-\w.:]+$/i
const dash = /-[a-z]/g
const cap = /[A-Z]/g

/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */
function find(schema, value) {
  const normal = (0,_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(value)
  let prop = value
  let Type = _util_info_js__WEBPACK_IMPORTED_MODULE_1__.Info

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]]
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      const rest = value.slice(5).replace(dash, camelcase)
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)
    } else {
      // Turn it into an attribute.
      const rest = value.slice(4)

      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab)

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes
        }

        value = 'data' + dashes
      }
    }

    Type = _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__.DefinedInfo
  }

  return new Type(prop, value)
}

/**
 * @param {string} $0
 * @returns {string}
 */
function kebab($0) {
  return '-' + $0.toLowerCase()
}

/**
 * @param {string} $0
 * @returns {string}
 */
function camelcase($0) {
  return $0.charAt(1).toUpperCase()
}


/***/ }),

/***/ "../../node_modules/property-information/lib/hast-to-react.js":
/*!********************************************************************!*\
  !*** ../../node_modules/property-information/lib/hast-to-react.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hastToReact": () => (/* binding */ hastToReact)
/* harmony export */ });
const hastToReact = {
  classId: 'classID',
  dataType: 'datatype',
  itemId: 'itemID',
  strokeDashArray: 'strokeDasharray',
  strokeDashOffset: 'strokeDashoffset',
  strokeLineCap: 'strokeLinecap',
  strokeLineJoin: 'strokeLinejoin',
  strokeMiterLimit: 'strokeMiterlimit',
  typeOf: 'typeof',
  xLinkActuate: 'xlinkActuate',
  xLinkArcRole: 'xlinkArcrole',
  xLinkHref: 'xlinkHref',
  xLinkRole: 'xlinkRole',
  xLinkShow: 'xlinkShow',
  xLinkTitle: 'xlinkTitle',
  xLinkType: 'xlinkType',
  xmlnsXLink: 'xmlnsXlink'
}


/***/ }),

/***/ "../../node_modules/property-information/lib/html.js":
/*!***********************************************************!*\
  !*** ../../node_modules/property-information/lib/html.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "html": () => (/* binding */ html)
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/types.js */ "../../node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ "../../node_modules/property-information/lib/util/case-insensitive-transform.js");




const html = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    acceptCharset: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    accessKey: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    allowPaymentRequest: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    allowUserMedia: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    alt: null,
    as: null,
    async: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    autoCapitalize: null,
    autoComplete: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    autoFocus: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    autoPlay: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    capture: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    charSet: null,
    checked: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    cite: null,
    className: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    cols: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    colSpan: null,
    content: null,
    contentEditable: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    controls: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    controlsList: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    coords: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number | _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    defer: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    dir: null,
    dirName: null,
    disabled: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    download: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.overloadedBoolean,
    draggable: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    formTarget: null,
    headers: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    height: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    hidden: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    high: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    href: null,
    hrefLang: null,
    htmlFor: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    httpEquiv: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    itemId: null,
    itemProp: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    itemRef: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    itemScope: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    itemType: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    low: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    manifest: null,
    max: null,
    maxLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    media: null,
    method: null,
    min: null,
    minLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    multiple: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    muted: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    name: null,
    nonce: null,
    noModule: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    noValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    optimum: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pattern: null,
    ping: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    placeholder: null,
    playsInline: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    poster: null,
    preload: null,
    readOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    referrerPolicy: null,
    rel: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    required: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    reversed: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    rows: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    rowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    sandbox: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    scope: null,
    scoped: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    seamless: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    selected: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    shape: null,
    size: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    sizes: null,
    slot: null,
    span: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    spellCheck: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    step: null,
    style: null,
    tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    useMap: null,
    value: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    width: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    wrap: null,

    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null, // Several. Use CSS `text-align` instead,
    aLink: null, // `<body>`. Use CSS `a:active {color}` instead
    archive: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated, // `<object>`. List of URIs to archives
    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null, // `<body>`. Use CSS `background-image` instead
    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
    border: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<table>`. Use CSS `border-width` instead,
    borderColor: null, // `<table>`. Use CSS `border-color` instead,
    bottomMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    cellPadding: null, // `<table>`
    cellSpacing: null, // `<table>`
    char: null, // Several table elements. When `align=char`, sets the character to align on
    charOff: null, // Several table elements. When `char`, offsets the alignment
    classId: null, // `<object>`
    clear: null, // `<br>`. Use CSS `clear` instead
    code: null, // `<object>`
    codeBase: null, // `<object>`
    codeType: null, // `<object>`
    color: null, // `<font>` and `<hr>`. Use CSS instead
    compact: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // Lists. Use CSS to reduce space between items instead
    declare: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // `<object>`
    event: null, // `<script>`
    face: null, // `<font>`. Use CSS instead
    frame: null, // `<table>`
    frameBorder: null, // `<iframe>`. Use CSS `border` instead
    hSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<img>` and `<object>`
    leftMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    link: null, // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null, // `<img>`. Use a `<picture>`
    marginHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    marginWidth: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    noResize: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // `<frame>`
    noHref: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // `<area>`. Use no href instead of an explicit `nohref`
    noShade: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // `<hr>`. Use background-color and height instead of borders
    noWrap: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean, // `<td>` and `<th>`
    object: null, // `<applet>`
    profile: null, // `<head>`
    prompt: null, // `<isindex>`
    rev: null, // `<link>`
    rightMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    rules: null, // `<table>`
    scheme: null, // `<meta>`
    scrolling: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish, // `<frame>`. Use overflow in the child context
    standby: null, // `<object>`
    summary: null, // `<table>`
    text: null, // `<body>`. Use CSS `color` instead
    topMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<body>`
    valueType: null, // `<param>`
    version: null, // `<html>`. Use a doctype.
    vAlign: null, // Several. Use CSS `vertical-align` instead
    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number, // `<img>` and `<object>`

    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    disableRemotePlayback: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    prefix: null,
    property: null,
    results: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    security: null,
    unselectable: null
  }
})


/***/ }),

/***/ "../../node_modules/property-information/lib/normalize.js":
/*!****************************************************************!*\
  !*** ../../node_modules/property-information/lib/normalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalize": () => (/* binding */ normalize)
/* harmony export */ });
/**
 * @param {string} value
 * @returns {string}
 */
function normalize(value) {
  return value.toLowerCase()
}


/***/ }),

/***/ "../../node_modules/property-information/lib/svg.js":
/*!**********************************************************!*\
  !*** ../../node_modules/property-information/lib/svg.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "svg": () => (/* binding */ svg)
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/types.js */ "../../node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-sensitive-transform.js */ "../../node_modules/property-information/lib/util/case-sensitive-transform.js");




const svg = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseSensitiveTransform,
  properties: {
    about: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    accentHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    amplitude: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    arabicForm: null,
    ascent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    attributeName: null,
    attributeType: null,
    azimuth: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    by: null,
    calcMode: null,
    capHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    className: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    diffuseConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    direction: null,
    display: null,
    dur: null,
    divisor: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    dominantBaseline: null,
    download: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    g2: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    glyphName: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    horizOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    horizOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    id: null,
    ideographic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k1: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k2: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k3: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k4: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    kernelMatrix: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null, // SEMI_COLON_SEPARATED
    keySplines: null, // SEMI_COLON_SEPARATED
    keyTimes: null, // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    overlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pointsAtY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pointsAtZ: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    rev: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFeatures: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFonts: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFormats: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    specularExponent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strikethroughThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    string: null,
    stroke: null,
    strokeDashArray: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strokeOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strokeWidth: null,
    style: null,
    surfaceScale: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    tableValues: null,
    target: null,
    targetX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    targetY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    underlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    values: null,
    vAlphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vMathematical: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vectorEffect: null,
    vHanging: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vIdeographic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    version: null,
    vertAdvY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vertOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vertOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
})


/***/ }),

/***/ "../../node_modules/property-information/lib/util/case-insensitive-transform.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/case-insensitive-transform.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "caseInsensitiveTransform": () => (/* binding */ caseInsensitiveTransform)
/* harmony export */ });
/* harmony import */ var _case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./case-sensitive-transform.js */ "../../node_modules/property-information/lib/util/case-sensitive-transform.js");


/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */
function caseInsensitiveTransform(attributes, property) {
  return (0,_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__.caseSensitiveTransform)(attributes, property.toLowerCase())
}


/***/ }),

/***/ "../../node_modules/property-information/lib/util/case-sensitive-transform.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/case-sensitive-transform.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "caseSensitiveTransform": () => (/* binding */ caseSensitiveTransform)
/* harmony export */ });
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute
}


/***/ }),

/***/ "../../node_modules/property-information/lib/util/create.js":
/*!******************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/create.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "create": () => (/* binding */ create)
/* harmony export */ });
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../normalize.js */ "../../node_modules/property-information/lib/normalize.js");
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.js */ "../../node_modules/property-information/lib/util/schema.js");
/* harmony import */ var _defined_info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defined-info.js */ "../../node_modules/property-information/lib/util/defined-info.js");
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */





const own = {}.hasOwnProperty

/**
 * @param {Definition} definition
 * @returns {Schema}
 */
function create(definition) {
  /** @type {Properties} */
  const property = {}
  /** @type {Normal} */
  const normal = {}
  /** @type {string} */
  let prop

  for (prop in definition.properties) {
    if (own.call(definition.properties, prop)) {
      const value = definition.properties[prop]
      const info = new _defined_info_js__WEBPACK_IMPORTED_MODULE_0__.DefinedInfo(
        prop,
        definition.transform(definition.attributes || {}, prop),
        value,
        definition.space
      )

      if (
        definition.mustUseProperty &&
        definition.mustUseProperty.includes(prop)
      ) {
        info.mustUseProperty = true
      }

      property[prop] = info

      normal[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(prop)] = prop
      normal[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(info.attribute)] = prop
    }
  }

  return new _schema_js__WEBPACK_IMPORTED_MODULE_2__.Schema(property, normal, definition.space)
}


/***/ }),

/***/ "../../node_modules/property-information/lib/util/defined-info.js":
/*!************************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/defined-info.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefinedInfo": () => (/* binding */ DefinedInfo)
/* harmony export */ });
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./info.js */ "../../node_modules/property-information/lib/util/info.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "../../node_modules/property-information/lib/util/types.js");



/** @type {Array<keyof types>} */
// @ts-expect-error: hush.
const checks = Object.keys(_types_js__WEBPACK_IMPORTED_MODULE_0__)

class DefinedInfo extends _info_js__WEBPACK_IMPORTED_MODULE_1__.Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space) {
    let index = -1

    super(property, attribute)

    mark(this, 'space', space)

    if (typeof mask === 'number') {
      while (++index < checks.length) {
        const check = checks[index]
        mark(this, checks[index], (mask & _types_js__WEBPACK_IMPORTED_MODULE_0__[check]) === _types_js__WEBPACK_IMPORTED_MODULE_0__[check])
      }
    }
  }
}

DefinedInfo.prototype.defined = true

/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */
function mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value
  }
}


/***/ }),

/***/ "../../node_modules/property-information/lib/util/info.js":
/*!****************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/info.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Info": () => (/* binding */ Info)
/* harmony export */ });
class Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    /** @type {string} */
    this.property = property
    /** @type {string} */
    this.attribute = attribute
  }
}

/** @type {string|null} */
Info.prototype.space = null
Info.prototype.boolean = false
Info.prototype.booleanish = false
Info.prototype.overloadedBoolean = false
Info.prototype.number = false
Info.prototype.commaSeparated = false
Info.prototype.spaceSeparated = false
Info.prototype.commaOrSpaceSeparated = false
Info.prototype.mustUseProperty = false
Info.prototype.defined = false


/***/ }),

/***/ "../../node_modules/property-information/lib/util/merge.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/merge.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "merge": () => (/* binding */ merge)
/* harmony export */ });
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema.js */ "../../node_modules/property-information/lib/util/schema.js");
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */



/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */
function merge(definitions, space) {
  /** @type {Properties} */
  const property = {}
  /** @type {Normal} */
  const normal = {}
  let index = -1

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property)
    Object.assign(normal, definitions[index].normal)
  }

  return new _schema_js__WEBPACK_IMPORTED_MODULE_0__.Schema(property, normal, space)
}


/***/ }),

/***/ "../../node_modules/property-information/lib/util/schema.js":
/*!******************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/schema.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Schema": () => (/* binding */ Schema)
/* harmony export */ });
/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */

class Schema {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space) {
    this.property = property
    this.normal = normal
    if (space) {
      this.space = space
    }
  }
}

/** @type {Properties} */
Schema.prototype.property = {}
/** @type {Normal} */
Schema.prototype.normal = {}
/** @type {string|null} */
Schema.prototype.space = null


/***/ }),

/***/ "../../node_modules/property-information/lib/util/types.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/property-information/lib/util/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "boolean": () => (/* binding */ boolean),
/* harmony export */   "booleanish": () => (/* binding */ booleanish),
/* harmony export */   "commaOrSpaceSeparated": () => (/* binding */ commaOrSpaceSeparated),
/* harmony export */   "commaSeparated": () => (/* binding */ commaSeparated),
/* harmony export */   "number": () => (/* binding */ number),
/* harmony export */   "overloadedBoolean": () => (/* binding */ overloadedBoolean),
/* harmony export */   "spaceSeparated": () => (/* binding */ spaceSeparated)
/* harmony export */ });
let powers = 0

const boolean = increment()
const booleanish = increment()
const overloadedBoolean = increment()
const number = increment()
const spaceSeparated = increment()
const commaSeparated = increment()
const commaOrSpaceSeparated = increment()

function increment() {
  return 2 ** ++powers
}


/***/ }),

/***/ "../../node_modules/property-information/lib/xlink.js":
/*!************************************************************!*\
  !*** ../../node_modules/property-information/lib/xlink.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xlink": () => (/* binding */ xlink)
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");


const xlink = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xlink',
  transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase()
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
})


/***/ }),

/***/ "../../node_modules/property-information/lib/xml.js":
/*!**********************************************************!*\
  !*** ../../node_modules/property-information/lib/xml.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xml": () => (/* binding */ xml)
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");


const xml = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xml',
  transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase()
  },
  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
})


/***/ }),

/***/ "../../node_modules/property-information/lib/xmlns.js":
/*!************************************************************!*\
  !*** ../../node_modules/property-information/lib/xmlns.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xmlns": () => (/* binding */ xmlns)
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "../../node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ "../../node_modules/property-information/lib/util/case-insensitive-transform.js");



const xmlns = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xmlns',
  attributes: {xmlnsxlink: 'xmlns:xlink'},
  transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveTransform,
  properties: {xmlns: null, xmlnsXLink: null}
})


/***/ }),

/***/ "../../node_modules/rehype-stringify/lib/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/rehype-stringify/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rehypeStringify)
/* harmony export */ });
/* harmony import */ var hast_util_to_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-to-html */ "../../node_modules/hast-util-to-html/lib/index.js");
/**
 * @typedef {import('hast').Root} Root
 * @typedef {Root|Root['children'][number]} Node
 * @typedef {import('hast-util-to-html').Options} Options
 */



/** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */
function rehypeStringify(config) {
  const processorSettings = /** @type {Options} */ (this.data('settings'))
  const settings = Object.assign({}, processorSettings, config)

  Object.assign(this, {Compiler: compiler})

  /**
   * @type {import('unified').CompilerFunction<Node, string>}
   */
  function compiler(tree) {
    return (0,hast_util_to_html__WEBPACK_IMPORTED_MODULE_0__.toHtml)(tree, settings)
  }
}


/***/ }),

/***/ "../../node_modules/space-separated-tokens/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/space-separated-tokens/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "stringify": () => (/* binding */ stringify)
/* harmony export */ });
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function parse(value) {
  const input = String(value || '').trim()
  return input ? input.split(/[ \t\n\r\f]+/g) : []
}

/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */
function stringify(values) {
  return values.join(' ').trim()
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/constant/dangerous.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/constant/dangerous.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dangerous": () => (/* binding */ dangerous)
/* harmony export */ });
/**
 * List of legacy (that don’t need a trailing `;`) named references which could,
 * depending on what follows them, turn into a different meaning
 *
 * @type {Array.<string>}
 */
const dangerous = [
  'cent',
  'copy',
  'divide',
  'gt',
  'lt',
  'not',
  'para',
  'times'
]


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/core.js":
/*!*********************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/core.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "core": () => (/* binding */ core)
/* harmony export */ });
/**
 * @typedef {Object} CoreOptions
 * @property {string[]} [subset=[]]
 *   Whether to only escape the given subset of characters.
 * @property {boolean} [escapeOnly=false]
 *   Whether to only escape possibly dangerous characters.
 *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
 *
 * @typedef {Object} FormatOptions
 * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
 *   Format strategy.
 *
 * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
 */

/**
 * Encode certain characters in `value`.
 *
 * @param {string} value
 * @param {CoreWithFormatOptions} options
 * @returns {string}
 */
function core(value, options) {
  value = value.replace(
    options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g,
    basic
  )

  if (options.subset || options.escapeOnly) {
    return value
  }

  return (
    value
      // Surrogate pairs.
      .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)
      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
      // non-ASCII ones).
      .replace(
        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
        /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
        basic
      )
  )

  /**
   * @param {string} pair
   * @param {number} index
   * @param {string} all
   */
  function surrogate(pair, index, all) {
    return options.format(
      (pair.charCodeAt(0) - 0xd800) * 0x400 +
        pair.charCodeAt(1) -
        0xdc00 +
        0x10000,
      all.charCodeAt(index + 2),
      options
    )
  }

  /**
   * @param {string} character
   * @param {number} index
   * @param {string} all
   */
  function basic(character, index, all) {
    return options.format(
      character.charCodeAt(0),
      all.charCodeAt(index + 1),
      options
    )
  }
}

/**
 * @param {string[]} subset
 * @returns {RegExp}
 */
function charactersToExpression(subset) {
  /** @type {string[]} */
  const groups = []
  let index = -1

  while (++index < subset.length) {
    groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'))
  }

  return new RegExp('(?:' + groups.join('|') + ')', 'g')
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringifyEntities": () => (/* binding */ stringifyEntities),
/* harmony export */   "stringifyEntitiesLight": () => (/* binding */ stringifyEntitiesLight)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ "../../node_modules/stringify-entities/lib/core.js");
/* harmony import */ var _util_format_smart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/format-smart.js */ "../../node_modules/stringify-entities/lib/util/format-smart.js");
/* harmony import */ var _util_format_basic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/format-basic.js */ "../../node_modules/stringify-entities/lib/util/format-basic.js");
/**
 * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
 * @typedef {import('./core.js').CoreOptions} LightOptions
 */





/**
 * Encode special characters in `value`.
 *
 * @param {string} value
 *   Value to encode.
 * @param {Options} [options]
 *   Configuration.
 * @returns {string}
 *   Encoded value.
 */
function stringifyEntities(value, options) {
  return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.core)(value, Object.assign({format: _util_format_smart_js__WEBPACK_IMPORTED_MODULE_1__.formatSmart}, options))
}

/**
 * Encode special characters in `value` as hexadecimals.
 *
 * @param {string} value
 *   Value to encode.
 * @param {LightOptions} [options]
 *   Configuration.
 * @returns {string}
 *   Encoded value.
 */
function stringifyEntitiesLight(value, options) {
  return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.core)(value, Object.assign({format: _util_format_basic_js__WEBPACK_IMPORTED_MODULE_2__.formatBasic}, options))
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/util/format-basic.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/util/format-basic.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatBasic": () => (/* binding */ formatBasic)
/* harmony export */ });
/**
 * The smallest way to encode a character.
 *
 * @param {number} code
 * @returns {string}
 */
function formatBasic(code) {
  return '&#x' + code.toString(16).toUpperCase() + ';'
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/util/format-smart.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/util/format-smart.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatSmart": () => (/* binding */ formatSmart)
/* harmony export */ });
/* harmony import */ var _to_hexadecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-hexadecimal.js */ "../../node_modules/stringify-entities/lib/util/to-hexadecimal.js");
/* harmony import */ var _to_decimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./to-decimal.js */ "../../node_modules/stringify-entities/lib/util/to-decimal.js");
/* harmony import */ var _to_named_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-named.js */ "../../node_modules/stringify-entities/lib/util/to-named.js");
/**
 * @typedef {Object} FormatSmartOptions
 * @property {boolean} [useNamedReferences=false]
 *   Prefer named character references (`&amp;`) where possible.
 * @property {boolean} [useShortestReferences=false]
 *   Prefer the shortest possible reference, if that results in less bytes.
 *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
 * @property {boolean} [omitOptionalSemicolons=false]
 *   Whether to omit semicolons when possible.
 *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
 *   Omitting semicolons is possible for certain named and numeric references in some cases.
 * @property {boolean} [attribute=false]
 *   Create character references which don’t fail in attributes.
 *   **Note**: `attribute` only applies when operating dangerously with
 *   `omitOptionalSemicolons: true`.
 */





/**
 * Configurable ways to encode a character yielding pretty or small results.
 *
 * @param {number} code
 * @param {number} next
 * @param {FormatSmartOptions} options
 * @returns {string}
 */
function formatSmart(code, next, options) {
  let numeric = (0,_to_hexadecimal_js__WEBPACK_IMPORTED_MODULE_0__.toHexadecimal)(code, next, options.omitOptionalSemicolons)
  /** @type {string|undefined} */
  let named

  if (options.useNamedReferences || options.useShortestReferences) {
    named = (0,_to_named_js__WEBPACK_IMPORTED_MODULE_1__.toNamed)(
      code,
      next,
      options.omitOptionalSemicolons,
      options.attribute
    )
  }

  // Use the shortest numeric reference when requested.
  // A simple algorithm would use decimal for all code points under 100, as
  // those are shorter than hexadecimal:
  //
  // * `&#99;` vs `&#x63;` (decimal shorter)
  // * `&#100;` vs `&#x64;` (equal)
  //
  // However, because we take `next` into consideration when `omit` is used,
  // And it would be possible that decimals are shorter on bigger values as
  // well if `next` is hexadecimal but not decimal, we instead compare both.
  if (
    (options.useShortestReferences || !named) &&
    options.useShortestReferences
  ) {
    const decimal = (0,_to_decimal_js__WEBPACK_IMPORTED_MODULE_2__.toDecimal)(code, next, options.omitOptionalSemicolons)

    if (decimal.length < numeric.length) {
      numeric = decimal
    }
  }

  return named &&
    (!options.useShortestReferences || named.length < numeric.length)
    ? named
    : numeric
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/util/to-decimal.js":
/*!********************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/util/to-decimal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toDecimal": () => (/* binding */ toDecimal)
/* harmony export */ });
/**
 * Configurable ways to encode characters as decimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */
function toDecimal(code, next, omit) {
  const value = '&#' + String(code)
  return omit && next && !/\d/.test(String.fromCharCode(next))
    ? value
    : value + ';'
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/util/to-hexadecimal.js":
/*!************************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/util/to-hexadecimal.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toHexadecimal": () => (/* binding */ toHexadecimal)
/* harmony export */ });
/**
 * Configurable ways to encode characters as hexadecimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */
function toHexadecimal(code, next, omit) {
  const value = '&#x' + code.toString(16).toUpperCase()
  return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next))
    ? value
    : value + ';'
}


/***/ }),

/***/ "../../node_modules/stringify-entities/lib/util/to-named.js":
/*!******************************************************************!*\
  !*** ../../node_modules/stringify-entities/lib/util/to-named.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toNamed": () => (/* binding */ toNamed)
/* harmony export */ });
/* harmony import */ var character_entities_legacy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! character-entities-legacy */ "../../node_modules/character-entities-legacy/index.js");
/* harmony import */ var character_entities_html4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! character-entities-html4 */ "../../node_modules/character-entities-html4/index.js");
/* harmony import */ var _constant_dangerous_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constant/dangerous.js */ "../../node_modules/stringify-entities/lib/constant/dangerous.js");




const own = {}.hasOwnProperty

/**
 * `characterEntitiesHtml4` but inverted.
 *
 * @type {Object.<string, string>}
 */
const characters = {}

/** @type {string} */
let key

for (key in character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4) {
  if (own.call(character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4, key)) {
    characters[character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4[key]] = key
  }
}

/**
 * Configurable ways to encode characters as named references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @param {boolean|undefined} attribute
 * @returns {string}
 */
function toNamed(code, next, omit, attribute) {
  const character = String.fromCharCode(code)

  if (own.call(characters, character)) {
    const name = characters[character]
    const value = '&' + name

    if (
      omit &&
      character_entities_legacy__WEBPACK_IMPORTED_MODULE_1__.characterEntitiesLegacy.includes(name) &&
      !_constant_dangerous_js__WEBPACK_IMPORTED_MODULE_2__.dangerous.includes(name) &&
      (!attribute ||
        (next &&
          next !== 61 /* `=` */ &&
          /[^\da-z]/i.test(String.fromCharCode(next))))
    ) {
      return value
    }

    return value + ';'
  }

  return ''
}


/***/ }),

/***/ "../../node_modules/trough/index.js":
/*!******************************************!*\
  !*** ../../node_modules/trough/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trough": () => (/* binding */ trough),
/* harmony export */   "wrap": () => (/* binding */ wrap)
/* harmony export */ });
/**
 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
 * @typedef {(...input: Array<any>) => any} Middleware
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add `fn` (middleware) to the list.
 * @typedef {{run: Run, use: Use}} Pipeline
 *   Middleware.
 */

/**
 * Create new middleware.
 *
 * @returns {Pipeline}
 */
function trough() {
  /** @type {Array<Middleware>} */
  const fns = []
  /** @type {Pipeline} */
  const pipeline = {run, use}

  return pipeline

  /** @type {Run} */
  function run(...values) {
    let middlewareIndex = -1
    /** @type {Callback} */
    const callback = values.pop()

    if (typeof callback !== 'function') {
      throw new TypeError('Expected function as last argument, not ' + callback)
    }

    next(null, ...values)

    /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error|null|undefined} error
     * @param {Array<any>} output
     */
    function next(error, ...output) {
      const fn = fns[++middlewareIndex]
      let index = -1

      if (error) {
        callback(error)
        return
      }

      // Copy non-nullish input into values.
      while (++index < values.length) {
        if (output[index] === null || output[index] === undefined) {
          output[index] = values[index]
        }
      }

      // Save the newly created `output` for the next call.
      values = output

      // Next or done.
      if (fn) {
        wrap(fn, next)(...output)
      } else {
        callback(null, ...output)
      }
    }
  }

  /** @type {Use} */
  function use(middelware) {
    if (typeof middelware !== 'function') {
      throw new TypeError(
        'Expected `middelware` to be a function, not ' + middelware
      )
    }

    fns.push(middelware)
    return pipeline
  }
}

/**
 * Wrap `middleware`.
 * Can be sync or async; return a promise, receive a callback, or return new
 * values and errors.
 *
 * @param {Middleware} middleware
 * @param {Callback} callback
 */
function wrap(middleware, callback) {
  /** @type {boolean} */
  let called

  return wrapped

  /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length
    /** @type {any} */
    let result

    if (fnExpectsCallback) {
      parameters.push(done)
    }

    try {
      result = middleware.apply(this, parameters)
    } catch (error) {
      const exception = /** @type {Error} */ (error)

      // Well, this is quite the pickle.
      // `middleware` received a callback and called it synchronously, but that
      // threw an error.
      // The only thing left to do is to throw the thing instead.
      if (fnExpectsCallback && called) {
        throw exception
      }

      return done(exception)
    }

    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done)
      } else if (result instanceof Error) {
        done(result)
      } else {
        then(result)
      }
    }
  }

  /**
   * Call `callback`, only once.
   * @type {Callback}
   */
  function done(error, ...output) {
    if (!called) {
      called = true
      callback(error, ...output)
    }
  }

  /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */
  function then(value) {
    done(null, value)
  }
}


/***/ }),

/***/ "../../node_modules/unified-lint-rule/lib/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/unified-lint-rule/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lintRule": () => (/* binding */ lintRule)
/* harmony export */ });
/* harmony import */ var trough__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! trough */ "../../node_modules/trough/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFile} VFile
 *
 * @typedef {0|1|2} Severity
 * @typedef {'warn'|'on'|'off'|'error'} Label
 * @typedef {[Severity, ...Array<unknown>]} SeverityTuple
 *
 * @typedef RuleMeta
 * @property {string} origin name of the lint rule
 * @property {string} [url] link to documentation
 *
 * @callback Rule
 * @param {Node} tree
 * @param {VFile} file
 * @param {unknown} options
 * @returns {void}
 */



const primitives = new Set(['string', 'number', 'boolean'])

/**
 * @param {string|RuleMeta} meta
 * @param {Rule} rule
 */
function lintRule(meta, rule) {
  const id = typeof meta === 'string' ? meta : meta.origin
  const url = typeof meta === 'string' ? undefined : meta.url
  const parts = id.split(':')
  // Possibly useful if externalised later.
  /* c8 ignore next */
  const source = parts[1] ? parts[0] : undefined
  const ruleId = parts[1]

  Object.defineProperty(plugin, 'name', {value: id})

  return plugin

  /** @type {import('unified').Plugin<[unknown]|Array<void>>} */
  function plugin(raw) {
    const [severity, options] = coerce(ruleId, raw)

    if (!severity) return

    const fatal = severity === 2

    return (tree, file, next) => {
      let index = file.messages.length - 1

      ;(0,trough__WEBPACK_IMPORTED_MODULE_0__.wrap)(rule, (error) => {
        const messages = file.messages

        // Add the error, if not already properly added.
        // Only happens for incorrect plugins.
        /* c8 ignore next 6 */
        // @ts-expect-error: errors could be `messages`.
        if (error && !messages.includes(error)) {
          try {
            file.fail(error)
          } catch {}
        }

        while (++index < messages.length) {
          Object.assign(messages[index], {ruleId, source, fatal, url})
        }

        next()
      })(tree, file, options)
    }
  }
}

/**
 * Coerce a value to a severity--options tuple.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {SeverityTuple}
 */
function coerce(name, value) {
  /** @type {Array<unknown>} */
  let result

  if (typeof value === 'boolean') {
    result = [value]
  } else if (value === null || value === undefined) {
    result = [1]
  } else if (
    Array.isArray(value) &&
    // `isArray(unknown)` is turned into `Array<any>`:
    // type-coverage:ignore-next-line
    primitives.has(typeof value[0])
  ) {
    // `isArray(unknown)` is turned into `Array<any>`:
    // type-coverage:ignore-next-line
    result = [...value]
  } else {
    result = [1, value]
  }

  let level = result[0]

  if (typeof level === 'boolean') {
    level = level ? 1 : 0
  } else if (typeof level === 'string') {
    if (level === 'off') {
      level = 0
    } else if (level === 'on' || level === 'warn') {
      level = 1
    } else if (level === 'error') {
      level = 2
    } else {
      level = 1
      result = [level, result]
    }
  }

  if (typeof level !== 'number' || level < 0 || level > 2) {
    throw new Error(
      'Incorrect severity `' +
        level +
        '` for `' +
        name +
        '`, ' +
        'expected 0, 1, or 2'
    )
  }

  result[0] = level

  // @ts-expect-error: it’s now a valid tuple.
  return result
}


/***/ }),

/***/ "../../node_modules/unified/lib/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/unified/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unified": () => (/* binding */ unified)
/* harmony export */ });
/* harmony import */ var bail__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bail */ "../../node_modules/bail/index.js");
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-buffer */ "../../node_modules/is-buffer/index.js");
/* harmony import */ var extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! extend */ "../../node_modules/extend/index.js");
/* harmony import */ var is_plain_obj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! is-plain-obj */ "../../node_modules/is-plain-obj/index.js");
/* harmony import */ var trough__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! trough */ "../../node_modules/trough/index.js");
/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile */ "../../node_modules/vfile/lib/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFileValue} VFileValue
 * @typedef {import('..').Processor} Processor
 * @typedef {import('..').Plugin} Plugin
 * @typedef {import('..').Preset} Preset
 * @typedef {import('..').Pluggable} Pluggable
 * @typedef {import('..').PluggableList} PluggableList
 * @typedef {import('..').Transformer} Transformer
 * @typedef {import('..').Parser} Parser
 * @typedef {import('..').Compiler} Compiler
 * @typedef {import('..').RunCallback} RunCallback
 * @typedef {import('..').ProcessCallback} ProcessCallback
 *
 * @typedef Context
 * @property {Node} tree
 * @property {VFile} file
 */








// Expose a frozen processor.
const unified = base().freeze()

const own = {}.hasOwnProperty

// Function to create the first processor.
/**
 * @returns {Processor}
 */
function base() {
  const transformers = (0,trough__WEBPACK_IMPORTED_MODULE_3__.trough)()
  /** @type {Processor['attachers']} */
  const attachers = []
  /** @type {Record<string, unknown>} */
  let namespace = {}
  /** @type {boolean|undefined} */
  let frozen
  let freezeIndex = -1

  // Data management.
  // @ts-expect-error: overloads are handled.
  processor.data = data
  processor.Parser = undefined
  processor.Compiler = undefined

  // Lock.
  processor.freeze = freeze

  // Plugins.
  processor.attachers = attachers
  // @ts-expect-error: overloads are handled.
  processor.use = use

  // API.
  processor.parse = parse
  processor.stringify = stringify
  // @ts-expect-error: overloads are handled.
  processor.run = run
  processor.runSync = runSync
  // @ts-expect-error: overloads are handled.
  processor.process = process
  processor.processSync = processSync

  // Expose.
  return processor

  // Create a new processor based on the processor in the current scope.
  /** @type {Processor} */
  function processor() {
    const destination = base()
    let index = -1

    while (++index < attachers.length) {
      destination.use(...attachers[index])
    }

    destination.data(extend__WEBPACK_IMPORTED_MODULE_1__(true, {}, namespace))

    return destination
  }

  /**
   * @param {string|Record<string, unknown>} [key]
   * @param {unknown} [value]
   * @returns {unknown}
   */
  function data(key, value) {
    if (typeof key === 'string') {
      // Set `key`.
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen)
        namespace[key] = value
        return processor
      }

      // Get `key`.
      return (own.call(namespace, key) && namespace[key]) || null
    }

    // Set space.
    if (key) {
      assertUnfrozen('data', frozen)
      namespace = key
      return processor
    }

    // Get space.
    return namespace
  }

  /** @type {Processor['freeze']} */
  function freeze() {
    if (frozen) {
      return processor
    }

    while (++freezeIndex < attachers.length) {
      const [attacher, ...options] = attachers[freezeIndex]

      if (options[0] === false) {
        continue
      }

      if (options[0] === true) {
        options[0] = undefined
      }

      /** @type {Transformer|void} */
      const transformer = attacher.call(processor, ...options)

      if (typeof transformer === 'function') {
        transformers.use(transformer)
      }
    }

    frozen = true
    freezeIndex = Number.POSITIVE_INFINITY

    return processor
  }

  /**
   * @param {Pluggable|null|undefined} [value]
   * @param {...unknown} options
   * @returns {Processor}
   */
  function use(value, ...options) {
    /** @type {Record<string, unknown>|undefined} */
    let settings

    assertUnfrozen('use', frozen)

    if (value === null || value === undefined) {
      // Empty.
    } else if (typeof value === 'function') {
      addPlugin(value, ...options)
    } else if (typeof value === 'object') {
      if (Array.isArray(value)) {
        addList(value)
      } else {
        addPreset(value)
      }
    } else {
      throw new TypeError('Expected usable value, not `' + value + '`')
    }

    if (settings) {
      namespace.settings = Object.assign(namespace.settings || {}, settings)
    }

    return processor

    /**
     * @param {import('..').Pluggable<unknown[]>} value
     * @returns {void}
     */
    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value)
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          const [plugin, ...options] = value
          addPlugin(plugin, ...options)
        } else {
          addPreset(value)
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`')
      }
    }

    /**
     * @param {Preset} result
     * @returns {void}
     */
    function addPreset(result) {
      addList(result.plugins)

      if (result.settings) {
        settings = Object.assign(settings || {}, result.settings)
      }
    }

    /**
     * @param {PluggableList|null|undefined} [plugins]
     * @returns {void}
     */
    function addList(plugins) {
      let index = -1

      if (plugins === null || plugins === undefined) {
        // Empty.
      } else if (Array.isArray(plugins)) {
        while (++index < plugins.length) {
          const thing = plugins[index]
          add(thing)
        }
      } else {
        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
      }
    }

    /**
     * @param {Plugin} plugin
     * @param {...unknown} [value]
     * @returns {void}
     */
    function addPlugin(plugin, value) {
      let index = -1
      /** @type {Processor['attachers'][number]|undefined} */
      let entry

      while (++index < attachers.length) {
        if (attachers[index][0] === plugin) {
          entry = attachers[index]
          break
        }
      }

      if (entry) {
        if ((0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(entry[1]) && (0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(value)) {
          value = extend__WEBPACK_IMPORTED_MODULE_1__(true, entry[1], value)
        }

        entry[1] = value
      } else {
        // @ts-expect-error: fine.
        attachers.push([...arguments])
      }
    }
  }

  /** @type {Processor['parse']} */
  function parse(doc) {
    processor.freeze()
    const file = vfile(doc)
    const Parser = processor.Parser
    assertParser('parse', Parser)

    if (newable(Parser, 'parse')) {
      // @ts-expect-error: `newable` checks this.
      return new Parser(String(file), file).parse()
    }

    // @ts-expect-error: `newable` checks this.
    return Parser(String(file), file) // eslint-disable-line new-cap
  }

  /** @type {Processor['stringify']} */
  function stringify(node, doc) {
    processor.freeze()
    const file = vfile(doc)
    const Compiler = processor.Compiler
    assertCompiler('stringify', Compiler)
    assertNode(node)

    if (newable(Compiler, 'compile')) {
      // @ts-expect-error: `newable` checks this.
      return new Compiler(node, file).compile()
    }

    // @ts-expect-error: `newable` checks this.
    return Compiler(node, file) // eslint-disable-line new-cap
  }

  /**
   * @param {Node} node
   * @param {VFileCompatible|RunCallback} [doc]
   * @param {RunCallback} [callback]
   * @returns {Promise<Node>|void}
   */
  function run(node, doc, callback) {
    assertNode(node)
    processor.freeze()

    if (!callback && typeof doc === 'function') {
      callback = doc
      doc = undefined
    }

    if (!callback) {
      return new Promise(executor)
    }

    executor(null, callback)

    /**
     * @param {null|((node: Node) => void)} resolve
     * @param {(error: Error) => void} reject
     * @returns {void}
     */
    function executor(resolve, reject) {
      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
      transformers.run(node, vfile(doc), done)

      /**
       * @param {Error|null} error
       * @param {Node} tree
       * @param {VFile} file
       * @returns {void}
       */
      function done(error, tree, file) {
        tree = tree || node
        if (error) {
          reject(error)
        } else if (resolve) {
          resolve(tree)
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, tree, file)
        }
      }
    }
  }

  /** @type {Processor['runSync']} */
  function runSync(node, file) {
    /** @type {Node|undefined} */
    let result
    /** @type {boolean|undefined} */
    let complete

    processor.run(node, file, done)

    assertDone('runSync', 'run', complete)

    // @ts-expect-error: we either bailed on an error or have a tree.
    return result

    /**
     * @param {Error|null} [error]
     * @param {Node} [tree]
     * @returns {void}
     */
    function done(error, tree) {
      ;(0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error)
      result = tree
      complete = true
    }
  }

  /**
   * @param {VFileCompatible} doc
   * @param {ProcessCallback} [callback]
   * @returns {Promise<VFile>|undefined}
   */
  function process(doc, callback) {
    processor.freeze()
    assertParser('process', processor.Parser)
    assertCompiler('process', processor.Compiler)

    if (!callback) {
      return new Promise(executor)
    }

    executor(null, callback)

    /**
     * @param {null|((file: VFile) => void)} resolve
     * @param {(error?: Error|null|undefined) => void} reject
     * @returns {void}
     */
    function executor(resolve, reject) {
      const file = vfile(doc)

      processor.run(processor.parse(file), file, (error, tree, file) => {
        if (error || !tree || !file) {
          done(error)
        } else {
          /** @type {unknown} */
          const result = processor.stringify(tree, file)

          if (result === undefined || result === null) {
            // Empty.
          } else if (looksLikeAVFileValue(result)) {
            file.value = result
          } else {
            file.result = result
          }

          done(error, file)
        }
      })

      /**
       * @param {Error|null|undefined} [error]
       * @param {VFile|undefined} [file]
       * @returns {void}
       */
      function done(error, file) {
        if (error || !file) {
          reject(error)
        } else if (resolve) {
          resolve(file)
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, file)
        }
      }
    }
  }

  /** @type {Processor['processSync']} */
  function processSync(doc) {
    /** @type {boolean|undefined} */
    let complete

    processor.freeze()
    assertParser('processSync', processor.Parser)
    assertCompiler('processSync', processor.Compiler)

    const file = vfile(doc)

    processor.process(file, done)

    assertDone('processSync', 'process', complete)

    return file

    /**
     * @param {Error|null|undefined} [error]
     * @returns {void}
     */
    function done(error) {
      complete = true
      ;(0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error)
    }
  }
}

/**
 * Check if `value` is a constructor.
 *
 * @param {unknown} value
 * @param {string} name
 * @returns {boolean}
 */
function newable(value, name) {
  return (
    typeof value === 'function' &&
    // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype &&
    // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype)
  )
}

/**
 * Check if `value` is an object with keys.
 *
 * @param {Record<string, unknown>} value
 * @returns {boolean}
 */
function keys(value) {
  /** @type {string} */
  let key

  for (key in value) {
    if (own.call(value, key)) {
      return true
    }
  }

  return false
}

/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */
function assertParser(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Parser`')
  }
}

/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */
function assertCompiler(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Compiler`')
  }
}

/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      'Cannot call `' +
        name +
        '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
    )
  }
}

/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */
function assertNode(node) {
  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
  // type-coverage:ignore-next-line
  if (!(0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(node) || typeof node.type !== 'string') {
    throw new TypeError('Expected node, got `' + node + '`')
    // Fine.
  }
}

/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      '`' + name + '` finished async. Use `' + asyncName + '` instead'
    )
  }
}

/**
 * @param {VFileCompatible} [value]
 * @returns {VFile}
 */
function vfile(value) {
  return looksLikeAVFile(value) ? value : new vfile__WEBPACK_IMPORTED_MODULE_5__.VFile(value)
}

/**
 * @param {VFileCompatible} [value]
 * @returns {value is VFile}
 */
function looksLikeAVFile(value) {
  return Boolean(
    value &&
      typeof value === 'object' &&
      'message' in value &&
      'messages' in value
  )
}

/**
 * @param {unknown} [value]
 * @returns {value is VFileValue}
 */
function looksLikeAVFileValue(value) {
  return typeof value === 'string' || is_buffer__WEBPACK_IMPORTED_MODULE_0__(value)
}


/***/ }),

/***/ "../../node_modules/unist-util-is/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/unist-util-is/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convert": () => (/* binding */ convert),
/* harmony export */   "is": () => (/* binding */ is)
/* harmony export */ });
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 *
 * @typedef {string} Type
 * @typedef {Object<string, unknown>} Props
 *
 * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test
 */

/**
 * Check if a node passes a test
 *
 * @callback TestFunctionAnything
 * @param {Node} node
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean|void}
 */

/**
 * Check if a node passes a certain node test
 *
 * @template {Node} X
 * @callback TestFunctionPredicate
 * @param {Node} node
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is X}
 */

/**
 * @callback AssertAnything
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean}
 */

/**
 * Check if a node passes a certain node test
 *
 * @template {Node} Y
 * @callback AssertPredicate
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is Y}
 */

const is =
  /**
   * Check if a node passes a test.
   * When a `parent` node is known the `index` of node should also be given.
   *
   * @type {(
   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &
   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)
   * )}
   */
  (
    /**
     * Check if a node passes a test.
     * When a `parent` node is known the `index` of node should also be given.
     *
     * @param {unknown} [node] Node to check
     * @param {Test} [test]
     * When nullish, checks if `node` is a `Node`.
     * When `string`, works like passing `function (node) {return node.type === test}`.
     * When `function` checks if function passed the node is true.
     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
     * When `array`, checks any one of the subtests pass.
     * @param {number|null|undefined} [index] Position of `node` in `parent`
     * @param {Parent|null|undefined} [parent] Parent of `node`
     * @param {unknown} [context] Context object to invoke `test` with
     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).
     */
    // eslint-disable-next-line max-params
    function is(node, test, index, parent, context) {
      const check = convert(test)

      if (
        index !== undefined &&
        index !== null &&
        (typeof index !== 'number' ||
          index < 0 ||
          index === Number.POSITIVE_INFINITY)
      ) {
        throw new Error('Expected positive finite index')
      }

      if (
        parent !== undefined &&
        parent !== null &&
        (!is(parent) || !parent.children)
      ) {
        throw new Error('Expected parent node')
      }

      if (
        (parent === undefined || parent === null) !==
        (index === undefined || index === null)
      ) {
        throw new Error('Expected both parent and index')
      }

      // @ts-expect-error Looks like a node.
      return node && node.type && typeof node.type === 'string'
        ? Boolean(check.call(context, node, index, parent))
        : false
    }
  )

const convert =
  /**
   * @type {(
   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  (
    /**
     * Generate an assertion from a check.
     * @param {Test} [test]
     * When nullish, checks if `node` is a `Node`.
     * When `string`, works like passing `function (node) {return node.type === test}`.
     * When `function` checks if function passed the node is true.
     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
     * When `array`, checks any one of the subtests pass.
     * @returns {AssertAnything}
     */
    function (test) {
      if (test === undefined || test === null) {
        return ok
      }

      if (typeof test === 'string') {
        return typeFactory(test)
      }

      if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
      }

      if (typeof test === 'function') {
        return castFactory(test)
      }

      throw new Error('Expected function, string, or object as test')
    }
  )
/**
 * @param {Array.<Type|Props|TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */
function anyFactory(tests) {
  /** @type {Array.<AssertAnything>} */
  const checks = []
  let index = -1

  while (++index < tests.length) {
    checks[index] = convert(tests[index])
  }

  return castFactory(any)

  /**
   * @this {unknown}
   * @param {unknown[]} parameters
   * @returns {boolean}
   */
  function any(...parameters) {
    let index = -1

    while (++index < checks.length) {
      if (checks[index].call(this, ...parameters)) return true
    }

    return false
  }
}

/**
 * Utility to assert each property in `test` is represented in `node`, and each
 * values are strictly equal.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */
function propsFactory(check) {
  return castFactory(all)

  /**
   * @param {Node} node
   * @returns {boolean}
   */
  function all(node) {
    /** @type {string} */
    let key

    for (key in check) {
      // @ts-expect-error: hush, it sure works as an index.
      if (node[key] !== check[key]) return false
    }

    return true
  }
}

/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 *
 * @param {Type} check
 * @returns {AssertAnything}
 */
function typeFactory(check) {
  return castFactory(type)

  /**
   * @param {Node} node
   */
  function type(node) {
    return node && node.type === check
  }
}

/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */
function castFactory(check) {
  return assertion

  /**
   * @this {unknown}
   * @param {Array.<unknown>} parameters
   * @returns {boolean}
   */
  function assertion(...parameters) {
    // @ts-expect-error: spreading is fine.
    return Boolean(check.call(this, ...parameters))
  }
}

// Utility to return true.
function ok() {
  return true
}


/***/ }),

/***/ "../../node_modules/unist-util-stringify-position/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/unist-util-stringify-position/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringifyPosition": () => (/* binding */ stringifyPosition)
/* harmony export */ });
/**
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
 */

/**
 * Stringify one point, a position (start and end points), or a node’s
 * positional information.
 *
 * @param {Node|NodeLike|Position|Point|null} [value]
 * @returns {string}
 */
function stringifyPosition(value) {
  // Nothing.
  if (!value || typeof value !== 'object') {
    return ''
  }

  // Node.
  if ('position' in value || 'type' in value) {
    return position(value.position)
  }

  // Position.
  if ('start' in value || 'end' in value) {
    return position(value)
  }

  // Point.
  if ('line' in value || 'column' in value) {
    return point(value)
  }

  // ?
  return ''
}

/**
 * @param {Point|undefined} point
 * @returns {string}
 */
function point(point) {
  return index(point && point.line) + ':' + index(point && point.column)
}

/**
 * @param {Position|undefined} pos
 * @returns {string}
 */
function position(pos) {
  return point(pos && pos.start) + '-' + point(pos && pos.end)
}

/**
 * @param {number|undefined} value
 * @returns {number}
 */
function index(value) {
  return value && typeof value === 'number' ? value : 1
}


/***/ }),

/***/ "../../node_modules/vfile-message/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/vfile-message/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VFileMessage": () => (/* binding */ VFileMessage)
/* harmony export */ });
/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-stringify-position */ "../../node_modules/unist-util-stringify-position/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
 */



class VFileMessage extends Error {
  /**
   * Constructor of a message for `reason` at `place` from `origin`.
   * When an error is passed in as `reason`, copies the `stack`.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   */
  constructor(reason, place, origin) {
    /** @type {[string|null, string|null]} */
    const parts = [null, null]
    /** @type {Position} */
    let position = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: {line: null, column: null},
      // @ts-expect-error: "
      end: {line: null, column: null}
    }

    super()

    if (typeof place === 'string') {
      origin = place
      place = undefined
    }

    if (typeof origin === 'string') {
      const index = origin.indexOf(':')

      if (index === -1) {
        parts[1] = origin
      } else {
        parts[0] = origin.slice(0, index)
        parts[1] = origin.slice(index + 1)
      }
    }

    if (place) {
      // Node.
      if ('type' in place || 'position' in place) {
        if (place.position) {
          position = place.position
        }
      }
      // Position.
      else if ('start' in place || 'end' in place) {
        position = place
      }
      // Point.
      else if ('line' in place || 'column' in place) {
        position.start = place
      }
    }

    // Fields from `Error`
    this.name = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__.stringifyPosition)(place) || '1:1'
    this.message = typeof reason === 'object' ? reason.message : reason
    this.stack = typeof reason === 'object' ? reason.stack : ''

    /**
     * Reason for message.
     * @type {string}
     */
    this.reason = this.message
    /**
     * If true, marks associated file as no longer processable.
     * @type {boolean?}
     */
    // eslint-disable-next-line no-unused-expressions
    this.fatal
    /**
     * Starting line of error.
     * @type {number?}
     */
    this.line = position.start.line
    /**
     * Starting column of error.
     * @type {number?}
     */
    this.column = position.start.column
    /**
     * Namespace of warning.
     * @type {string?}
     */
    this.source = parts[0]
    /**
     * Category of message.
     * @type {string?}
     */
    this.ruleId = parts[1]
    /**
     * Full range information, when available.
     * Has start and end properties, both set to an object with line and column, set to number?.
     * @type {Position?}
     */
    this.position = position

    // The following fields are “well known”.
    // Not standard.
    // Feel free to add other non-standard fields to your messages.

    /* eslint-disable no-unused-expressions */
    /**
     * You can use this to specify the source value that’s being reported, which
     * is deemed incorrect.
     * @type {string?}
     */
    this.actual
    /**
     * You can use this to suggest values that should be used instead of
     * `actual`, one or more values that are deemed as acceptable.
     * @type {Array<string>?}
     */
    this.expected
    /**
     * You may add a file property with a path of a file (used throughout the VFile ecosystem).
     * @type {string?}
     */
    this.file
    /**
     * You may add a url property with a link to documentation for the message.
     * @type {string?}
     */
    this.url
    /**
     * You may add a note property with a long form description of the message (supported by vfile-reporter).
     * @type {string?}
     */
    this.note
    /* eslint-enable no-unused-expressions */
  }
}

VFileMessage.prototype.file = ''
VFileMessage.prototype.name = ''
VFileMessage.prototype.reason = ''
VFileMessage.prototype.message = ''
VFileMessage.prototype.stack = ''
VFileMessage.prototype.fatal = null
VFileMessage.prototype.column = null
VFileMessage.prototype.line = null
VFileMessage.prototype.source = null
VFileMessage.prototype.ruleId = null
VFileMessage.prototype.position = null


/***/ }),

/***/ "../../node_modules/vfile/lib/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/vfile/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VFile": () => (/* binding */ VFile)
/* harmony export */ });
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-buffer */ "../../node_modules/is-buffer/index.js");
/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile-message */ "../../node_modules/vfile-message/index.js");
/* harmony import */ var _minpath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./minpath.js */ "../../node_modules/vfile/lib/minpath.browser.js");
/* harmony import */ var _minproc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./minproc.js */ "../../node_modules/vfile/lib/minproc.browser.js");
/* harmony import */ var _minurl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./minurl.js */ "../../node_modules/vfile/lib/minurl.shared.js");
/* harmony import */ var _minurl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./minurl.js */ "../../node_modules/vfile/lib/minurl.browser.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike
 * @typedef {import('./minurl.shared.js').URL} URL
 * @typedef {import('..').VFileData} VFileData
 * @typedef {import('..').VFileValue} VFileValue
 *
 * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding
 *   Encodings supported by the buffer class.
 *   This is a copy of the typing from Node, copied to prevent Node globals from
 *   being needed.
 *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
 *
 * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 * @property {VFileValue} [value]
 * @property {string} [cwd]
 * @property {Array<string>} [history]
 * @property {string|URL} [path]
 * @property {string} [basename]
 * @property {string} [stem]
 * @property {string} [extname]
 * @property {string} [dirname]
 * @property {VFileData} [data]
 *
 * @typedef Map
 *   Raw source map, see:
 *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
 * @property {number} version
 * @property {Array<string>} sources
 * @property {Array<string>} names
 * @property {string|undefined} [sourceRoot]
 * @property {Array<string>|undefined} [sourcesContent]
 * @property {string} mappings
 * @property {string} file
 *
 * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions
 *   Configuration: a bunch of keys that will be shallow copied over to the new
 *   file.
 *
 * @typedef {Record<string, unknown>} VFileReporterSettings
 * @typedef {<T = VFileReporterSettings>(files: Array<VFile>, options: T) => string} VFileReporter
 */







// Order of setting (least specific to most), we need this because otherwise
// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
// stem can be set.
const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']

class VFile {
  /**
   * Create a new virtual file.
   *
   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.
   * If `options` is a `VFile`, shallow copies its data over to the new file.
   * All other given fields are set on the newly created `VFile`.
   *
   * Path related properties are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * It’s not possible to set either `dirname` or `extname` without setting
   * either `history`, `path`, `basename`, or `stem` as well.
   *
   * @param {VFileCompatible} [value]
   */
  constructor(value) {
    /** @type {VFileOptions} */
    let options

    if (!value) {
      options = {}
    } else if (typeof value === 'string' || is_buffer__WEBPACK_IMPORTED_MODULE_0__(value)) {
      // @ts-expect-error Looks like a buffer.
      options = {value}
    } else if ((0,_minurl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(value)) {
      options = {path: value}
    } else {
      // @ts-expect-error Looks like file or options.
      options = value
    }

    /**
     * Place to store custom information.
     * It’s OK to store custom data directly on the file, moving it to `data`
     * gives a little more privacy.
     * @type {VFileData}
     */
    this.data = {}

    /**
     * List of messages associated with the file.
     * @type {Array<VFileMessage>}
     */
    this.messages = []

    /**
     * List of file paths the file moved between.
     * @type {Array<string>}
     */
    this.history = []

    /**
     * Base of `path`.
     * Defaults to `process.cwd()` (`/` in browsers).
     * @type {string}
     */
    this.cwd = _minproc_js__WEBPACK_IMPORTED_MODULE_2__.proc.cwd()

    /* eslint-disable no-unused-expressions */
    /**
     * Raw value.
     * @type {VFileValue}
     */
    this.value

    // The below are non-standard, they are “well-known”.
    // As in, used in several tools.

    /**
     * Whether a file was saved to disk.
     * This is used by vfile reporters.
     * @type {boolean}
     */
    this.stored

    /**
     * Sometimes files have a non-string representation.
     * This can be stored in the `result` field.
     * One example is when turning markdown into React nodes.
     * This is used by unified to store non-string results.
     * @type {unknown}
     */
    this.result

    /**
     * Sometimes files have a source map associated with them.
     * This can be stored in the `map` field.
     * This should be a `RawSourceMap` type from the `source-map` module.
     * @type {Map|undefined}
     */
    this.map
    /* eslint-enable no-unused-expressions */

    // Set path related properties in the correct order.
    let index = -1

    while (++index < order.length) {
      const prop = order[index]

      // Note: we specifically use `in` instead of `hasOwnProperty` to accept
      // `vfile`s too.
      if (prop in options && options[prop] !== undefined) {
        // @ts-expect-error: TS is confused by the different types for `history`.
        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]
      }
    }

    /** @type {string} */
    let prop

    // Set non-path related properties.
    for (prop in options) {
      // @ts-expect-error: fine to set other things.
      if (!order.includes(prop)) this[prop] = options[prop]
    }
  }

  /**
   * Access full path (`~/index.min.js`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1]
  }

  /**
   * Set full path (`~/index.min.js`).
   * Cannot be nullified.
   *
   * @param {string|URL} path
   */
  set path(path) {
    if ((0,_minurl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(path)) {
      path = (0,_minurl_js__WEBPACK_IMPORTED_MODULE_3__.urlToPath)(path)
    }

    assertNonEmpty(path, 'path')

    if (this.path !== path) {
      this.history.push(path)
    }
  }

  /**
   * Access parent path (`~`).
   */
  get dirname() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.dirname(this.path) : undefined
  }

  /**
   * Set parent path (`~`).
   * Cannot be set if there's no `path` yet.
   */
  set dirname(dirname) {
    assertPath(this.basename, 'dirname')
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(dirname || '', this.basename)
  }

  /**
   * Access basename (including extname) (`index.min.js`).
   */
  get basename() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.basename(this.path) : undefined
  }

  /**
   * Set basename (`index.min.js`).
   * Cannot contain path separators.
   * Cannot be nullified either (use `file.path = file.dirname` instead).
   */
  set basename(basename) {
    assertNonEmpty(basename, 'basename')
    assertPart(basename, 'basename')
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname || '', basename)
  }

  /**
   * Access extname (including dot) (`.js`).
   */
  get extname() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.extname(this.path) : undefined
  }

  /**
   * Set extname (including dot) (`.js`).
   * Cannot be set if there's no `path` yet and cannot contain path separators.
   */
  set extname(extname) {
    assertPart(extname, 'extname')
    assertPath(this.dirname, 'extname')

    if (extname) {
      if (extname.charCodeAt(0) !== 46 /* `.` */) {
        throw new Error('`extname` must start with `.`')
      }

      if (extname.includes('.', 1)) {
        throw new Error('`extname` cannot contain multiple dots')
      }
    }

    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname, this.stem + (extname || ''))
  }

  /**
   * Access stem (w/o extname) (`index.min`).
   */
  get stem() {
    return typeof this.path === 'string'
      ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.basename(this.path, this.extname)
      : undefined
  }

  /**
   * Set stem (w/o extname) (`index.min`).
   * Cannot be nullified, and cannot contain path separators.
   */
  set stem(stem) {
    assertNonEmpty(stem, 'stem')
    assertPart(stem, 'stem')
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname || '', stem + (this.extname || ''))
  }

  /**
   * Serialize the file.
   *
   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.
   * @returns {string}
   */
  toString(encoding) {
    return (this.value || '').toString(encoding)
  }

  /**
   * Create a message and associates it w/ the file.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {VFileMessage}
   */
  message(reason, place, origin) {
    const message = new vfile_message__WEBPACK_IMPORTED_MODULE_5__.VFileMessage(reason, place, origin)

    if (this.path) {
      message.name = this.path + ':' + message.name
      message.file = this.path
    }

    message.fatal = false

    this.messages.push(message)

    return message
  }

  /**
   * Info: create a message, associate it with the file, and mark the fatality
   * as `null`.
   * Calls `message()` internally.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {VFileMessage}
   */
  info(reason, place, origin) {
    const message = this.message(reason, place, origin)

    message.fatal = null

    return message
  }

  /**
   * Fail: create a message, associate it with the file, mark the fatality as
   * `true`.
   * Note: fatal errors mean a file is no longer processable.
   * Calls `message()` internally.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {never}
   */
  fail(reason, place, origin) {
    const message = this.message(reason, place, origin)

    message.fatal = true

    throw message
  }
}

/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string|undefined} part
 * @param {string} name
 * @returns {void}
 */
function assertPart(part, name) {
  if (part && part.includes(_minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.sep)) {
    throw new Error(
      '`' + name + '` cannot be a path: did not expect `' + _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.sep + '`'
    )
  }
}

/**
 * Assert that `part` is not empty.
 *
 * @param {string|undefined} part
 * @param {string} name
 * @returns {asserts part is string}
 */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty')
  }
}

/**
 * Assert `path` exists.
 *
 * @param {string|undefined} path
 * @param {string} name
 * @returns {asserts path is string}
 */
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too')
  }
}


/***/ }),

/***/ "../../node_modules/vfile/lib/minpath.browser.js":
/*!*******************************************************!*\
  !*** ../../node_modules/vfile/lib/minpath.browser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "path": () => (/* binding */ path)
/* harmony export */ });
// A derivative work based on:
// <https://github.com/browserify/path-browserify>.
// Which is licensed:
//
// MIT License
//
// Copyright (c) 2013 James Halliday
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// A derivative work based on:
//
// Parts of that are extracted from Node’s internal `path` module:
// <https://github.com/nodejs/node/blob/master/lib/path.js>.
// Which is licensed:
//
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

const path = {basename, dirname, extname, join, sep: '/'}

/* eslint-disable max-depth, complexity */

/**
 * @param {string} path
 * @param {string} [ext]
 * @returns {string}
 */
function basename(path, ext) {
  if (ext !== undefined && typeof ext !== 'string') {
    throw new TypeError('"ext" argument must be a string')
  }

  assertPath(path)
  let start = 0
  let end = -1
  let index = path.length
  /** @type {boolean|undefined} */
  let seenNonSlash

  if (ext === undefined || ext.length === 0 || ext.length > path.length) {
    while (index--) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (seenNonSlash) {
          start = index + 1
          break
        }
      } else if (end < 0) {
        // We saw the first non-path separator, mark this as the end of our
        // path component.
        seenNonSlash = true
        end = index + 1
      }
    }

    return end < 0 ? '' : path.slice(start, end)
  }

  if (ext === path) {
    return ''
  }

  let firstNonSlashEnd = -1
  let extIndex = ext.length - 1

  while (index--) {
    if (path.charCodeAt(index) === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (seenNonSlash) {
        start = index + 1
        break
      }
    } else {
      if (firstNonSlashEnd < 0) {
        // We saw the first non-path separator, remember this index in case
        // we need it if the extension ends up not matching.
        seenNonSlash = true
        firstNonSlashEnd = index + 1
      }

      if (extIndex > -1) {
        // Try to match the explicit extension.
        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
          if (extIndex < 0) {
            // We matched the extension, so mark this as the end of our path
            // component
            end = index
          }
        } else {
          // Extension does not match, so our result is the entire path
          // component
          extIndex = -1
          end = firstNonSlashEnd
        }
      }
    }
  }

  if (start === end) {
    end = firstNonSlashEnd
  } else if (end < 0) {
    end = path.length
  }

  return path.slice(start, end)
}

/**
 * @param {string} path
 * @returns {string}
 */
function dirname(path) {
  assertPath(path)

  if (path.length === 0) {
    return '.'
  }

  let end = -1
  let index = path.length
  /** @type {boolean|undefined} */
  let unmatchedSlash

  // Prefix `--` is important to not run on `0`.
  while (--index) {
    if (path.charCodeAt(index) === 47 /* `/` */) {
      if (unmatchedSlash) {
        end = index
        break
      }
    } else if (!unmatchedSlash) {
      // We saw the first non-path separator
      unmatchedSlash = true
    }
  }

  return end < 0
    ? path.charCodeAt(0) === 47 /* `/` */
      ? '/'
      : '.'
    : end === 1 && path.charCodeAt(0) === 47 /* `/` */
    ? '//'
    : path.slice(0, end)
}

/**
 * @param {string} path
 * @returns {string}
 */
function extname(path) {
  assertPath(path)

  let index = path.length

  let end = -1
  let startPart = 0
  let startDot = -1
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find.
  let preDotState = 0
  /** @type {boolean|undefined} */
  let unmatchedSlash

  while (index--) {
    const code = path.charCodeAt(index)

    if (code === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (unmatchedSlash) {
        startPart = index + 1
        break
      }

      continue
    }

    if (end < 0) {
      // We saw the first non-path separator, mark this as the end of our
      // extension.
      unmatchedSlash = true
      end = index + 1
    }

    if (code === 46 /* `.` */) {
      // If this is our first dot, mark it as the start of our extension.
      if (startDot < 0) {
        startDot = index
      } else if (preDotState !== 1) {
        preDotState = 1
      }
    } else if (startDot > -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension.
      preDotState = -1
    }
  }

  if (
    startDot < 0 ||
    end < 0 ||
    // We saw a non-dot character immediately before the dot.
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly `..`.
    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
  ) {
    return ''
  }

  return path.slice(startDot, end)
}

/**
 * @param {Array<string>} segments
 * @returns {string}
 */
function join(...segments) {
  let index = -1
  /** @type {string|undefined} */
  let joined

  while (++index < segments.length) {
    assertPath(segments[index])

    if (segments[index]) {
      joined =
        joined === undefined ? segments[index] : joined + '/' + segments[index]
    }
  }

  return joined === undefined ? '.' : normalize(joined)
}

/**
 * Note: `normalize` is not exposed as `path.normalize`, so some code is
 * manually removed from it.
 *
 * @param {string} path
 * @returns {string}
 */
function normalize(path) {
  assertPath(path)

  const absolute = path.charCodeAt(0) === 47 /* `/` */

  // Normalize the path according to POSIX rules.
  let value = normalizeString(path, !absolute)

  if (value.length === 0 && !absolute) {
    value = '.'
  }

  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
    value += '/'
  }

  return absolute ? '/' + value : value
}

/**
 * Resolve `.` and `..` elements in a path with directory names.
 *
 * @param {string} path
 * @param {boolean} allowAboveRoot
 * @returns {string}
 */
function normalizeString(path, allowAboveRoot) {
  let result = ''
  let lastSegmentLength = 0
  let lastSlash = -1
  let dots = 0
  let index = -1
  /** @type {number|undefined} */
  let code
  /** @type {number} */
  let lastSlashIndex

  while (++index <= path.length) {
    if (index < path.length) {
      code = path.charCodeAt(index)
    } else if (code === 47 /* `/` */) {
      break
    } else {
      code = 47 /* `/` */
    }

    if (code === 47 /* `/` */) {
      if (lastSlash === index - 1 || dots === 1) {
        // Empty.
      } else if (lastSlash !== index - 1 && dots === 2) {
        if (
          result.length < 2 ||
          lastSegmentLength !== 2 ||
          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||
          result.charCodeAt(result.length - 2) !== 46 /* `.` */
        ) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf('/')

            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = ''
                lastSegmentLength = 0
              } else {
                result = result.slice(0, lastSlashIndex)
                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')
              }

              lastSlash = index
              dots = 0
              continue
            }
          } else if (result.length > 0) {
            result = ''
            lastSegmentLength = 0
            lastSlash = index
            dots = 0
            continue
          }
        }

        if (allowAboveRoot) {
          result = result.length > 0 ? result + '/..' : '..'
          lastSegmentLength = 2
        }
      } else {
        if (result.length > 0) {
          result += '/' + path.slice(lastSlash + 1, index)
        } else {
          result = path.slice(lastSlash + 1, index)
        }

        lastSegmentLength = index - lastSlash - 1
      }

      lastSlash = index
      dots = 0
    } else if (code === 46 /* `.` */ && dots > -1) {
      dots++
    } else {
      dots = -1
    }
  }

  return result
}

/**
 * @param {string} path
 */
function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError(
      'Path must be a string. Received ' + JSON.stringify(path)
    )
  }
}

/* eslint-enable max-depth, complexity */


/***/ }),

/***/ "../../node_modules/vfile/lib/minproc.browser.js":
/*!*******************************************************!*\
  !*** ../../node_modules/vfile/lib/minproc.browser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "proc": () => (/* binding */ proc)
/* harmony export */ });
// Somewhat based on:
// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
// But I don’t think one tiny line of code can be copyrighted. 😅
const proc = {cwd}

function cwd() {
  return '/'
}


/***/ }),

/***/ "../../node_modules/vfile/lib/minurl.browser.js":
/*!******************************************************!*\
  !*** ../../node_modules/vfile/lib/minurl.browser.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUrl": () => (/* reexport safe */ _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl),
/* harmony export */   "urlToPath": () => (/* binding */ urlToPath)
/* harmony export */ });
/* harmony import */ var _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./minurl.shared.js */ "../../node_modules/vfile/lib/minurl.shared.js");
/// <reference lib="dom" />



// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

/**
 * @param {string|URL} path
 */
function urlToPath(path) {
  if (typeof path === 'string') {
    path = new URL(path)
  } else if (!(0,_minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl)(path)) {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' +
        path +
        '`'
    )
    error.code = 'ERR_INVALID_ARG_TYPE'
    throw error
  }

  if (path.protocol !== 'file:') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError('The URL must be of scheme file')
    error.code = 'ERR_INVALID_URL_SCHEME'
    throw error
  }

  return getPathFromURLPosix(path)
}

/**
 * @param {URL} url
 */
function getPathFromURLPosix(url) {
  if (url.hostname !== '') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    )
    error.code = 'ERR_INVALID_FILE_URL_HOST'
    throw error
  }

  const pathname = url.pathname
  let index = -1

  while (++index < pathname.length) {
    if (
      pathname.charCodeAt(index) === 37 /* `%` */ &&
      pathname.charCodeAt(index + 1) === 50 /* `2` */
    ) {
      const third = pathname.charCodeAt(index + 2)
      if (third === 70 /* `F` */ || third === 102 /* `f` */) {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError(
          'File URL path must not include encoded / characters'
        )
        error.code = 'ERR_INVALID_FILE_URL_PATH'
        throw error
      }
    }
  }

  return decodeURIComponent(pathname)
}




/***/ }),

/***/ "../../node_modules/vfile/lib/minurl.shared.js":
/*!*****************************************************!*\
  !*** ../../node_modules/vfile/lib/minurl.shared.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUrl": () => (/* binding */ isUrl)
/* harmony export */ });
/**
 * @typedef URL
 * @property {string} hash
 * @property {string} host
 * @property {string} hostname
 * @property {string} href
 * @property {string} origin
 * @property {string} password
 * @property {string} pathname
 * @property {string} port
 * @property {string} protocol
 * @property {string} search
 * @property {any} searchParams
 * @property {string} username
 * @property {() => string} toString
 * @property {() => string} toJSON
 */

/**
 * @param {unknown} fileURLOrPath
 * @returns {fileURLOrPath is URL}
 */
// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
function isUrl(fileURLOrPath) {
  return (
    fileURLOrPath !== null &&
    typeof fileURLOrPath === 'object' &&
    // @ts-expect-error: indexable.
    fileURLOrPath.href &&
    // @ts-expect-error: indexable.
    fileURLOrPath.origin
  )
}


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/pegjs-parsers.js":
/*!********************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/pegjs-parsers.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlignEnvironmentPegParser": () => (/* reexport default export from named module */ _grammars_align_environment_pegjs__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "ArgSpecPegParser": () => (/* reexport default export from named module */ _grammars_xparse_argspec_pegjs__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "GluePegParser": () => (/* reexport default export from named module */ _grammars_tex_glue_pegjs__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   "LatexPegParser": () => (/* reexport default export from named module */ _grammars_latex_pegjs__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "LigaturesPegParser": () => (/* reexport default export from named module */ _grammars_ligatures_pegjs__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "MacroSubstitutionPegParser": () => (/* reexport default export from named module */ _grammars_macro_substitutions_pegjs__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "PgfkeysPegParser": () => (/* reexport default export from named module */ _grammars_pgfkeys_pegjs__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "SystemePegParser": () => (/* reexport default export from named module */ _grammars_systeme_environment_pegjs__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   "TabularPegParser": () => (/* reexport default export from named module */ _grammars_tabular_spec_pegjs__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "XColorPegParser": () => (/* reexport default export from named module */ _grammars_xcolor_expressions_pegjs__WEBPACK_IMPORTED_MODULE_6__)
/* harmony export */ });
/* harmony import */ var _grammars_latex_pegjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../grammars/latex.pegjs */ "./unified-latex-util-pegjs/grammars/latex.pegjs");
/* harmony import */ var _grammars_align_environment_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammars/align-environment.pegjs */ "./unified-latex-util-pegjs/grammars/align-environment.pegjs");
/* harmony import */ var _grammars_xparse_argspec_pegjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grammars/xparse-argspec.pegjs */ "./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs");
/* harmony import */ var _grammars_pgfkeys_pegjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../grammars/pgfkeys.pegjs */ "./unified-latex-util-pegjs/grammars/pgfkeys.pegjs");
/* harmony import */ var _grammars_macro_substitutions_pegjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../grammars/macro-substitutions.pegjs */ "./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs");
/* harmony import */ var _grammars_ligatures_pegjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../grammars/ligatures.pegjs */ "./unified-latex-util-pegjs/grammars/ligatures.pegjs");
/* harmony import */ var _grammars_xcolor_expressions_pegjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../grammars/xcolor-expressions.pegjs */ "./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs");
/* harmony import */ var _grammars_tabular_spec_pegjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../grammars/tabular-spec.pegjs */ "./unified-latex-util-pegjs/grammars/tabular-spec.pegjs");
/* harmony import */ var _grammars_systeme_environment_pegjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../grammars/systeme-environment.pegjs */ "./unified-latex-util-pegjs/grammars/systeme-environment.pegjs");
/* harmony import */ var _grammars_tex_glue_pegjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../grammars/tex-glue.pegjs */ "./unified-latex-util-pegjs/grammars/tex-glue.pegjs");
// This file needs to be here because typescript does not know how to use babel's transpiler
// to directly load Pegjs grammars.














/***/ }),

/***/ "./support-tables/katex-support.json":
/*!*******************************************!*\
  !*** ./support-tables/katex-support.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"KATEX_MACROS":[" ","!","\\"","#","&","\'","*",",",".",":",";","=",">","AA","AE","Alpha","And","Arrowvert","Bbb","Bbbk","Beta","Big","Bigg","Biggl","Biggm","Biggr","Bigl","Bigm","Bigr","Box","Bra","Bumpeq","C","Cap","Chi","Colonapprox","Coloneq","Coloneqq","Colonsim","Complex","Coppa","Cup","Dagger","Darr","DeclareMathOperator","Delta","Diamond","Digamma","Doteq","Downarrow","Epsilon","Eqcolon","Eqqcolon","Eta","Finv","Game","Gamma","H","Harr","Huge","Im","Iota","Join","KaTeX","Kappa","Ket","Koppa","L","LARGE","LaTeX","Lambda","Large","Larr","LeftArrow","Leftarrow","Leftrightarrow","Lleftarrow","Longleftarrow","Longleftrightarrow","Longrightarrow","Lrarr","Lsh","Mu","N","Newextarrow","Nu","O","OE","Omega","Omicron","Overrightarrow","P","Phi","Pi","Pr","Psi","Q","R","Rarr","Re","Reals","Rho","Rightarrow","Rrightarrow","Rsh","Rule","S","Sampi","Sigma","Space","Stigma","Subset","Supset","Tau","TeX","Theta","Tiny","Uarr","Uparrow","Updownarrow","Upsilon","Vdash","Vert","Vvdash","Xi","Z","Zeta","\\\\","^","_","`","aa","above","abovewithdelims","acute","add","ae","alef","alefsym","aleph","allowbreak","alpha","amalg","and","ang","angl","angle","angln","approx","approxcolon","approxcoloncolon","approxeq","arccos","arcctg","arcsin","arctan","arctg","arg","argmax","argmin","array","arraystretch","arrowvert","ast","asymp","atop","atopwithdelims","backepsilon","backprime","backsim","backsimeq","backslash","bar","barwedge","bbox","bcancel","because","begin","begingroup","beta","beth","between","bf","bfseries","big","bigcap","bigcirc","bigcup","bigg","biggl","biggm","biggr","bigl","bigm","bigodot","bigominus","bigoplus","bigoslash","bigotimes","bigr","bigsqcap","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","binom","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","bm","bmod","bold","boldsymbol","bot","bowtie","boxdot","boxed","boxminus","boxplus","boxtimes","bra","brace","bracevert","brack","braket","breve","buildrel","bull","bullet","bumpeq","cal","cancel","cancelto","cap","cases","cdot","cdotp","cdots","ce","cee","centerdot","cf","cfrac","ch","char","check","checkmark","chi","chk","choose","circ","circeq","circlearrowleft","circlearrowright","circledR","circledS","circledast","circledcirc","circleddash","class","cline","clubs","clubsuit","cnums","colon","colonapprox","coloncolon","coloncolonapprox","coloncolonequals","coloncolonminus","coloncolonsim","coloneq","coloneqq","colonequals","colonminus","colonsim","color","colorbox","complement","cong","coppa","coprod","copyright","cos","cosec","cosh","cot","cotg","coth","cr","csc","cssId","ctg","cth","cup","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curvearrowleft","curvearrowright","dArr","dag","dagger","daleth","darr","dashleftarrow","dashrightarrow","dashv","dbinom","dblcolon","ddag","ddagger","ddddot","dddot","ddot","ddots","def","definecolor","deg","degree","delta","det","dfrac","diagdown","diagup","diamond","diamonds","diamondsuit","digamma","dim","displaylines","displaystyle","div","divideontimes","dot","doteq","doteqdot","dotplus","dots","dotsb","dotsc","dotsi","dotsm","dotso","doublebarwedge","doublecap","doublecup","downarrow","downdownarrows","downharpoonleft","downharpoonright","edef","ell","else","em","emph","empty","emptyset","enclose","end","endgroup","enspace","epsilon","eqalign","eqalignno","eqcirc","eqcolon","eqqcolon","eqref","eqsim","eqslantgtr","eqslantless","equalscolon","equalscoloncolon","equiv","eta","eth","euro","exist","exists","exp","expandafter","fallingdotseq","fbox","fcolorbox","fi","flat","foo","footnotesize","forall","frac","frak","frown","futurelet","gamma","gcd","gdef","ge","geneuro","geneuronarrow","geneurowide","genfrac","geq","geqq","geqslant","gets","gg","ggg","gggtr","gimel","global","gnapprox","gneq","gneqq","gnsim","grave","greet","gt","gtrapprox","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","hArr","hail","harr","hat","hbar","hbox","hdashline","hearts","heartsuit","hfil","hfill","hline","hom","hookleftarrow","hookrightarrow","hphantom","href","hskip","hslash","hspace","htmlClass","htmlData","htmlId","htmlStyle","huge","i","iddots","idotsint","if","iff","ifmode","ifx","iiiint","iiint","iint","image","imageof","imath","impliedby","implies","in","includegraphics","inf","infin","infty","injlim","int","intercal","intop","iota","isin","it","itshape","j","jmath","kappa","ker","kern","ket","koppa","l","lArr","lBrace","lVert","label","lambda","land","lang","langle","large","larr","lbrace","lbrack","lceil","ldotp","ldots","le","leadsto","left","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leftroot","leftthreetimes","leq","leqalignno","leqq","leqslant","lessapprox","lessdot","lesseqgtr","lesseqqgtr","lessgtr","lesssim","let","lfloor","lg","lgroup","lhd","lim","liminf","limits","limsup","ll","llap","llbracket","llcorner","lll","llless","lmoustache","ln","lnapprox","lneq","lneqq","lnot","lnsim","log","long","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lor","lower","lozenge","lparen","lq","lrArr","lrarr","lrcorner","lt","ltimes","lvert","lvertneqq","maltese","mapsto","mathbb","mathbf","mathbin","mathcal","mathchoice","mathclap","mathclose","mathellipsis","mathfrak","mathinner","mathit","mathllap","mathnormal","mathop","mathopen","mathord","mathpunct","mathrel","mathring","mathrlap","mathrm","mathscr","mathsf","mathsterling","mathstrut","mathtip","mathtt","matrix","max","mbox","md","mdseries","measuredangle","medspace","mho","mid","middle","min","minuscolon","minuscoloncolon","minuso","mit","mkern","mmlToken","mod","models","moveleft","moveright","mp","mskip","mspace","mu","multicolumn","multimap","nLeftarrow","nLeftrightarrow","nRightarrow","nVDash","nVdash","nabla","natnums","natural","ncong","ne","nearrow","neg","negmedspace","negthickspace","negthinspace","neq","newcommand","newenvironment","newline","nexists","ngeq","ngeqq","ngeqslant","ngtr","ni","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nless","nmid","nobreak","nobreakspace","noexpand","nolimits","nonumber","normalfont","normalsize","not","notag","notin","notni","nparallel","nprec","npreceq","nrightarrow","nshortmid","nshortparallel","nsim","nsubseteq","nsubseteqq","nsucc","nsucceq","nsupseteq","nsupseteqq","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","nu","nvDash","nvdash","nwarrow","o","odot","oe","officialeuro","oiiint","oiint","oint","oldstyle","omega","omicron","ominus","operatorname","operatornamewithlimits","oplus","or","origof","oslash","otimes","over","overbrace","overbracket","overgroup","overleftarrow","overleftharpoon","overleftrightarrow","overline","overlinesegment","overparen","overrightarrow","overrightharpoon","overset","overwithdelims","owns","pagecolor","parallel","part","partial","perp","phantom","phase","phi","pi","pitchfork","plim","plusmn","pm","pmatrix","pmb","pmod","pod","pounds","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","prime","prod","projlim","propto","providecommand","psi","pu","qquad","quad","r","rArr","rBrace","rVert","raise","raisebox","rang","rangle","rarr","ratio","rbrace","rbrack","rceil","real","reals","ref","relax","renewcommand","renewenvironment","require","restriction","rfloor","rgroup","rhd","rho","right","rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","rightthreetimes","risingdotseq","rlap","rm","rmoustache","root","rotatebox","rparen","rq","rrbracket","rtimes","rule","rvert","sampi","sc","scalebox","scr","scriptscriptstyle","scriptsize","scriptstyle","sdot","searrow","sec","sect","setlength","setminus","sf","sh","sharp","shortmid","shortparallel","shoveleft","shoveright","sideset","sigma","sim","simcolon","simcoloncolon","simeq","sin","sinh","sixptsize","skew","skip","sl","small","smallfrown","smallint","smallsetminus","smallsmile","smash","smile","smiley","sout","space","spades","spadesuit","sphericalangle","sqcap","sqcup","sqrt","sqsubset","sqsubseteq","sqsupset","sqsupseteq","square","ss","stackrel","star","stigma","strut","style","sub","sube","subset","subseteq","subseteqq","subsetneq","subsetneqq","substack","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","sum","sup","supe","supset","supseteq","supseteqq","supsetneq","supsetneqq","surd","swarrow","tag","tan","tanh","tau","tbinom","text","textasciicircum","textasciitilde","textbackslash","textbar","textbardbl","textbf","textbraceleft","textbraceright","textcircled","textcolor","textdagger","textdaggerdbl","textdegree","textdollar","textellipsis","textemdash","textendash","textgreater","textit","textless","textmd","textnormal","textquotedblleft","textquotedblright","textquoteleft","textquoteright","textregistered","textrm","textsc","textsf","textsl","textsterling","textstyle","texttip","texttt","textunderscore","textup","textvisiblespace","tfrac","tg","th","therefore","theta","thetasym","thickapprox","thicksim","thickspace","thinspace","tilde","times","tiny","to","toggle","top","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tt","twoheadleftarrow","twoheadrightarrow","u","uArr","uarr","ulcorner","underbar","underbrace","underbracket","undergroup","underleftarrow","underleftrightarrow","underline","underlinesegment","underparen","underrightarrow","underset","unicode","unlhd","unrhd","up","uparrow","updownarrow","upharpoonleft","upharpoonright","uplus","uproot","upshape","upsilon","upuparrows","urcorner","url","utilde","v","vDash","varDelta","varGamma","varLambda","varOmega","varPhi","varPi","varPsi","varSigma","varTheta","varUpsilon","varXi","varcoppa","varepsilon","varinjlim","varkappa","varliminf","varlimsup","varnothing","varphi","varpi","varprojlim","varpropto","varrho","varsigma","varstigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangle","vartriangleleft","vartriangleright","vcentcolon","vcenter","vdash","vdots","vec","vee","veebar","vert","vfil","vfill","vline","vphantom","wedge","weierp","widecheck","widehat","wideparen","widetilde","wp","wr","xLeftarrow","xLeftrightarrow","xRightarrow","xcancel","xdef","xhookleftarrow","xhookrightarrow","xi","xleftarrow","xleftharpoondown","xleftharpoonup","xleftrightarrow","xleftrightharpoons","xlongequal","xmapsto","xrightarrow","xrightharpoondown","xrightharpoonup","xrightleftharpoons","xtofrom","xtwoheadleftarrow","xtwoheadrightarrow","yen","zeta","{","|","}","~"],"KATEX_ENVIRONMENTS":["align","align*","alignat","alignat*","aligned","alignedat","array","Bmatrix","bmatrix","Bmatrix*","bmatrix*","cases","CD","darray","dcases","drcases","equation","equation*","gather","gathered","matrix","matrix*","pmatrix","pmatrix*","rcases","smallmatrix","split","Vmatrix","vmatrix","Vmatrix*","vmatrix*"]}');

/***/ }),

/***/ "./support-tables/ligature-macros.json":
/*!*********************************************!*\
  !*** ./support-tables/ligature-macros.json ***!
  \*********************************************/
/***/ ((module) => {

module.exports = JSON.parse('[["\\\\-","­"],["\\\\. A","Ȧ"],["\\\\. a","ȧ"],["\\\\. B","Ḃ"],["\\\\. b","ḃ"],["\\\\. C","Ċ"],["\\\\. c","ċ"],["\\\\. D","Ḋ"],["\\\\. d","ḋ"],["\\\\. E","Ė"],["\\\\. e","ė"],["\\\\. F","Ḟ"],["\\\\. f","ḟ"],["\\\\. G","Ġ"],["\\\\. g","ġ"],["\\\\. I","İ"],["\\\\. M","Ṁ"],["\\\\. m","ṁ"],["\\\\. O","Ȯ"],["\\\\. o","ȯ"],["\\\\. P","Ṗ"],["\\\\. p","ṗ"],["\\\\. S","Ṡ"],["\\\\. s","ṡ"],["\\\\. T","Ṫ"],["\\\\. t","ṫ"],["\\\\. Z","Ż"],["\\\\. z","ż"],["\\\\\\" \\\\i","ï"],["\\\\\\" A","Ä"],["\\\\\\" a","ä"],["\\\\\\" E","Ë"],["\\\\\\" e","ë"],["\\\\\\" I","Ï"],["\\\\\\" O","Ö"],["\\\\\\" o","ö"],["\\\\\\" U","Ü"],["\\\\\\" u","ü"],["\\\\\\" W","Ẅ"],["\\\\\\" w","ẅ"],["\\\\\\" y","ÿ"],["\\\\\\" Y","Ÿ"],["\\\\^ \\\\i","î"],["\\\\^ \\\\j","ĵ"],["\\\\^ A","Â"],["\\\\^ a","â"],["\\\\^ C","Ĉ"],["\\\\^ c","ĉ"],["\\\\^ E","Ê"],["\\\\^ e","ê"],["\\\\^ G","Ĝ"],["\\\\^ g","ĝ"],["\\\\^ H","Ĥ"],["\\\\^ h","ĥ"],["\\\\^ I","Î"],["\\\\^ J","Ĵ"],["\\\\^ O","Ô"],["\\\\^ o","ô"],["\\\\^ S","Ŝ"],["\\\\^ s","ŝ"],["\\\\^ U","Û"],["\\\\^ u","û"],["\\\\^ W","Ŵ"],["\\\\^ w","ŵ"],["\\\\^ Y","Ŷ"],["\\\\^ y","ŷ"],["\\\\~ \\\\i","ĩ"],["\\\\~ A","Ã"],["\\\\~ a","ã"],["\\\\~ I","Ĩ"],["\\\\~ N","Ñ"],["\\\\~ n","ñ"],["\\\\~ O","Õ"],["\\\\~ o","õ"],["\\\\~ U","Ũ"],["\\\\~ u","ũ"],["\\\\AE","Æ"],["\\\\ae","æ"],["\\\\c \\\\ ","¸"],["\\\\c C","Ç"],["\\\\c c","ç"],["\\\\c E","Ȩ"],["\\\\c e","ȩ"],["\\\\c G","Ģ"],["\\\\c g","ģ"],["\\\\c K","Ķ"],["\\\\c k","ķ"],["\\\\c L","Ļ"],["\\\\c l","ļ"],["\\\\c N","Ņ"],["\\\\c n","ņ"],["\\\\c R","Ŗ"],["\\\\c r","ŗ"],["\\\\c S","Ş"],["\\\\c s","ş"],["\\\\c T","Ţ"],["\\\\c t","ţ"],["\\\\CYRA","А"],["\\\\cyra","а"],["\\\\CYRABHCH","Ҽ"],["\\\\cyrabhch","ҽ"],["\\\\CYRABHCHDSC","Ҿ"],["\\\\cyrabhchdsc","ҿ"],["\\\\CYRABHDZE","Ӡ"],["\\\\cyrabhdze","ӡ"],["\\\\CYRABHHA","Ҩ"],["\\\\cyrabhha","ҩ"],["\\\\CYRAE","Ӕ"],["\\\\cyrae","ӕ"],["\\\\CYRB","Б"],["\\\\cyrb","б"],["\\\\CYRBYUS","Ѫ"],["\\\\cyrbyus","ѫ"],["\\\\CYRC","Ц"],["\\\\cyrc","ц"],["\\\\CYRCH","Ч"],["\\\\cyrch","ч"],["\\\\CYRCHLDSC","Ӌ"],["\\\\cyrchldsc","ӌ"],["\\\\CYRCHRDSC","Ҷ"],["\\\\cyrchrdsc","ҷ"],["\\\\CYRCHVCRS","Ҹ"],["\\\\cyrchvcrs","ҹ"],["\\\\CYRD","Д"],["\\\\cyrd","д"],["\\\\CYRDJE","Ђ"],["\\\\cyrdje","ђ"],["\\\\CYRDZE","Ѕ"],["\\\\cyrdze","ѕ"],["\\\\CYRDZHE","Џ"],["\\\\cyrdzhe","џ"],["\\\\CYRE","Е"],["\\\\cyre","е"],["\\\\CYREREV","Э"],["\\\\cyrerev","э"],["\\\\CYRERY","Ы"],["\\\\cyrery","ы"],["\\\\CYRF","Ф"],["\\\\cyrf","ф"],["\\\\CYRFITA","Ѳ"],["\\\\cyrfita","ѳ"],["\\\\CYRG","Г"],["\\\\cyrg","г"],["\\\\CYRGHCRS","Ғ"],["\\\\cyrghcrs","ғ"],["\\\\CYRGHK","Ҕ"],["\\\\cyrghk","ҕ"],["\\\\CYRGUP","Ґ"],["\\\\cyrgup","ґ"],["\\\\CYRH","Х"],["\\\\cyrh","х"],["\\\\CYRHDSC","Ҳ"],["\\\\cyrhdsc","ҳ"],["\\\\CYRHRDSN","Ъ"],["\\\\cyrhrdsn","ъ"],["\\\\CYRI","И"],["\\\\cyri","и"],["\\\\CYRIE","Є"],["\\\\cyrie","є"],["\\\\CYRII","І"],["\\\\cyrii","і"],["\\\\CYRISHRT","Й"],["\\\\cyrishrt","й"],["\\\\CYRIZH","Ѵ"],["\\\\cyrizh","ѵ"],["\\\\CYRJE","Ј"],["\\\\cyrje","ј"],["\\\\CYRK","К"],["\\\\cyrk","к"],["\\\\CYRKBEAK","Ҡ"],["\\\\cyrkbeak","ҡ"],["\\\\CYRKDSC","Қ"],["\\\\cyrkdsc","қ"],["\\\\CYRKHCRS","Ҟ"],["\\\\cyrkhcrs","ҟ"],["\\\\CYRKHK","Ӄ"],["\\\\cyrkhk","ӄ"],["\\\\CYRKVCRS","Ҝ"],["\\\\cyrkvcrs","ҝ"],["\\\\CYRL","Л"],["\\\\cyrl","л"],["\\\\CYRLDSC","Ӆ"],["\\\\cyrldsc","ӆ"],["\\\\CYRLJE","Љ"],["\\\\cyrlje","љ"],["\\\\CYRM","М"],["\\\\cyrm","м"],["\\\\CYRMDSC","Ӎ"],["\\\\cyrmdsc","ӎ"],["\\\\CYRN","Н"],["\\\\cyrn","н"],["\\\\CYRNDSC","Ң"],["\\\\cyrndsc","ң"],["\\\\CYRNG","Ҥ"],["\\\\cyrng","ҥ"],["\\\\CYRNHK","Ӈ"],["\\\\cyrnhk","ӈ"],["\\\\CYRNJE","Њ"],["\\\\cyrnje","њ"],["\\\\CYRO","О"],["\\\\cyro","о"],["\\\\CYROTLD","Ө"],["\\\\cyrotld","ө"],["\\\\CYRP","П"],["\\\\cyrp","п"],["\\\\CYRpalochka","Ӏ"],["\\\\CYRPHK","Ҧ"],["\\\\cyrphk","ҧ"],["\\\\CYRR","Р"],["\\\\cyrr","р"],["\\\\CYRRTICK","Ҏ"],["\\\\cyrrtick","ҏ"],["\\\\CYRS","С"],["\\\\cyrs","с"],["\\\\CYRSCHWA","Ә"],["\\\\cyrschwa","ә"],["\\\\CYRSDSC","Ҫ"],["\\\\cyrsdsc","ҫ"],["\\\\CYRSEMISFTSN","Ҍ"],["\\\\cyrsemisftsn","ҍ"],["\\\\CYRSFTSN","Ь"],["\\\\cyrsftsn","ь"],["\\\\CYRSH","Ш"],["\\\\cyrsh","ш"],["\\\\CYRSHCH","Щ"],["\\\\cyrshch","щ"],["\\\\CYRSHHA","Һ"],["\\\\cyrshha","һ"],["\\\\CYRT","Т"],["\\\\cyrt","т"],["\\\\CYRTDSC","Ҭ"],["\\\\cyrtdsc","ҭ"],["\\\\CYRTETSE","Ҵ"],["\\\\cyrtetse","ҵ"],["\\\\CYRTSHE","Ћ"],["\\\\cyrtshe","ћ"],["\\\\CYRU","У"],["\\\\cyru","у"],["\\\\CYRUSHRT","Ў"],["\\\\cyrushrt","ў"],["\\\\CYRV","В"],["\\\\cyrv","в"],["\\\\CYRY","Ү"],["\\\\cyry","ү"],["\\\\CYRYA","Я"],["\\\\cyrya","я"],["\\\\CYRYAT","Ѣ"],["\\\\cyryat","ѣ"],["\\\\CYRYHCRS","Ұ"],["\\\\cyryhcrs","ұ"],["\\\\CYRYI","Ї"],["\\\\cyryi","ї"],["\\\\CYRYO","Ё"],["\\\\cyryo","ё"],["\\\\CYRYU","Ю"],["\\\\cyryu","ю"],["\\\\CYRZ","З"],["\\\\cyrz","з"],["\\\\CYRZDSC","Ҙ"],["\\\\cyrzdsc","ҙ"],["\\\\CYRZH","Ж"],["\\\\cyrzh","ж"],["\\\\CYRZHDSC","Җ"],["\\\\cyrzhdsc","җ"],["\\\\DH","Ð"],["\\\\dh","ð"],["\\\\DJ","Đ"],["\\\\dj","đ"],["\\\\guillemotleft","«"],["\\\\guillemotright","»"],["\\\\guilsinglleft","‹"],["\\\\guilsinglright","›"],["\\\\H O","Ő"],["\\\\H o","ő"],["\\\\H U","Ű"],["\\\\H u","ű"],["\\\\hebalef","א"],["\\\\hebayin","ע"],["\\\\hebbet","ב"],["\\\\hebdalet","ד"],["\\\\hebfinalkaf","ך"],["\\\\hebfinalmem","ם"],["\\\\hebfinalnun","ן"],["\\\\hebfinalpe","ף"],["\\\\hebfinaltsadi","ץ"],["\\\\hebgimel","ג"],["\\\\hebhe","ה"],["\\\\hebhet","ח"],["\\\\hebkaf","כ"],["\\\\heblamed","ל"],["\\\\hebmem","מ"],["\\\\hebnun","נ"],["\\\\hebpe","פ"],["\\\\hebqof","ק"],["\\\\hebresh","ר"],["\\\\hebsamekh","ס"],["\\\\hebshin","ש"],["\\\\hebtav","ת"],["\\\\hebtet","ט"],["\\\\hebtsadi","צ"],["\\\\hebvav","ו"],["\\\\hebyod","י"],["\\\\hebzayin","ז"],["\\\\i","ı"],["\\\\IJ","Ĳ"],["\\\\ij","ĳ"],["\\\\j","ȷ"],["\\\\k ","˛"],["\\\\k A","Ą"],["\\\\k a","ą"],["\\\\k E","Ę"],["\\\\k e","ę"],["\\\\k I","Į"],["\\\\k i","į"],["\\\\k U","Ų"],["\\\\k u","ų"],["\\\\L","Ł"],["\\\\l","ł"],["\\\\NG","Ŋ"],["\\\\ng","ŋ"],["\\\\nobreakspace"," "],["\\\\O","Ø"],["\\\\o","ø"],["\\\\OE","Œ"],["\\\\oe","œ"],["\\\\quotedblbase","„"],["\\\\quotesinglbase","‚"],["\\\\r ","˚"],["\\\\r A","Å"],["\\\\r a","å"],["\\\\r U","Ů"],["\\\\r u","ů"],["\\\\ss","ß"],["\\\\textacutedbl","˝"],["\\\\textalpha","α"],["\\\\textapproxequal","≈"],["\\\\textasciiacute","´"],["\\\\textasciibreve","˘"],["\\\\textasciicaron","ˇ"],["\\\\textasciicircum","ˆ"],["\\\\textasciidieresis","¨"],["\\\\textasciigrave","ˋ"],["\\\\textasciimacron","¯"],["\\\\textasciitilde","˜"],["\\\\textasteriskcentered","⁎"],["\\\\textbaht","฿"],["\\\\textbardbl","‖"],["\\\\textbeta","β"],["\\\\textbigcircle","◯"],["\\\\textblacksquare","■"],["\\\\textblank","␢"],["\\\\textblock","█"],["\\\\textbrokenbar","¦"],["\\\\textbullet","•"],["\\\\textbullet","∙"],["\\\\textcap","∧"],["\\\\textcelsius","℃"],["\\\\textcent","¢"],["\\\\textcircledP","℗"],["\\\\textcolonmonetary","₡"],["\\\\textcommabelow S","Ș"],["\\\\textcommabelow s","ș"],["\\\\textcommabelow T","Ț"],["\\\\textcommabelow t","ț"],["\\\\textcompwordmark","‌"],["\\\\textcontourintegral","∮"],["\\\\textcopyright","©"],["\\\\textcurrency","¤"],["\\\\textdagger","†"],["\\\\textdaggerdbl","‡"],["\\\\textdbllowline","‗"],["\\\\textdegree","°"],["\\\\textdelta","δ"],["\\\\textdiscount","⁒"],["\\\\textdiv","÷"],["\\\\textdkshade","▓"],["\\\\textdnblock","▄"],["\\\\textdong","₫"],["\\\\textdownarrow","↓"],["\\\\textelement","∈"],["\\\\textellipsis","…"],["\\\\textemdash","—"],["\\\\textendash","–"],["\\\\textepsilon","ε"],["\\\\textequivalence","≡"],["\\\\textestimated","℮"],["\\\\texteuro","€"],["\\\\textexclamdown","¡"],["\\\\textflorin","ƒ"],["\\\\textfractionsolidus","⁄"],["\\\\textGamma","Γ"],["\\\\textgreaterequal","≥"],["\\\\texthorizontalbar","―"],["\\\\textincrement","∆"],["\\\\textinfinity","∞"],["\\\\textintegral","∫"],["\\\\textinterrobang","‽"],["\\\\textintersection","∩"],["\\\\textkra","ĸ"],["\\\\textlangle","〈"],["\\\\textleftarrow","←"],["\\\\textlessequal","≤"],["\\\\textlfblock","▌"],["\\\\textlira","₤"],["\\\\textlnot","¬"],["\\\\textlozenge","◊"],["\\\\textltshade","░"],["\\\\textmalteseH","Ħ"],["\\\\textmalteseh","ħ"],["\\\\textmho","℧"],["\\\\textmu","µ"],["\\\\textmusicalnote","♪"],["\\\\textnaira","₦"],["\\\\textnotequal","≠"],["\\\\textnsuperior","ⁿ"],["\\\\textnumero","№"],["\\\\textohm","Ω"],["\\\\textOmega","Ω"],["\\\\textonehalf","½"],["\\\\textonequarter","¼"],["\\\\textonesuperior","¹"],["\\\\textopenbullet","◦"],["\\\\textordfeminine","ª"],["\\\\textordmasculine","º"],["\\\\textparagraph","¶"],["\\\\textpartial","∂"],["\\\\textperiodcentered","·"],["\\\\textpertenthousand","‱"],["\\\\textperthousand","‰"],["\\\\textpeseta","₧"],["\\\\textpeso","₱"],["\\\\textPhi","Φ"],["\\\\textphi","φ"],["\\\\textpi","π"],["\\\\textpm","±"],["\\\\textproduct","∏"],["\\\\textquestiondown","¿"],["\\\\textquotedblleft","“"],["\\\\textquotedblright","”"],["\\\\textquoteleft","‘"],["\\\\textquoteright","’"],["\\\\textrangle","〉"],["\\\\textrecipe","℞"],["\\\\textreferencemark","※"],["\\\\textregistered","®"],["\\\\textrevlogicalnot","⌐"],["\\\\textrightarrow","→"],["\\\\textrtblock","▐"],["\\\\textsection","§"],["\\\\textservicemark","℠"],["\\\\textSFi","┌"],["\\\\textSFii","└"],["\\\\textSFiii","┐"],["\\\\textSFiv","┘"],["\\\\textSFix","┤"],["\\\\textSFl","╘"],["\\\\textSFli","╒"],["\\\\textSFlii","╓"],["\\\\textSFliii","╫"],["\\\\textSFliv","╪"],["\\\\textSFv","┼"],["\\\\textSFvi","┬"],["\\\\textSFvii","┴"],["\\\\textSFviii","├"],["\\\\textSFx","─"],["\\\\textSFxi","│"],["\\\\textSFxix","╡"],["\\\\textSFxl","╩"],["\\\\textSFxli","╦"],["\\\\textSFxlii","╠"],["\\\\textSFxliii","═"],["\\\\textSFxliv","╬"],["\\\\textSFxlix","╙"],["\\\\textSFxlv","╧"],["\\\\textSFxlvi","╨"],["\\\\textSFxlvii","╤"],["\\\\textSFxlviii","╥"],["\\\\textSFxx","╢"],["\\\\textSFxxi","╖"],["\\\\textSFxxii","╕"],["\\\\textSFxxiii","╣"],["\\\\textSFxxiv","║"],["\\\\textSFxxv","╗"],["\\\\textSFxxvi","╝"],["\\\\textSFxxvii","╜"],["\\\\textSFxxviii","╛"],["\\\\textSFxxxix","╔"],["\\\\textSFxxxvi","╞"],["\\\\textSFxxxvii","╟"],["\\\\textSFxxxviii","╚"],["\\\\textshade","▒"],["\\\\textSigma","Σ"],["\\\\textsigma","σ"],["\\\\textsterling","£"],["\\\\textsummation","∑"],["\\\\textsurd","√"],["\\\\texttau","τ"],["\\\\textTheta","Θ"],["\\\\textthreequarters","¾"],["\\\\textthreesuperior","³"],["\\\\texttimes","×"],["\\\\texttrademark","™"],["\\\\textTstroke","Ŧ"],["\\\\texttstroke","ŧ"],["\\\\texttwosuperior","²"],["\\\\textuparrow","↑"],["\\\\textupblock","▀"],["\\\\textvisiblespace","␣"],["\\\\textwon","₩"],["\\\\textyen","¥"],["\\\\TH","Þ"],["\\\\th","þ"],["\\\\u A","Ă"],["\\\\u a","ă"],["\\\\u G","Ğ"],["\\\\u g","ğ"],["\\\\u U","Ŭ"],["\\\\u u","ŭ"],["\\\\v \\\\i","ǐ"],["\\\\v \\\\j","ǰ"],["\\\\v A","Ǎ"],["\\\\v a","ǎ"],["\\\\v C","Č"],["\\\\v c","č"],["\\\\v D","Ď"],["\\\\v d","ď"],["\\\\v E","Ě"],["\\\\v e","ě"],["\\\\v G","Ǧ"],["\\\\v g","ǧ"],["\\\\v I","Ǐ"],["\\\\v K","Ǩ"],["\\\\v k","ǩ"],["\\\\v L","Ľ"],["\\\\v l","ľ"],["\\\\v N","Ň"],["\\\\v n","ň"],["\\\\v O","Ǒ"],["\\\\v o","ǒ"],["\\\\v R","Ř"],["\\\\v r","ř"],["\\\\v S","Š"],["\\\\v s","š"],["\\\\v T","Ť"],["\\\\v t","ť"],["\\\\v U","Ǔ"],["\\\\v u","ǔ"],["\\\\v Z","Ž"],["\\\\v z","ž"]]');

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!****************************************!*\
  !*** ./unified-latex-to-hast/index.ts ***!
  \****************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KATEX_SUPPORT": () => (/* reexport safe */ _libs_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_2__.KATEX_SUPPORT),
/* harmony export */   "attachNeededRenderInfo": () => (/* reexport safe */ _libs_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_2__.attachNeededRenderInfo),
/* harmony export */   "convertToHtml": () => (/* reexport safe */ _libs_convert_to_html__WEBPACK_IMPORTED_MODULE_4__.convertToHtml),
/* harmony export */   "katexSpecificEnvironmentReplacements": () => (/* reexport safe */ _libs_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_2__.katexSpecificEnvironmentReplacements),
/* harmony export */   "katexSpecificMacroReplacements": () => (/* reexport safe */ _libs_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_2__.katexSpecificMacroReplacements),
/* harmony export */   "unifiedLatexToHast": () => (/* reexport safe */ _libs_unified_latex_plugin_to_hast__WEBPACK_IMPORTED_MODULE_0__.unifiedLatexToHast),
/* harmony export */   "unifiedLatexWrapPars": () => (/* reexport safe */ _libs_unified_latex_wrap_pars__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexWrapPars),
/* harmony export */   "wrapPars": () => (/* reexport safe */ _libs_wrap_pars__WEBPACK_IMPORTED_MODULE_3__.wrapPars)
/* harmony export */ });
/* harmony import */ var _libs_unified_latex_plugin_to_hast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/unified-latex-plugin-to-hast */ "./unified-latex-to-hast/libs/unified-latex-plugin-to-hast.ts");
/* harmony import */ var _libs_unified_latex_wrap_pars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-wrap-pars */ "./unified-latex-to-hast/libs/unified-latex-wrap-pars.ts");
/* harmony import */ var _libs_pre_html_subs_katex_subs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/pre-html-subs/katex-subs */ "./unified-latex-to-hast/libs/pre-html-subs/katex-subs.ts");
/* harmony import */ var _libs_wrap_pars__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/wrap-pars */ "./unified-latex-to-hast/libs/wrap-pars.ts");
/* harmony import */ var _libs_convert_to_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libs/convert-to-html */ "./unified-latex-to-hast/libs/convert-to-html.ts");





// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to convert `unified-latex` Abstract Syntax Tree (AST) to a HAST (html-like)
 * tree.
 *
 * ## When should I use this?
 *
 * If you want to convert LaTeX to HTML.
 *
 */

})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });

//# sourceMappingURL=data:application/json;charset=utf-8;base64,