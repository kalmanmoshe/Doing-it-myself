/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/color-name/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/color-name/index.js ***!
  \**********************************************/
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/color-string/index.js":
/*!************************************************!*\
  !*** ../../node_modules/color-string/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
var colorNames = __webpack_require__(/*! color-name */ "../../node_modules/color-name/index.js");
var swizzle = __webpack_require__(/*! simple-swizzle */ "../../node_modules/simple-swizzle/index.js");
var hasOwnProperty = Object.hasOwnProperty;

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ "../../node_modules/color/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/color/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const colorString = __webpack_require__(/*! color-string */ "../../node_modules/color-string/index.js");
const convert = __webpack_require__(/*! color-convert */ "../../node_modules/color/node_modules/color-convert/index.js");

const skippedModels = [
	// To be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// Gray conflicts with some method names, and has its own method defined.
	'gray',

	// Shouldn't really be in color-convert either...
	'hex',
];

const hashedModelKeys = {};
for (const model of Object.keys(convert)) {
	hashedModelKeys[[...convert[model].labels].sort().join('')] = model;
}

const limiters = {};

function Color(object, model) {
	if (!(this instanceof Color)) {
		return new Color(object, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	let i;
	let channels;

	if (object == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (object instanceof Color) {
		this.model = object.model;
		this.color = [...object.color];
		this.valpha = object.valpha;
	} else if (typeof object === 'string') {
		const result = colorString.get(object);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + object);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (object.length > 0) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		const newArray = Array.prototype.slice.call(object, 0, channels);
		this.color = zeroArray(newArray, channels);
		this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;
	} else if (typeof object === 'number') {
		// This is always RGB - can be converted later on.
		this.model = 'rgb';
		this.color = [
			(object >> 16) & 0xFF,
			(object >> 8) & 0xFF,
			object & 0xFF,
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		const keys = Object.keys(object);
		if ('alpha' in object) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;
		}

		const hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(object));
		}

		this.model = hashedModelKeys[hashedKeys];

		const {labels} = convert[this.model];
		const color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(object[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// Perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			const limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString() {
		return this.string();
	},

	toJSON() {
		return this[this.model]();
	},

	string(places) {
		let self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to[self.model](args);
	},

	percentString(places) {
		const self = this.rgb().round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to.rgb.percent(args);
	},

	array() {
		return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
	},

	object() {
		const result = {};
		const {channels} = convert[this.model];
		const {labels} = convert[this.model];

		for (let i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray() {
		const rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject() {
		const rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round(places) {
		places = Math.max(places || 0, 0);
		return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
	},

	alpha(value) {
		if (value !== undefined) {
			return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
		}

		return this.valpha;
	},

	// Rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(95.047)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(108.833)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return convert[this.model].keyword(this.color);
	},

	hex(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	hexa(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		const rgbArray = this.rgb().round().color;

		let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
		if (alphaHex.length === 1) {
			alphaHex = '0' + alphaHex;
		}

		return colorString.to.hex(rgbArray) + alphaHex;
	},

	rgbNumber() {
		const rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity() {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		const rgb = this.rgb().color;

		const lum = [];
		for (const [i, element] of rgb.entries()) {
			const chan = element / 255;
			lum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast(color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		const lum1 = this.luminosity();
		const lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level(color2) {
		// https://www.w3.org/TR/WCAG/#contrast-enhanced
		const contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark() {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		const rgb = this.rgb().color;
		const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;
		return yiq < 128;
	},

	isLight() {
		return !this.isDark();
	},

	negate() {
		const rgb = this.rgb();
		for (let i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}

		return rgb;
	},

	lighten(ratio) {
		const hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken(ratio) {
		const hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten(ratio) {
		const hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken(ratio) {
		const hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale() {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		const rgb = this.rgb().color;
		const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(value, value, value);
	},

	fade(ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer(ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate(degrees) {
		const hsl = this.hsl();
		let hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix(mixinColor, weight) {
		// Ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}

		const color1 = mixinColor.rgb();
		const color2 = this.rgb();
		const p = weight === undefined ? 0.5 : weight;

		const w = 2 * p - 1;
		const a = color1.alpha() - color2.alpha();

		const w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;
		const w2 = 1 - w1;

		return Color.rgb(
			w1 * color1.red() + w2 * color2.red(),
			w1 * color1.green() + w2 * color2.green(),
			w1 * color1.blue() + w2 * color2.blue(),
			color1.alpha() * p + color2.alpha() * (1 - p));
	},
};

// Model conversion methods and static constructors
for (const model of Object.keys(convert)) {
	if (skippedModels.includes(model)) {
		continue;
	}

	const {channels} = convert[model];

	// Conversion methods
	Color.prototype[model] = function (...args) {
		if (this.model === model) {
			return new Color(this);
		}

		if (args.length > 0) {
			return new Color(args, model);
		}

		return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
	};

	// 'static' construction methods
	Color[model] = function (...args) {
		let color = args[0];
		if (typeof color === 'number') {
			color = zeroArray(args, channels);
		}

		return new Color(color, model);
	};
}

function roundTo(number, places) {
	return Number(number.toFixed(places));
}

function roundToPlace(places) {
	return function (number) {
		return roundTo(number, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	for (const m of model) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	}

	model = model[0];

	return function (value) {
		let result;

		if (value !== undefined) {
			if (modifier) {
				value = modifier(value);
			}

			result = this[model]();
			result.color[channel] = value;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(value) {
	return Array.isArray(value) ? value : [value];
}

function zeroArray(array, length) {
	for (let i = 0; i < length; i++) {
		if (typeof array[i] !== 'number') {
			array[i] = 0;
		}
	}

	return array;
}

module.exports = Color;


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/conversions.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/conversions.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __webpack_require__(/*! color-name */ "../../node_modules/color/node_modules/color-name/index.js");

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/index.js":
/*!********************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color/node_modules/color-convert/conversions.js");
const route = __webpack_require__(/*! ./route */ "../../node_modules/color/node_modules/color-convert/route.js");

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ "../../node_modules/color/node_modules/color-convert/route.js":
/*!********************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-convert/route.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color/node_modules/color-convert/conversions.js");

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ "../../node_modules/color/node_modules/color-name/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/color/node_modules/color-name/index.js ***!
  \*****************************************************************/
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/is-arrayish/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/is-arrayish/index.js ***!
  \***********************************************/
/***/ ((module) => {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/align-environment.pegjs":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/align-environment.pegjs ***!
  \*******************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function() { return []; },
      peg$c1 = function(x) { return { cells: [], colSeps: [], ...x }; },
      peg$c2 = function(rowItems, rowSep, trailingComment) {
                  return { ...rowItems, rowSep, trailingComment };
              },
      peg$c3 = function(rowItems, trailingComment) {
                  return { ...rowItems, rowSep: null, trailingComment };
              },
      peg$c4 = function(x) { return x; },
      peg$c5 = function(x) {
                  return {
                      cells: [],
                      colSeps: [],
                      rowSep: null,
                      trailingComment: x,
                  };
              },
      peg$c6 = peg$anyExpectation(),
      peg$c7 = function(x) {
                  return x;
              },
      peg$c8 = function(colSep, cell) { return { colSep, cell }; },
      peg$c9 = function(colSep) { return { colSep }; },
      peg$c10 = function(a, b) { return processRow(a, b); },
      peg$c11 = function(b) { return processRow(null, b); },
      peg$c12 = function(tok) { return options.isSameLineComment(tok); },
      peg$c13 = function(tok) { return tok; },
      peg$c14 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c15 = function(tok) { return options.isWhitespace(tok); },
      peg$c16 = function(tok) { return options.isRowSep(tok); },
      peg$c17 = function(tok) { return options.isColSep(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsecomment_only_line();
    if (s1 === peg$FAILED) {
      s1 = peg$parserow_with_end();
      if (s1 === peg$FAILED) {
        s1 = peg$parserow_without_end();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment_only_line();
        if (s1 === peg$FAILED) {
          s1 = peg$parserow_with_end();
          if (s1 === peg$FAILED) {
            s1 = peg$parserow_without_end();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserow_with_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parserow_items();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c1(s2);
    }
    s1 = s2;
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_sep();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_without_end() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parserow_items();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parserow_sep();
    if (s2 === peg$FAILED) {
      s2 = peg$parsecol_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetrailing_comment();
        if (s2 === peg$FAILED) {
          s2 = peg$parseown_line_comment();
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecell() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetoken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseseparated_cell() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecol_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecell();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecol_sep();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserow_items() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecell();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseseparated_cell();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseseparated_cell();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseseparated_cell();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseseparated_cell();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c12(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c15(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c16(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecol_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c17(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function processRow(leadCell, otherCells) {
          const cells = [leadCell || []];
          const seps = [];
          for (const x of otherCells) {
              cells.push(x.cell || []);
              seps.push(x.colSep);
          }
          return { cells, colSeps: seps };
      }

      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(
                  options,
                  createMatchers(["\\", "hline", "cr"], ["&"])
              );
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/ligatures.pegjs":
/*!***********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/ligatures.pegjs ***!
  \***********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(e) {
                  // We may have inserted nested arrays.
                  // Flatten everything before we're done and remove any
                  // resitual `null`s
                  return [].concat(...e).filter((n) => !!n);
              },
      peg$c2 = function() { return []; },
      peg$c3 = function(toks) { return options.isRecognized(toks); },
      peg$c4 = function(toks) {
                  return options.isRecognized(toks);
              },
      peg$c5 = function(tok1, tok2) {
                      const split = options.split(tok2);
                      return options.isRecognized([tok1, split[0]]);
                  },
      peg$c6 = function(tok1, tok2) {
                  const split = options.split(tok2);
                  return [options.isRecognized([tok1, split[0]]), split[1]];
              },
      peg$c7 = function(tok1, tok2) { return options.isRecognized([tok1, tok2]); },
      peg$c8 = function(tok1, tok2) {
                  return options.isRecognized([tok1, tok2]);
              },
      peg$c9 = function(tok) { return options.isRecognized([tok]); },
      peg$c10 = function(tok) {
                  return options.isRecognized([tok]);
              },
      peg$c11 = function(tok) { return options.isMacro(tok); },
      peg$c12 = function(tok) { return tok; },
      peg$c13 = function(tok) { return options.isWhitespace(tok); },
      peg$c14 = function(tok) { return options.isSplitable(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetriple_ligature();
    if (s2 === peg$FAILED) {
      s2 = peg$parsedouble_ligature();
      if (s2 === peg$FAILED) {
        s2 = peg$parsemono_ligature();
        if (s2 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c0); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetriple_ligature();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedouble_ligature();
          if (s2 === peg$FAILED) {
            s2 = peg$parsemono_ligature();
            if (s2 === peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c0); }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetriple_ligature() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_ligature() {
    var s0;

    s0 = peg$parsedouble_macro_ligature();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedouble_macro_ligature_extracted();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedouble_char_ligature();
      }
    }

    return s0;
  }

  function peg$parsedouble_macro_ligature_extracted() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemacro();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesplitable();
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c5(s1, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_macro_ligature() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemacro();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c7(s1, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_char_ligature() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemono_ligature() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c9(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemacro() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c11(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c13(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesplitable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(options, {
                  isMacro: (node) => node.type === "macro",
                  isWhitespace: (node) => node.type === "whitespace",
                  isRecognized: (nodes) => {
                      if (
                          nodes.length == 2 &&
                          nodes[0].content === "^" &&
                          nodes[1].content === "o"
                      ) {
                          return { type: "string", content: "ô" };
                      }

                      return null;
                  },
                  isSplitable: (node) =>
                      node.type === "string" && node.content.length > 1,
                  split: (node) => [
                      { type: "string", content: node.content.charAt(0) },
                      { type: "string", content: node.content.slice(1) },
                  ],
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs ***!
  \*********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = peg$anyExpectation(),
      peg$c1 = function(e) {
                  // We may have inserted nested arrays.
                  // Flatten everything before we're done and remove any
                  // resitual `null`s
                  return [].concat(...e).filter((n) => !!n);
              },
      peg$c2 = function() { return []; },
      peg$c3 = function(tok) { return options.isHash(tok); },
      peg$c4 = function(tok) { return tok; },
      peg$c5 = function(tok) { return options.isNumber(tok); },
      peg$c6 = function() { return { type: "string", content: "#" }; },
      peg$c7 = function(num) {
                  const split = options.splitNumber(num);
                  return [{ type: "hash_number", number: split.number }, split.rest];
              },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedouble_hash();
    if (s2 === peg$FAILED) {
      s2 = peg$parsehash_number();
      if (s2 === peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedouble_hash();
        if (s2 === peg$FAILED) {
          s2 = peg$parsehash_number();
          if (s2 === peg$FAILED) {
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c0); }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsehash() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c3(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c5(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedouble_hash() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsehash();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsehash();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehash_number() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsehash();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isHash) {
          try {
              Object.assign(options, {
                  isHash: (node) =>
                      node.type === "string" && node.content === "#",
                  isNumber: (node) =>
                      node.type === "string" && 0 < +node.content.charAt(0),
                  splitNumber: (node) => {
                      const number = +node.content.charAt(0);
                      if (node.content.length > 1) {
                          return {
                              number,
                              rest: {
                                  type: "string",
                                  content: node.content.slice(1),
                              },
                          };
                      }
                      return { number };
                  },
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/pgfkeys.pegjs":
/*!*********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/pgfkeys.pegjs ***!
  \*********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function() { return []; },
      peg$c1 = function(x) { return x; },
      peg$c2 = function(rowItems, trailingComment) {
                  return {
                      itemParts: [],
                      ...rowItems,
                      trailingComment,
                      trailingComma: true,
                  };
              },
      peg$c3 = function(rowItems, trailingComment) {
                  return { ...rowItems, trailingComment };
              },
      peg$c4 = function(a, b) { return processItem(a, b); },
      peg$c5 = function(b) { return processItem(null, b); },
      peg$c6 = function(cell) { return { cell }; },
      peg$c7 = function() { return {}; },
      peg$c8 = function(part) { return part; },
      peg$c9 = function(space, x) {
                  return {
                      trailingComment: x,
                      leadingParbreak: space.parbreak > 0,
                  };
              },
      peg$c10 = peg$anyExpectation(),
      peg$c11 = function(list) {
                  return {
                      whitespace: list.filter((x) => options.isWhitespace(x)).length,
                      parbreak: list.filter((x) => options.isParbreak(x)).length,
                  };
              },
      peg$c12 = function(tok) { return options.isSameLineComment(tok); },
      peg$c13 = function(tok) { return tok; },
      peg$c14 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c15 = function(tok) { return options.isWhitespace(tok); },
      peg$c16 = function(tok) { return options.isParbreak(tok); },
      peg$c17 = function(tok) { return options.isComma(tok); },
      peg$c18 = function(tok) { return options.isEquals(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = [];
    s1 = peg$parsecomment_only_line();
    if (s1 === peg$FAILED) {
      s1 = peg$parseitem_with_end();
      if (s1 === peg$FAILED) {
        s1 = peg$parseitem_without_end();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment_only_line();
        if (s1 === peg$FAILED) {
          s1 = peg$parseitem_with_end();
          if (s1 === peg$FAILED) {
            s1 = peg$parseitem_without_end();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseitem() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetoken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseitem_sep();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_with_end() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_items();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespace_or_parbreaks();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitem_sep();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsewhitespace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsewhitespace();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetrailing_comment();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsewhitespace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsewhitespace();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_without_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow_items();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_items() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseitem_part();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseseparated_part();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseseparated_part();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseseparated_part();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseseparated_part();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseseparated_part() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseparbreak();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseparbreak();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequals();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseparbreak();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseparbreak();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitem_part();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseparbreak();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseparbreak();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequals();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseitem_part() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsenon_whitespace_non_parbreak_token();
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsewhitespace();
        if (s5 === peg$FAILED) {
          s5 = peg$parseparbreak();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = [];
          s9 = peg$parsewhitespace();
          if (s9 === peg$FAILED) {
            s9 = peg$parseparbreak();
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parsewhitespace();
            if (s9 === peg$FAILED) {
              s9 = peg$parseparbreak();
            }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parsenon_whitespace_non_parbreak_token();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 !== peg$FAILED) {
            peg$currPos = s6;
            s6 = void 0;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenon_whitespace_non_parbreak_token();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsewhitespace();
            if (s5 === peg$FAILED) {
              s5 = peg$parseparbreak();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$currPos;
              s8 = [];
              s9 = peg$parsewhitespace();
              if (s9 === peg$FAILED) {
                s9 = peg$parseparbreak();
              }
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsewhitespace();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseparbreak();
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsenon_whitespace_non_parbreak_token();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              peg$silentFails--;
              if (s7 !== peg$FAILED) {
                peg$currPos = s6;
                s6 = void 0;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhitespace_or_parbreaks();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsenon_token();
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = void 0;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenon_whitespace_non_parbreak_token() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsewhitespace();
    if (s3 === peg$FAILED) {
      s3 = peg$parseparbreak();
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = void 0;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsetoken();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenon_token() {
    var s0;

    s0 = peg$parseitem_sep();
    if (s0 === peg$FAILED) {
      s0 = peg$parseequals();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrailing_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$parseown_line_comment();
        }
      }
    }

    return s0;
  }

  function peg$parsewhitespace_or_parbreaks() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    if (s2 === peg$FAILED) {
      s2 = peg$parseparbreak();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseparbreak();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c12(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c14(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c15(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparbreak() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c16(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_sep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c17(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequals() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c18(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function processItem(leadCell, otherCells) {
          const cells = [leadCell || []];
          for (const x of otherCells) {
              cells.push(x.cell || []);
          }
          return { itemParts: cells };
      }

      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(
                  options,
                  createMatchers(["\\", "hline", "cr"], ["&"])
              );
              Object.assign(options, {
                  isComma(node) {
                      return node.type === "string" && node.content === ",";
                  },
                  isEquals(node) {
                      return node.type === "string" && node.content === "=";
                  },
                  isParbreak(node) {
                      return node.type === "parbreak";
                  },
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/systeme-environment.pegjs":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/systeme-environment.pegjs ***!
  \*********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function(a, b) { return a.concat(b ? b : []); },
      peg$c1 = function() { return []; },
      peg$c2 = peg$otherExpectation("partial item"),
      peg$c3 = function(a, b, c) { return a.concat(b, c); },
      peg$c4 = peg$otherExpectation("item"),
      peg$c5 = function(op, a, b, c) {
                  return { type: "item", op, variable: b, content: a.concat(b, c) };
              },
      peg$c6 = function(op, a) {
                  return { type: "item", op, variable: null, content: a };
              },
      peg$c7 = function(line, sep, comment) {
                  return { ...line, sep: [].concat(sep), trailingComment: comment };
              },
      peg$c8 = function(line, comment) {
                  return { ...line, trailingComment: comment };
              },
      peg$c9 = peg$anyExpectation(),
      peg$c10 = function(eq, ann) {
                  return {
                      type: "line",
                      equation: eq,
                      annotation: ann,
                      sep: null,
                  };
              },
      peg$c11 = function(at, ann) {
                  return at ? { type: "annotation", marker: at, content: ann } : null;
              },
      peg$c12 = peg$otherExpectation("equation"),
      peg$c13 = function(left, eq, right) {
                  return { type: "equation", left, right, equals: eq };
              },
      peg$c14 = peg$otherExpectation("trailing comment"),
      peg$c15 = function(x) { return x; },
      peg$c16 = peg$otherExpectation("comment only line"),
      peg$c17 = function(x) {
                  return {
                      type: "line",
                      trailingComment: x,
                  };
              },
      peg$c18 = function(v, s) { return [v].concat(s ? s : []); },
      peg$c19 = peg$otherExpectation("non-var token"),
      peg$c20 = function(t) { return t; },
      peg$c21 = peg$otherExpectation("token"),
      peg$c22 = peg$otherExpectation("same line comment"),
      peg$c23 = function(tok) { return options.isSameLineComment(tok); },
      peg$c24 = function(tok) { return tok; },
      peg$c25 = peg$otherExpectation("own line comment"),
      peg$c26 = function(tok) { return options.isOwnLineComment(tok); },
      peg$c27 = function(tok) { return options.isWhitespace(tok); },
      peg$c28 = peg$otherExpectation(","),
      peg$c29 = function(tok) { return options.isSep(tok); },
      peg$c30 = peg$otherExpectation("@"),
      peg$c31 = function(tok) { return options.isAt(tok); },
      peg$c32 = peg$otherExpectation("variable token"),
      peg$c33 = function(tok) { return options.isVar(tok); },
      peg$c34 = peg$otherExpectation("+/-"),
      peg$c35 = function(tok) { return options.isOperation(tok); },
      peg$c36 = peg$otherExpectation("="),
      peg$c37 = function(tok) { return options.isEquals(tok); },
      peg$c38 = function(tok) { return options.isSubscript(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment_only_line();
    if (s2 === peg$FAILED) {
      s2 = peg$parseline_with_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parsepartial_line_with_comment();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment_only_line();
      if (s2 === peg$FAILED) {
        s2 = peg$parseline_with_sep();
        if (s2 === peg$FAILED) {
          s2 = peg$parsepartial_line_with_comment();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseline_without_sep();
      if (s2 === peg$FAILED) {
        s2 = peg$parseEOL();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepartial_item() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenon_var_token();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenon_var_token();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsevar();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsetoken();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsetoken();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseitem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperation();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenon_var_token();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenon_var_token();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevar();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsetoken();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsetoken();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseoperation();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsenon_var_token();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsenon_var_token();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parseline_with_sep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseline_without_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesep();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetrailing_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartial_line_with_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseline_without_sep();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline_without_sep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = void 0;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseannotation();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseannotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseat();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenon_sep_token();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenon_sep_token();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequation() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseitem();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseitem();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequals();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsetoken();
        if (s4 === peg$FAILED) {
          s4 = peg$parseoperation();
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsetoken();
          if (s4 === peg$FAILED) {
            s4 = peg$parseoperation();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    return s0;
  }

  function peg$parsetrailing_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesame_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parsecomment_only_line() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseown_line_comment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parsevar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevar_token();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubscript();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenon_var_token() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsevar();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetoken();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsenon_sep_token() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsesep();
    if (s2 === peg$FAILED) {
      s2 = peg$parsetrailing_comment();
      if (s2 === peg$FAILED) {
        s2 = peg$parseown_line_comment();
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsesep();
    if (s2 === peg$FAILED) {
      s2 = peg$parseat();
      if (s2 === peg$FAILED) {
        s2 = peg$parseoperation();
        if (s2 === peg$FAILED) {
          s2 = peg$parseequals();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetrailing_comment();
            if (s2 === peg$FAILED) {
              s2 = peg$parseown_line_comment();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parsesame_line_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c23(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }

  function peg$parseown_line_comment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c26(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c27(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesep() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c29(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }

    return s0;
  }

  function peg$parseat() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c31(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }

    return s0;
  }

  function peg$parsevar_token() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c33(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    return s0;
  }

  function peg$parseoperation() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c35(s2);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseequals() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c37(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c38(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isWhitespace) {
          try {
              Object.assign(options, {
                  isSep: (node) => node.type === "string" && node.content === ",",
                  isVar: (node) =>
                      node.type === "string" && node.content.match(/[a-zA-Z]/),
                  isOperation: (node) =>
                      node.type === "string" && node.content.match(/[+-]/),
                  isEquals: (node) =>
                      node.type === "string" && node.content === "=",
                  isAt: (node) => node.type === "string" && node.content === "@",
                  isSubscript: (node) => node.content === "_",
                  isWhitespace: (node) => node.type === "whitespace",
                  isSameLineComment: (node) =>
                      node.type === "comment" && node.sameline,
                  isOwnLineComment: (node) =>
                      node.type === "comment" && !node.sameline,
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/tabular-spec.pegjs":
/*!**************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/tabular-spec.pegjs ***!
  \**************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { body: peg$parsebody },
      peg$startRuleFunction  = peg$parsebody,

      peg$c0 = function(c) { return c; },
      peg$c1 = function(cols) { return cols; },
      peg$c2 = function() { return []; },
      peg$c3 = function(divs1, start, a, end, divs2) {
                  return {
                      type: "column",
                      pre_dividers: divs1,
                      post_dividers: divs2,
                      before_start_code: start,
                      before_end_code: end,
                      alignment: a,
                  };
              },
      peg$c4 = function() {
                          return {
                              type: "vert_divider",
                          };
                      },
      peg$c5 = function(b, g) {
                          return {
                              type: "bang_divider",
                              content: g[0].content,
                          };
                      },
      peg$c6 = function(g) {
                          return {
                              type: "at_divider",
                              content: g[0].content,
                          };
                      },
      peg$c7 = function(div) { return div; },
      peg$c8 = peg$otherExpectation("decl_start"),
      peg$c9 = function(g) { return { type: "decl_code", code: g[0].content }; },
      peg$c10 = peg$otherExpectation("decl_end"),
      peg$c11 = function() { return { type: "alignment", alignment: "left" }; },
      peg$c12 = function() { return { type: "alignment", alignment: "center" }; },
      peg$c13 = function() { return { type: "alignment", alignment: "right" }; },
      peg$c14 = function() { return { type: "alignment", alignment: "X" }; },
      peg$c15 = function() { return "top"; },
      peg$c16 = function() { return "default"; },
      peg$c17 = function() { return "bottom"; },
      peg$c18 = function(a, g) {
                  return {
                      type: "alignment",
                      alignment: "parbox",
                      baseline: a,
                      size: g[0].content,
                  };
              },
      peg$c19 = function(g1, g2) {
                  return {
                      type: "alignment",
                      alignment: "parbox",
                      baseline: g1[0].content,
                      size: g2[0].content,
                  };
              },
      peg$c20 = peg$otherExpectation("vert"),
      peg$c21 = peg$anyExpectation(),
      peg$c22 = function(tok) { return options.matchChar(tok, "|"); },
      peg$c23 = peg$otherExpectation("l"),
      peg$c24 = function(tok) { return options.matchChar(tok, "l"); },
      peg$c25 = peg$otherExpectation("r"),
      peg$c26 = function(tok) { return options.matchChar(tok, "r"); },
      peg$c27 = peg$otherExpectation("c"),
      peg$c28 = function(tok) { return options.matchChar(tok, "c"); },
      peg$c29 = peg$otherExpectation("p"),
      peg$c30 = function(tok) { return options.matchChar(tok, "p"); },
      peg$c31 = peg$otherExpectation("m"),
      peg$c32 = function(tok) { return options.matchChar(tok, "m"); },
      peg$c33 = peg$otherExpectation("b"),
      peg$c34 = function(tok) { return options.matchChar(tok, "b"); },
      peg$c35 = peg$otherExpectation("w"),
      peg$c36 = function(tok) { return options.matchChar(tok, "w"); },
      peg$c37 = peg$otherExpectation("W"),
      peg$c38 = function(tok) { return options.matchChar(tok, "W"); },
      peg$c39 = peg$otherExpectation("X"),
      peg$c40 = function(tok) { return options.matchChar(tok, "X"); },
      peg$c41 = peg$otherExpectation("!"),
      peg$c42 = function(tok) { return options.matchChar(tok, "!"); },
      peg$c43 = peg$otherExpectation("@"),
      peg$c44 = function(tok) { return options.matchChar(tok, "@"); },
      peg$c45 = peg$otherExpectation("<"),
      peg$c46 = function(tok) { return options.matchChar(tok, "<"); },
      peg$c47 = peg$otherExpectation(">"),
      peg$c48 = function(tok) { return options.matchChar(tok, ">"); },
      peg$c49 = peg$otherExpectation("group"),
      peg$c50 = function(tok) { return options.isGroup(tok); },
      peg$c51 = peg$otherExpectation("whitespace"),
      peg$c52 = function(tok) { return options.isWhitespace(tok); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsebody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsecolumn();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c0(s3);
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecolumn();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c0(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecolumn() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecolumn_divider();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecolumn_divider();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedecl_start();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsealignment();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedecl_end();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsecolumn_divider();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsecolumn_divider();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1, s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolumn_divider() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsevert();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c4();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsebang();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsegroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c5(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseat();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsegroup();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c6(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecl_start() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegreater();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parsedecl_end() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseless();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsealignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parser();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseX();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsep();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c15();
            }
            s1 = s2;
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parsem();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c16();
              }
              s1 = s2;
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseb();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c17();
                }
                s1 = s2;
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsegroup();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c18(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsew();
              if (s1 === peg$FAILED) {
                s1 = peg$parseW();
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse_();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsegroup();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parse_();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parse_();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsegroup();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c19(s3, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevert() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c22(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parsel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c24(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parser() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c26(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parsec() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c28(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parsep() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c30(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    return s0;
  }

  function peg$parsem() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c32(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }

    return s0;
  }

  function peg$parseb() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c34(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    return s0;
  }

  function peg$parsew() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c36(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseW() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c38(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }

    return s0;
  }

  function peg$parseX() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c40(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }

    return s0;
  }

  function peg$parsebang() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c42(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parseat() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c44(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    return s0;
  }

  function peg$parseless() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c46(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }

    return s0;
  }

  function peg$parsegreater() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c48(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsegroup() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c50(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c52(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      //
      // These are compatability functions used when running in the browser
      //
      // Check if the `options` object has the functions that we need.
      // If not, try to add them
      if (!options.isHash) {
          try {
              Object.assign(options, {
                  matchChar: (node, char) =>
                      node.type === "string" && node.content === char,
                  isGroup: (node) => node.type === "group",
                  isWhitespace: (node) => node.type === "whitespace",
              });
          } catch (e) {
              console.warn("Error when initializing parser", e);
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/tex-glue.pegjs":
/*!**********************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/tex-glue.pegjs ***!
  \**********************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { root: peg$parseroot },
      peg$startRuleFunction  = peg$parseroot,

      peg$c0 = function(b, st, sh) {
                          // Only return the non-null glue items
                          return {
                              type: "glue",
                              fixed: b,
                              stretchable: st,
                              shrinkable: sh,
                              position: location(),
                          };
                      },
      peg$c1 = peg$anyExpectation(),
      peg$c2 = function(glue) { return glue; },
      peg$c3 = function(n, u) { return { type: "dim", value: n, unit: u }; },
      peg$c4 = "plus",
      peg$c5 = peg$literalExpectation("plus", false),
      peg$c6 = function(n, u) {
                  return { type: "dim", value: n, unit: u };
              },
      peg$c7 = "minus",
      peg$c8 = peg$literalExpectation("minus", false),
      peg$c9 = "pt",
      peg$c10 = peg$literalExpectation("pt", false),
      peg$c11 = "mm",
      peg$c12 = peg$literalExpectation("mm", false),
      peg$c13 = "cm",
      peg$c14 = peg$literalExpectation("cm", false),
      peg$c15 = "in",
      peg$c16 = peg$literalExpectation("in", false),
      peg$c17 = "ex",
      peg$c18 = peg$literalExpectation("ex", false),
      peg$c19 = "em",
      peg$c20 = peg$literalExpectation("em", false),
      peg$c21 = "bp",
      peg$c22 = peg$literalExpectation("bp", false),
      peg$c23 = "pc",
      peg$c24 = peg$literalExpectation("pc", false),
      peg$c25 = "dd",
      peg$c26 = peg$literalExpectation("dd", false),
      peg$c27 = "cc",
      peg$c28 = peg$literalExpectation("cc", false),
      peg$c29 = "nd",
      peg$c30 = peg$literalExpectation("nd", false),
      peg$c31 = "nc",
      peg$c32 = peg$literalExpectation("nc", false),
      peg$c33 = "sp",
      peg$c34 = peg$literalExpectation("sp", false),
      peg$c35 = "filll",
      peg$c36 = peg$literalExpectation("filll", false),
      peg$c37 = "fill",
      peg$c38 = peg$literalExpectation("fill", false),
      peg$c39 = "fil",
      peg$c40 = peg$literalExpectation("fil", false),
      peg$c41 = peg$otherExpectation("number"),
      peg$c42 = /^[0-9]/,
      peg$c43 = peg$classExpectation([["0", "9"]], false, false),
      peg$c44 = ".",
      peg$c45 = peg$literalExpectation(".", false),
      peg$c46 = function(n) { return parseFloat(n); },
      peg$c47 = "+",
      peg$c48 = peg$literalExpectation("+", false),
      peg$c49 = "-",
      peg$c50 = peg$literalExpectation("-", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseroot() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsebase();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsestretchable();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseshrinkable();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2, s3, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebase() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestretchable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserubber_unit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshrinkable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserubber_unit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunit() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s0 = peg$c11;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c13) {
          s0 = peg$c13;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c15) {
            s0 = peg$c15;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s0 = peg$c17;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c19) {
                s0 = peg$c19;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c21) {
                  s0 = peg$c21;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c23) {
                    s0 = peg$c23;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c25) {
                      s0 = peg$c25;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c27) {
                        s0 = peg$c27;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c29) {
                          s0 = peg$c29;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c30); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c31) {
                            s0 = peg$c31;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c33) {
                              s0 = peg$c33;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserubber_unit() {
    var s0;

    s0 = peg$parseunit();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c37) {
          s0 = peg$c37;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c39) {
            s0 = peg$c39;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsesign();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = [];
      if (peg$c42.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
      }
      if (s5 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c44;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$c42.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$c42.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = [];
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c42.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c46(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parsesign() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c47;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c49;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs":
/*!********************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs ***!
  \********************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(m) { return m; },
      peg$c1 = peg$anyExpectation(),
      peg$c2 = function(a) { return { type: "invalid_spec", content: a }; },
      peg$c3 = ";",
      peg$c4 = peg$literalExpectation(";", false),
      peg$c5 = function(f, c) { return c; },
      peg$c6 = function(f, r) {
                  return { type: "color_set", content: [f].concat(r) };
              },
      peg$c7 = ",",
      peg$c8 = peg$literalExpectation(",", false),
      peg$c9 = function(n, s) {
                  return { type: "color_set_item", name: n, spec_list: s };
              },
      peg$c10 = peg$otherExpectation("model list"),
      peg$c11 = ":",
      peg$c12 = peg$literalExpectation(":", false),
      peg$c13 = function(c, m) {
                  return { type: "model_list", contents: m, core_model: c };
              },
      peg$c14 = function(m) {
                  return { type: "model_list", contents: m, core_model: null };
              },
      peg$c15 = "/",
      peg$c16 = peg$literalExpectation("/", false),
      peg$c17 = function(m, a) { return a; },
      peg$c18 = function(m, r) { return [m].concat(r); },
      peg$c19 = peg$otherExpectation("model"),
      peg$c20 = peg$otherExpectation("color spec list"),
      peg$c21 = function(s, a) { return a; },
      peg$c22 = function(s, r) {
                  return { type: "spec_list", content: [s].concat(r) };
              },
      peg$c23 = peg$otherExpectation("color spec"),
      peg$c24 = function(c) {
                  return { type: "hex_spec", content: [c] };
              },
      peg$c25 = function(c, d) { return d; },
      peg$c26 = function(c, r) {
                  return { type: "num_spec", content: r ? [c].concat(r) : [c] };
              },
      peg$c27 = peg$otherExpectation("color"),
      peg$c28 = function(c, fs) {
                  return { type: "color", color: c, functions: fs };
              },
      peg$c29 = peg$otherExpectation("function expression"),
      peg$c30 = ">",
      peg$c31 = peg$literalExpectation(">", false),
      peg$c32 = function(f, n) { return n; },
      peg$c33 = function(f, args) {
                  return { type: "function", name: f, args };
              },
      peg$c34 = peg$otherExpectation("function"),
      peg$c35 = peg$otherExpectation("extended expression"),
      peg$c36 = function(core, d, e, es) {
                  return {
                      type: "extended_expr",
                      core_model: core,
                      div: d,
                      expressions: [e].concat(es),
                  };
              },
      peg$c37 = function(core, e, es) {
                  return {
                      type: "extended_expr",
                      core_model: core,
                      div: null,
                      expressions: [e].concat(es),
                  };
              },
      peg$c38 = function(e, d) {
                  return { type: "weighted_expr", color: e, weight: d };
              },
      peg$c39 = function(e) { return e; },
      peg$c40 = peg$otherExpectation("core model"),
      peg$c41 = peg$otherExpectation("expr"),
      peg$c42 = function(p, n, e, po) {
                  return {
                      type: "expr",
                      prefix: p,
                      name: n,
                      mix_expr: e,
                      postfix: po,
                  };
              },
      peg$c43 = "!",
      peg$c44 = peg$literalExpectation("!", false),
      peg$c45 = function(p, n) {
                  return { type: "complete_mix", mix_percent: p, name: n };
              },
      peg$c46 = function(p) { return { type: "partial_mix", mix_percent: p }; },
      peg$c47 = peg$otherExpectation("mix expr"),
      peg$c48 = function(c, p) { return c.concat(p || []); },
      peg$c49 = peg$otherExpectation("name"),
      peg$c50 = ".",
      peg$c51 = peg$literalExpectation(".", false),
      peg$c52 = /^[a-zA-Z0-9]/,
      peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
      peg$c54 = peg$otherExpectation("postfix"),
      peg$c55 = "!![",
      peg$c56 = peg$literalExpectation("!![", false),
      peg$c57 = "]",
      peg$c58 = peg$literalExpectation("]", false),
      peg$c59 = function(n) { return { type: "postfix", num: n }; },
      peg$c60 = "!!",
      peg$c61 = peg$literalExpectation("!!", false),
      peg$c62 = function(p) { return { type: "postfix", plusses: p }; },
      peg$c63 = peg$otherExpectation("prefix"),
      peg$c64 = peg$otherExpectation("plus"),
      peg$c65 = "+",
      peg$c66 = peg$literalExpectation("+", false),
      peg$c67 = peg$otherExpectation("minus"),
      peg$c68 = "-",
      peg$c69 = peg$literalExpectation("-", false),
      peg$c70 = peg$otherExpectation("num"),
      peg$c71 = /^[0-9]/,
      peg$c72 = peg$classExpectation([["0", "9"]], false, false),
      peg$c73 = function(n) { return parseInt(n, 10); },
      peg$c74 = peg$otherExpectation("positive float"),
      peg$c75 = function(n) { return parseFloat(n); },
      peg$c76 = peg$otherExpectation("divisor"),
      peg$c77 = function(n) { return n; },
      peg$c78 = function(n) { return -n; },
      peg$c79 = peg$otherExpectation("int"),
      peg$c80 = function(m, n) { return m ? -n : n; },
      peg$c81 = peg$otherExpectation("whitespace"),
      peg$c82 = /^[ \t\n\r]/,
      peg$c83 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
      peg$c84 = /^[0-9a-fA-F]/,
      peg$c85 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c86 = function(h) { return h.toUpperCase(); },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsespec();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsespec_list();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecolor();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEOL();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsemodel_list();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOL();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c0(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecolor_set_spec();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEOL();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              s2 = [];
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (input.length > peg$currPos) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
              } else {
                s1 = s2;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$parseEOL();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecolor_set_spec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecolor_set_item();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecolor_set_item();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c5(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c3;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecolor_set_item();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c5(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolor_set_item() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsename();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespec_list();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodel_list() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecore_model();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemodel_list_tail();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemodel_list_tail();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsemodel_list_tail() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemodel();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemodel();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c17(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemodel();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c17(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodel() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsecore_model();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsespec_list() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsespec();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsespec();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c21(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespec();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c21(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parsespec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsehex();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsehex();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsehex();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsehex();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsehex();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsehex();
              if (s8 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6, s7, s8];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c24(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedec();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c7;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedec();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c25(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedec();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c25(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsesp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedec();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c25(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parsesp();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedec();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c25(s1, s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          } else {
            s2 = peg$FAILED;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parsecolor() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecolor_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsefunc_expr();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsefunc_expr();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parsecolor_expr() {
    var s0;

    s0 = peg$parseext_expr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsename();
      }
    }

    return s0;
  }

  function peg$parsefunc_expr() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefunction();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseint();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c32(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseint();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c32(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    return s0;
  }

  function peg$parsefunction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsename();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseext_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecore_model();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsediv();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c11;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseweighted_expr();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseadditional_weighted_expr();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseadditional_weighted_expr();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s1, s3, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecore_model();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c11;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseweighted_expr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseadditional_weighted_expr();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseadditional_weighted_expr();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseweighted_expr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedec();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c38(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditional_weighted_expr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseweighted_expr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecore_model() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsename();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseprefix();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemix_expr();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepostfix();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c42(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parsecomplete_mix() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepct();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartial_mix() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepct();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemix_expr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomplete_mix();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomplete_mix();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepartial_mix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsename() {
    var s0, s1, s2;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c50;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }

    return s0;
  }

  function peg$parsepostfix() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c57;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c59(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseplus();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseplus();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parseprefix() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseminus();
    if (s0 === peg$FAILED) {
      s0 = null;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c65;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    return s0;
  }

  function peg$parseminus() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c68;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c68;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parsenum() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }

    return s0;
  }

  function peg$parsepct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s3 = input.substring(s3, peg$currPos);
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c50;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$currPos;
        s8 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s9 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s9 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
        }
        if (s8 !== peg$FAILED) {
          s7 = input.substring(s7, peg$currPos);
        } else {
          s7 = s8;
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c50;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parsediv() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsepct();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }

    return s0;
  }

  function peg$parsedec() {
    var s0, s1, s2;

    s0 = peg$parsepct();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepct();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c68;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepct();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c82.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c82.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1;

    s0 = [];
    if (peg$c82.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehex() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c84.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c86(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs":
/*!****************************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs ***!
  \****************************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { args_spec_list: peg$parseargs_spec_list },
      peg$startRuleFunction  = peg$parseargs_spec_list,

      peg$c0 = function(x) { return x; },
      peg$c1 = function(spec) { return spec; },
      peg$c2 = "+",
      peg$c3 = peg$literalExpectation("+", false),
      peg$c4 = function(spec) {
                  return spec;
              },
      peg$c5 = "v",
      peg$c6 = peg$literalExpectation("v", false),
      peg$c7 = peg$anyExpectation(),
      peg$c8 = function(openBrace) {
                  return createNode("verbatim", { openBrace, closeBrace: openBrace });
              },
      peg$c9 = "b",
      peg$c10 = peg$literalExpectation("b", false),
      peg$c11 = function() { return createNode("body"); },
      peg$c12 = "!",
      peg$c13 = peg$literalExpectation("!", false),
      peg$c14 = function(leading_bang, spec) {
                  return leading_bang ? { ...spec, noLeadingWhitespace: true } : spec;
              },
      peg$c15 = "D",
      peg$c16 = peg$literalExpectation("D", false),
      peg$c17 = function(braceSpec, defaultArg) {
                  return createNode("optional", { ...braceSpec, defaultArg });
              },
      peg$c18 = "d",
      peg$c19 = peg$literalExpectation("d", false),
      peg$c20 = function(braceSpec) { return createNode("optional", braceSpec); },
      peg$c21 = "s",
      peg$c22 = peg$literalExpectation("s", false),
      peg$c23 = function() { return createNode("optionalStar"); },
      peg$c24 = "O",
      peg$c25 = peg$literalExpectation("O", false),
      peg$c26 = function(g) { return createNode("optional", { defaultArg: g }); },
      peg$c27 = "o",
      peg$c28 = peg$literalExpectation("o", false),
      peg$c29 = function() { return createNode("optional"); },
      peg$c30 = "e",
      peg$c31 = peg$literalExpectation("e", false),
      peg$c32 = function(args) {
                  return createNode("embellishment", {
                      embellishmentTokens: args.content,
                  });
              },
      peg$c33 = "E",
      peg$c34 = peg$literalExpectation("E", false),
      peg$c35 = function(args, g) {
                  return createNode("embellishment", {
                      embellishmentTokens: args.content,
                      defaultArg: g,
                  });
              },
      peg$c36 = "t",
      peg$c37 = peg$literalExpectation("t", false),
      peg$c38 = function(tok) { return createNode("optionalToken", { token: tok }); },
      peg$c39 = "R",
      peg$c40 = peg$literalExpectation("R", false),
      peg$c41 = function(braceSpec, defaultArg) {
                  return createNode("mandatory", { ...braceSpec, defaultArg });
              },
      peg$c42 = "r",
      peg$c43 = peg$literalExpectation("r", false),
      peg$c44 = function(braceSpec) { return createNode("mandatory", braceSpec); },
      peg$c45 = "m",
      peg$c46 = peg$literalExpectation("m", false),
      peg$c47 = function() { return createNode("mandatory"); },
      peg$c48 = function(openBrace, closeBrace) {
                  return { openBrace, closeBrace };
              },
      peg$c49 = "{",
      peg$c50 = peg$literalExpectation("{", false),
      peg$c51 = "}",
      peg$c52 = peg$literalExpectation("}", false),
      peg$c53 = function(content) {
                  return { type: "group", content: content };
              },
      peg$c54 = function() { return ""; },
      peg$c55 = " ",
      peg$c56 = peg$literalExpectation(" ", false),
      peg$c57 = "\n",
      peg$c58 = peg$literalExpectation("\n", false),
      peg$c59 = "\r",
      peg$c60 = peg$literalExpectation("\r", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseargs_spec_list() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsewhitespace();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsearg_spec();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c0(s4);
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsearg_spec();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c0(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhitespace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearg_spec() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptional();
      if (s2 === peg$FAILED) {
        s2 = peg$parsemandatory();
        if (s2 === peg$FAILED) {
          s2 = peg$parseverbatim();
          if (s2 === peg$FAILED) {
            s2 = peg$parserequired();
            if (s2 === peg$FAILED) {
              s2 = peg$parsebody();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseverbatim() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebody() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoptional() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptional_star();
      if (s2 === peg$FAILED) {
        s2 = peg$parseoptional_standard();
        if (s2 === peg$FAILED) {
          s2 = peg$parseoptional_delimited();
          if (s2 === peg$FAILED) {
            s2 = peg$parseoptional_embellishment();
            if (s2 === peg$FAILED) {
              s2 = peg$parseoptional_token();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptional_delimited() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 68) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebrace_spec();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebraced_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 100) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebrace_spec();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptional_star() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoptional_standard() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 79) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebraced_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 111) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoptional_embellishment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 101) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebraced_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 69) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebraced_group();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebraced_group();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptional_token() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserequired() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 82) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebrace_spec();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebraced_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c41(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 114) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebrace_spec();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemandatory() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebrace_spec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsewhitespace_token();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsewhitespace_token();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebraced_group() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c49;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c51;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = void 0;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        peg$silentFails++;
        s7 = peg$parsebraced_group();
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = void 0;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parsebraced_group();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c51;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$parsebraced_group();
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parsebraced_group();
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c53(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace_token();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace_token();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewhitespace_token() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c55;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c57;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c59;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
      }
    }

    return s0;
  }


      const DEFAULT_OPTIONS = {
          optional: { openBrace: "[", closeBrace: "]" },
          mandatory: { openBrace: "{", closeBrace: "}" },
      };
      function createNode(type, options) {
          const computedOptions = DEFAULT_OPTIONS[type] || {};
          return { type, ...computedOptions, ...options };
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./unified-latex-util-pegjs/grammars/latex.pegjs":
/*!*******************************************************!*\
  !*** ./unified-latex-util-pegjs/grammars/latex.pegjs ***!
  \*******************************************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { document: peg$parsedocument, math: peg$parsemath },
      peg$startRuleFunction  = peg$parsedocument,

      peg$c0 = peg$otherExpectation("document"),
      peg$c1 = function(content) { return createNode("root", { content }); },
      peg$c2 = peg$otherExpectation("math"),
      peg$c3 = peg$otherExpectation("token"),
      peg$c4 = function(t) { return t; },
      peg$c5 = function(eq) {
                  return createNode("inlinemath", { content: eq });
              },
      peg$c6 = peg$anyExpectation(),
      peg$c7 = function(s) { return createNode("string", { content: s }); },
      peg$c8 = peg$otherExpectation("parbreak"),
      peg$c9 = function() { return createNode("parbreak"); },
      peg$c10 = peg$otherExpectation("math token"),
      peg$c11 = function(x) { return x; },
      peg$c12 = function() {
                  return createNode("macro", { content: "^", escapeToken: "" });
              },
      peg$c13 = function() {
                  return createNode("macro", { content: "_", escapeToken: "" });
              },
      peg$c14 = peg$otherExpectation("nonchar token"),
      peg$c15 = "%",
      peg$c16 = peg$literalExpectation("%", false),
      peg$c17 = peg$otherExpectation("whitespace"),
      peg$c18 = function() {
                  return createNode("whitespace");
              },
      peg$c19 = peg$otherExpectation("number"),
      peg$c20 = ".",
      peg$c21 = peg$literalExpectation(".", false),
      peg$c22 = function(a, b) { return a.join("") + "." + b.join(""); },
      peg$c23 = function(b) { return "." + b.join(""); },
      peg$c24 = function(a) { return a.join("") + "."; },
      peg$c25 = peg$otherExpectation("special macro"),
      peg$c26 = "verb*",
      peg$c27 = peg$literalExpectation("verb*", false),
      peg$c28 = "verb",
      peg$c29 = peg$literalExpectation("verb", false),
      peg$c30 = function(env, e, end) { return end == e; },
      peg$c31 = function(env, e, x) { return x; },
      peg$c32 = function(env, e, x, end) { return end == e; },
      peg$c33 = function(env, e, x) {
                  return createNode("verb", {
                      env: env,
                      escape: e,
                      content: x.join(""),
                  });
              },
      peg$c34 = function(x) { return createNode("displaymath", { content: x }); },
      peg$c35 = function(x) { return createNode("inlinemath", { content: x }); },
      peg$c36 = peg$otherExpectation("verbatim environment"),
      peg$c37 = function(env, end_env) { return compare_env({ content: [env] }, end_env); },
      peg$c38 = function(env, x) { return x; },
      peg$c39 = function(env, body) {
                  return createNode("verbatim", {
                      env: env,
                      content: body.join(""),
                  });
              },
      peg$c40 = "verbatim*",
      peg$c41 = peg$literalExpectation("verbatim*", false),
      peg$c42 = "verbatim",
      peg$c43 = peg$literalExpectation("verbatim", false),
      peg$c44 = "filecontents*",
      peg$c45 = peg$literalExpectation("filecontents*", false),
      peg$c46 = "filecontents",
      peg$c47 = peg$literalExpectation("filecontents", false),
      peg$c48 = "comment",
      peg$c49 = peg$literalExpectation("comment", false),
      peg$c50 = "lstlisting",
      peg$c51 = peg$literalExpectation("lstlisting", false),
      peg$c52 = peg$otherExpectation("macro"),
      peg$c53 = function(n) { return n.join(""); },
      peg$c54 = function(n) { return n; },
      peg$c55 = function(m) {
                  return createNode("macro", { content: m });
              },
      peg$c56 = peg$otherExpectation("group"),
      peg$c57 = function(c) { return c; },
      peg$c58 = function(x) {
                  return createNode("group", { content: x });
              },
      peg$c59 = function(g) { return text().slice(1, -1); },
      peg$c60 = peg$otherExpectation("environment"),
      peg$c61 = function(env, env_comment, end_env) { return compare_env(env, end_env); },
      peg$c62 = function(env, env_comment, x) { return x; },
      peg$c63 = function(env, env_comment, body) {
                  return createNode("environment", {
                      env,
                      content: env_comment ? [env_comment, ...body] : body,
                  });
              },
      peg$c64 = peg$otherExpectation("math environment"),
      peg$c65 = function(env, env_comment, end_env) { return compare_env({ content: [env] }, end_env); },
      peg$c66 = function(env, env_comment, body) {
                  return createNode("mathenv", {
                      env: env,
                      content: env_comment ? [env_comment, ...body] : body,
                  });
              },
      peg$c67 = peg$otherExpectation("math group"),
      peg$c68 = "[",
      peg$c69 = peg$literalExpectation("[", false),
      peg$c70 = "]",
      peg$c71 = peg$literalExpectation("]", false),
      peg$c72 = "(",
      peg$c73 = peg$literalExpectation("(", false),
      peg$c74 = ")",
      peg$c75 = peg$literalExpectation(")", false),
      peg$c76 = "begin",
      peg$c77 = peg$literalExpectation("begin", false),
      peg$c78 = "end",
      peg$c79 = peg$literalExpectation("end", false),
      peg$c80 = "equation*",
      peg$c81 = peg$literalExpectation("equation*", false),
      peg$c82 = "equation",
      peg$c83 = peg$literalExpectation("equation", false),
      peg$c84 = "align*",
      peg$c85 = peg$literalExpectation("align*", false),
      peg$c86 = "align",
      peg$c87 = peg$literalExpectation("align", false),
      peg$c88 = "alignat*",
      peg$c89 = peg$literalExpectation("alignat*", false),
      peg$c90 = "alignat",
      peg$c91 = peg$literalExpectation("alignat", false),
      peg$c92 = "gather*",
      peg$c93 = peg$literalExpectation("gather*", false),
      peg$c94 = "gather",
      peg$c95 = peg$literalExpectation("gather", false),
      peg$c96 = "multline*",
      peg$c97 = peg$literalExpectation("multline*", false),
      peg$c98 = "multline",
      peg$c99 = peg$literalExpectation("multline", false),
      peg$c100 = "flalign*",
      peg$c101 = peg$literalExpectation("flalign*", false),
      peg$c102 = "flalign",
      peg$c103 = peg$literalExpectation("flalign", false),
      peg$c104 = "split",
      peg$c105 = peg$literalExpectation("split", false),
      peg$c106 = "math",
      peg$c107 = peg$literalExpectation("math", false),
      peg$c108 = "displaymath",
      peg$c109 = peg$literalExpectation("displaymath", false),
      peg$c110 = function(e) { return createNode("string", { content: e }); },
      peg$c111 = peg$otherExpectation("escape"),
      peg$c112 = "\\",
      peg$c113 = peg$literalExpectation("\\", false),
      peg$c114 = function() { return createNode("string", { content: "\\" }); },
      peg$c115 = "{",
      peg$c116 = peg$literalExpectation("{", false),
      peg$c117 = "}",
      peg$c118 = peg$literalExpectation("}", false),
      peg$c119 = "$",
      peg$c120 = peg$literalExpectation("$", false),
      peg$c121 = "&",
      peg$c122 = peg$literalExpectation("&", false),
      peg$c123 = peg$otherExpectation("newline"),
      peg$c124 = "\r",
      peg$c125 = peg$literalExpectation("\r", false),
      peg$c126 = "\n",
      peg$c127 = peg$literalExpectation("\n", false),
      peg$c128 = "\r\n",
      peg$c129 = peg$literalExpectation("\r\n", false),
      peg$c130 = "#",
      peg$c131 = peg$literalExpectation("#", false),
      peg$c132 = "^",
      peg$c133 = peg$literalExpectation("^", false),
      peg$c134 = "_",
      peg$c135 = peg$literalExpectation("_", false),
      peg$c136 = "\0",
      peg$c137 = peg$literalExpectation("\0", false),
      peg$c138 = /^[ \t]/,
      peg$c139 = peg$classExpectation([" ", "\t"], false, false),
      peg$c140 = function() { return " "; },
      peg$c141 = peg$otherExpectation("letter"),
      peg$c142 = /^[a-zA-Z]/,
      peg$c143 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c144 = peg$otherExpectation("digit"),
      peg$c145 = /^[0-9]/,
      peg$c146 = peg$classExpectation([["0", "9"]], false, false),
      peg$c147 = peg$otherExpectation("punctuation"),
      peg$c148 = /^[.,;:\-*\/()!?=+<>[\]`'"~]/,
      peg$c149 = peg$classExpectation([".", ",", ";", ":", "-", "*", "/", "(", ")", "!", "?", "=", "+", "<", ">", "[", "]", "`", "'", "\"", "~"], false, false),
      peg$c150 = function(p) {
                  return createNode("string", { content: p });
              },
      peg$c151 = peg$otherExpectation("full comment"),
      peg$c152 = function(leading_sp, comment) {
                  return createNode("comment", {
                      ...comment,
                      sameline: false,
                      leadingWhitespace: leading_sp.length > 0,
                  });
              },
      peg$c153 = function(spaces, x) {
                  return createNode("comment", {
                      ...x,
                      sameline: true,
                      leadingWhitespace: spaces.length > 0,
                  });
              },
      peg$c154 = peg$otherExpectation("comment"),
      peg$c155 = function(c) {
                  return { content: c.join(""), suffixParbreak: true };
              },
      peg$c156 = function(c) { return { content: c.join("") }; },
      peg$c157 = function() {
                  var loc = location();
                  return loc.start.column === 1;
              },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsedocument() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetoken();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetoken();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }

    return s0;
  }

  function peg$parsemath() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsemath_token();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsemath_token();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$parsespecial_macro();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefull_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegroup();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemath_shift();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parsemath_shift();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemath_token();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c4(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  peg$silentFails++;
                  s5 = peg$parsemath_shift();
                  peg$silentFails--;
                  if (s5 === peg$FAILED) {
                    s4 = void 0;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsemath_token();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c4(s5);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsemath_shift();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c5(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsealignment_tab();
              if (s0 === peg$FAILED) {
                s0 = peg$parseparbreak();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemacro_parameter();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenumber();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsewhitespace();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsepunctuation();
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$currPos;
                            s2 = [];
                            s3 = peg$currPos;
                            s4 = peg$currPos;
                            peg$silentFails++;
                            s5 = peg$parsenonchar_token();
                            peg$silentFails--;
                            if (s5 === peg$FAILED) {
                              s4 = void 0;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                              }
                              if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                              } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                            if (s3 !== peg$FAILED) {
                              while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$currPos;
                                s4 = peg$currPos;
                                peg$silentFails++;
                                s5 = peg$parsenonchar_token();
                                peg$silentFails--;
                                if (s5 === peg$FAILED) {
                                  s4 = void 0;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                if (s4 !== peg$FAILED) {
                                  if (input.length > peg$currPos) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s4 = [s4, s5];
                                    s3 = s4;
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$FAILED;
                                }
                              }
                            } else {
                              s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = input.substring(s1, peg$currPos);
                            } else {
                              s1 = s2;
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c7(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsebegin_group();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseend_group();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsemath_shift();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parseparbreak() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsesp();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsesp();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenl();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parsesp();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parsesp();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenl();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parsesp();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsesp();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsenl();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsesp();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsesp();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parsecomment_start();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsesp();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenl();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parsesp();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsesp();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenl();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parsesp();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsesp();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenl();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c9();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parsemath_token() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$parsespecial_macro();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefull_comment();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewhitespace();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewhitespace();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsegroup();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewhitespace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewhitespace();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsealignment_tab();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsewhitespace();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsewhitespace();
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c11(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsewhitespace();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsewhitespace();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsemacro_parameter();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parsewhitespace();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsewhitespace();
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c11(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsewhitespace();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsewhitespace();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesuperscript();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsewhitespace();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsewhitespace();
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c12();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsewhitespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsewhitespace();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesubscript();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parsewhitespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsewhitespace();
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c13();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsewhitespace();
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.length > peg$currPos) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c7(s1);
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parsenonchar_token() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseescape();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c15;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsebegin_group();
        if (s0 === peg$FAILED) {
          s0 = peg$parseend_group();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemath_shift();
            if (s0 === peg$FAILED) {
              s0 = peg$parsealignment_tab();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenl();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemacro_parameter();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseignore();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsesp();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsepunctuation();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseEOF();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsenl();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesp();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsesp();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenl();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsecomment_start();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parsenl();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = [];
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesp();
          }
        } else {
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c18();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenum();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c20;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsenum();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsenum();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c22(s2, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenum();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsenum();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c23(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsenum();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsenum();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c24(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsespecial_macro() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s2 = peg$c26;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s2 = peg$c28;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          if (input.length > peg$currPos) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s9 = peg$c30(s2, s3, s8);
            if (s9) {
              s9 = void 0;
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c31(s2, s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s9 = peg$c30(s2, s3, s8);
              if (s9) {
                s9 = void 0;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c31(s2, s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s7 = peg$c32(s2, s3, s4, s6);
              if (s7) {
                s7 = void 0;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c33(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseverbatim_environment();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebegin_display_math();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseend_display_math();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemath_token();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c11(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseend_display_math();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemath_token();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c11(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseend_display_math();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsebegin_inline_math();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseend_inline_math();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemath_token();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c11(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseend_inline_math();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemath_token();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c11(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseend_inline_math();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemath_shift();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsemath_shift();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$currPos;
                s7 = peg$parsemath_shift();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsemath_shift();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsemath_token();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c11(s6);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  peg$silentFails++;
                  s6 = peg$currPos;
                  s7 = peg$parsemath_shift();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsemath_shift();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsemath_token();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c11(s6);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsemath_shift();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsemath_shift();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c34(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsemath_environment();
              if (s0 === peg$FAILED) {
                s0 = peg$parseenvironment();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parseverbatim_environment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseverbatim_env_name();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseend_group();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$currPos;
            s9 = peg$parseend_env();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsegroup();
              if (s10 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s11 = peg$c37(s3, s10);
                if (s11) {
                  s11 = void 0;
                } else {
                  s11 = peg$FAILED;
                }
                if (s11 !== peg$FAILED) {
                  s9 = [s9, s10, s11];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = void 0;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c38(s3, s8);
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$currPos;
              s9 = peg$parseend_env();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsegroup();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s11 = peg$c37(s3, s10);
                  if (s11) {
                    s11 = void 0;
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = void 0;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c38(s3, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseend_env();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebegin_group();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseverbatim_env_name();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseend_group();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c39(s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseverbatim_env_name() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c46) {
            s0 = peg$c46;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c48) {
              s0 = peg$c48;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c50) {
                s0 = peg$c50;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemacro() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseescape();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsechar();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsechar();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c53(s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseescape();
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c54(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c55(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parsegroup() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_group();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseend_group();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetoken();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseend_group();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetoken();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    return s0;
  }

  function peg$parsegroup_contents_as_string() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsegroup();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c59(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseenvironment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsegroup_contents_as_string();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesameline_comment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = peg$parseend_env();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsegroup_contents_as_string();
            if (s9 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s10 = peg$c61(s2, s3, s9);
              if (s10) {
                s10 = void 0;
              } else {
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetoken();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c62(s2, s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            s8 = peg$parseend_env();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsegroup_contents_as_string();
              if (s9 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s10 = peg$c61(s2, s3, s9);
                if (s10) {
                  s10 = void 0;
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = void 0;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetoken();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c62(s2, s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_env();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsegroup_contents_as_string();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c63(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parsemath_environment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemath_env_name();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseend_group();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesameline_comment();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$currPos;
              s10 = peg$parseend_env();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsegroup();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s12 = peg$c65(s3, s5, s11);
                  if (s12) {
                    s12 = void 0;
                  } else {
                    s12 = peg$FAILED;
                  }
                  if (s12 !== peg$FAILED) {
                    s10 = [s10, s11, s12];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = void 0;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsemath_token();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c62(s3, s5, s9);
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$currPos;
                s10 = peg$parseend_env();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsegroup();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s12 = peg$c65(s3, s5, s11);
                    if (s12) {
                      s12 = void 0;
                    } else {
                      s12 = peg$FAILED;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = void 0;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsemath_token();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c62(s3, s5, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_env();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsebegin_group();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsemath_env_name();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseend_group();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c66(s3, s5, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    return s0;
  }

  function peg$parsemath_group() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_group();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseend_group();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemath_token();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseend_group();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemath_token();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_group();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parsebegin_display_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c68;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_display_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c70;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_inline_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c72;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_inline_math() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 41) {
        s2 = peg$c74;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_env() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c76) {
        s2 = peg$c76;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_env() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c78) {
        s2 = peg$c78;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemath_env_name() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c82) {
        s1 = peg$c82;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c84) {
          s1 = peg$c84;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c86) {
            s1 = peg$c86;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c88) {
              s1 = peg$c88;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c90) {
                s1 = peg$c90;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c92) {
                  s1 = peg$c92;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c94) {
                    s1 = peg$c94;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c96) {
                      s1 = peg$c96;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c97); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c98) {
                        s1 = peg$c98;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c100) {
                          s1 = peg$c100;
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c102) {
                            s1 = peg$c102;
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c104) {
                              s1 = peg$c104;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c105); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c106) {
                                s1 = peg$c106;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c107); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 11) === peg$c108) {
                                  s1 = peg$c108;
                                  peg$currPos += 11;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c110(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseescape() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c112;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c114();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }

    return s0;
  }

  function peg$parsebegin_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c115;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseend_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c117;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemath_shift() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c119;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsealignment_tab() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c121;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenl() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 13) {
      s2 = peg$c124;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c126;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 13) {
        s0 = peg$c124;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c128) {
          s0 = peg$c128;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }

    return s0;
  }

  function peg$parsemacro_parameter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c130;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesuperscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c132;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c134;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseignore() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 0) {
      s0 = peg$c136;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c138.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c138.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c140();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c142.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parsenum() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c145.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }

    return s0;
  }

  function peg$parsepunctuation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c148.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c150(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }

    return s0;
  }

  function peg$parsecomment_start() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parsefull_comment() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseownline_comment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesameline_comment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseownline_comment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsesp();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsesp();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenl();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseleading_sp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomment();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c152(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesameline_comment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesp();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsesp();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c153(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecomment_start();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsenl();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c57(s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenl();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseparbreak();
        peg$silentFails--;
        if (s4 !== peg$FAILED) {
          peg$currPos = s3;
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c155(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment_start();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenl();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c57(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsenl();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsenl();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parsecomment_start();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsenl();
            if (s3 === peg$FAILED) {
              s3 = peg$parseEOF();
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c156(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }

    return s0;
  }

  function peg$parseleading_sp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsestart_of_line();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesp();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsestart_of_line() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$c157();
    if (s0) {
      s0 = void 0;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      function toString(e) {
          if (typeof e === "string") {
              return e;
          }
          if (typeof e.content === "string") {
              return e.content;
          }
          if (e && e.type === "whitespace") {
              return " ";
          }
          return e;
      }

      function compare_env(g1, g2) {
          const g1Name =
              typeof g1 === "string" ? g1 : g1.content.map(toString).join("");
          const g2Name =
              typeof g2 === "string" ? g2 : g2.content.map(toString).join("");
          return g1Name === g2Name;
      }

      function createNode(type, extra = {}) {
          return { type, ...extra, position: location() };
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "../../node_modules/simple-swizzle/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/simple-swizzle/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var isArrayish = __webpack_require__(/*! is-arrayish */ "../../node_modules/is-arrayish/index.js");

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ "./structured-clone/index.ts":
/*!***********************************!*\
  !*** ./structured-clone/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "structuredClone": () => (/* binding */ structuredClone)
/* harmony export */ });
// @ts-nocheck
// globalThis polyfill from https://mathiasbynens.be/notes/globalthis
(function () {
    if (typeof globalThis === "object")
        return;
    Object.defineProperty(Object.prototype, "__magic__", {
        get: function () {
            return this;
        },
        configurable: true, // This makes it possible to `delete` the getter later.
    });
    __magic__.globalThis = __magic__; // lolwat
    delete Object.prototype.__magic__;
})();
const clone = typeof globalThis.structuredClone === "function"
    ? globalThis.structuredClone
    : (obj) => JSON.parse(JSON.stringify(obj));
/**
 * Wrapper around the built-in structured clone. Uses `JSON.parse(JSON.stringify(...))`
 * as a fallback.
 */
function structuredClone(obj) {
    return clone(obj);
}


/***/ }),

/***/ "./unified-latex-builder/index.ts":
/*!****************************************!*\
  !*** ./unified-latex-builder/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.SP),
/* harmony export */   "arg": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.arg),
/* harmony export */   "args": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.args),
/* harmony export */   "env": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.env),
/* harmony export */   "m": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.m),
/* harmony export */   "s": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.s)
/* harmony export */ });
/* harmony import */ var _libs_builders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/builders */ "./unified-latex-builder/libs/builders.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help build a `unified-latex` Abstract Syntax Tree (AST)
 * with [hyperscript](https://github.com/dominictarr/hyperscript)-like syntax.
 *
 * ## When should I use this?
 *
 * If you want to programmatically create `Ast.Node` nodes.
 *
 */


/***/ }),

/***/ "./unified-latex-builder/libs/builders.ts":
/*!************************************************!*\
  !*** ./unified-latex-builder/libs/builders.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* binding */ SP),
/* harmony export */   "arg": () => (/* binding */ arg),
/* harmony export */   "args": () => (/* binding */ args),
/* harmony export */   "env": () => (/* binding */ env),
/* harmony export */   "m": () => (/* binding */ m),
/* harmony export */   "s": () => (/* binding */ s)
/* harmony export */ });
function normalizeNode(node) {
    if (typeof node === "string") {
        return s(node);
    }
    return node;
}
function normalizeArgument(arg, openMark = "{", closeMark = "}") {
    if (typeof arg === "string") {
        return {
            type: "argument",
            openMark,
            closeMark,
            content: [s(arg)],
        };
    }
    if (arg.type === "argument") {
        return arg;
    }
    return { type: "argument", openMark, closeMark, content: [arg] };
}
function normalizeArgumentsList(args, openMark = "{", closeMark = "}") {
    if (args == null) {
        return [];
    }
    if (Array.isArray(args)) {
        return args.map((arg) => normalizeArgument(arg, openMark, closeMark));
    }
    return [normalizeArgument(args, openMark, closeMark)];
}
const BRACES_MAP = {
    "*": { openMark: "", closeMark: "" },
    "{": { openMark: "{", closeMark: "}" },
    "[": { openMark: "[", closeMark: "]" },
    "(": { openMark: "(", closeMark: ")" },
};
const CLOSE_BRACES = new Set(Object.values(BRACES_MAP)
    .map((x) => x.closeMark)
    .filter((x) => x));
/**
 * Turn a braces signature into an array of braces.
 */
function bracesToOpenAndCloseMarks(braces) {
    const ret = [];
    for (const char of braces.split("")) {
        if (CLOSE_BRACES.has(char)) {
            continue;
        }
        const braces = BRACES_MAP[char];
        if (braces == null) {
            throw new Error(`Unknown open/close mark type "${char}"`);
        }
        braces;
        ret.push(braces);
    }
    return ret;
}
/**
 * Create an Argument list. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * args(["a", "b"], { braces: "[]{}" });
 * ```
 * will result in arguments `[a]{b}`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function args(args, special) {
    var _a, _b;
    if (!Array.isArray(args)) {
        args = [args];
    }
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces.length !== args.length) {
            throw new Error(`There is a difference between the number of supplied braces and the number of supplied arguments. ${args.length} supplied with braces signature ${special.braces}`);
        }
        return args.map((arg, i) => normalizeArgument(arg, braces[i].openMark, braces[i].closeMark));
    }
    const openMark = (_a = special === null || special === void 0 ? void 0 : special.defaultOpenMark) !== null && _a !== void 0 ? _a : "{";
    const closeMark = (_b = special === null || special === void 0 ? void 0 : special.defaultCloseMark) !== null && _b !== void 0 ? _b : "}";
    return normalizeArgumentsList(args, openMark, closeMark);
}
/**
 * Create an Argument. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * arg("a", { braces: "[]" });
 * ```
 * will result in arguments `[a]`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function arg(args, special) {
    var _a, _b;
    if (typeof args === "string") {
        args = s(args);
    }
    if (!Array.isArray(args) && args.type === "argument") {
        return args;
    }
    let openMark = (_a = special === null || special === void 0 ? void 0 : special.openMark) !== null && _a !== void 0 ? _a : "{";
    let closeMark = (_b = special === null || special === void 0 ? void 0 : special.closeMark) !== null && _b !== void 0 ? _b : "}";
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces[0]) {
            openMark = braces[0].openMark;
            closeMark = braces[0].closeMark;
        }
    }
    if (!Array.isArray(args)) {
        args = [args];
    }
    return { type: "argument", content: args, openMark, closeMark };
}
/**
 * Create a Macro with the given `name`. The macro
 * may be followed by any number of arguments.
 */
function m(name, marcoArgs, special) {
    const args = normalizeArgumentsList(marcoArgs);
    const escapeToken = special === null || special === void 0 ? void 0 : special.escapeToken;
    const ret = { type: "macro", content: name };
    if (args.length > 0) {
        ret.args = args;
    }
    if (escapeToken != null) {
        ret.escapeToken = escapeToken;
    }
    return ret;
}
/**
 * Create a String node from `value`
 */
function s(value) {
    if (typeof value === "string") {
        return { type: "string", content: value };
    }
    return value;
}
/**
 * Create an Environment node.
 */
function env(name, body, envArgs, special) {
    if (!Array.isArray(body)) {
        body = [body];
    }
    const args = normalizeArgumentsList(envArgs, "[", "]");
    const ret = {
        type: "environment",
        env: name,
        content: body.map(normalizeNode),
    };
    if (args.length > 0) {
        ret.args = args;
    }
    return ret;
}
/**
 * Whitespace node.
 */
const SP = { type: "whitespace" };


/***/ }),

/***/ "./unified-latex-ctan/package/cleveref/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/cleveref/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/cleveref/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/cleveref/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/cleveref/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    cref: { signature: "s m" },
    Cref: { signature: "s m" },
    crefrange: { signature: "s m m" },
    Crefrange: { signature: "s m m" },
    cpageref: { signature: "s m" },
    Cpageref: { signature: "s m" },
    ref: { signature: "m" },
    pageref: { signature: "m" },
    namecref: { signature: "m" },
    nameCref: { signature: "m" },
    lcnamecref: { signature: "m" },
    namecrefs: { signature: "m" },
    nameCrefs: { signature: "m" },
    lcnamecrefs: { signature: "m" },
    labelcref: { signature: "m" },
    labelcpageref: { signature: "m" },
    crefalias: { signature: "m m" },
    crefname: { signature: "m m m" },
    // XXX there are many more obscure commands to add here
    // https://ctan.org/pkg/cleveref
    crefdefaultlabelformat: { signature: "m" },
    crefrangeconjunction: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/exam/index.ts":
/*!**************************************************!*\
  !*** ./unified-latex-ctan/package/exam/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/exam/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/exam/provides.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/exam/provides.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
/* harmony import */ var _utils_enumerate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/enumerate */ "./unified-latex-ctan/utils/enumerate.ts");

const macros = {
    answerline: { signature: "o" },
    fillin: { signature: "o o" },
    fullwidth: { signature: "m" },
    fillwidthlines: { signature: "m" },
    fillwidthdottedlines: { signature: "m" },
    fillwidthgrid: { signature: "m" },
    makeemptybox: { signature: "m" },
    CorrectChoiceEmphasis: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    SolutionEmphasis: { signature: "m", renderInfo: { breakAround: true } },
    uplevel: { signature: "m", renderInfo: { breakAround: true } },
    checkboxchar: { signature: "m", renderInfo: { breakAround: true } },
    checkedchar: { signature: "m", renderInfo: { breakAround: true } },
    pointname: { signature: "m", renderInfo: { breakAround: true } },
    marginpointname: { signature: "m", renderInfo: { breakAround: true } },
    extrawidth: { signature: "m", renderInfo: { breakAround: true } },
    pointformat: { signature: "m", renderInfo: { breakAround: true } },
    bonuspointformat: { signature: "m", renderInfo: { breakAround: true } },
    totalformat: { signature: "m", renderInfo: { breakAround: true } },
    qformat: { signature: "m", renderInfo: { breakAround: true } },
    titledquestion: { signature: "m o", renderInfo: { breakAround: true } },
    pointpoints: { signature: "m m", renderInfo: { breakAround: true } },
    bonuspointpoints: { signature: "m m", renderInfo: { breakAround: true } },
};
const environments = {
    choices: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    checkboxes: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    oneparchoices: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    oneparcheckboxes: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "choice"),
    },
    parts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "part"),
    },
    subparts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "subpart"),
    },
    subsubparts: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "subsubpart"),
    },
    questions: {
        signature: "o",
        processContent: (nodes) => (0,_utils_enumerate__WEBPACK_IMPORTED_MODULE_0__.cleanEnumerateBody)(nodes, "question"),
    },
};


/***/ }),

/***/ "./unified-latex-ctan/package/geometry/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/geometry/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/geometry/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/geometry/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/geometry/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    geometry: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/hyperref/index.ts":
/*!******************************************************!*\
  !*** ./unified-latex-ctan/package/hyperref/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/hyperref/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/hyperref/provides.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/hyperref/provides.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    hypersetup: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    href: { signature: "o m m" },
    url: { signature: "m" },
    nolinkurl: { signature: "m" },
    hyperbaseurl: { signature: "m" },
    hyperimage: { signature: "m m" },
    hyperdef: { signature: "m m m" },
    hyperref: { signature: "o m" },
    hyperlink: { signature: "m m" },
    hypertarget: { signature: "m m" },
    autoref: { signature: "s m" },
    pageref: { signature: "s m" },
    autopageref: { signature: "s m" },
    pdfstringdef: { signature: "m m" },
    pdfbookmark: { signature: "o m m" },
    currentpdfbookmark: { signature: "m m" },
    subpdfbookmark: { signature: "m m" },
    belowpdfbookmark: { signature: "m m" },
    texorpdfstring: { signature: "m m" },
    thispdfpagelabel: { signature: "m" },
    hypercalcbp: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/latex2e/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/latex2e/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/latex2e/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/latex2e/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/latex2e/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/enumerate */ "./unified-latex-ctan/utils/enumerate.ts");


const macros = {
    // Special
    "\\": { signature: "!s o" },
    _: { signature: "m", escapeToken: "" },
    "^": { signature: "m", escapeToken: "" },
    // \newcommand arg signature from https://www.texdev.net/2020/08/19/the-good-the-bad-and-the-ugly-creating-document-commands
    // List can be found in latex2e.pdf "An unofficial reference manual"
    newcommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    renewcommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    providecommand: {
        signature: "s +m o +o +m",
        renderInfo: { breakAround: true },
    },
    // Counters
    newcounter: {
        signature: "m o",
        renderInfo: { breakAround: true },
    },
    usecounter: {
        signature: "m",
    },
    setcounter: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    addtocounter: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    stepcounter: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    refstepcounter: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    // Lengths
    newlength: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    addtolength: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settodepth: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settoheight: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    settowidth: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    // Spaces
    stretch: { signature: "m" },
    hspace: { signature: "s m" },
    vspace: { signature: "s m", renderInfo: { breakAround: true } },
    vfill: { renderInfo: { breakAround: true } },
    indent: { renderInfo: { breakAround: true } },
    phantom: { signature: "m" },
    vphantom: { signature: "m" },
    hphantom: { signature: "m" },
    noindent: { renderInfo: { breakAround: true } },
    smallskip: { renderInfo: { breakAround: true } },
    medskip: { renderInfo: { breakAround: true } },
    bigskip: { renderInfo: { breakAround: true } },
    smallbreak: { renderInfo: { breakAround: true } },
    medbreak: { renderInfo: { breakAround: true } },
    bigbreak: { renderInfo: { breakAround: true } },
    newline: { renderInfo: { breakAround: true } },
    linebreak: { signature: "o", renderInfo: { breakAround: true } },
    nolinebreak: { signature: "o", renderInfo: { breakAround: true } },
    clearpage: { renderInfo: { breakAround: true } },
    cleardoublepage: { renderInfo: { breakAround: true } },
    newpage: { renderInfo: { breakAround: true } },
    enlargethispage: { signature: "s", renderInfo: { breakAround: true } },
    pagebreak: { signature: "o", renderInfo: { breakAround: true } },
    nopagebreak: { signature: "o", renderInfo: { breakAround: true } },
    // Boxes
    newsavebox: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    sbox: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    savebox: {
        signature: "m o o m",
        renderInfo: { breakAround: true },
    },
    mbox: { signature: "m" },
    makebox: { signature: "d() o o m", renderInfo: { breakAround: true } },
    fbox: { signature: "m" },
    framebox: { signature: "o o m", renderInfo: { breakAround: true } },
    frame: { signature: "m", renderInfo: { breakAround: true } },
    parbox: { signature: "o o o m m", renderInfo: { breakAround: true } },
    raisebox: { signature: "m o o m" },
    marginpar: { signature: "o m", renderInfo: { breakAround: true } },
    colorbox: { signature: "o m m", renderInfo: { breakAround: true } },
    fcolorbox: { signature: "o m m", renderInfo: { breakAround: true } },
    rotatebox: { signature: "o m m" },
    scalebox: { signature: "m o m" },
    reflectbox: { signature: "m" },
    resizebox: { signature: "s m m m" },
    // Define environments
    newenvironment: {
        signature: "s m o o m m",
        renderInfo: { breakAround: true },
    },
    renewenvironment: {
        signature: "s m o o m m",
        renderInfo: { breakAround: true },
    },
    newtheorem: {
        signature: "s m o m o",
        renderInfo: { breakAround: true },
    },
    newfont: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    // Counters
    alph: { signature: "m" },
    Alph: { signature: "m" },
    arabic: { signature: "m" },
    roman: { signature: "m" },
    Roman: { signature: "m" },
    fnsymbol: { signature: "m" },
    // Other
    documentclass: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    usepackage: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    item: { signature: "o", renderInfo: { hangingIndent: true } },
    value: { signature: "m" },
    centering: { renderInfo: { breakAround: true } },
    input: { signature: "m", renderInfo: { breakAround: true } },
    include: { signature: "m", renderInfo: { breakAround: true } },
    includeonly: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    discretionary: { signature: "m m m" },
    hyphenation: { signature: "m m m" },
    footnote: { signature: "o m", renderInfo: { inParMode: true } },
    footnotemark: { signature: "o" },
    footnotetext: { signature: "o m", renderInfo: { inParMode: true } },
    // Math Commands
    sqrt: { signature: "o m", renderInfo: { inMathMode: true } },
    frac: { signature: "m m", renderInfo: { inMathMode: true } },
    stackrel: { signature: "m m" },
    ensuremath: { signature: "m", renderInfo: { inMathMode: true } },
    // Layout commands
    maketitle: { renderInfo: { breakAround: true } },
    doublespacing: { renderInfo: { breakAround: true } },
    singlespacing: { renderInfo: { breakAround: true } },
    author: { signature: "m", renderInfo: { breakAround: true } },
    date: { signature: "m", renderInfo: { breakAround: true } },
    thanks: { signature: "m", renderInfo: { breakAround: true } },
    title: { signature: "m", renderInfo: { breakAround: true } },
    pagenumbering: { signature: "m", renderInfo: { breakAround: true } },
    pagestyle: { signature: "m", renderInfo: { breakAround: true } },
    thispagestyle: { signature: "m", renderInfo: { breakAround: true } },
    // Colors
    definecolor: { signature: "m m m", renderInfo: { breakAround: true } },
    pagecolor: { signature: "o m", renderInfo: { breakAround: true } },
    nopagecolor: { renderInfo: { breakAround: true } },
    multicolumn: { signature: "m m m" },
    // Graphics
    includegraphics: {
        signature: "s o o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    rule: { signature: "o m m" },
    // Sectioning
    part: { signature: "s o m", renderInfo: { breakAround: true } },
    chapter: { signature: "s o m", renderInfo: { breakAround: true } },
    section: { signature: "s o m", renderInfo: { breakAround: true } },
    subsection: { signature: "s o m", renderInfo: { breakAround: true } },
    subsubsection: { signature: "s o m", renderInfo: { breakAround: true } },
    paragraph: { signature: "s o m", renderInfo: { breakAround: true } },
    subparagraph: { signature: "s o m", renderInfo: { breakAround: true } },
    appendix: { renderInfo: { breakAround: true } },
    frontmatter: { renderInfo: { breakAround: true } },
    mainmatter: { renderInfo: { breakAround: true } },
    backmatter: { renderInfo: { breakAround: true } },
    // Citing and references
    bibitem: { signature: "o m" },
    cite: { signature: "o m" },
    // Fonts
    textrm: { signature: "m", renderInfo: { inParMode: true } },
    textit: { signature: "m", renderInfo: { inParMode: true } },
    textmd: { signature: "m", renderInfo: { inParMode: true } },
    textbf: { signature: "m", renderInfo: { inParMode: true } },
    textup: { signature: "m", renderInfo: { inParMode: true } },
    textsl: { signature: "m", renderInfo: { inParMode: true } },
    textsf: { signature: "m", renderInfo: { inParMode: true } },
    textsc: { signature: "m", renderInfo: { inParMode: true } },
    texttt: { signature: "m", renderInfo: { inParMode: true } },
    emph: { signature: "m", renderInfo: { inParMode: true } },
    textnormal: { signature: "m", renderInfo: { inParMode: true } },
    uppercase: { signature: "m", renderInfo: { inParMode: true } },
    mathbf: { signature: "m" },
    mathsf: { signature: "m" },
    mathtt: { signature: "m" },
    mathit: { signature: "m" },
    mathnormal: { signature: "m" },
    mathcal: { signature: "m" },
    mathrm: { signature: "m" },
    // Other
    setlength: { signature: "m m", renderInfo: { breakAround: true } },
    ref: { signature: "s m" },
    label: { signature: "o m" },
    printbibliography: { renderInfo: { breakAround: true } },
    addtocontents: { signature: "m m", renderInfo: { breakAround: true } },
    addcontentsline: { signature: "m m m", renderInfo: { breakAround: true } },
    contentsline: { signature: "m m m", renderInfo: { breakAround: true } },
    bibliography: { signature: "m", renderInfo: { breakAround: true } },
    bibliographystyle: { signature: "m", renderInfo: { breakAround: true } },
    caption: { signature: "m", renderInfo: { breakAround: true } },
};
const environments = {
    document: {
        processContent: (nodes) => {
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trim)(nodes);
            return nodes;
        },
    },
    array: { signature: "o m", renderInfo: { alignContent: true } },
    description: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    enumerate: {
        signature: "o",
        processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody,
        renderInfo: { pgfkeysArgs: true },
    },
    itemize: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    trivlist: { signature: "o", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    list: { signature: "m m", processContent: _utils_enumerate__WEBPACK_IMPORTED_MODULE_1__.cleanEnumerateBody },
    figure: { signature: "o" },
    "figure*": { signature: "o" },
    filecontents: { signature: "o m" },
    "filecontents*": { signature: "o m" },
    minipage: { signature: "o o o m" },
    picture: { signature: "r() d()" },
    tabbing: { renderInfo: { alignContent: true } },
    table: { signature: "o" },
    tabular: { signature: "o m", renderInfo: { alignContent: true } },
    "tabular*": { signature: "m o m", renderInfo: { alignContent: true } },
    thebibliography: { signature: "m" },
    // Math
    math: { renderInfo: { inMathMode: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/makeidx/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/makeidx/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/makeidx/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/makeidx/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/makeidx/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    see: { signature: "m m" },
    seealso: { signature: "m m" },
    seename: { signature: "m" },
    alsoname: { signature: "m" },
    index: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/mathtools/index.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/mathtools/index.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/mathtools/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/mathtools/provides.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/mathtools/provides.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    mathtoolsset: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    mathllap: {
        signature: "o m",
    },
    mathrlap: {
        signature: "o m",
    },
    mathclap: {
        signature: "o m",
    },
    clap: {
        signature: "m",
    },
    mathmbox: {
        signature: "m",
    },
    mathmakebox: {
        signature: "o o m",
    },
    cramped: {
        signature: "o m",
    },
    crampedllap: {
        signature: "o m",
    },
    crampedrlap: {
        signature: "o m",
    },
    crampedclap: {
        signature: "o m",
    },
    crampedsubstack: {
        signature: "o m",
    },
    smashoperator: {
        signature: "o m",
    },
    newtagform: {
        signature: "m o m m",
    },
    renewtagform: {
        signature: "m o m m",
    },
    usetagform: {
        signature: "m",
    },
    xleftrightarrow: { signature: "o m" },
    xLeftarrow: { signature: "o m" },
    xhookleftarrow: { signature: "o m" },
    xmapsto: { signature: "o m" },
    xRightarrow: { signature: "o m" },
    xLeftrightarrow: { signature: "o m" },
    xhookrightarrow: { signature: "o m" },
    underbracket: { signature: "o o m" },
    overbracket: { signature: "o o m" },
    underbrace: { signature: "m" },
    overbrace: { signature: "m" },
    shoveleft: { signature: "o m" },
    shoveright: { signature: "o m" },
    ArrowBetweenLines: { signature: "s o" },
    vdotswithin: { signature: "m" },
    shortdotswithin: { signature: "s m" },
    DeclarePairedDelimiter: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclarePairedDelimiterX: {
        signature: "m o m m m",
        renderInfo: { breakAround: true },
    },
    DeclarePairedDelimiterXPP: {
        signature: "m o m m m m m",
        renderInfo: { breakAround: true },
    },
    prescript: { signature: "m m m" },
    DeclareMathSizes: { signature: "m m m m" },
    newgathered: { signature: "m m m m" },
    renewgathered: { signature: "m m m m" },
    splitfrac: { signature: "m m" },
    splitdfrac: { signature: "m m" },
    xmathstrut: { signature: "o m" },
    // amsthm
    newtheorem: { signature: "s m o m o", renderInfo: { breakAround: true } },
    theoremstyle: { signature: "m", renderInfo: { breakAround: true } },
    newtheoremstyle: {
        signature: "m m m m m m m m m",
        renderInfo: { breakAround: true },
    },
    // amsmath
    text: { signature: "m", renderInfo: { inMathMode: false } },
    // amsfonts
    mathbb: { signature: "m" },
    mathscr: { signature: "m" },
    mathfrak: { signature: "m" },
    frak: { signature: "m" },
    Bdd: { signature: "m" },
    bold: { signature: "m" },
    // amsopn
    operatorname: { signature: "s m" },
    DeclareMathOperator: {
        signature: "s m m",
        renderInfo: { breakAround: true },
    },
};
const environments = {
    crampedsubarray: {
        signature: "m",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    matrix: { renderInfo: { alignContent: true, inMathMode: true } },
    bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    pmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    smallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    psmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    Vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },
    "matrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "bmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "pmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "vmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Bmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Vmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "smallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "psmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "bsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "vsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Bsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    "Vsmallmatrix*": {
        signature: "o",
        renderInfo: { alignContent: true, inMathMode: true },
    },
    multilined: { signature: "o o", renderInfo: { inMathMode: true } },
    cases: { renderInfo: { alignContent: true, inMathMode: true } },
    "cases*": { renderInfo: { alignContent: true, inMathMode: true } },
    dcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "dcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    rcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "rcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    drcases: { renderInfo: { alignContent: true, inMathMode: true } },
    "drcases*": { renderInfo: { alignContent: true, inMathMode: true } },
    spreadlines: { signature: "m", renderInfo: { inMathMode: true } },
    lgathered: { signature: "o", renderInfo: { inMathMode: true } },
    rgathered: { signature: "o", renderInfo: { inMathMode: true } },
    // amsmath
    "align*": { renderInfo: { inMathMode: true, alignContent: true } },
    align: { renderInfo: { inMathMode: true, alignContent: true } },
    "alignat*": { renderInfo: { inMathMode: true, alignContent: true } },
    alignat: { renderInfo: { inMathMode: true, alignContent: true } },
    "equation*": { renderInfo: { inMathMode: true } },
    equation: { renderInfo: { inMathMode: true } },
    "gather*": { renderInfo: { inMathMode: true } },
    gather: { renderInfo: { inMathMode: true } },
    "multline*": { renderInfo: { inMathMode: true } },
    multline: { renderInfo: { inMathMode: true } },
    "flalign*": { renderInfo: { inMathMode: true, alignContent: true } },
    flalign: { renderInfo: { inMathMode: true, alignContent: true } },
    split: { renderInfo: { inMathMode: true } },
    // Math environments
    displaymath: { renderInfo: { inMathMode: true } },
    // Typical amsthm environments
    theorem: { signature: "o" },
    lemma: { signature: "o" },
    definition: { signature: "o" },
    proposition: { signature: "o" },
    corollary: { signature: "o" },
    remark: { signature: "!o" },
    example: { signature: "!o" },
};


/***/ }),

/***/ "./unified-latex-ctan/package/nicematrix/index.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/nicematrix/index.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/nicematrix/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/nicematrix/provides.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-ctan/package/nicematrix/provides.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    NiceMatrixOptions: {
        signature: "m",
        renderInfo: { pgfkeysArgs: true, breakAround: true },
    },
};
const environments = {
    NiceTabular: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceMatrixBlock: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceArrayWithDelims: {
        signature: "m m o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    pNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    bNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    BNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    vNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    VNiceArray: {
        signature: "o m !o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    NiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    pNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    bNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    BNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    vNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
    VNiceMatrix: {
        signature: "!o",
        renderInfo: { pgfkeysArgs: true, alignContent: true },
    },
};


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/index.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_parser__WEBPACK_IMPORTED_MODULE_1__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_2__.printRaw)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/systeme/provides.ts");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/parser */ "./unified-latex-ctan/package/systeme/libs/parser.ts");
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-ctan/package/systeme/libs/print-raw.ts");
/* harmony import */ var _libs_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/types */ "./unified-latex-ctan/package/systeme/libs/types.ts");






/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/parser.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/parser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs */ "./unified-latex-util-pegjs/index.ts");
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");



function createMatchers({ at = "@", equals = "=", equationSeparator = ",", mathOperations = ["+", "-"], whitelistedVariables, } = {}) {
    let isVar = (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && !!node.content.match(/[a-zA-Z]/);
    if (whitelistedVariables) {
        // Unwrap all strings
        whitelistedVariables = whitelistedVariables.map((v) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(v) ? v.content : v);
        const macros = whitelistedVariables.filter((v) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyMacro(v));
        const strings = whitelistedVariables.filter((v) => typeof v === "string");
        const macroHash = Object.fromEntries(macros.map((v) => [v.content, v]));
        const stringHash = Object.fromEntries(strings.map((s) => [s, s]));
        const macroMatcher = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macroHash);
        isVar = (node) => macroMatcher(node) ||
            (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node) && !!stringHash[node.content]);
    }
    return {
        isSep: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, equationSeparator),
        isVar,
        isOperation: (node) => mathOperations.some((op) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, op)),
        isEquals: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, equals),
        isAt: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, at),
        isSubscript: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node, "_") && node.escapeToken === "",
        isWhitespace: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace,
        isSameLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && node.sameline,
        isOwnLineComment: (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && !node.sameline,
    };
}
/**
 * Parse the contents of the `\systeme{...}` macro
 */
function parse(ast, options) {
    if (!Array.isArray(ast)) {
        throw new Error("You must pass an array of nodes");
    }
    // We need to at functions to `nodes` so that it imitates
    // a Javascript string. Because we're mutating, make a copy first
    ast = (0,_unified_latex_util_pegjs__WEBPACK_IMPORTED_MODULE_1__.decorateArrayForPegjs)([...ast]);
    // matchers are passed in via the second argument (the `options` argument)
    // so they are available from within the Pegjs grammar.
    return _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.SystemePegParser.parse(ast, createMatchers(options || {}));
}


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/print-raw.ts":
/*!**************************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/print-raw.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Print an `systeme` argument specification AST to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    switch (node.type) {
        case "annotation":
            return `${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.marker)}${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}`;
        case "item":
            return `${node.op ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.op) : ""}${(0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.content)}`;
        case "equation":
            const left = node.left.map((n) => printRaw(n)).join("");
            const right = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.right);
            const equals = node.equals ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.equals) : "";
            return `${left}${equals}${right}`;
        case "line":
            const equation = node.equation ? printRaw(node.equation) : "";
            const annotation = node.annotation ? printRaw(node.annotation) : "";
            const sep = node.sep ? (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.sep) : "";
            const body = `${equation}${annotation}${sep}`;
            if (node.trailingComment) {
                return (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)([body, node.trailingComment]);
            }
            return body;
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}


/***/ }),

/***/ "./unified-latex-ctan/package/systeme/libs/types.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/libs/types.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-ctan/package/systeme/provides.ts":
/*!********************************************************!*\
  !*** ./unified-latex-ctan/package/systeme/provides.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    systeme: {
        signature: "s o o m",
        renderInfo: { inMathMode: true },
    },
    sysdelim: {
        signature: "m m",
    },
    syseqsep: { signature: "m" },
    sysalign: { signature: "m" },
    syssignspace: { signature: "m" },
    syseqspace: { signature: "m" },
    syslineskipcoeff: { signature: "m" },
    syseqivsign: { signature: "m" },
    sysaddeqsign: { signature: "m" },
    sysremoveeqsign: { signature: "m" },
    sysextracolonsign: { signature: "m" },
    syscodeextracol: { signature: "m" },
    sysautonum: { signature: "m" },
    syssubstitute: { signature: "m" },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/package/tikz/index.ts":
/*!**************************************************!*\
  !*** ./unified-latex-ctan/package/tikz/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/tikz/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/tikz/provides.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-ctan/package/tikz/provides.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    pgfkeys: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    tikzoption: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    tikzstyle: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    usetikzlibrary: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    pgfplotsset: {
        signature: "m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
    pgfplotstabletypeset: {
        signature: "o m",
        renderInfo: { breakAround: true, pgfkeysArgs: true },
    },
};
const environments = {
    tikzpicture: { signature: "o", renderInfo: { pgfkeysArgs: true } },
    axis: { signature: "o", renderInfo: { pgfkeysArgs: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/index.ts":
/*!****************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DVI_PS_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.DVI_PS_NAMES),
/* harmony export */   "PREDEFINED_XCOLOR_COLORS": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.PREDEFINED_XCOLOR_COLORS),
/* harmony export */   "SVG_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.SVG_NAMES),
/* harmony export */   "X11_NAMES": () => (/* reexport safe */ _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__.X11_NAMES),
/* harmony export */   "XColorCoreModelToColor": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.XColorCoreModelToColor),
/* harmony export */   "colorToTextcolorMacro": () => (/* reexport safe */ _libs_color_to_textcolor_macro__WEBPACK_IMPORTED_MODULE_7__.colorToTextcolorMacro),
/* harmony export */   "computeColor": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.computeColor),
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_parser__WEBPACK_IMPORTED_MODULE_3__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_4__.printRaw),
/* harmony export */   "xcolorColorToHex": () => (/* reexport safe */ _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__.xcolorColorToHex),
/* harmony export */   "xcolorMacroToHex": () => (/* reexport safe */ _libs_xcolor_macro_to_hex__WEBPACK_IMPORTED_MODULE_6__.xcolorMacroToHex)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/xcolor/provides.ts");
/* harmony import */ var _libs_xcolor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/xcolor */ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts");
/* harmony import */ var _libs_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/types */ "./unified-latex-ctan/package/xcolor/libs/types.ts");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/parser */ "./unified-latex-ctan/package/xcolor/libs/parser.ts");
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-ctan/package/xcolor/libs/print-raw.ts");
/* harmony import */ var _libs_predefined_colors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./libs/predefined-colors */ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts");
/* harmony import */ var _libs_xcolor_macro_to_hex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./libs/xcolor-macro-to-hex */ "./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts");
/* harmony import */ var _libs_color_to_textcolor_macro__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./libs/color-to-textcolor-macro */ "./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts");










/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts":
/*!****************************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/color-to-textcolor-macro.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "colorToTextcolorMacro": () => (/* binding */ colorToTextcolorMacro)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-builder */ "./unified-latex-builder/index.ts");

/**
 * Create a `\textcolor` macro. Color arguments are taken from `origMacro`.
 */
function colorToTextcolorMacro(content, origMacro) {
    if (!Array.isArray(content)) {
        content = [content];
    }
    // Signature of \color is "o m".
    // We want to carry through the same arguments
    const args = (origMacro.args
        ? origMacro.args
        : [(0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)([], { closeMark: "", openMark: "" }), (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)([])]).concat((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(content));
    return {
        type: "macro",
        content: "textcolor",
        args,
        _renderInfo: { inParMode: true },
    };
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/parser.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/parser.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");

const parseCache = {};
/**
 * Parse an `xparse` argument specification string to an AST.
 * This function caches results. Don't mutate the returned AST!
 *
 * @param {string} [str=""] - LaTeX string input
 * @returns - AST for LaTeX string
 */
function parse(str = "") {
    parseCache[str] = parseCache[str] || _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.XColorPegParser.parse(str);
    return parseCache[str];
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DVI_PS_NAMES": () => (/* binding */ DVI_PS_NAMES),
/* harmony export */   "SVG_NAMES": () => (/* binding */ SVG_NAMES),
/* harmony export */   "X11_NAMES": () => (/* binding */ X11_NAMES)
/* harmony export */ });
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! color */ "../../node_modules/color/index.js");
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_0__);

const fromRgb = ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_0___default()([r * 255, g * 255, b * 255], "rgb");
const DVI_PS_NAMES = {
    Apricot: color__WEBPACK_IMPORTED_MODULE_0___default()("#FBB982"),
    Aquamarine: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B5BE"),
    Bittersweet: color__WEBPACK_IMPORTED_MODULE_0___default()("#C04F17"),
    Black: color__WEBPACK_IMPORTED_MODULE_0___default()("#221E1F"),
    Blue: color__WEBPACK_IMPORTED_MODULE_0___default()("#2D2F92"),
    BlueGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B3B8"),
    BlueViolet: color__WEBPACK_IMPORTED_MODULE_0___default()("#473992"),
    BrickRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#B6321C"),
    Brown: color__WEBPACK_IMPORTED_MODULE_0___default()("#792500"),
    BurntOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F7921D"),
    CadetBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#74729A"),
    CarnationPink: color__WEBPACK_IMPORTED_MODULE_0___default()("#F282B4"),
    Cerulean: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A2E3"),
    CornflowerBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#41B0E4"),
    Cyan: color__WEBPACK_IMPORTED_MODULE_0___default()("#00AEEF"),
    Dandelion: color__WEBPACK_IMPORTED_MODULE_0___default()("#FDBC42"),
    DarkOrchid: color__WEBPACK_IMPORTED_MODULE_0___default()("#A4538A"),
    Emerald: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A99D"),
    ForestGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#009B55"),
    Fuchsia: color__WEBPACK_IMPORTED_MODULE_0___default()("#8C368C"),
    Goldenrod: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFDF42"),
    Gray: color__WEBPACK_IMPORTED_MODULE_0___default()("#949698"),
    Green: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A64F"),
    GreenYellow: color__WEBPACK_IMPORTED_MODULE_0___default()("#DFE674"),
    JungleGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#00A99A"),
    Lavender: color__WEBPACK_IMPORTED_MODULE_0___default()("#F49EC4"),
    LimeGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#8DC73E"),
    Magenta: color__WEBPACK_IMPORTED_MODULE_0___default()("#EC008C"),
    Mahogany: color__WEBPACK_IMPORTED_MODULE_0___default()("#A9341F"),
    Maroon: color__WEBPACK_IMPORTED_MODULE_0___default()("#AF3235"),
    Melon: color__WEBPACK_IMPORTED_MODULE_0___default()("#F89E7B"),
    MidnightBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#006795"),
    Mulberry: color__WEBPACK_IMPORTED_MODULE_0___default()("#A93C93"),
    NavyBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#006EB8"),
    OliveGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#3C8031"),
    Orange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F58137"),
    OrangeRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED135A"),
    Orchid: color__WEBPACK_IMPORTED_MODULE_0___default()("#AF72B0"),
    Peach: color__WEBPACK_IMPORTED_MODULE_0___default()("#F7965A"),
    Periwinkle: color__WEBPACK_IMPORTED_MODULE_0___default()("#7977B8"),
    PineGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#008B72"),
    Plum: color__WEBPACK_IMPORTED_MODULE_0___default()("#92268F"),
    ProcessBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B0F0"),
    Purple: color__WEBPACK_IMPORTED_MODULE_0___default()("#99479B"),
    RawSienna: color__WEBPACK_IMPORTED_MODULE_0___default()("#974006"),
    Red: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED1B23"),
    RedOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#F26035"),
    RedViolet: color__WEBPACK_IMPORTED_MODULE_0___default()("#A1246B"),
    Rhodamine: color__WEBPACK_IMPORTED_MODULE_0___default()("#EF559F"),
    RoyalBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#0071BC"),
    RoyalPurple: color__WEBPACK_IMPORTED_MODULE_0___default()("#613F99"),
    RubineRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#ED017D"),
    Salmon: color__WEBPACK_IMPORTED_MODULE_0___default()("#F69289"),
    SeaGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#3FBC9D"),
    Sepia: color__WEBPACK_IMPORTED_MODULE_0___default()("#671800"),
    SkyBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#46C5DD"),
    SpringGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#C6DC67"),
    Tan: color__WEBPACK_IMPORTED_MODULE_0___default()("#DA9D76"),
    TealBlue: color__WEBPACK_IMPORTED_MODULE_0___default()("#00AEB3"),
    Thistle: color__WEBPACK_IMPORTED_MODULE_0___default()("#D883B7"),
    Turquoise: color__WEBPACK_IMPORTED_MODULE_0___default()("#00B4CE"),
    Violet: color__WEBPACK_IMPORTED_MODULE_0___default()("#58429B"),
    VioletRed: color__WEBPACK_IMPORTED_MODULE_0___default()("#EF58A0"),
    White: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFFFFF"),
    WildStrawberry: color__WEBPACK_IMPORTED_MODULE_0___default()("#EE2967"),
    Yellow: color__WEBPACK_IMPORTED_MODULE_0___default()("#FFF200"),
    YellowGreen: color__WEBPACK_IMPORTED_MODULE_0___default()("#98CC70"),
    YellowOrange: color__WEBPACK_IMPORTED_MODULE_0___default()("#FAA21A"),
};
const SVG_NAMES = {
    AliceBlue: fromRgb([0.94, 0.972, 1]),
    AntiqueWhite: fromRgb([0.98, 0.92, 0.844]),
    Aqua: fromRgb([0, 1, 1]),
    Aquamarine: fromRgb([0.498, 1, 0.83]),
    Azure: fromRgb([0.94, 1, 1]),
    Beige: fromRgb([0.96, 0.96, 0.864]),
    Bisque: fromRgb([1, 0.894, 0.77]),
    Black: fromRgb([0, 0, 0]),
    BlanchedAlmond: fromRgb([1, 0.92, 0.804]),
    Blue: fromRgb([0, 0, 1]),
    BlueViolet: fromRgb([0.54, 0.17, 0.888]),
    Brown: fromRgb([0.648, 0.165, 0.165]),
    BurlyWood: fromRgb([0.87, 0.72, 0.53]),
    CadetBlue: fromRgb([0.372, 0.62, 0.628]),
    Chartreuse: fromRgb([0.498, 1, 0]),
    Chocolate: fromRgb([0.824, 0.41, 0.116]),
    Coral: fromRgb([1, 0.498, 0.312]),
    CornflowerBlue: fromRgb([0.392, 0.585, 0.93]),
    Cornsilk: fromRgb([1, 0.972, 0.864]),
    Crimson: fromRgb([0.864, 0.08, 0.235]),
    Cyan: fromRgb([0, 1, 1]),
    DarkBlue: fromRgb([0, 0, 0.545]),
    DarkCyan: fromRgb([0, 0.545, 0.545]),
    DarkGoldenrod: fromRgb([0.72, 0.525, 0.044]),
    DarkGray: fromRgb([0.664, 0.664, 0.664]),
    DarkGreen: fromRgb([0, 0.392, 0]),
    DarkGrey: fromRgb([0.664, 0.664, 0.664]),
    DarkKhaki: fromRgb([0.74, 0.716, 0.42]),
    DarkMagenta: fromRgb([0.545, 0, 0.545]),
    DarkOliveGreen: fromRgb([0.332, 0.42, 0.185]),
    DarkOrange: fromRgb([1, 0.55, 0]),
    DarkOrchid: fromRgb([0.6, 0.196, 0.8]),
    DarkRed: fromRgb([0.545, 0, 0]),
    DarkSalmon: fromRgb([0.912, 0.59, 0.48]),
    DarkSeaGreen: fromRgb([0.56, 0.736, 0.56]),
    DarkSlateBlue: fromRgb([0.284, 0.24, 0.545]),
    DarkSlateGray: fromRgb([0.185, 0.31, 0.31]),
    DarkSlateGrey: fromRgb([0.185, 0.31, 0.31]),
    DarkTurquoise: fromRgb([0, 0.808, 0.82]),
    DarkViolet: fromRgb([0.58, 0, 0.828]),
    DeepPink: fromRgb([1, 0.08, 0.576]),
    DeepSkyBlue: fromRgb([0, 0.75, 1]),
    DimGray: fromRgb([0.41, 0.41, 0.41]),
    DimGrey: fromRgb([0.41, 0.41, 0.41]),
    DodgerBlue: fromRgb([0.116, 0.565, 1]),
    FireBrick: fromRgb([0.698, 0.132, 0.132]),
    FloralWhite: fromRgb([1, 0.98, 0.94]),
    ForestGreen: fromRgb([0.132, 0.545, 0.132]),
    Fuchsia: fromRgb([1, 0, 1]),
    Gainsboro: fromRgb([0.864, 0.864, 0.864]),
    GhostWhite: fromRgb([0.972, 0.972, 1]),
    Gold: fromRgb([1, 0.844, 0]),
    Goldenrod: fromRgb([0.855, 0.648, 0.125]),
    Gray: fromRgb([0.5, 0.5, 0.5]),
    Green: fromRgb([0, 0.5, 0]),
    GreenYellow: fromRgb([0.68, 1, 0.185]),
    Grey: fromRgb([0.5, 0.5, 0.5]),
    Honeydew: fromRgb([0.94, 1, 0.94]),
    HotPink: fromRgb([1, 0.41, 0.705]),
    IndianRed: fromRgb([0.804, 0.36, 0.36]),
    Indigo: fromRgb([0.294, 0, 0.51]),
    Ivory: fromRgb([1, 1, 0.94]),
    Khaki: fromRgb([0.94, 0.9, 0.55]),
    Lavender: fromRgb([0.9, 0.9, 0.98]),
    LavenderBlush: fromRgb([1, 0.94, 0.96]),
    LawnGreen: fromRgb([0.488, 0.99, 0]),
    LemonChiffon: fromRgb([1, 0.98, 0.804]),
    LightBlue: fromRgb([0.68, 0.848, 0.9]),
    LightCoral: fromRgb([0.94, 0.5, 0.5]),
    LightCyan: fromRgb([0.88, 1, 1]),
    LightGoldenrod: fromRgb([0.933, 0.867, 0.51]),
    LightGoldenrodYellow: fromRgb([0.98, 0.98, 0.824]),
    LightGray: fromRgb([0.828, 0.828, 0.828]),
    LightGreen: fromRgb([0.565, 0.932, 0.565]),
    LightGrey: fromRgb([0.828, 0.828, 0.828]),
    LightPink: fromRgb([1, 0.712, 0.756]),
    LightSalmon: fromRgb([1, 0.628, 0.48]),
    LightSeaGreen: fromRgb([0.125, 0.698, 0.668]),
    LightSkyBlue: fromRgb([0.53, 0.808, 0.98]),
    LightSlateBlue: fromRgb([0.518, 0.44, 1]),
    LightSlateGray: fromRgb([0.468, 0.532, 0.6]),
    LightSlateGrey: fromRgb([0.468, 0.532, 0.6]),
    LightSteelBlue: fromRgb([0.69, 0.77, 0.87]),
    LightYellow: fromRgb([1, 1, 0.88]),
    Lime: fromRgb([0, 1, 0]),
    LimeGreen: fromRgb([0.196, 0.804, 0.196]),
    Linen: fromRgb([0.98, 0.94, 0.9]),
    Magenta: fromRgb([1, 0, 1]),
    Maroon: fromRgb([0.5, 0, 0]),
    MediumAquamarine: fromRgb([0.4, 0.804, 0.668]),
    MediumBlue: fromRgb([0, 0, 0.804]),
    MediumOrchid: fromRgb([0.73, 0.332, 0.828]),
    MediumPurple: fromRgb([0.576, 0.44, 0.86]),
    MediumSeaGreen: fromRgb([0.235, 0.7, 0.444]),
    MediumSlateBlue: fromRgb([0.484, 0.408, 0.932]),
    MediumSpringGreen: fromRgb([0, 0.98, 0.604]),
    MediumTurquoise: fromRgb([0.284, 0.82, 0.8]),
    MediumVioletRed: fromRgb([0.78, 0.084, 0.52]),
    MidnightBlue: fromRgb([0.098, 0.098, 0.44]),
    MintCream: fromRgb([0.96, 1, 0.98]),
    MistyRose: fromRgb([1, 0.894, 0.884]),
    Moccasin: fromRgb([1, 0.894, 0.71]),
    NavajoWhite: fromRgb([1, 0.87, 0.68]),
    Navy: fromRgb([0, 0, 0.5]),
    NavyBlue: fromRgb([0, 0, 0.5]),
    OldLace: fromRgb([0.992, 0.96, 0.9]),
    Olive: fromRgb([0.5, 0.5, 0]),
    OliveDrab: fromRgb([0.42, 0.556, 0.136]),
    Orange: fromRgb([1, 0.648, 0]),
    OrangeRed: fromRgb([1, 0.27, 0]),
    Orchid: fromRgb([0.855, 0.44, 0.84]),
    PaleGoldenrod: fromRgb([0.932, 0.91, 0.668]),
    PaleGreen: fromRgb([0.596, 0.985, 0.596]),
    PaleTurquoise: fromRgb([0.688, 0.932, 0.932]),
    PaleVioletRed: fromRgb([0.86, 0.44, 0.576]),
    PapayaWhip: fromRgb([1, 0.936, 0.835]),
    PeachPuff: fromRgb([1, 0.855, 0.725]),
    Peru: fromRgb([0.804, 0.52, 0.248]),
    Pink: fromRgb([1, 0.752, 0.796]),
    Plum: fromRgb([0.868, 0.628, 0.868]),
    PowderBlue: fromRgb([0.69, 0.88, 0.9]),
    Purple: fromRgb([0.5, 0, 0.5]),
    Red: fromRgb([1, 0, 0]),
    RosyBrown: fromRgb([0.736, 0.56, 0.56]),
    RoyalBlue: fromRgb([0.255, 0.41, 0.884]),
    SaddleBrown: fromRgb([0.545, 0.27, 0.075]),
    Salmon: fromRgb([0.98, 0.5, 0.448]),
    SandyBrown: fromRgb([0.956, 0.644, 0.376]),
    SeaGreen: fromRgb([0.18, 0.545, 0.34]),
    Seashell: fromRgb([1, 0.96, 0.932]),
    Sienna: fromRgb([0.628, 0.32, 0.176]),
    Silver: fromRgb([0.752, 0.752, 0.752]),
    SkyBlue: fromRgb([0.53, 0.808, 0.92]),
    SlateBlue: fromRgb([0.415, 0.352, 0.804]),
    SlateGray: fromRgb([0.44, 0.5, 0.565]),
    SlateGrey: fromRgb([0.44, 0.5, 0.565]),
    Snow: fromRgb([1, 0.98, 0.98]),
    SpringGreen: fromRgb([0, 1, 0.498]),
    SteelBlue: fromRgb([0.275, 0.51, 0.705]),
    Tan: fromRgb([0.824, 0.705, 0.55]),
    Teal: fromRgb([0, 0.5, 0.5]),
    Thistle: fromRgb([0.848, 0.75, 0.848]),
    Tomato: fromRgb([1, 0.39, 0.28]),
    Turquoise: fromRgb([0.25, 0.88, 0.815]),
    Violet: fromRgb([0.932, 0.51, 0.932]),
    VioletRed: fromRgb([0.816, 0.125, 0.565]),
    Wheat: fromRgb([0.96, 0.87, 0.7]),
    White: fromRgb([1, 1, 1]),
    WhiteSmoke: fromRgb([0.96, 0.96, 0.96]),
    Yellow: fromRgb([1, 1, 0]),
    YellowGreen: fromRgb([0.604, 0.804, 0.196]),
};
const X11_NAMES = {
    AntiqueWhite1: fromRgb([1, 0.936, 0.86]),
    AntiqueWhite2: fromRgb([0.932, 0.875, 0.8]),
    AntiqueWhite3: fromRgb([0.804, 0.752, 0.69]),
    AntiqueWhite4: fromRgb([0.545, 0.512, 0.47]),
    Aquamarine1: fromRgb([0.498, 1, 0.83]),
    Aquamarine2: fromRgb([0.464, 0.932, 0.776]),
    Aquamarine3: fromRgb([0.4, 0.804, 0.668]),
    Aquamarine4: fromRgb([0.27, 0.545, 0.455]),
    Azure1: fromRgb([0.94, 1, 1]),
    Azure2: fromRgb([0.88, 0.932, 0.932]),
    Azure3: fromRgb([0.756, 0.804, 0.804]),
    Azure4: fromRgb([0.512, 0.545, 0.545]),
    Bisque1: fromRgb([1, 0.894, 0.77]),
    Bisque2: fromRgb([0.932, 0.835, 0.716]),
    Bisque3: fromRgb([0.804, 0.716, 0.62]),
    Bisque4: fromRgb([0.545, 0.49, 0.42]),
    Blue1: fromRgb([0, 0, 1]),
    Blue2: fromRgb([0, 0, 0.932]),
    Blue3: fromRgb([0, 0, 0.804]),
    Blue4: fromRgb([0, 0, 0.545]),
    Brown1: fromRgb([1, 0.25, 0.25]),
    Brown2: fromRgb([0.932, 0.23, 0.23]),
    Brown3: fromRgb([0.804, 0.2, 0.2]),
    Brown4: fromRgb([0.545, 0.136, 0.136]),
    Burlywood1: fromRgb([1, 0.828, 0.608]),
    Burlywood2: fromRgb([0.932, 0.772, 0.57]),
    Burlywood3: fromRgb([0.804, 0.668, 0.49]),
    Burlywood4: fromRgb([0.545, 0.45, 0.332]),
    CadetBlue1: fromRgb([0.596, 0.96, 1]),
    CadetBlue2: fromRgb([0.556, 0.898, 0.932]),
    CadetBlue3: fromRgb([0.48, 0.772, 0.804]),
    CadetBlue4: fromRgb([0.325, 0.525, 0.545]),
    Chartreuse1: fromRgb([0.498, 1, 0]),
    Chartreuse2: fromRgb([0.464, 0.932, 0]),
    Chartreuse3: fromRgb([0.4, 0.804, 0]),
    Chartreuse4: fromRgb([0.27, 0.545, 0]),
    Chocolate1: fromRgb([1, 0.498, 0.14]),
    Chocolate2: fromRgb([0.932, 0.464, 0.13]),
    Chocolate3: fromRgb([0.804, 0.4, 0.112]),
    Chocolate4: fromRgb([0.545, 0.27, 0.075]),
    Coral1: fromRgb([1, 0.448, 0.336]),
    Coral2: fromRgb([0.932, 0.415, 0.312]),
    Coral3: fromRgb([0.804, 0.356, 0.27]),
    Coral4: fromRgb([0.545, 0.244, 0.185]),
    Cornsilk1: fromRgb([1, 0.972, 0.864]),
    Cornsilk2: fromRgb([0.932, 0.91, 0.804]),
    Cornsilk3: fromRgb([0.804, 0.785, 0.694]),
    Cornsilk4: fromRgb([0.545, 0.532, 0.47]),
    Cyan1: fromRgb([0, 1, 1]),
    Cyan2: fromRgb([0, 0.932, 0.932]),
    Cyan3: fromRgb([0, 0.804, 0.804]),
    Cyan4: fromRgb([0, 0.545, 0.545]),
    DarkGoldenrod1: fromRgb([1, 0.725, 0.06]),
    DarkGoldenrod2: fromRgb([0.932, 0.68, 0.055]),
    DarkGoldenrod3: fromRgb([0.804, 0.585, 0.048]),
    DarkGoldenrod4: fromRgb([0.545, 0.396, 0.03]),
    DarkOliveGreen1: fromRgb([0.792, 1, 0.44]),
    DarkOliveGreen2: fromRgb([0.736, 0.932, 0.408]),
    DarkOliveGreen3: fromRgb([0.635, 0.804, 0.352]),
    DarkOliveGreen4: fromRgb([0.43, 0.545, 0.24]),
    DarkOrange1: fromRgb([1, 0.498, 0]),
    DarkOrange2: fromRgb([0.932, 0.464, 0]),
    DarkOrange3: fromRgb([0.804, 0.4, 0]),
    DarkOrange4: fromRgb([0.545, 0.27, 0]),
    DarkOrchid1: fromRgb([0.75, 0.244, 1]),
    DarkOrchid2: fromRgb([0.698, 0.228, 0.932]),
    DarkOrchid3: fromRgb([0.604, 0.196, 0.804]),
    DarkOrchid4: fromRgb([0.408, 0.132, 0.545]),
    DarkSeaGreen1: fromRgb([0.756, 1, 0.756]),
    DarkSeaGreen2: fromRgb([0.705, 0.932, 0.705]),
    DarkSeaGreen3: fromRgb([0.608, 0.804, 0.608]),
    DarkSeaGreen4: fromRgb([0.41, 0.545, 0.41]),
    DarkSlateGray1: fromRgb([0.592, 1, 1]),
    DarkSlateGray2: fromRgb([0.552, 0.932, 0.932]),
    DarkSlateGray3: fromRgb([0.475, 0.804, 0.804]),
    DarkSlateGray4: fromRgb([0.32, 0.545, 0.545]),
    DeepPink1: fromRgb([1, 0.08, 0.576]),
    DeepPink2: fromRgb([0.932, 0.07, 0.536]),
    DeepPink3: fromRgb([0.804, 0.064, 0.464]),
    DeepPink4: fromRgb([0.545, 0.04, 0.312]),
    DeepSkyBlue1: fromRgb([0, 0.75, 1]),
    DeepSkyBlue2: fromRgb([0, 0.698, 0.932]),
    DeepSkyBlue3: fromRgb([0, 0.604, 0.804]),
    DeepSkyBlue4: fromRgb([0, 0.408, 0.545]),
    DodgerBlue1: fromRgb([0.116, 0.565, 1]),
    DodgerBlue2: fromRgb([0.11, 0.525, 0.932]),
    DodgerBlue3: fromRgb([0.094, 0.455, 0.804]),
    DodgerBlue4: fromRgb([0.064, 0.305, 0.545]),
    Firebrick1: fromRgb([1, 0.19, 0.19]),
    Firebrick2: fromRgb([0.932, 0.172, 0.172]),
    Firebrick3: fromRgb([0.804, 0.15, 0.15]),
    Firebrick4: fromRgb([0.545, 0.1, 0.1]),
    Gold1: fromRgb([1, 0.844, 0]),
    Gold2: fromRgb([0.932, 0.79, 0]),
    Gold3: fromRgb([0.804, 0.68, 0]),
    Gold4: fromRgb([0.545, 0.46, 0]),
    Goldenrod1: fromRgb([1, 0.756, 0.145]),
    Goldenrod2: fromRgb([0.932, 0.705, 0.132]),
    Goldenrod3: fromRgb([0.804, 0.608, 0.112]),
    Goldenrod4: fromRgb([0.545, 0.41, 0.08]),
    Green1: fromRgb([0, 1, 0]),
    Green2: fromRgb([0, 0.932, 0]),
    Green3: fromRgb([0, 0.804, 0]),
    Green4: fromRgb([0, 0.545, 0]),
    Honeydew1: fromRgb([0.94, 1, 0.94]),
    Honeydew2: fromRgb([0.88, 0.932, 0.88]),
    Honeydew3: fromRgb([0.756, 0.804, 0.756]),
    Honeydew4: fromRgb([0.512, 0.545, 0.512]),
    HotPink1: fromRgb([1, 0.43, 0.705]),
    HotPink2: fromRgb([0.932, 0.415, 0.655]),
    HotPink3: fromRgb([0.804, 0.376, 0.565]),
    HotPink4: fromRgb([0.545, 0.228, 0.385]),
    IndianRed1: fromRgb([1, 0.415, 0.415]),
    IndianRed2: fromRgb([0.932, 0.39, 0.39]),
    IndianRed3: fromRgb([0.804, 0.332, 0.332]),
    IndianRed4: fromRgb([0.545, 0.228, 0.228]),
    Ivory1: fromRgb([1, 1, 0.94]),
    Ivory2: fromRgb([0.932, 0.932, 0.88]),
    Ivory3: fromRgb([0.804, 0.804, 0.756]),
    Ivory4: fromRgb([0.545, 0.545, 0.512]),
    Khaki1: fromRgb([1, 0.965, 0.56]),
    Khaki2: fromRgb([0.932, 0.9, 0.52]),
    Khaki3: fromRgb([0.804, 0.776, 0.45]),
    Khaki4: fromRgb([0.545, 0.525, 0.305]),
    LavenderBlush1: fromRgb([1, 0.94, 0.96]),
    LavenderBlush2: fromRgb([0.932, 0.88, 0.898]),
    LavenderBlush3: fromRgb([0.804, 0.756, 0.772]),
    LavenderBlush4: fromRgb([0.545, 0.512, 0.525]),
    LemonChiffon1: fromRgb([1, 0.98, 0.804]),
    LemonChiffon2: fromRgb([0.932, 0.912, 0.75]),
    LemonChiffon3: fromRgb([0.804, 0.79, 0.648]),
    LemonChiffon4: fromRgb([0.545, 0.536, 0.44]),
    LightBlue1: fromRgb([0.75, 0.936, 1]),
    LightBlue2: fromRgb([0.698, 0.875, 0.932]),
    LightBlue3: fromRgb([0.604, 0.752, 0.804]),
    LightBlue4: fromRgb([0.408, 0.512, 0.545]),
    LightCyan1: fromRgb([0.88, 1, 1]),
    LightCyan2: fromRgb([0.82, 0.932, 0.932]),
    LightCyan3: fromRgb([0.705, 0.804, 0.804]),
    LightCyan4: fromRgb([0.48, 0.545, 0.545]),
    LightGoldenrod1: fromRgb([1, 0.925, 0.545]),
    LightGoldenrod2: fromRgb([0.932, 0.864, 0.51]),
    LightGoldenrod3: fromRgb([0.804, 0.745, 0.44]),
    LightGoldenrod4: fromRgb([0.545, 0.505, 0.298]),
    LightPink1: fromRgb([1, 0.684, 0.725]),
    LightPink2: fromRgb([0.932, 0.635, 0.68]),
    LightPink3: fromRgb([0.804, 0.55, 0.585]),
    LightPink4: fromRgb([0.545, 0.372, 0.396]),
    LightSalmon1: fromRgb([1, 0.628, 0.48]),
    LightSalmon2: fromRgb([0.932, 0.585, 0.448]),
    LightSalmon3: fromRgb([0.804, 0.505, 0.385]),
    LightSalmon4: fromRgb([0.545, 0.34, 0.26]),
    LightSkyBlue1: fromRgb([0.69, 0.888, 1]),
    LightSkyBlue2: fromRgb([0.644, 0.828, 0.932]),
    LightSkyBlue3: fromRgb([0.552, 0.712, 0.804]),
    LightSkyBlue4: fromRgb([0.376, 0.484, 0.545]),
    LightSteelBlue1: fromRgb([0.792, 0.884, 1]),
    LightSteelBlue2: fromRgb([0.736, 0.824, 0.932]),
    LightSteelBlue3: fromRgb([0.635, 0.71, 0.804]),
    LightSteelBlue4: fromRgb([0.43, 0.484, 0.545]),
    LightYellow1: fromRgb([1, 1, 0.88]),
    LightYellow2: fromRgb([0.932, 0.932, 0.82]),
    LightYellow3: fromRgb([0.804, 0.804, 0.705]),
    LightYellow4: fromRgb([0.545, 0.545, 0.48]),
    Magenta1: fromRgb([1, 0, 1]),
    Magenta2: fromRgb([0.932, 0, 0.932]),
    Magenta3: fromRgb([0.804, 0, 0.804]),
    Magenta4: fromRgb([0.545, 0, 0.545]),
    Maroon1: fromRgb([1, 0.204, 0.7]),
    Maroon2: fromRgb([0.932, 0.19, 0.655]),
    Maroon3: fromRgb([0.804, 0.16, 0.565]),
    Maroon4: fromRgb([0.545, 0.11, 0.385]),
    MediumOrchid1: fromRgb([0.88, 0.4, 1]),
    MediumOrchid2: fromRgb([0.82, 0.372, 0.932]),
    MediumOrchid3: fromRgb([0.705, 0.32, 0.804]),
    MediumOrchid4: fromRgb([0.48, 0.215, 0.545]),
    MediumPurple1: fromRgb([0.67, 0.51, 1]),
    MediumPurple2: fromRgb([0.624, 0.475, 0.932]),
    MediumPurple3: fromRgb([0.536, 0.408, 0.804]),
    MediumPurple4: fromRgb([0.365, 0.28, 0.545]),
    MistyRose1: fromRgb([1, 0.894, 0.884]),
    MistyRose2: fromRgb([0.932, 0.835, 0.824]),
    MistyRose3: fromRgb([0.804, 0.716, 0.71]),
    MistyRose4: fromRgb([0.545, 0.49, 0.484]),
    NavajoWhite1: fromRgb([1, 0.87, 0.68]),
    NavajoWhite2: fromRgb([0.932, 0.81, 0.63]),
    NavajoWhite3: fromRgb([0.804, 0.7, 0.545]),
    NavajoWhite4: fromRgb([0.545, 0.475, 0.37]),
    OliveDrab1: fromRgb([0.752, 1, 0.244]),
    OliveDrab2: fromRgb([0.7, 0.932, 0.228]),
    OliveDrab3: fromRgb([0.604, 0.804, 0.196]),
    OliveDrab4: fromRgb([0.41, 0.545, 0.132]),
    Orange1: fromRgb([1, 0.648, 0]),
    Orange2: fromRgb([0.932, 0.604, 0]),
    Orange3: fromRgb([0.804, 0.52, 0]),
    Orange4: fromRgb([0.545, 0.352, 0]),
    OrangeRed1: fromRgb([1, 0.27, 0]),
    OrangeRed2: fromRgb([0.932, 0.25, 0]),
    OrangeRed3: fromRgb([0.804, 0.215, 0]),
    OrangeRed4: fromRgb([0.545, 0.145, 0]),
    Orchid1: fromRgb([1, 0.512, 0.98]),
    Orchid2: fromRgb([0.932, 0.48, 0.912]),
    Orchid3: fromRgb([0.804, 0.41, 0.79]),
    Orchid4: fromRgb([0.545, 0.28, 0.536]),
    PaleGreen1: fromRgb([0.604, 1, 0.604]),
    PaleGreen2: fromRgb([0.565, 0.932, 0.565]),
    PaleGreen3: fromRgb([0.488, 0.804, 0.488]),
    PaleGreen4: fromRgb([0.33, 0.545, 0.33]),
    PaleTurquoise1: fromRgb([0.732, 1, 1]),
    PaleTurquoise2: fromRgb([0.684, 0.932, 0.932]),
    PaleTurquoise3: fromRgb([0.59, 0.804, 0.804]),
    PaleTurquoise4: fromRgb([0.4, 0.545, 0.545]),
    PaleVioletRed1: fromRgb([1, 0.51, 0.67]),
    PaleVioletRed2: fromRgb([0.932, 0.475, 0.624]),
    PaleVioletRed3: fromRgb([0.804, 0.408, 0.536]),
    PaleVioletRed4: fromRgb([0.545, 0.28, 0.365]),
    PeachPuff1: fromRgb([1, 0.855, 0.725]),
    PeachPuff2: fromRgb([0.932, 0.796, 0.68]),
    PeachPuff3: fromRgb([0.804, 0.688, 0.585]),
    PeachPuff4: fromRgb([0.545, 0.468, 0.396]),
    Pink1: fromRgb([1, 0.71, 0.772]),
    Pink2: fromRgb([0.932, 0.664, 0.72]),
    Pink3: fromRgb([0.804, 0.57, 0.62]),
    Pink4: fromRgb([0.545, 0.39, 0.424]),
    Plum1: fromRgb([1, 0.732, 1]),
    Plum2: fromRgb([0.932, 0.684, 0.932]),
    Plum3: fromRgb([0.804, 0.59, 0.804]),
    Plum4: fromRgb([0.545, 0.4, 0.545]),
    Purple1: fromRgb([0.608, 0.19, 1]),
    Purple2: fromRgb([0.57, 0.172, 0.932]),
    Purple3: fromRgb([0.49, 0.15, 0.804]),
    Purple4: fromRgb([0.332, 0.1, 0.545]),
    Red1: fromRgb([1, 0, 0]),
    Red2: fromRgb([0.932, 0, 0]),
    Red3: fromRgb([0.804, 0, 0]),
    Red4: fromRgb([0.545, 0, 0]),
    RosyBrown1: fromRgb([1, 0.756, 0.756]),
    RosyBrown2: fromRgb([0.932, 0.705, 0.705]),
    RosyBrown3: fromRgb([0.804, 0.608, 0.608]),
    RosyBrown4: fromRgb([0.545, 0.41, 0.41]),
    RoyalBlue1: fromRgb([0.284, 0.464, 1]),
    RoyalBlue2: fromRgb([0.264, 0.43, 0.932]),
    RoyalBlue3: fromRgb([0.228, 0.372, 0.804]),
    RoyalBlue4: fromRgb([0.152, 0.25, 0.545]),
    Salmon1: fromRgb([1, 0.55, 0.41]),
    Salmon2: fromRgb([0.932, 0.51, 0.385]),
    Salmon3: fromRgb([0.804, 0.44, 0.33]),
    Salmon4: fromRgb([0.545, 0.298, 0.224]),
    SeaGreen1: fromRgb([0.33, 1, 0.624]),
    SeaGreen2: fromRgb([0.305, 0.932, 0.58]),
    SeaGreen3: fromRgb([0.264, 0.804, 0.5]),
    SeaGreen4: fromRgb([0.18, 0.545, 0.34]),
    Seashell1: fromRgb([1, 0.96, 0.932]),
    Seashell2: fromRgb([0.932, 0.898, 0.87]),
    Seashell3: fromRgb([0.804, 0.772, 0.75]),
    Seashell4: fromRgb([0.545, 0.525, 0.51]),
    Sienna1: fromRgb([1, 0.51, 0.28]),
    Sienna2: fromRgb([0.932, 0.475, 0.26]),
    Sienna3: fromRgb([0.804, 0.408, 0.224]),
    Sienna4: fromRgb([0.545, 0.28, 0.15]),
    SkyBlue1: fromRgb([0.53, 0.808, 1]),
    SkyBlue2: fromRgb([0.494, 0.752, 0.932]),
    SkyBlue3: fromRgb([0.424, 0.65, 0.804]),
    SkyBlue4: fromRgb([0.29, 0.44, 0.545]),
    SlateBlue1: fromRgb([0.512, 0.435, 1]),
    SlateBlue2: fromRgb([0.48, 0.404, 0.932]),
    SlateBlue3: fromRgb([0.41, 0.35, 0.804]),
    SlateBlue4: fromRgb([0.28, 0.235, 0.545]),
    SlateGray1: fromRgb([0.776, 0.888, 1]),
    SlateGray2: fromRgb([0.725, 0.828, 0.932]),
    SlateGray3: fromRgb([0.624, 0.712, 0.804]),
    SlateGray4: fromRgb([0.424, 0.484, 0.545]),
    Snow1: fromRgb([1, 0.98, 0.98]),
    Snow2: fromRgb([0.932, 0.912, 0.912]),
    Snow3: fromRgb([0.804, 0.79, 0.79]),
    Snow4: fromRgb([0.545, 0.536, 0.536]),
    SpringGreen1: fromRgb([0, 1, 0.498]),
    SpringGreen2: fromRgb([0, 0.932, 0.464]),
    SpringGreen3: fromRgb([0, 0.804, 0.4]),
    SpringGreen4: fromRgb([0, 0.545, 0.27]),
    SteelBlue1: fromRgb([0.39, 0.72, 1]),
    SteelBlue2: fromRgb([0.36, 0.675, 0.932]),
    SteelBlue3: fromRgb([0.31, 0.58, 0.804]),
    SteelBlue4: fromRgb([0.21, 0.392, 0.545]),
    Tan1: fromRgb([1, 0.648, 0.31]),
    Tan2: fromRgb([0.932, 0.604, 0.288]),
    Tan3: fromRgb([0.804, 0.52, 0.248]),
    Tan4: fromRgb([0.545, 0.352, 0.17]),
    Thistle1: fromRgb([1, 0.884, 1]),
    Thistle2: fromRgb([0.932, 0.824, 0.932]),
    Thistle3: fromRgb([0.804, 0.71, 0.804]),
    Thistle4: fromRgb([0.545, 0.484, 0.545]),
    Tomato1: fromRgb([1, 0.39, 0.28]),
    Tomato2: fromRgb([0.932, 0.36, 0.26]),
    Tomato3: fromRgb([0.804, 0.31, 0.224]),
    Tomato4: fromRgb([0.545, 0.21, 0.15]),
    Turquoise1: fromRgb([0, 0.96, 1]),
    Turquoise2: fromRgb([0, 0.898, 0.932]),
    Turquoise3: fromRgb([0, 0.772, 0.804]),
    Turquoise4: fromRgb([0, 0.525, 0.545]),
    VioletRed1: fromRgb([1, 0.244, 0.59]),
    VioletRed2: fromRgb([0.932, 0.228, 0.55]),
    VioletRed3: fromRgb([0.804, 0.196, 0.47]),
    VioletRed4: fromRgb([0.545, 0.132, 0.32]),
    Wheat1: fromRgb([1, 0.905, 0.73]),
    Wheat2: fromRgb([0.932, 0.848, 0.684]),
    Wheat3: fromRgb([0.804, 0.73, 0.59]),
    Wheat4: fromRgb([0.545, 0.494, 0.4]),
    Yellow1: fromRgb([1, 1, 0]),
    Yellow2: fromRgb([0.932, 0.932, 0]),
    Yellow3: fromRgb([0.804, 0.804, 0]),
    Yellow4: fromRgb([0.545, 0.545, 0]),
    Gray0: fromRgb([0.745, 0.745, 0.745]),
    Green0: fromRgb([0, 1, 0]),
    Grey0: fromRgb([0.745, 0.745, 0.745]),
    Maroon0: fromRgb([0.69, 0.19, 0.376]),
    Purple0: fromRgb([0.628, 0.125, 0.94]),
};


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/print-raw.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/print-raw.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/**
 * Print an `xcolor` argument specification AST to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    if (node.type === "invalid_spec") {
        return node.content;
    }
    switch (node.type) {
        case "postfix":
            if (node.plusses != null) {
                return `!!${node.plusses}`;
            }
            else {
                return `!![${node.num}]`;
            }
        case "complete_mix":
            return `!${node.mix_percent}!${node.name}`;
        case "partial_mix":
            return `!${node.mix_percent}`;
        case "expr":
            return `${node.prefix || ""}${node.name}${node.mix_expr
                .map((mix) => printRaw(mix))
                .join("")}${node.postfix ? printRaw(node.postfix) : ""}`;
        case "weighted_expr":
            return `${printRaw(node.color)},${node.weight}`;
        case "extended_expr":
            let prefix = node.core_model;
            if (node.div) {
                prefix += `,${node.div}`;
            }
            return `${prefix}:${node.expressions
                .map((expr) => printRaw(expr))
                .join(";")}`;
        case "function":
            return `>${node.name},${node.args.map((a) => "" + a).join(",")}`;
        case "color":
            return (printRaw(node.color) +
                node.functions.map((f) => printRaw(f)).join(""));
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/types.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/types.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts":
/*!***********************************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/xcolor-macro-to-hex.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xcolorMacroToHex": () => (/* binding */ xcolorMacroToHex)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../unified-latex-util-arguments */ "./unified-latex-util-arguments/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");
/* harmony import */ var _xcolor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xcolor */ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts");
/* harmony import */ var _structured_clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../structured-clone */ "./structured-clone/index.ts");
/* harmony import */ var _unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../unified-latex-util-comments */ "./unified-latex-util-comments/index.ts");





/**
 * Compute the hex representation of a color specified by an xcolor color command.
 * For example `\color[rgb]{1 .5 .5}` or `\textcolor{red}{foo}`. If the color cannot be parsed,
 * `null` is returned for the hex value. In all cases a css variable name (prefixed with "--"")
 * is returned. This can be used to set up CSS for custom colors.
 */
function xcolorMacroToHex(node) {
    // We do some destructive operations on the node, so clone it first.
    node = (0,_structured_clone__WEBPACK_IMPORTED_MODULE_3__.structuredClone)(node);
    (0,_unified_latex_util_comments__WEBPACK_IMPORTED_MODULE_4__.deleteComments)(node);
    // We assume the node has signature "o m" where o is the model and
    // m is the color spec.
    const args = (0,_unified_latex_util_arguments__WEBPACK_IMPORTED_MODULE_0__.getArgsContent)(node);
    const model = args[0] && (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(args[0]);
    const colorStr = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(args[1] || []);
    let hex = null;
    try {
        hex = (0,_xcolor__WEBPACK_IMPORTED_MODULE_2__.xcolorColorToHex)(colorStr, model);
    }
    catch (e) { }
    const cssVarName = "--" + colorStr.replace(/[^a-zA-Z0-9-_]/g, "-");
    return { hex, cssVarName };
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/libs/xcolor.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/libs/xcolor.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PREDEFINED_XCOLOR_COLORS": () => (/* binding */ PREDEFINED_XCOLOR_COLORS),
/* harmony export */   "XColorCoreModelToColor": () => (/* binding */ XColorCoreModelToColor),
/* harmony export */   "computeColor": () => (/* binding */ computeColor),
/* harmony export */   "xcolorColorToHex": () => (/* binding */ xcolorColorToHex)
/* harmony export */ });
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! color */ "../../node_modules/color/index.js");
/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _predefined_colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./predefined-colors */ "./unified-latex-ctan/package/xcolor/libs/predefined-colors.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./unified-latex-ctan/package/xcolor/libs/parser.ts");



const CORE_MODELS = new Set(["rgb", "cmy", "cmyk", "hsb", "gray"]);
const XColorCoreModelToColor = {
    rgb: ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([r * 255, g * 255, b * 255], "rgb"),
    cmy: ([c, m, y]) => XColorCoreModelToColor.rgb([1 - c, 1 - m, 1 - y]),
    cmyk: ([c, m, y, k]) => color__WEBPACK_IMPORTED_MODULE_2___default()([c * 255, m * 255, y * 255, k * 100], "cmyk"),
    hsb: ([h, s, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([h * 360, s * 100, b * 100], "hsv"),
    gray: ([v]) => color__WEBPACK_IMPORTED_MODULE_2___default()([v * 255, v * 255, v * 255], "rgb"),
};
const XColorModelToColor = Object.assign({ wave: ([lambda]) => {
        // Constants according to the xcolor readme
        const gamma = 0.8;
        let baseRgb = [0, 0, 0];
        if (380 <= lambda && lambda < 440) {
            baseRgb = [(440 - lambda) / (440 - 380), 0, 1];
        }
        if (440 <= lambda && lambda < 490) {
            baseRgb = [0, (lambda - 440) / (490 - 440), 1];
        }
        if (490 <= lambda && lambda < 510) {
            baseRgb = [0, 1, (510 - lambda) / (510 - 490)];
        }
        if (510 <= lambda && lambda < 580) {
            baseRgb = [(lambda - 510) / (580 - 510), 1, 0];
        }
        if (580 <= lambda && lambda < 6450) {
            baseRgb = [1, (645 - lambda) / (645 - 580), 0];
        }
        if (645 <= lambda && lambda <= 780) {
            baseRgb = [1, 0, 0];
        }
        let f = 1.0;
        if (380 <= lambda && 420 < lambda) {
            f = 0.3 + (0.7 * (lambda - 380)) / (420 - 380);
        }
        if (700 < lambda && lambda <= 780) {
            f = 0.3 + (0.7 * (780 - lambda)) / (780 - 700);
        }
        const rgb = [
            Math.pow(baseRgb[0] * f, gamma),
            Math.pow(baseRgb[1] * f, gamma),
            Math.pow(baseRgb[2] * f, gamma),
        ];
        return color__WEBPACK_IMPORTED_MODULE_2___default()([rgb[0] * 255, rgb[1] * 255, rgb[2] * 255], "rgb");
    }, Hsb: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 360, s, b]), HSB: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 240, s / 240, b / 240]), HTML: ([v]) => (v.startsWith("#") ? color__WEBPACK_IMPORTED_MODULE_2___default()(v) : color__WEBPACK_IMPORTED_MODULE_2___default()(`#${v}`)), RGB: ([r, g, b]) => color__WEBPACK_IMPORTED_MODULE_2___default()([r, g, b], "rgb"), Gray: ([v]) => XColorCoreModelToColor.gray([v / 15]) }, XColorCoreModelToColor);
const ColorToXColorModel = {
    rgb: (color) => color
        .rgb()
        .array()
        .map((v) => v / 255),
    cmy: (color) => [255 - color.red(), 255 - color.green(), 255 - color.blue()].map((v) => v / 255),
    cmyk: (color) => color
        .cmyk()
        .array()
        // The k component goes from 0-100
        .map((v, i) => (i === 3 ? v / 100 : v / 255)),
    hsb: (color) => [
        color.hue() / 360,
        color.saturationv() / 100,
        color.value() / 100,
    ],
    gray: (color) => [color.gray() / 100],
};
const PREDEFINED_XCOLOR_COLORS = Object.assign(Object.assign(Object.assign({ 
    // Core colors
    red: XColorCoreModelToColor.rgb([1, 0, 0]), green: XColorCoreModelToColor.rgb([0, 1, 0]), blue: XColorCoreModelToColor.rgb([0, 0, 1]), brown: XColorCoreModelToColor.rgb([0.75, 0.5, 0.25]), lime: XColorCoreModelToColor.rgb([0.75, 1, 0]), orange: XColorCoreModelToColor.rgb([1, 0.5, 0]), pink: XColorCoreModelToColor.rgb([1, 0.75, 0.75]), purple: XColorCoreModelToColor.rgb([0.75, 0, 0.25]), teal: XColorCoreModelToColor.rgb([0, 0.5, 0.5]), violet: XColorCoreModelToColor.rgb([0.5, 0, 0.5]), cyan: XColorCoreModelToColor.rgb([0, 1, 1]), magenta: XColorCoreModelToColor.rgb([1, 0, 1]), yellow: XColorCoreModelToColor.rgb([1, 1, 0]), olive: XColorCoreModelToColor.rgb([0.5, 0.5, 0]), black: XColorCoreModelToColor.rgb([0, 0, 0]), darkgray: XColorCoreModelToColor.rgb([0.25, 0.25, 0.25]), gray: XColorCoreModelToColor.rgb([0.5, 0.5, 0.5]), lightgray: XColorCoreModelToColor.rgb([0.75, 0.75, 0.75]), white: XColorCoreModelToColor.rgb([1, 1, 1]) }, _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.DVI_PS_NAMES), _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.SVG_NAMES), _predefined_colors__WEBPACK_IMPORTED_MODULE_0__.X11_NAMES);
function scalarMul(scalar, vec) {
    return vec.map((v) => scalar * v);
}
function addVectors(...vecs) {
    return vecs.reduce((prev, current) => prev.map((v, i) => v + current[i]));
}
/**
 * Mix a color in color model `model` as per the algorithm in 2.3.3 of the xcolor manual.
 */
function mixInModel(model, colorsAndCoefficients) {
    if (!CORE_MODELS.has(model)) {
        throw new Error(`Cannot mix colors in model "${model}"; only core modes ${Array.from(CORE_MODELS).join(", ")} are supported`);
    }
    const toModel = ColorToXColorModel[model];
    const fromModel = XColorCoreModelToColor[model];
    const mixed = addVectors(...colorsAndCoefficients.map(([v, color]) => {
        const colorInModel = toModel(color);
        return scalarMul(v, colorInModel);
    }));
    return fromModel(mixed);
}
/**
 * Given a parsed `XColor`, compute the color and return a `Color` object
 * (that can be used in CSS, for example).
 */
function computeColor(expr, predefinedColors = {}) {
    if (expr.type !== "color") {
        throw new Error(`Can only compute the color of a "color" expression, not one of type ${expr.type}`);
    }
    const knownColors = Object.assign(Object.assign({}, PREDEFINED_XCOLOR_COLORS), predefinedColors);
    function getColor(name) {
        if (!knownColors[name]) {
            throw new Error(`Unknown color "${name}"`);
        }
        return knownColors[name];
    }
    const color = expr.color;
    let computedColor = color__WEBPACK_IMPORTED_MODULE_2___default()("#000000");
    if (color.type === "expr") {
        // From the algorithm in 2.3.2 of the xcolor manual
        // TODO: the suffix `!![num]` is not yet implemented.
        let base = getColor(color.name);
        for (const mix of color.mix_expr) {
            if (mix.type === "complete_mix") {
                const mixColor = getColor(mix.name);
                base = base.mix(mixColor, 1 - mix.mix_percent / 100);
            }
            else if (mix.type === "partial_mix") {
                base = base.mix(color__WEBPACK_IMPORTED_MODULE_2___default()("#FFFFFF"), 1 - mix.mix_percent / 100);
            }
        }
        if (color.prefix && color.prefix.length % 2 === 1) {
            base = base.rotate(180);
        }
        computedColor = base;
    }
    if (color.type === "extended_expr") {
        const model = color.core_model;
        const div = color.div ||
            color.expressions.reduce((a, expr) => a + expr.weight, 0);
        if (div <= 0) {
            throw new Error(`Cannot mix color with ratios that have a denominator of ${div}`);
        }
        const colorsToMix = color.expressions.map((expr) => [
            expr.weight / div,
            computeColor({
                type: "color",
                color: expr.color,
                functions: [],
            }),
        ]);
        computedColor = mixInModel(model, colorsToMix);
    }
    // Now we apply any color functions
    for (const func of expr.functions) {
        if (func.name === "wheel") {
            const angle = func.args[0];
            const circ = func.args[1] || 360;
            computedColor = computedColor.rotate((angle / circ) * 360);
        }
        if (func.name === "twheel") {
            // This function depends on the definition of \rangetHsb, which we
            // don't actually know, so we just use it's default, which is to
            // add a 60 deg. angle to everything. I think...
            const angle = func.args[0];
            const circ = func.args[1] || 360;
            computedColor = computedColor.rotate((angle / circ) * 360 + 60);
        }
    }
    return computedColor;
}
/**
 * Convert the xcolor defined color to RGB Hex representation.
 * If the color is unknown or cannot be computed, `null` is returned.
 *
 * If `model` is supplied,
 *
 * The most likely reason a color will be `null` is if the color is defined
 * using a pre-defined color that wasn't supplied as an argument.
 */
function xcolorColorToHex(color, model, options = { predefinedColors: {} }) {
    const { predefinedColors = {} } = options;
    const parsed = (0,_parser__WEBPACK_IMPORTED_MODULE_1__.parse)(color);
    // If a model was entered, the corresponding color was directly entered without
    // mixing, unless the parsed type was "color". This would through an error in `xcolor`,
    // but we won't error.
    if (model && model !== "default" && parsed.type !== "color") {
        if (!(model in XColorModelToColor)) {
            throw new Error(`Unknown color model "${model}"; known models are ${Object.keys(XColorModelToColor).join(", ")}`);
        }
        if (parsed.type !== "hex_spec" && parsed.type !== "num_spec") {
            throw new Error(`Cannot use model ${model} to compute the color "${color}"`);
        }
        if (model === "HTML" && parsed.type === "hex_spec") {
            return XColorModelToColor.HTML(parsed.content).hex();
        }
        else if (parsed.type === "num_spec") {
            return XColorModelToColor[model](parsed.content).hex();
        }
        throw new Error(`Don't know how to process color "${color}" in model "${model}"`);
    }
    if (Array.isArray(parsed) || parsed.type !== "color") {
        throw new Error(`Cannot the color "${color}" is not a valid color string`);
    }
    let computed = null;
    try {
        computed = computeColor(parsed, predefinedColors);
    }
    catch (e) { }
    return computed && computed.hex();
}


/***/ }),

/***/ "./unified-latex-ctan/package/xcolor/provides.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/xcolor/provides.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    substitutecolormodel: {
        signature: "m m",
        renderInfo: { breakAround: true },
    },
    selectcolormodel: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    definecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    providecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    colorlet: {
        signature: "o m o m",
        renderInfo: { breakAround: true },
    },
    definecolorset: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    providecolorset: {
        signature: "o m m m m",
        renderInfo: { breakAround: true },
    },
    preparecolor: {
        signature: "o m m m",
        renderInfo: { breakAround: true },
    },
    preparecolorset: {
        signature: "o m m m m",
        renderInfo: { breakAround: true },
    },
    DefineNamedColor: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    definecolors: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    providecolors: {
        signature: "m",
        renderInfo: { breakAround: true },
    },
    color: { signature: "o m", renderInfo: { breakAround: true } },
    textcolor: { signature: "o m m", renderInfo: { inParMode: true } },
    pagecolor: { signature: "o m" },
    colorbox: { signature: "o m m" },
    fcolorbox: { signature: "o m o m m" },
    boxframe: { signature: "o m" },
    testcolor: { signature: "o m" },
    blendcolors: { signature: "s m" },
    maskcolors: { signature: "o m" },
    definecolorseries: {
        signature: "m m m o m o m",
        renderInfo: { breakAround: true },
    },
    resetcolorseries: {
        signature: "o m",
        renderInfo: { breakAround: true },
    },
    rowcolors: { signature: "s o m m m" },
    extractcolorspec: { signature: "m m" },
    extractcolorspecs: { signature: "m m m" },
    convertcolorspec: { signature: "m m m m" },
};
const environments = {
    testcolors: { signature: "o", renderInfo: { pgfkeysArgs: true } },
};


/***/ }),

/***/ "./unified-latex-ctan/package/xparse/index.ts":
/*!****************************************************!*\
  !*** ./unified-latex-ctan/package/xparse/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.environments),
/* harmony export */   "macros": () => (/* reexport safe */ _provides__WEBPACK_IMPORTED_MODULE_0__.macros)
/* harmony export */ });
/* harmony import */ var _provides__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provides */ "./unified-latex-ctan/package/xparse/provides.ts");



/***/ }),

/***/ "./unified-latex-ctan/package/xparse/provides.ts":
/*!*******************************************************!*\
  !*** ./unified-latex-ctan/package/xparse/provides.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environments": () => (/* binding */ environments),
/* harmony export */   "macros": () => (/* binding */ macros)
/* harmony export */ });
const macros = {
    NewDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RenewDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    ProvideDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclareDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    NewDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    RenewDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    ProvideDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    DeclareDocumentEnvironment: {
        signature: "m m m m",
        renderInfo: { breakAround: true },
    },
    NewExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RenewExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    ProvideExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    DeclareExpandableDocumentCommand: {
        signature: "m m m",
        renderInfo: { breakAround: true },
    },
    RequirePackage: {
        signature: "o m",
        renderInfo: { pgfkeysArgs: true, breakAround: true },
    },
    DeclareOption: { signature: "m m", renderInfo: { breakAround: true } },
};
const environments = {};


/***/ }),

/***/ "./unified-latex-ctan/utils/enumerate.ts":
/*!***********************************************!*\
  !*** ./unified-latex-ctan/utils/enumerate.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cleanEnumerateBody": () => (/* binding */ cleanEnumerateBody)
/* harmony export */ });
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-split */ "./unified-latex-util-split/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");




/**
 * Clean up any whitespace issues in an enumerate environment. In particular,
 *      * Remove any leading or ending whitespace
 *      * Ensure there is a par between occurrences of `\item`
 *      * Ensure there is whitespace after each occurrence of `\item` provided there is content there
 * `itemName` can be used to set what the "item" macro is called.
 *
 * This function attaches content following a `\item` to the `\item` macro with
 * `openMark` and `closeMark` set to empty. This allows hanging-indents to be rendered.
 */
function cleanEnumerateBody(ast, itemName = "item") {
    let { segments, macros } = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_2__.splitOnMacro)(ast, itemName);
    // Trim the content of each block, but make sure there is a space
    // between each macro and the content. Since the first segment of content
    // appears *before* any macro, don't add a space there.
    for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_3__.trim)(segment);
        // The very first segment comes before any `\item` macros. It is either
        // blank or contains comments (or is invalid LaTeX). We don't insert a space
        // in this case.
        if (segment.length > 0 && i > 0) {
            segment.unshift({ type: "whitespace" });
        }
    }
    // We want a trailing indent for the `\item` nodes. We will
    // do this with a trick: we will add an argument to the index node
    // with openMark=" " and closeMark=""
    let body = macros.map((node, i) => {
        const segment = segments[i + 1];
        node.args = node.args || [];
        node.args.push((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_0__.arg)(segment, { openMark: "", closeMark: "" }));
        (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__.updateRenderInfo)(node, { inParMode: true });
        return node;
    });
    // We want a parbreak between each `\item` block and the preceding
    // content. We may or may not start with content, so act accordingly
    if (segments[0].length === 0) {
        body = body.flatMap((macro, i) => i === 0 ? macro : [{ type: "parbreak" }, macro]);
    }
    else {
        body = body.flatMap((macro) => [{ type: "parbreak" }, macro]);
    }
    body.unshift(...segments[0]);
    return body;
}


/***/ }),

/***/ "./unified-latex-lint/utils/replace-node.ts":
/*!**************************************************!*\
  !*** ./unified-latex-lint/utils/replace-node.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNodeDuringVisit": () => (/* binding */ replaceNodeDuringVisit)
/* harmony export */ });
/**
 * Replaces the current node with `replacement`. It is assumed that the current
 * node is in an array that is a child of a parent element. If this is not the case,
 * the function will error.
 */
function replaceNodeDuringVisit(replacement, info) {
    const parent = info.parents[0];
    if (!parent) {
        throw new Error(`Cannot replace node: parent not found`);
    }
    const container = parent[info.key];
    if (!Array.isArray(container)) {
        throw new Error(`Cannot replace node: containing array not found`);
    }
    if (info.index == null) {
        throw new Error(`Cannot replace node: node index undefined`);
    }
    if (!Array.isArray(replacement)) {
        container[info.index] = replacement;
    }
    else {
        container.splice(info.index, 1, ...replacement);
    }
}


/***/ }),

/***/ "./unified-latex-util-argspec/index.ts":
/*!*********************************************!*\
  !*** ./unified-latex-util-argspec/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgSpecAst": () => (/* reexport module object */ _libs_argspec_types__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "parse": () => (/* reexport safe */ _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__.parse),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__.printRaw)
/* harmony export */ });
/* harmony import */ var _libs_argspec_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/argspec-parser */ "./unified-latex-util-argspec/libs/argspec-parser.ts");
/* harmony import */ var _libs_argspec_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/argspec-types */ "./unified-latex-util-argspec/libs/argspec-types.ts");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Tools to deal with `xparse` argument signatures. (E.g., `"o m"` for optional followed by mandatory
 * argument).
 *
 * ## When should I use this?
 *
 * If you are working on the internals of `unified-latex`.
 */


/***/ }),

/***/ "./unified-latex-util-argspec/libs/argspec-parser.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-util-argspec/libs/argspec-parser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-pegjs/libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");

/**
 * Produce a string containing any decorators for the argspec node.
 * For example, `!` in front of a node means "don't accept leading whitespace"
 */
function getDecorators(node) {
    let ret = "";
    if (node.noLeadingWhitespace) {
        ret += "!";
    }
    return ret;
}
/**
 * Print an `xparse` argument specification AST
 * to a string.
 */
function printRaw(node, root = false) {
    if (typeof node === "string") {
        return node;
    }
    if (Array.isArray(node)) {
        const sepToken = root ? " " : "";
        return node.map((tok) => printRaw(tok)).join(sepToken);
    }
    const decorators = getDecorators(node);
    const defaultArg = node.defaultArg
        ? printRaw(node.defaultArg)
        : "";
    let spec = decorators;
    switch (node.type) {
        case "body":
            return decorators + "b";
        case "optionalStar":
            return decorators + "s";
        case "optionalToken":
            return spec + "t" + node.token;
        case "optional":
            // [...] is the default enclosure for optional arguments
            if (node.openBrace === "[" && node.closeBrace === "]") {
                spec += node.defaultArg ? "O" : "o";
            }
            else {
                spec += node.defaultArg ? "D" : "d";
                spec += node.openBrace + node.closeBrace;
            }
            return spec + defaultArg;
        case "mandatory":
            // {...} is the default enclosure for mandatory arguments
            if (node.openBrace === "{" && node.closeBrace === "}") {
                spec += "m";
            }
            else {
                spec += node.defaultArg ? "R" : "r";
                spec += node.openBrace + node.closeBrace;
            }
            return spec + defaultArg;
        case "embellishment":
            spec += node.defaultArg ? "E" : "e";
            return (spec +
                "{" +
                printRaw(node.embellishmentTokens) +
                "}" +
                defaultArg);
        case "verbatim":
            return spec + "v" + node.openBrace;
        case "group":
            return spec + "{" + printRaw(node.content) + "}";
        default:
            console.warn(`Unknown node type "${node.type}" for node`, node);
            return "";
    }
}
const parseCache = {};
/**
 * Parse an `xparse` argument specification string to an AST.
 * This function caches results. Don't mutate the returned AST!
 *
 * @param {string} [str=""] - LaTeX string input
 * @returns - AST for LaTeX string
 */
function parse(str = "") {
    parseCache[str] = parseCache[str] || _unified_latex_util_pegjs_libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_0__.ArgSpecPegParser.parse(str);
    return parseCache[str];
}


/***/ }),

/***/ "./unified-latex-util-argspec/libs/argspec-types.ts":
/*!**********************************************************!*\
  !*** ./unified-latex-util-argspec/libs/argspec-types.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-util-arguments/index.ts":
/*!***********************************************!*\
  !*** ./unified-latex-util-arguments/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachMacroArgs": () => (/* reexport safe */ _libs_attach_arguments__WEBPACK_IMPORTED_MODULE_1__.attachMacroArgs),
/* harmony export */   "getArgsContent": () => (/* reexport safe */ _libs_get_args_content__WEBPACK_IMPORTED_MODULE_3__.getArgsContent),
/* harmony export */   "gobbleArguments": () => (/* reexport safe */ _libs_gobble_arguments__WEBPACK_IMPORTED_MODULE_0__.gobbleArguments),
/* harmony export */   "unifiedLatexAttachMacroArguments": () => (/* reexport safe */ _libs_unified_latex_attach_macro_arguments__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexAttachMacroArguments)
/* harmony export */ });
/* harmony import */ var _libs_gobble_arguments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/gobble-arguments */ "./unified-latex-util-arguments/libs/gobble-arguments.ts");
/* harmony import */ var _libs_attach_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/attach-arguments */ "./unified-latex-util-arguments/libs/attach-arguments.ts");
/* harmony import */ var _libs_unified_latex_attach_macro_arguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unified-latex-attach-macro-arguments */ "./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts");
/* harmony import */ var _libs_get_args_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/get-args-content */ "./unified-latex-util-arguments/libs/get-args-content.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify and attach arguments to macros in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * By default, TeX doesn't actually have a concept of macro "arguments". Instead, TeX searches the
 * tokens after a macro and processes them according to the macro's rules. However, LaTeX attempts
 * to make macros look like functions that accept arguments. To attach the "arguments" to a macro
 * node, the `unified-latex` AST needs to be reparsed and manipulated.
 *
 * ## When should I use this?
 *
 * If you have custom macros that you want arguments attached to.
 *
 * If you know ahead of time which macros need arguments attached to them, use `unified-latex-util-parse`
 * and pass in the appropriate macro info instead.
 */


/***/ }),

/***/ "./unified-latex-util-arguments/libs/attach-arguments.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/attach-arguments.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachMacroArgs": () => (/* binding */ attachMacroArgs),
/* harmony export */   "attachMacroArgsInArray": () => (/* binding */ attachMacroArgsInArray)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-render-info */ "./unified-latex-util-render-info/index.ts");
/* harmony import */ var _gobble_arguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gobble-arguments */ "./unified-latex-util-arguments/libs/gobble-arguments.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");




/**
 * Search (in a right-associative way) through the array for instances of
 * `macros` and attach arguments to the macro. Argument signatures are
 * specified by `macros[].signature`.
 *
 * Info stored in `macros[].renderInfo` will be attached to the node
 * with attribute `_renderInfo`.
 */
function attachMacroArgsInArray(nodes, macros) {
    // Some preliminaries that are only used if `ast` is an array.
    let currIndex;
    /**
     * Determine whether `node` matches one of the macros in `macros`.
     * Care is taken when matching because not all macros have
     * `\` as their escape token.
     */
    const isRelevantMacro = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macros);
    function gobbleUntilMacro() {
        // Step backwards until we find the required macro
        while (currIndex >= 0 && !isRelevantMacro(nodes[currIndex])) {
            currIndex--;
        }
    }
    // Search for an occurrence of any of the macros `macroName` and its arguments.
    // Some macros are right-associative, so we should start searching from
    // the right
    currIndex = nodes.length - 1;
    while (currIndex >= 0) {
        gobbleUntilMacro();
        if (currIndex < 0) {
            // We didn't find an occurrence of the macro
            return;
        }
        // Store the currIndex, which is where the macro is. Start searching
        // for its arguments at the next index.
        const macroIndex = currIndex;
        const macro = nodes[macroIndex];
        const macroName = macro.content;
        const macroInfo = macros[macroName];
        // Add `._renderInfo` if we have any
        (0,_unified_latex_util_render_info__WEBPACK_IMPORTED_MODULE_1__.updateRenderInfo)(macro, macroInfo.renderInfo);
        // If the macro has no signature, it shouldn't consume any arguments. Just move along.
        // Node: It is important that this happens *after* `updateRenderInfo` is called, since
        // we still want to update the render info even if there are no args.
        if (macroInfo.signature == null) {
            currIndex--;
            continue;
        }
        // We don't want to search for macro arguments if we already
        // found them. If the macro has arguments, we assume that
        // they've already been attached
        if (macro.args != null) {
            currIndex = macroIndex - 1;
            continue;
        }
        // `currIndex` is the position of the macro. We want to start
        // looking for the arguments right after the macro
        currIndex++;
        const { args } = (0,_gobble_arguments__WEBPACK_IMPORTED_MODULE_2__.gobbleArguments)(nodes, macroInfo.signature, currIndex);
        macro.args = args;
        // After we've gobbled the arguments, set
        // ourselves one space before the macro so we can continue.
        currIndex = macroIndex - 1;
    }
}
/**
 * Recursively search for and attach the arguments for a
 * particular macro to its AST node. `macros` should
 * contain a `signature` property which specifies the arguments
 * signature in xparse syntax.
 */
function attachMacroArgs(tree, macros) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (nodes) => {
        attachMacroArgsInArray(nodes, macros);
    }, { includeArrays: true, test: Array.isArray });
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/get-args-content.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/get-args-content.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getArgsContent": () => (/* binding */ getArgsContent)
/* harmony export */ });
/**
 * Returns the content of `args` for a macro or environment as an array. If an argument
 * was omitted (e.g., because it was an optional arg that wasn't included), then `null` is returned.
 */
function getArgsContent(node) {
    if (!Array.isArray(node.args)) {
        return [];
    }
    return node.args.map((arg) => {
        if (arg.openMark === "" && arg.content.length === 0) {
            return null;
        }
        return arg.content;
    });
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/gobble-arguments.ts":
/*!***************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/gobble-arguments.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gobbleArguments": () => (/* binding */ gobbleArguments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_argspec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-argspec */ "./unified-latex-util-argspec/index.ts");
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");
/* harmony import */ var _gobble_single_argument__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gobble-single-argument */ "./unified-latex-util-arguments/libs/gobble-single-argument.ts");



/**
 * Gobbles an argument of whose type is specified
 * by `argSpec` starting at the position `startPos`. If an argument couldn't be found,
 * `argument` will be `null`.
 */
function gobbleArguments(nodes, argSpec, startPos = 0) {
    if (typeof argSpec === "string") {
        argSpec = (0,_unified_latex_util_argspec__WEBPACK_IMPORTED_MODULE_0__.parse)(argSpec);
    }
    const args = [];
    let nodesRemoved = 0;
    for (const spec of argSpec) {
        const { argument, nodesRemoved: removed } = (0,_gobble_single_argument__WEBPACK_IMPORTED_MODULE_2__.gobbleSingleArgument)(nodes, spec, startPos);
        if (argument) {
            args.push(argument);
            nodesRemoved += removed;
        }
        else {
            args.push((0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)([], { openMark: "", closeMark: "" }));
        }
    }
    return { args, nodesRemoved };
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/gobble-single-argument.ts":
/*!*********************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/gobble-single-argument.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gobbleSingleArgument": () => (/* binding */ gobbleSingleArgument)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-builder */ "./unified-latex-builder/index.ts");


/**
 * Gobbles an argument of whose type is specified
 * by `argSpec` starting at the position `startPos`. If an argument couldn't be found,
 * `argument` will be `null`.
 */
function gobbleSingleArgument(nodes, argSpec, startPos = 0) {
    if (typeof argSpec === "string" || !argSpec.type) {
        throw new Error(`argSpec must be an already-parsed argument specification, not "${JSON.stringify(argSpec)}"`);
    }
    let argument = null;
    let currPos = startPos;
    // Gobble whitespace from `currPos` onward, updating `currPos`.
    // If `argSpec` specifies leading whitespace is not allowed,
    // this function does nothing.
    const gobbleWhitespace = argSpec
        .noLeadingWhitespace
        ? () => { }
        : () => {
            while (currPos < nodes.length) {
                if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(nodes[currPos])) {
                    break;
                }
                currPos++;
            }
        };
    const openMark = argSpec.openBrace || "";
    const closeMark = argSpec.closeBrace || "";
    // Only mandatory arguments can be wrapped in {...}.
    // Since we already parse such things as groups, we need to
    // check the open and closing symbols to see if we allow for
    // groups to be accepted as arguments
    const acceptGroup = argSpec.type === "mandatory" && openMark === "{" && closeMark === "}";
    // Find the position of the open brace and the closing brace.
    // The position(s) are null if the brace isn't found.
    function findBracePositions() {
        let openMarkPos = null;
        if (openMark) {
            openMarkPos = nodes.findIndex((node, i) => i >= currPos && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, openMark));
            if (openMarkPos < currPos) {
                openMarkPos = null;
            }
        }
        let closeMarkPos = null;
        if (openMarkPos != null) {
            closeMarkPos = nodes.findIndex((node, i) => i >= openMarkPos + 1 &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(node, closeMark));
            if (closeMarkPos < openMarkPos + 1) {
                closeMarkPos = null;
            }
        }
        return [openMarkPos, closeMarkPos];
    }
    // Do the actual matching
    gobbleWhitespace();
    const currNode = nodes[currPos];
    if (currNode == null ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(currNode) ||
        _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(currNode)) {
        return { argument, nodesRemoved: 0 };
    }
    switch (argSpec.type) {
        case "mandatory":
            if (acceptGroup) {
                let content = [currNode];
                if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(currNode)) {
                    // Unwrap a group if there is one.
                    content = currNode.content;
                }
                argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)(content, {
                    openMark,
                    closeMark,
                });
                currPos++;
                break;
            }
        // The fallthrough here is on purpose! Matching a mandatory
        // argument and an optional argument is the same for our purposes.
        // We're not going to fail to parse because of a missing argument.
        case "optional":
            // We have already gobbled whitespace, so at this point, `currNode`
            // is either an openMark or we don't have an optional argument.
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(currNode, openMark)) {
                // If we're here, we have custom braces to match
                const [openMarkPos, closeMarkPos] = findBracePositions();
                if (openMarkPos != null && closeMarkPos != null) {
                    argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)(nodes.slice(openMarkPos + 1, closeMarkPos), {
                        openMark,
                        closeMark,
                    });
                    currPos = closeMarkPos + 1;
                    break;
                }
            }
            break;
        case "optionalStar":
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.string(currNode, "*")) {
                argument = (0,_unified_latex_builder__WEBPACK_IMPORTED_MODULE_1__.arg)([currNode], { openMark: "", closeMark: "" });
                currPos++;
                break;
            }
            break;
        default:
            console.warn(`Don't know how to find an argument of argspec type "${argSpec.type}"`);
    }
    // `currPos` is has already stepped past any whitespace. However,
    // if we did not consume an argument, we don't want to consume the whitespace.
    const nodesRemoved = argument ? currPos - startPos : 0;
    nodes.splice(startPos, nodesRemoved);
    return { argument, nodesRemoved };
}


/***/ }),

/***/ "./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts":
/*!***********************************************************************************!*\
  !*** ./unified-latex-util-arguments/libs/unified-latex-attach-macro-arguments.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexAttachMacroArguments": () => (/* binding */ unifiedLatexAttachMacroArguments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _attach_arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attach-arguments */ "./unified-latex-util-arguments/libs/attach-arguments.ts");


/**
 * Unified plugin to attach macro arguments to the macros specified via the `macros`
 * option.
 *
 * @param macros An object whose keys are macro names and values contains information about the macro and its argument signature.
 */
const unifiedLatexAttachMacroArguments = function unifiedLatexAttachMacroArguments(options) {
    return (tree) => {
        const { macros = {} } = options || {};
        if (Object.keys(macros).length === 0) {
            console.warn("Attempting to attach macro arguments but no macros are specified.");
        }
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, (nodes) => {
            (0,_attach_arguments__WEBPACK_IMPORTED_MODULE_1__.attachMacroArgsInArray)(nodes, macros);
        }, { includeArrays: true, test: Array.isArray });
    };
};


/***/ }),

/***/ "./unified-latex-util-comments/index.ts":
/*!**********************************************!*\
  !*** ./unified-latex-util-comments/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteComments": () => (/* reexport safe */ _libs_delete_comments__WEBPACK_IMPORTED_MODULE_0__.deleteComments)
/* harmony export */ });
/* harmony import */ var _libs_delete_comments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/delete-comments */ "./unified-latex-util-comments/libs/delete-comments.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify comments in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to process comments in a `unified-latex` AST.
 */


/***/ }),

/***/ "./unified-latex-util-comments/libs/delete-comments.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-comments/libs/delete-comments.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteComments": () => (/* binding */ deleteComments)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-replace */ "./unified-latex-util-replace/index.ts");


/**
 * Returns a new AST with all comments removed. Care is taken to preserve whitespace.
 * For example
 * ```
 * x%
 * y
 * ```
 * becomes `xy` but
 * ```
 * x %
 * y
 * ```
 * becomes `x y`
 */
function deleteComments(ast) {
    return (0,_unified_latex_util_replace__WEBPACK_IMPORTED_MODULE_1__.replaceNode)(ast, (node) => {
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            return;
        }
        if (node.leadingWhitespace) {
            return { type: "whitespace" };
        }
        return null;
    });
}


/***/ }),

/***/ "./unified-latex-util-match/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-match/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "anyEnvironment": () => (/* binding */ anyEnvironment),
/* harmony export */   "anyMacro": () => (/* binding */ anyMacro),
/* harmony export */   "anyString": () => (/* binding */ anyString),
/* harmony export */   "argument": () => (/* binding */ argument),
/* harmony export */   "blankArgument": () => (/* binding */ blankArgument),
/* harmony export */   "comment": () => (/* binding */ comment),
/* harmony export */   "environment": () => (/* binding */ environment),
/* harmony export */   "group": () => (/* binding */ group),
/* harmony export */   "macro": () => (/* binding */ macro),
/* harmony export */   "match": () => (/* reexport safe */ _libs_match__WEBPACK_IMPORTED_MODULE_0__.match),
/* harmony export */   "math": () => (/* binding */ math),
/* harmony export */   "parbreak": () => (/* binding */ parbreak),
/* harmony export */   "string": () => (/* binding */ string),
/* harmony export */   "whitespace": () => (/* binding */ whitespace)
/* harmony export */ });
/* harmony import */ var _libs_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/match */ "./unified-latex-util-match/libs/match.ts");


const { anyEnvironment, anyMacro, anyString, argument, blankArgument, comment, environment, group, macro, math, parbreak, string, whitespace, } = _libs_match__WEBPACK_IMPORTED_MODULE_0__.match;
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to match different `Ast.Node` types in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you need a type-guard to ensure a node is of a certain type; for example, during a call to `unified-latex-until-visit`.
 */


/***/ }),

/***/ "./unified-latex-util-match/libs/match.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-match/libs/match.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "match": () => (/* binding */ match)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createMacroMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const macrosHash = Array.isArray(macros)
        ? macros.length > 0
            ? typeof macros[0] === "string"
                ? Object.fromEntries(macros.map((macro) => {
                    if (typeof macro !== "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    return [macro, {}];
                }))
                : Object.fromEntries(macros.map((macro) => {
                    if (typeof macro === "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    if (macro.escapeToken != null) {
                        return [
                            macro.content,
                            { escapeToken: macro.escapeToken },
                        ];
                    }
                    return [macro.content, {}];
                }))
            : {}
        : macros;
    return function matchAgainstMacros(node) {
        if (node == null || node.type !== "macro") {
            return false;
        }
        // At this point we have a macro type
        const spec = macrosHash[node.content];
        if (!spec) {
            return false;
        }
        if (typeof spec === "object" && "escapeToken" in spec) {
            return (spec.escapeToken == null ||
                spec.escapeToken === node.escapeToken);
        }
        return true;
    };
}
/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createEnvironmentMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const environmentsHash = Array.isArray(macros)
        ? Object.fromEntries(macros.map((str) => {
            return [str, {}];
        }))
        : macros;
    return function matchAgainstEnvironments(node) {
        if (!match.anyEnvironment(node)) {
            return false;
        }
        // At this point we have an environment type
        const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env);
        const spec = environmentsHash[envName];
        if (!spec) {
            return false;
        }
        return true;
    };
}
/**
 * Functions to match different types of nodes.
 */
const match = {
    macro(node, macroName) {
        if (node == null) {
            return false;
        }
        return (node.type === "macro" &&
            (macroName == null || node.content === macroName));
    },
    anyMacro(node) {
        return match.macro(node);
    },
    environment(node, envName) {
        if (node == null) {
            return false;
        }
        return ((node.type === "environment" || node.type === "mathenv") &&
            (envName == null || (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env) === envName));
    },
    anyEnvironment(node) {
        return match.environment(node);
    },
    comment(node) {
        if (node == null) {
            return false;
        }
        return node.type === "comment";
    },
    parbreak(node) {
        if (node == null) {
            return false;
        }
        return node.type === "parbreak";
    },
    whitespace(node) {
        if (node == null) {
            return false;
        }
        return node.type === "whitespace";
    },
    /**
     * Matches whitespace or a comment with leading whitespace.
     */
    whitespaceLike(node) {
        if (node == null) {
            return false;
        }
        return (node.type === "whitespace" ||
            (node.type === "whitespace" && node.leadingWhitespace === true));
    },
    string(node, value) {
        if (node == null) {
            return false;
        }
        return (node.type === "string" && (value == null || node.content === value));
    },
    anyString(node) {
        return match.string(node);
    },
    group(node) {
        if (node == null) {
            return false;
        }
        return node.type === "group";
    },
    argument(node) {
        if (node == null) {
            return false;
        }
        return node.type === "argument";
    },
    blankArgument(node) {
        if (!match.argument(node)) {
            return false;
        }
        return (node.openMark === "" &&
            node.closeMark === "" &&
            node.content.length === 0);
    },
    math(node) {
        if (node == null) {
            return false;
        }
        return node.type === "displaymath" || node.type === "inlinemath";
    },
    createMacroMatcher,
    createEnvironmentMatcher,
};


/***/ }),

/***/ "./unified-latex-util-pegjs/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-pegjs/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlignEnvironmentPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.AlignEnvironmentPegParser),
/* harmony export */   "ArgSpecPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.ArgSpecPegParser),
/* harmony export */   "GluePegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.GluePegParser),
/* harmony export */   "LatexPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.LatexPegParser),
/* harmony export */   "LigaturesPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.LigaturesPegParser),
/* harmony export */   "MacroSubstitutionPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.MacroSubstitutionPegParser),
/* harmony export */   "PgfkeysPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.PgfkeysPegParser),
/* harmony export */   "SystemePegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.SystemePegParser),
/* harmony export */   "TabularPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.TabularPegParser),
/* harmony export */   "XColorPegParser": () => (/* reexport safe */ _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__.XColorPegParser),
/* harmony export */   "decorateArrayForPegjs": () => (/* reexport safe */ _libs_decorate_array_for_pegjs__WEBPACK_IMPORTED_MODULE_0__.decorateArrayForPegjs),
/* harmony export */   "splitStringsIntoSingleChars": () => (/* reexport safe */ _libs_split_strings__WEBPACK_IMPORTED_MODULE_1__.splitStringsIntoSingleChars)
/* harmony export */ });
/* harmony import */ var _libs_decorate_array_for_pegjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/decorate-array-for-pegjs */ "./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts");
/* harmony import */ var _libs_split_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/split-strings */ "./unified-latex-util-pegjs/libs/split-strings.ts");
/* harmony import */ var _libs_pegjs_parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/pegjs-parsers */ "./unified-latex-util-pegjs/libs/pegjs-parsers.js");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Pegjs grammars to help parse strings into a `unified-latex` Abstract Syntax Tree (AST). Note,
 * because of the dynamic nature of LaTeX, to get a full AST with arguments attached to macros, etc.,
 * the tree is parsed multiple times.
 *
 * Also included are functions to decorate a `Ast.Node[]` array so that Pegjs can process it as if it were
 * a string. This allows for complex second-pass parsing.
 *
 * ## When should I use this?
 *
 * If you are building libraries to parse specific LaTeX syntax (e.g., to parse `tabular` environments or
 * `systeme` environments, etc.).
 */


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/decorate-array-for-pegjs.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decorateArrayForPegjs": () => (/* binding */ decorateArrayForPegjs)
/* harmony export */ });
/**
 * Pegjs operates on strings. However, strings and arrays are very similar!
 * This function adds `charAt`, `charCodeAt`, and `substring` methods to
 * `array` so that `array` can then be fed to a Pegjs generated parser.
 *
 * @param {[object]} array
 * @returns {[object]}
 */
function decorateArrayForPegjs(array) {
    array.charAt = function (i) {
        return this[i];
    };
    // We don't have a hope of imitating `charCodeAt`, so
    // make it something that won't interfere
    array.charCodeAt = () => 0;
    array.substring = function (i, j) {
        return this.slice(i, j);
    };
    // This function is called when reporting an error,
    // so we convert back to a string.
    array.replace = function (a, b) {
        const ret = JSON.stringify(this);
        return ret.replace(a, b);
    };
    return array;
}


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/split-strings.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/split-strings.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitStringsIntoSingleChars": () => (/* binding */ splitStringsIntoSingleChars)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Splits all multi-character strings into strings that are all single characters.
 */
function splitStringsIntoSingleChars(nodes) {
    return nodes.flatMap((node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyString(node)
        ? Array.from(node.content).map((c) => ({
            type: "string",
            content: c,
        }))
        : node);
}


/***/ }),

/***/ "./unified-latex-util-print-raw/index.ts":
/*!***********************************************!*\
  !*** ./unified-latex-util-print-raw/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.linebreak),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)
/* harmony export */ });
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-util-print-raw/libs/print-raw.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to print a `unified-latex` Abstract Syntax Tree (AST) to a string.
 *
 * ## When should I use this?
 *
 * If you want to directly print an `Ast.Ast` to a string without any pretty printing or formatting.
 */


/***/ }),

/***/ "./unified-latex-util-print-raw/libs/print-raw.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-print-raw/libs/print-raw.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* binding */ linebreak),
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
const linebreak = Symbol("linebreak");
const ESCAPE = "\\";
/**
 * Renders the AST to an array inserting `linebreak` where needed;
 * This array may be nested.
 *
 * @param {*} node
 */
function _printRaw(node) {
    if (typeof node === "string") {
        return [node];
    }
    if (Array.isArray(node)) {
        return [].concat(...node.map((n) => _printRaw(n)));
    }
    // tmp variables
    let argsString, escape;
    switch (node.type) {
        case "root":
            return _printRaw(node.content);
        case "argument":
            return [node.openMark, ..._printRaw(node.content), node.closeMark];
        case "comment":
            var suffix = node.suffixParbreak ? "" : linebreak;
            // A comment is responsible for printing its own leading whitespace
            var leadingWhitespace = "";
            if (node.sameline && node.leadingWhitespace) {
                leadingWhitespace = " ";
            }
            if (node.sameline) {
                return [
                    leadingWhitespace,
                    "%",
                    ..._printRaw(node.content),
                    suffix,
                ];
            }
            return [linebreak, "%", ..._printRaw(node.content), suffix];
        case "environment":
        case "mathenv":
        case "verbatim":
            var env = _printRaw(node.env);
            var envStart = [ESCAPE + "begin{", ...env, "}"];
            var envEnd = [ESCAPE + "end{", ...env, "}"];
            argsString =
                node.args == null ? [] : _printRaw(node.args);
            return [
                ...envStart,
                ...argsString,
                ..._printRaw(node.content),
                ...envEnd,
            ];
        case "displaymath":
            return [ESCAPE + "[", ..._printRaw(node.content), ESCAPE + "]"];
        case "group":
            return ["{", ..._printRaw(node.content), "}"];
        case "inlinemath":
            return ["$", ..._printRaw(node.content), "$"];
        case "macro":
            argsString = node.args == null ? [] : _printRaw(node.args);
            escape = node.escapeToken == null ? ESCAPE : node.escapeToken;
            return [escape, ..._printRaw(node.content), ...argsString];
        case "parbreak":
            return [linebreak, linebreak];
        case "string":
            return [node.content];
        case "verb":
            return [
                ESCAPE,
                node.env,
                node.escape,
                ..._printRaw(node.content),
                node.escape,
            ];
        case "whitespace":
            return [" "];
        default:
            console.warn("Cannot find render for node ", node, `(of type ${typeof node})`);
            return ["" + node];
    }
}
function printRaw(node, options) {
    const asArray = options != null ? options.asArray : false;
    const printedTokens = _printRaw(node);
    if (asArray) {
        return printedTokens;
    }
    return printedTokens.map((x) => (x === linebreak ? "\n" : x)).join("");
}


/***/ }),

/***/ "./unified-latex-util-render-info/index.ts":
/*!*************************************************!*\
  !*** ./unified-latex-util-render-info/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trimRenderInfo": () => (/* binding */ trimRenderInfo),
/* harmony export */   "updateRenderInfo": () => (/* binding */ updateRenderInfo)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");

/**
 * Updates the `._renderInfo` property on a node to include
 * whatever has been supplied to `renderInfo`. If `renderInfo`
 * is null, no update is performed.
 *
 * *This operation mutates `node`*
 */
function updateRenderInfo(node, renderInfo) {
    if (renderInfo != null) {
        node._renderInfo = Object.assign(Object.assign({}, (node._renderInfo || {})), renderInfo);
    }
    return node;
}
/**
 * Removes any `_renderInfo` and `position` tags present in the AST. This
 * operation is _destructive_.
 */
function trimRenderInfo(ast) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, (node) => {
        delete node._renderInfo;
        delete node.position;
    });
    return ast;
}
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify the `_renderInfo` of a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to compare the structure of an AST without position information or extra information
 * that is kept for pretty-printing, these functions can be used to remove/modify the `_renderInfo`
 * of an `Ast.Node`.
 */


/***/ }),

/***/ "./unified-latex-util-replace/index.ts":
/*!*********************************************!*\
  !*** ./unified-latex-util-replace/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNode": () => (/* reexport safe */ _libs_replace_node__WEBPACK_IMPORTED_MODULE_0__.replaceNode),
/* harmony export */   "replaceStreamingCommand": () => (/* reexport safe */ _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__.replaceStreamingCommand),
/* harmony export */   "replaceStreamingCommandInGroup": () => (/* reexport safe */ _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__.replaceStreamingCommandInGroup),
/* harmony export */   "unifiedLatexReplaceStreamingCommands": () => (/* reexport safe */ _libs_unified_latex_streaming_command__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexReplaceStreamingCommands)
/* harmony export */ });
/* harmony import */ var _libs_replace_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/replace-node */ "./unified-latex-util-replace/libs/replace-node.ts");
/* harmony import */ var _libs_unified_latex_streaming_command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-streaming-command */ "./unified-latex-util-replace/libs/unified-latex-streaming-command.ts");
/* harmony import */ var _libs_replace_streaming_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/replace-streaming-command */ "./unified-latex-util-replace/libs/replace-streaming-command.ts");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to recursively replace particular AST nodes.
 */


/***/ }),

/***/ "./unified-latex-util-replace/libs/replace-node.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-util-replace/libs/replace-node.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceNode": () => (/* binding */ replaceNode)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");

/**
 * Recursively replace nodes in `ast`. The `visitor` function is called on each node. If
 * `visitor` returns a node or an array of nodes, those nodes replace the node passed to `visitor`.
 * If `null` is returned, the node is deleted. If `undefined` is returned, no replacement happens.
 */
function replaceNode(ast, visitor) {
    (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, (node, info) => {
        let replacement = visitor(node, info.context);
        // Returning `undefined` or the same node means we shouldn't replace that node
        if (typeof replacement === "undefined" || replacement === node) {
            return;
        }
        if (!info.containingArray || info.index == null) {
            throw new Error("Trying to delete node, but cannot find containing array");
        }
        if (replacement === null ||
            (Array.isArray(replacement) && replacement.length === 0)) {
            // A null return means that we delete the current node
            info.containingArray.splice(info.index, 1);
            return info.index;
        }
        if (!Array.isArray(replacement)) {
            replacement = [replacement];
        }
        info.containingArray.splice(info.index, 1, ...replacement);
        // We don't want to *reprocess* the nodes we just inserted into the array,
        // lest we get stuck in a recursive loop if the replacement contains the original.
        // Thus we jump to the index after our replacements.
        return info.index + replacement.length;
    });
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/replace-streaming-command.ts":
/*!**********************************************************************!*\
  !*** ./unified-latex-util-replace/libs/replace-streaming-command.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceStreamingCommand": () => (/* binding */ replaceStreamingCommand),
/* harmony export */   "replaceStreamingCommandInGroup": () => (/* binding */ replaceStreamingCommandInGroup)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-split */ "./unified-latex-util-split/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _utils_first_significant_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/first-significant-node */ "./unified-latex-util-replace/libs/utils/first-significant-node.ts");
/* harmony import */ var _utils_replace_streaming_command_in_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/replace-streaming-command-in-array */ "./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts");
/* harmony import */ var _utils_wrap_significant_content__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/wrap-significant-content */ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts");






/**
 * Process streaming commands in a group. If needed, "escape" the group.
 * For example, `{\bfseries xx}` -> `\textbf{xx}`, but `{foo \bfseries xx}` -> `{foo \textbf{xx}}`.
 */
function replaceStreamingCommandInGroup(group, isStreamingCommand, replacer) {
    const content = group.content;
    // If the group started with a streaming command, we want to pop
    // out of the group. E.g. `{\bfseries foo}` -> `\textbf{foo}` and not `{\textbf{foo}}`
    let popFromGroup = isStreamingCommand((0,_utils_first_significant_node__WEBPACK_IMPORTED_MODULE_3__.firstSignificantNode)(content));
    let innerProcessed = replaceStreamingCommand(content, isStreamingCommand, replacer);
    // If the group consisted of just streaming commands (for some reason...)
    // it should be eliminated
    if (innerProcessed.length === 0) {
        return [];
    }
    if (popFromGroup) {
        return innerProcessed;
    }
    else {
        return [{ type: "group", content: innerProcessed }];
    }
}
/**
 * Given a group or a node array, look for streaming commands (e.g., `\bfseries`) and replace them
 * with the specified macro. The "arguments" of the streaming command are passed to `replacer` and the return
 * value of `replacer` is inserted into the stream.
 *
 * By default, this command will split at parbreaks (since commands like `\textbf{...} do not accept parbreaks in their
 * contents) and call `replacer` multiple times, once per paragraph.
 */
function replaceStreamingCommand(ast, isStreamingCommand, replacer) {
    if (typeof isStreamingCommand !== "function") {
        throw new Error(`'isStreamingCommand' must be a function, not '${typeof isStreamingCommand}'`);
    }
    let processedContent = [];
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.group(ast)) {
        processedContent = replaceStreamingCommandInGroup(ast, isStreamingCommand, replacer);
    }
    if (Array.isArray(ast)) {
        // Streaming commands that come at the end of a sequence of nodes don't do anything.
        // They also will consume whitespace, so we should remove them and the whitespace.
        const nodes = ast;
        let scanIndex = nodes.length;
        let sliceIndex = scanIndex;
        while (scanIndex > 0 &&
            (isStreamingCommand(nodes[scanIndex - 1]) ||
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(nodes[scanIndex - 1]))) {
            scanIndex--;
            if (isStreamingCommand(nodes[scanIndex])) {
                sliceIndex = scanIndex;
            }
        }
        if (sliceIndex !== nodes.length) {
            nodes.splice(sliceIndex);
        }
        const isPar = (node) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node, "par");
        // We split on both a parbreak and a literal `\par`. But we will
        // normalize everything to be parbreaks
        const splitByPar = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition)(nodes, isPar);
        splitByPar.separators = splitByPar.separators.map((sep) => _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(sep) ? sep : { type: "parbreak" });
        const replacers = [];
        let segments = splitByPar.segments.map((segment) => {
            function applyAccumulatedReplacers(nodes) {
                if (replacers.length === 0) {
                    return nodes;
                }
                return (0,_utils_wrap_significant_content__WEBPACK_IMPORTED_MODULE_5__.wrapSignificantContent)(nodes, composeReplacers(replacers));
            }
            const { foundStreamingCommands } = (0,_utils_replace_streaming_command_in_array__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommandInArray)(segment, isStreamingCommand, replacer);
            // All streaming commands in `segment` have now been replaced. However,
            // there might be commands from the previous paragraphs that should wrap
            // the current segment!
            const ret = applyAccumulatedReplacers(segment);
            // Any streaming commands from this segment will carry over to the next,
            // so keep track of them.
            foundStreamingCommands.forEach((macro) => {
                replacers.push((nodes) => {
                    const ret = replacer(nodes, macro);
                    if (!Array.isArray(ret)) {
                        return [ret];
                    }
                    return ret;
                });
            });
            return ret;
        });
        // Leading/trailing whitespace was hoisted in front/back of each replacer.
        // Since we're separated by parbreaks, we can safely trim all that whitespace.
        if (segments.length > 1) {
            segments.forEach((segment, i) => {
                if (i === 0) {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(segment);
                }
                else if (i === segments.length - 1) {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(segment);
                }
                else {
                    (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trim)(segment);
                }
            });
        }
        processedContent = (0,_unified_latex_util_split__WEBPACK_IMPORTED_MODULE_1__.unsplitOnMacro)({
            segments: segments,
            macros: splitByPar.separators,
        });
    }
    return processedContent;
}
/**
 * Given a sequence of replacer functions `[f, g, h]` return
 * `h \circ g \circ f`
 *
 * @param {((nodes: Ast.Node[]) => Ast.Node)[]} replacers
 * @returns {(nodes: Ast.Node[]) => Ast.Node}
 */
function composeReplacers(replacers) {
    if (replacers.length === 0) {
        throw new Error("Cannot compose zero replacement functions");
    }
    return (nodes) => {
        let ret = nodes;
        for (let i = 0; i < replacers.length; i++) {
            const func = replacers[i];
            ret = func(ret);
        }
        return ret;
    };
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/unified-latex-streaming-command.ts":
/*!****************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/unified-latex-streaming-command.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexReplaceStreamingCommands": () => (/* binding */ unifiedLatexReplaceStreamingCommands)
/* harmony export */ });
/* harmony import */ var _unified_latex_lint_utils_replace_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-lint/utils/replace-node */ "./unified-latex-lint/utils/replace-node.ts");
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./replace-streaming-command */ "./unified-latex-util-replace/libs/replace-streaming-command.ts");





/**
 * Unified plugin to replace all found streaming commands with their argument-style equivalents.
 * This only applies to sections of the tree with no math ancestor.
 *
 * @param options.replacer A record of macro names and replacer functions. A replacer function accepts content and the original streaming command and is expected to return the argument-style command. It may be called multiple times per streaming command.
 */
const unifiedLatexReplaceStreamingCommands = function unifiedLatexReplaceStreamingCommands(options) {
    const { replacers = {} } = options || {};
    const isReplaceable = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.createMacroMatcher(replacers);
    return (tree) => {
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (group, info) => {
            if (info.context.hasMathModeAncestor ||
                !group.content.some(isReplaceable)) {
                return;
            }
            let fixed = (0,_replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommand)(group, isReplaceable, (content, command) => {
                return replacers[command.content](content, command);
            });
            // We cannot replace the node unless we can access the containing array.
            if (!info.containingArray || info.index == null) {
                return;
            }
            // `fixed` may consist of only whitespace. If this is the case,
            // surrounding whitespace must trimmed before
            // inserting the group's contents.
            const prevToken = info.containingArray[info.index - 1];
            const nextToken = info.containingArray[info.index + 1];
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(prevToken) &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(fixed[0])) {
                (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(fixed);
            }
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(nextToken) &&
                _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.whitespaceLike(fixed[fixed.length - 1])) {
                (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(fixed);
            }
            (0,_unified_latex_lint_utils_replace_node__WEBPACK_IMPORTED_MODULE_0__.replaceNodeDuringVisit)(fixed, info);
        }, { test: _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.group });
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(tree, (nodes, info) => {
            if (info.context.hasMathModeAncestor ||
                !nodes.some(isReplaceable)) {
                return;
            }
            const replaced = (0,_replace_streaming_command__WEBPACK_IMPORTED_MODULE_4__.replaceStreamingCommand)(nodes, isReplaceable, (content, command) => {
                return replacers[command.content](content, command);
            });
            // If we get back a different array than we input, the replacement did
            // not happen in-place. In this case we need to manipulate `nodes`.
            if (replaced !== nodes) {
                nodes.length = 0;
                nodes.push(...replaced);
            }
        }, { includeArrays: true, test: Array.isArray });
    };
};


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/first-significant-node.ts":
/*!*************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/first-significant-node.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "firstSignificantNode": () => (/* binding */ firstSignificantNode)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Returns the first non-whitespace/non-comment node in `nodes`. If there is no such
 * node, `null` is returned.
 */
function firstSignificantNode(nodes) {
    let firstNode = null;
    for (const node of nodes) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            continue;
        }
        firstNode = node;
        break;
    }
    return firstNode;
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts":
/*!*********************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "joinWithoutExcessWhitespace": () => (/* binding */ joinWithoutExcessWhitespace)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");


/**
 * Is the node space-like? I.e., is it whitespace or
 * a comment with leading whitespace?
 */
function isSpaceLike(node) {
    return (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) ||
        (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node) && Boolean(node.leadingWhitespace)));
}
/**
 * Similar to `head.push(...tail)` except that whitespace at the start
 * of `tail` and the end of `head` is collapsed.
 */
function joinWithoutExcessWhitespace(head, tail) {
    if (tail.length === 0) {
        return;
    }
    if (head.length === 0) {
        head.push(...tail);
        return;
    }
    const headEnd = head[head.length - 1];
    const tailStart = tail[0];
    // Whitespace we can just trim off from either end
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(tailStart)) {
        head.push(...tail.slice(1));
        return;
    }
    // If there's no whitespace at one of the ends, no need to worry
    // unless `tailStart` is a comment, in which case it should "eat"
    // the whitespace
    if (!isSpaceLike(headEnd) || !isSpaceLike(tailStart)) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(tailStart)) {
            const comment = {
                type: "comment",
                content: tailStart.content,
                sameline: true,
                leadingWhitespace: true,
            };
            tail = tail.slice(1);
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_1__.trimStart)(tail);
            head.pop();
            head.push(comment, ...tail);
            return;
        }
        head.push(...tail);
        return;
    }
    // If we're here, we have a comment with leading whitespace on one side
    // and whitespace/comments on the other.
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(headEnd) && _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(tailStart)) {
        if (tailStart.leadingWhitespace || tailStart.sameline) {
            head.push({ type: "comment", content: tailStart.content }, ...tail.slice(1));
            return;
        }
        head.push(...tail);
        return;
    }
    // Exactly one side is a comment, so we should trim the whitespace and keep the comment,
    // but make sure the comment has leading whitespace!
    let comment = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(headEnd) ? headEnd : tailStart;
    if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(comment)) {
        throw new Error(`Expected a comment but found ${JSON.stringify(comment)}`);
    }
    if (!comment.leadingWhitespace || !comment.sameline) {
        comment = {
            type: "comment",
            content: comment.content,
            leadingWhitespace: true,
            sameline: true,
        };
    }
    head.pop();
    head.push(comment, ...tail.slice(1));
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts":
/*!*************************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/replace-streaming-command-in-array.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceStreamingCommandInArray": () => (/* binding */ replaceStreamingCommandInArray)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-trim */ "./unified-latex-util-trim/index.ts");
/* harmony import */ var _join_without_excess_whitespace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./join-without-excess-whitespace */ "./unified-latex-util-replace/libs/utils/join-without-excess-whitespace.ts");
/* harmony import */ var _wrap_significant_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrap-significant-content */ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts");



/**
 * Replace commands identified by `isStreamingCommand` with the return value of `replacer`.
 * E.g., the array `[head, streamingCommand, ...tail]` will become `[head, replacer(tail, streamingCommand)]`.
 * This function does not split based on parbreaks/etc.. It is right-associative and returns
 * the streaming commands that were encountered.
 */
function replaceStreamingCommandInArray(nodes, isStreamingCommand, replacer) {
    // Streaming commands that come at the end don't do anything,
    // so we should remove them
    while (nodes.length > 0 && isStreamingCommand(nodes[nodes.length - 1])) {
        nodes.pop();
        (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trimEnd)(nodes);
    }
    const foundStreamingCommands = [];
    for (let i = nodes.length - 1; i >= 0; i--) {
        const node = nodes[i];
        if (isStreamingCommand(node)) {
            const wrapper = (content) => replacer(content, node);
            let tail = nodes.slice(i + 1);
            // Streaming commands are followed by whitespace, which becomes unneeded when the commands are replaced.
            (0,_unified_latex_util_trim__WEBPACK_IMPORTED_MODULE_0__.trimStart)(tail);
            tail = (0,_wrap_significant_content__WEBPACK_IMPORTED_MODULE_2__.wrapSignificantContent)(tail, wrapper);
            foundStreamingCommands.push(node);
            // Trim off what we're about to replace!
            nodes.splice(i);
            (0,_join_without_excess_whitespace__WEBPACK_IMPORTED_MODULE_1__.joinWithoutExcessWhitespace)(nodes, tail);
        }
    }
    return { foundStreamingCommands };
}


/***/ }),

/***/ "./unified-latex-util-replace/libs/utils/wrap-significant-content.ts":
/*!***************************************************************************!*\
  !*** ./unified-latex-util-replace/libs/utils/wrap-significant-content.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapSignificantContent": () => (/* binding */ wrapSignificantContent)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Wraps `content` in the specified wrapper. This command is roughly equivalent to
 * `wrapper(content)` except that leading and trailing whitespace and comments are extracted
 * from `content` and moved to the front or back of the return array. For example,
 * `[" ", "foo", "bar", "% xxx"]` -> `[" ", wrapped(["foo", "bar"]), "% xxx"]`.
 *
 */
function wrapSignificantContent(content, wrapper) {
    let hoistUntil = 0;
    let hoistAfter = content.length;
    for (let i = 0; i < content.length; i++) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(content[i]) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(content[i])) {
            hoistUntil = i + 1;
            continue;
        }
        break;
    }
    for (let j = content.length - 1; j >= 0; j--) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(content[j]) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(content[j])) {
            hoistAfter = j;
            continue;
        }
        break;
    }
    if (hoistUntil === 0 && hoistAfter === content.length) {
        return ensureArray(wrapper(content));
    }
    const frontMatter = content.slice(0, hoistUntil);
    const middle = content.slice(hoistUntil, hoistAfter);
    const backMatter = content.slice(hoistAfter, content.length);
    return frontMatter.concat(wrapper(middle), backMatter);
}
function ensureArray(x) {
    if (!Array.isArray(x)) {
        return [x];
    }
    return x;
}


/***/ }),

/***/ "./unified-latex-util-split/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-split/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayJoin": () => (/* reexport safe */ _libs_array_join__WEBPACK_IMPORTED_MODULE_3__.arrayJoin),
/* harmony export */   "splitOnCondition": () => (/* reexport safe */ _libs_split_on_condition__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition),
/* harmony export */   "splitOnMacro": () => (/* reexport safe */ _libs_split_on_macro__WEBPACK_IMPORTED_MODULE_0__.splitOnMacro),
/* harmony export */   "unsplitOnMacro": () => (/* reexport safe */ _libs_unsplit_on_macro__WEBPACK_IMPORTED_MODULE_2__.unsplitOnMacro)
/* harmony export */ });
/* harmony import */ var _libs_split_on_macro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/split-on-macro */ "./unified-latex-util-split/libs/split-on-macro.ts");
/* harmony import */ var _libs_split_on_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/split-on-condition */ "./unified-latex-util-split/libs/split-on-condition.ts");
/* harmony import */ var _libs_unsplit_on_macro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unsplit-on-macro */ "./unified-latex-util-split/libs/unsplit-on-macro.ts");
/* harmony import */ var _libs_array_join__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/array-join */ "./unified-latex-util-split/libs/array-join.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to manipulate `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want break apart or join an array of nodes based on a condition. For example,
 * this is used to split on `&` characters in the `align` environment.
 */ 


/***/ }),

/***/ "./unified-latex-util-split/libs/array-join.ts":
/*!*****************************************************!*\
  !*** ./unified-latex-util-split/libs/array-join.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayJoin": () => (/* binding */ arrayJoin)
/* harmony export */ });
/**
 * Joins an array of arrays with the item `sep`
 */
function arrayJoin(array, sep) {
    return array.flatMap((item, i) => {
        if (i === 0) {
            return item;
        }
        if (Array.isArray(sep)) {
            return [...sep, ...item];
        }
        else {
            return [sep, ...item];
        }
    });
}


/***/ }),

/***/ "./unified-latex-util-split/libs/split-on-condition.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-split/libs/split-on-condition.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitOnCondition": () => (/* binding */ splitOnCondition)
/* harmony export */ });
/**
 * Split a list of nodes based on whether `splitFunc` returns `true`.
 * If `onlySplitOnFirstOccurrence` is set to true in the `options` object, then
 * there will be at most two segments returned.
 */
function splitOnCondition(nodes, splitFunc = () => false, options) {
    if (!Array.isArray(nodes)) {
        throw new Error(`Can only split an Array, not ${nodes}`);
    }
    const { onlySplitOnFirstOccurrence = false } = options || {};
    const splitIndices = [];
    for (let i = 0; i < nodes.length; i++) {
        if (splitFunc(nodes[i])) {
            splitIndices.push(i);
            if (onlySplitOnFirstOccurrence) {
                break;
            }
        }
    }
    // Short circuit if there is no splitting to be done
    if (splitIndices.length === 0) {
        return { segments: [nodes], separators: [] };
    }
    let separators = splitIndices.map((i) => nodes[i]);
    let segments = splitIndices.map((splitEnd, i) => {
        const splitStart = i === 0 ? 0 : splitIndices[i - 1] + 1;
        return nodes.slice(splitStart, splitEnd);
    });
    segments.push(nodes.slice(splitIndices[splitIndices.length - 1] + 1, nodes.length));
    return { segments, separators };
}


/***/ }),

/***/ "./unified-latex-util-split/libs/split-on-macro.ts":
/*!*********************************************************!*\
  !*** ./unified-latex-util-split/libs/split-on-macro.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitOnMacro": () => (/* binding */ splitOnMacro)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _split_on_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./split-on-condition */ "./unified-latex-util-split/libs/split-on-condition.ts");


/**
 * Split an array of AST nodes based on a macro. An object `{segments: [], macros: []}`
 * is returned. The original array is reconstructed as
 * `segments[0] + macros[0] + segments[1] + ...`.
 *
 * @param {[object]} ast
 * @param {(string|[string])} macroName
 * @returns {{segments: [object], macros: [object]}}
 */
function splitOnMacro(ast, macroName) {
    if (typeof macroName === "string") {
        macroName = [macroName];
    }
    if (!Array.isArray(macroName)) {
        throw new Error("Type coercion failed");
    }
    const isSeparator = _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.createMacroMatcher(macroName);
    const { segments, separators } = (0,_split_on_condition__WEBPACK_IMPORTED_MODULE_1__.splitOnCondition)(ast, isSeparator);
    return { segments, macros: separators };
}


/***/ }),

/***/ "./unified-latex-util-split/libs/unsplit-on-macro.ts":
/*!***********************************************************!*\
  !*** ./unified-latex-util-split/libs/unsplit-on-macro.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsplitOnMacro": () => (/* binding */ unsplitOnMacro)
/* harmony export */ });
/**
 * Does the reverse of `splitOnMacro`
 */
function unsplitOnMacro({ segments, macros, }) {
    if (segments.length === 0) {
        console.warn("Trying to join zero segments");
        return [];
    }
    if (segments.length !== macros.length + 1) {
        console.warn("Mismatch between lengths of macros and segments when trying to unsplit");
    }
    let ret = segments[0];
    for (let i = 0; i < macros.length; i++) {
        // Even though the type of macros[i] is node and not array,
        // Array.concat still works
        ret = ret.concat(macros[i]).concat(segments[i + 1]);
    }
    return ret;
}


/***/ }),

/***/ "./unified-latex-util-trim/index.ts":
/*!******************************************!*\
  !*** ./unified-latex-util-trim/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasWhitespaceEquivalent": () => (/* reexport safe */ _libs_has_whitespace_equivalent__WEBPACK_IMPORTED_MODULE_3__.hasWhitespaceEquivalent),
/* harmony export */   "trim": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trim),
/* harmony export */   "trimEnd": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trimEnd),
/* harmony export */   "trimStart": () => (/* reexport safe */ _libs_trim__WEBPACK_IMPORTED_MODULE_0__.trimStart),
/* harmony export */   "unifiedLatexTrimEnvironmentContents": () => (/* reexport safe */ _libs_unified_latex_trim_environment_contents__WEBPACK_IMPORTED_MODULE_1__.unifiedLatexTrimEnvironmentContents),
/* harmony export */   "unifiedLatexTrimRoot": () => (/* reexport safe */ _libs_unified_latex_trim_root__WEBPACK_IMPORTED_MODULE_2__.unifiedLatexTrimRoot)
/* harmony export */ });
/* harmony import */ var _libs_trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/trim */ "./unified-latex-util-trim/libs/trim.ts");
/* harmony import */ var _libs_unified_latex_trim_environment_contents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/unified-latex-trim-environment-contents */ "./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts");
/* harmony import */ var _libs_unified_latex_trim_root__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/unified-latex-trim-root */ "./unified-latex-util-trim/libs/unified-latex-trim-root.ts");
/* harmony import */ var _libs_has_whitespace_equivalent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libs/has-whitespace-equivalent */ "./unified-latex-util-trim/libs/has-whitespace-equivalent.ts");




// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help modify a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to remove whitespace from the ends of an array of nodes.
 *
 * Note that whitespace can come from a `Ast.Whitespace` node or from an
 * `Ast.Comment` node that has leading whitespace. These functions take care
 * to deal with both situations.
 */


/***/ }),

/***/ "./unified-latex-util-trim/libs/has-whitespace-equivalent.ts":
/*!*******************************************************************!*\
  !*** ./unified-latex-util-trim/libs/has-whitespace-equivalent.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasWhitespaceEquivalent": () => (/* binding */ hasWhitespaceEquivalent)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Returns whether the array has whitespace at the start/end. Comments with `leadingWhitespace === true`
 * are counted as whitespace. Other comments are ignored.
 */
function hasWhitespaceEquivalent(nodes) {
    let start = false;
    let end = false;
    for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            // A comment with leading whitespace will render with leading whitespace,
            // so if we encounter one, we should consider ourselves to have leading whitespace.
            if (node.leadingWhitespace) {
                start = true;
                break;
            }
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node)) {
            start = true;
        }
        break;
    }
    for (let j = nodes.length - 1; j >= 0; j--) {
        const node = nodes[j];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            if (node.leadingWhitespace) {
                end = true;
                break;
            }
            continue;
        }
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node)) {
            end = true;
        }
        break;
    }
    return { start, end };
}


/***/ }),

/***/ "./unified-latex-util-trim/libs/trim.ts":
/*!**********************************************!*\
  !*** ./unified-latex-util-trim/libs/trim.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trim": () => (/* binding */ trim),
/* harmony export */   "trimEnd": () => (/* binding */ trimEnd),
/* harmony export */   "trimStart": () => (/* binding */ trimStart)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * Trims whitespace and parbreaks from the start and end
 * of an array. The number of trimmed nodes is returned.
 * Special care is taken to preserve comments, though any whitespace
 * before the first comment(s) or after the last comment(s) is trimmed.
 */
function trim(nodes) {
    if (!Array.isArray(nodes)) {
        console.warn("Trying to trim a non-array ast", nodes);
        return nodes;
    }
    const { trimmedStart } = trimStart(nodes);
    const { trimmedEnd } = trimEnd(nodes);
    return { trimmedStart, trimmedEnd };
}
/**
 * Trim whitespace and parbreaks from the left of an array.
 */
function trimStart(nodes) {
    const { start } = amountOfLeadingAndTrailingWhitespace(nodes);
    nodes.splice(0, start);
    // If there are comments at the start, they might have leading whitespace.
    // This leading whitespace should be trimmed
    for (const leadingToken of nodes) {
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(leadingToken)) {
            break;
        }
        if (leadingToken.leadingWhitespace || leadingToken.sameline) {
            leadingToken.leadingWhitespace = false;
            // We remove the position information from this token to indicate that we've edited it
            delete leadingToken.position;
        }
        // Special care must be taken. If the comment was on the same line as a
        // parskip, it will no longer be on the same line after the trimming.
        // Thus, we must modify the comment.
        if (start > 0 && leadingToken.sameline) {
            leadingToken.sameline = false;
            delete leadingToken.position;
        }
    }
    return { trimmedStart: start };
}
/**
 * Trim whitespace and parbreaks from the right of an array.
 */
function trimEnd(nodes) {
    const { end } = amountOfLeadingAndTrailingWhitespace(nodes);
    nodes.splice(nodes.length - end, end);
    // Trim off any spaces belonging to trailing comments
    for (let i = nodes.length - 1; i >= 0; i--) {
        const trailingToken = nodes[i];
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(trailingToken)) {
            break;
        }
        // We don't trim spaces before trailing same-line comments. This is a stylistic choice
        // so that
        // `foo %xxx` does not become `foo%xxx`.
        // The latter is strictly "correct" for a trim function, but it is prettier to format
        // code preserving the space before the sameline comment
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(trailingToken) &&
            trailingToken.leadingWhitespace &&
            !trailingToken.sameline) {
            trailingToken.leadingWhitespace = false;
            delete trailingToken.position;
        }
    }
    return { trimmedEnd: end };
}
/**
 * Returns the number of whitespace/parbreak nodes at the start and end of an array.
 */
function amountOfLeadingAndTrailingWhitespace(ast) {
    let start = 0;
    let end = 0;
    for (const node of ast) {
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node)) {
            start++;
        }
        else {
            break;
        }
    }
    if (start === ast.length) {
        return { start, end: 0 };
    }
    // Find the padding on the right
    for (let i = ast.length - 1; i >= 0; i--) {
        const node = ast[i];
        if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.parbreak(node)) {
            end++;
        }
        else {
            break;
        }
    }
    return { start, end };
}


/***/ }),

/***/ "./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts":
/*!*********************************************************************************!*\
  !*** ./unified-latex-util-trim/libs/unified-latex-trim-environment-contents.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexTrimEnvironmentContents": () => (/* binding */ unifiedLatexTrimEnvironmentContents)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-visit */ "./unified-latex-util-visit/index.ts");
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./trim */ "./unified-latex-util-trim/libs/trim.ts");



/**
 * Unified plugin to trim the whitespace from the start/end of any environments, including
 * math environments.
 */
const unifiedLatexTrimEnvironmentContents = function unifiedLatexTrimEnvironmentContents() {
    return (tree) => {
        (0,_unified_latex_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, (node) => {
            if (!(_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.math(node) || _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.anyEnvironment(node))) {
                return;
            }
            // If the first thing in the environment is a sameline comment,
            // we actually want to start trimming *after* it.
            let firstNode = node.content[0];
            if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(firstNode) && firstNode.sameline) {
                firstNode.suffixParbreak = false;
                (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trimEnd)(node.content);
                // We play a nasty trick here. This call to `trimStart`
                // will actually modify `node.content` if `node.content.slice(1)` starts
                // with a comment that has leading whitespace (it will remove that whitespace).
                // However, it won't remove any elements from `node.content`; we need
                // to do that ourselves.
                const { trimmedStart } = (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trimStart)(node.content.slice(1));
                node.content.splice(1, trimmedStart);
            }
            else {
                (0,_trim__WEBPACK_IMPORTED_MODULE_2__.trim)(node.content);
            }
        });
    };
};


/***/ }),

/***/ "./unified-latex-util-trim/libs/unified-latex-trim-root.ts":
/*!*****************************************************************!*\
  !*** ./unified-latex-util-trim/libs/unified-latex-trim-root.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unifiedLatexTrimRoot": () => (/* binding */ unifiedLatexTrimRoot)
/* harmony export */ });
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trim */ "./unified-latex-util-trim/libs/trim.ts");

/**
 * Unified plugin to trim the whitespace from the start/end of the root element.
 */
const unifiedLatexTrimRoot = function unifiedLatexTrimRoot() {
    return (tree) => {
        (0,_trim__WEBPACK_IMPORTED_MODULE_0__.trim)(tree.content);
    };
};


/***/ }),

/***/ "./unified-latex-util-visit/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-visit/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.CONTINUE),
/* harmony export */   "EXIT": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.EXIT),
/* harmony export */   "SKIP": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.SKIP),
/* harmony export */   "visit": () => (/* reexport safe */ _libs_visit__WEBPACK_IMPORTED_MODULE_0__.visit)
/* harmony export */ });
/* harmony import */ var _libs_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/visit */ "./unified-latex-util-visit/libs/visit.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to traverse a `unified-latex` Abstract Syntax Tree (AST). `visit` is
 * very similar to [estree-util-visit](https://github.com/syntax-tree/estree-util-visit).
 *
 * ## When should I use this?
 *
 * If you want to recursively replace particular AST nodes.
 */


/***/ }),

/***/ "./unified-latex-util-visit/libs/list-math-children.ts":
/*!*************************************************************!*\
  !*** ./unified-latex-util-visit/libs/list-math-children.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "listMathChildren": () => (/* binding */ listMathChildren)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");

/**
 * List all props of the current node that should be processed
 * in math mode or not in math mode. If math mode is not specified in the node's render
 * info, empty lists are returned.
 *
 * For example `\text{foo}` will report that `args` should *not* be processed in math mode,
 * since it's contents should always be processed in text mode.
 */
function listMathChildren(node) {
    const NULL_RETURN = { enter: [], leave: [] };
    if (Array.isArray(node)) {
        return NULL_RETURN;
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.math(node)) {
        // When we enter a math environment, our content is always
        // considered math mode
        return { enter: ["content"], leave: [] };
    }
    const renderInfo = node._renderInfo || {};
    if (renderInfo.inMathMode == null) {
        return NULL_RETURN;
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.macro(node)) {
        if (renderInfo.inMathMode === true) {
            return { enter: ["args"], leave: [] };
        }
        else if (renderInfo.inMathMode === false) {
            return { enter: [], leave: ["args"] };
        }
    }
    if (_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.environment(node)) {
        if (renderInfo.inMathMode === true) {
            return { enter: ["content"], leave: [] };
        }
        else {
            return { enter: [], leave: ["content"] };
        }
    }
    return NULL_RETURN;
}


/***/ }),

/***/ "./unified-latex-util-visit/libs/visit.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-visit/libs/visit.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": () => (/* binding */ CONTINUE),
/* harmony export */   "EXIT": () => (/* binding */ EXIT),
/* harmony export */   "SKIP": () => (/* binding */ SKIP),
/* harmony export */   "visit": () => (/* binding */ visit)
/* harmony export */ });
/* harmony import */ var _list_math_children__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-math-children */ "./unified-latex-util-visit/libs/list-math-children.ts");

/**
 * Continue traversing as normal
 */
const CONTINUE = Symbol("continue");
/**
 * Do not traverse this node’s children
 */
const SKIP = Symbol("skip");
/**
 * Stop traversing immediately
 */
const EXIT = Symbol("exit");
const DEFAULT_CONTEXT = {
    inMathMode: false,
    hasMathModeAncestor: false,
};
/**
 * Visit children of tree which pass a test
 *
 * @param {Node} tree Abstract syntax tree to walk
 * @param {Visitor|Visitors} [visitor] Function to run for each node
 */
function visit(tree, visitor, options) {
    const { startingContext = DEFAULT_CONTEXT, test = () => true, includeArrays = false, } = options || {};
    let enter;
    let leave;
    if (typeof visitor === "function") {
        enter = visitor;
    }
    else if (visitor && typeof visitor === "object") {
        enter = visitor.enter;
        leave = visitor.leave;
    }
    walk(tree, {
        key: undefined,
        index: undefined,
        parents: [],
        containingArray: undefined,
        context: Object.assign({}, startingContext),
    });
    /**
     * @param {Node} node
     * @param {string?} key
     * @param {number?} index
     * @param {Array.<Node>} parents
     */
    function walk(node, { key, index, parents, context, containingArray }) {
        const nodePassesTest = includeArrays
            ? test(node, { key, index, parents, context, containingArray })
            : !Array.isArray(node) &&
                test(node, { key, index, parents, context, containingArray });
        const result = enter && nodePassesTest
            ? toResult(enter(node, {
                key,
                index,
                parents,
                context,
                containingArray,
            }))
            : [CONTINUE];
        if (result[0] === EXIT) {
            return result;
        }
        if (result[0] === SKIP) {
            return leave && nodePassesTest
                ? toResult(leave(node, {
                    key,
                    index,
                    parents,
                    context,
                    containingArray,
                }))
                : result;
        }
        if (Array.isArray(node)) {
            // The `value` array might be modified in place as we traverse it, so
            // we use a traditional for loop.
            for (let index = 0; index > -1 && index < node.length; index++) {
                const item = node[index];
                const result = walk(item, {
                    key,
                    index,
                    parents,
                    context,
                    containingArray: node,
                });
                if (result[0] === EXIT) {
                    return result;
                }
                if (typeof result[1] === "number") {
                    // The for loop will increment i every pass. However,
                    // if an index was returned, that's where we want to start next time.
                    index = result[1] - 1;
                }
            }
        }
        else {
            // We don't want to recursively apply to the `content`
            // of all types (e.g., comments and macros), so specify
            // a blacklist.
            let childProps = ["content", "args"];
            switch (node.type) {
                case "macro":
                    childProps = ["args"];
                    break;
                case "comment":
                case "string":
                case "verb":
                case "verbatim":
                    childProps = [];
                    break;
                default:
                    break;
            }
            const mathModeProps = (0,_list_math_children__WEBPACK_IMPORTED_MODULE_0__.listMathChildren)(node);
            for (const key of childProps) {
                const value = node[key];
                const grandparents = [node].concat(parents);
                if (value == null) {
                    continue;
                }
                // We may switch in/out of math mode as we pass to node[key]
                const newContext = Object.assign({}, context);
                if (mathModeProps.enter.includes(key)) {
                    newContext.inMathMode = true;
                    newContext.hasMathModeAncestor = true;
                }
                else if (mathModeProps.leave.includes(key)) {
                    newContext.inMathMode = false;
                }
                const result = walk(value, {
                    key,
                    index: undefined,
                    parents: grandparents,
                    context: newContext,
                    containingArray: undefined,
                });
                if (result[0] === EXIT) {
                    return result;
                }
            }
        }
        return leave && nodePassesTest
            ? toResult(leave(node, {
                key,
                index,
                parents,
                context,
                containingArray,
            }))
            : result;
    }
}
/**
 * Ensures a result is an `ActionTuple`s
 */
function toResult(value) {
    if (value == null) {
        return [CONTINUE];
    }
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === "number") {
        return [CONTINUE, value];
    }
    return [value];
}


/***/ }),

/***/ "./unified-latex-util-pegjs/libs/pegjs-parsers.js":
/*!********************************************************!*\
  !*** ./unified-latex-util-pegjs/libs/pegjs-parsers.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlignEnvironmentPegParser": () => (/* reexport default export from named module */ _grammars_align_environment_pegjs__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "ArgSpecPegParser": () => (/* reexport default export from named module */ _grammars_xparse_argspec_pegjs__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "GluePegParser": () => (/* reexport default export from named module */ _grammars_tex_glue_pegjs__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   "LatexPegParser": () => (/* reexport default export from named module */ _grammars_latex_pegjs__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "LigaturesPegParser": () => (/* reexport default export from named module */ _grammars_ligatures_pegjs__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "MacroSubstitutionPegParser": () => (/* reexport default export from named module */ _grammars_macro_substitutions_pegjs__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "PgfkeysPegParser": () => (/* reexport default export from named module */ _grammars_pgfkeys_pegjs__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "SystemePegParser": () => (/* reexport default export from named module */ _grammars_systeme_environment_pegjs__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   "TabularPegParser": () => (/* reexport default export from named module */ _grammars_tabular_spec_pegjs__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "XColorPegParser": () => (/* reexport default export from named module */ _grammars_xcolor_expressions_pegjs__WEBPACK_IMPORTED_MODULE_6__)
/* harmony export */ });
/* harmony import */ var _grammars_latex_pegjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../grammars/latex.pegjs */ "./unified-latex-util-pegjs/grammars/latex.pegjs");
/* harmony import */ var _grammars_align_environment_pegjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammars/align-environment.pegjs */ "./unified-latex-util-pegjs/grammars/align-environment.pegjs");
/* harmony import */ var _grammars_xparse_argspec_pegjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grammars/xparse-argspec.pegjs */ "./unified-latex-util-pegjs/grammars/xparse-argspec.pegjs");
/* harmony import */ var _grammars_pgfkeys_pegjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../grammars/pgfkeys.pegjs */ "./unified-latex-util-pegjs/grammars/pgfkeys.pegjs");
/* harmony import */ var _grammars_macro_substitutions_pegjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../grammars/macro-substitutions.pegjs */ "./unified-latex-util-pegjs/grammars/macro-substitutions.pegjs");
/* harmony import */ var _grammars_ligatures_pegjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../grammars/ligatures.pegjs */ "./unified-latex-util-pegjs/grammars/ligatures.pegjs");
/* harmony import */ var _grammars_xcolor_expressions_pegjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../grammars/xcolor-expressions.pegjs */ "./unified-latex-util-pegjs/grammars/xcolor-expressions.pegjs");
/* harmony import */ var _grammars_tabular_spec_pegjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../grammars/tabular-spec.pegjs */ "./unified-latex-util-pegjs/grammars/tabular-spec.pegjs");
/* harmony import */ var _grammars_systeme_environment_pegjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../grammars/systeme-environment.pegjs */ "./unified-latex-util-pegjs/grammars/systeme-environment.pegjs");
/* harmony import */ var _grammars_tex_glue_pegjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../grammars/tex-glue.pegjs */ "./unified-latex-util-pegjs/grammars/tex-glue.pegjs");
// This file needs to be here because typescript does not know how to use babel's transpiler
// to directly load Pegjs grammars.














/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*************************************!*\
  !*** ./unified-latex-ctan/index.ts ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environmentInfo": () => (/* binding */ environmentInfo),
/* harmony export */   "macroInfo": () => (/* binding */ macroInfo)
/* harmony export */ });
/* harmony import */ var _package_cleveref__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./package/cleveref */ "./unified-latex-ctan/package/cleveref/index.ts");
/* harmony import */ var _package_exam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./package/exam */ "./unified-latex-ctan/package/exam/index.ts");
/* harmony import */ var _package_geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./package/geometry */ "./unified-latex-ctan/package/geometry/index.ts");
/* harmony import */ var _package_hyperref__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./package/hyperref */ "./unified-latex-ctan/package/hyperref/index.ts");
/* harmony import */ var _package_latex2e__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./package/latex2e */ "./unified-latex-ctan/package/latex2e/index.ts");
/* harmony import */ var _package_makeidx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./package/makeidx */ "./unified-latex-ctan/package/makeidx/index.ts");
/* harmony import */ var _package_mathtools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./package/mathtools */ "./unified-latex-ctan/package/mathtools/index.ts");
/* harmony import */ var _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./package/nicematrix */ "./unified-latex-ctan/package/nicematrix/index.ts");
/* harmony import */ var _package_systeme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package/systeme */ "./unified-latex-ctan/package/systeme/index.ts");
/* harmony import */ var _package_tikz__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./package/tikz */ "./unified-latex-ctan/package/tikz/index.ts");
/* harmony import */ var _package_xcolor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./package/xcolor */ "./unified-latex-ctan/package/xcolor/index.ts");
/* harmony import */ var _package_xparse__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./package/xparse */ "./unified-latex-ctan/package/xparse/index.ts");












/**
 * Info about the macros for available ctan packages. `latex2e` contains
 * the standard macros for LaTeX.
 */
const macroInfo = {
    cleveref: _package_cleveref__WEBPACK_IMPORTED_MODULE_0__.macros,
    exam: _package_exam__WEBPACK_IMPORTED_MODULE_1__.macros,
    geometry: _package_geometry__WEBPACK_IMPORTED_MODULE_2__.macros,
    hyperref: _package_hyperref__WEBPACK_IMPORTED_MODULE_3__.macros,
    latex2e: _package_latex2e__WEBPACK_IMPORTED_MODULE_4__.macros,
    makeidx: _package_makeidx__WEBPACK_IMPORTED_MODULE_5__.macros,
    mathtools: _package_mathtools__WEBPACK_IMPORTED_MODULE_6__.macros,
    nicematrix: _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__.macros,
    systeme: _package_systeme__WEBPACK_IMPORTED_MODULE_8__.macros,
    tikz: _package_tikz__WEBPACK_IMPORTED_MODULE_9__.macros,
    xcolor: _package_xcolor__WEBPACK_IMPORTED_MODULE_10__.macros,
    xparse: _package_xparse__WEBPACK_IMPORTED_MODULE_11__.macros,
};
/**
 * Info about the environments for available ctan packages. `latex2e` contains
 * the standard environments for LaTeX.
 */
const environmentInfo = {
    cleveref: _package_cleveref__WEBPACK_IMPORTED_MODULE_0__.environments,
    exam: _package_exam__WEBPACK_IMPORTED_MODULE_1__.environments,
    geometry: _package_geometry__WEBPACK_IMPORTED_MODULE_2__.environments,
    hyperref: _package_hyperref__WEBPACK_IMPORTED_MODULE_3__.environments,
    latex2e: _package_latex2e__WEBPACK_IMPORTED_MODULE_4__.environments,
    makeidx: _package_makeidx__WEBPACK_IMPORTED_MODULE_5__.environments,
    mathtools: _package_mathtools__WEBPACK_IMPORTED_MODULE_6__.environments,
    nicematrix: _package_nicematrix__WEBPACK_IMPORTED_MODULE_7__.environments,
    systeme: _package_systeme__WEBPACK_IMPORTED_MODULE_8__.environments,
    tikz: _package_tikz__WEBPACK_IMPORTED_MODULE_9__.environments,
    xcolor: _package_xcolor__WEBPACK_IMPORTED_MODULE_10__.environments,
    xparse: _package_xparse__WEBPACK_IMPORTED_MODULE_11__.environments,
};
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Macro/environment definitions and utilities for specific LaTeX packages from CTAN.
 *
 * Note: basic LaTeX macro/environment definitions come from the `latex2e` package, even though
 * this is technically not a CTAN "package".
 *
 * ## When should I use this?
 *
 * If you want information about special functions/macros from particular CTAN packages, or
 * you need to parse special environments.
 */

})();

var __webpack_exports__environmentInfo = __webpack_exports__.environmentInfo;
var __webpack_exports__macroInfo = __webpack_exports__.macroInfo;
export { __webpack_exports__environmentInfo as environmentInfo, __webpack_exports__macroInfo as macroInfo };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,