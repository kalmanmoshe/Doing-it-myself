import * as Ast from "../../unified-latex-types";
/**
 * Compute the xparse argument signature of the `\newcommand`/`\renewcommand`/etc. macro.
 */
export declare function newcommandMacroToSpec(node: Ast.Macro): string;
/**
 * Get the name of the macro defined with `\newcommand`/`\renewcommand`/etc..
 */
export declare function newcommandMacroToName(node: Ast.Macro): string;
/**
 * Returns the AST that should be used for substitution. E.g.,
 * `\newcommand{\foo}{\bar{#1}}` would return `\bar{#1}`.
 */
export declare function newcommandMacroToSubstitutionAst(node: Ast.Macro): Ast.Node[];
/**
 * A factory function. Given a macro definition, creates a function that accepts
 * the macro's arguments and outputs an Ast with the contents substituted (i.e.,
 * it expands the macro).
 */
export declare function createMacroExpander(substitution: Ast.Node[]): (macro: Ast.Macro) => Ast.Node[];
