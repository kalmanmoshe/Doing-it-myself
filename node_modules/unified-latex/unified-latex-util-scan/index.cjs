/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/trie-prefix-tree/dist/append.js":
/*!**********************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/append.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = append;

var _config = __webpack_require__(/*! ./config */ "../../node_modules/trie-prefix-tree/dist/config.js");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function append(trie, letter, index, array) {
  var isEndWordLetter = letter === _config2.default.END_WORD;
  var isLastLetter = index === array.length - 1;

  if (isEndWordLetter && !isLastLetter) {
    trie[_config2.default.END_WORD] = 1;
    trie[_config2.default.END_WORD_REPLACER] = {};
    trie = trie[_config2.default.END_WORD_REPLACER];
  } else {
    trie[letter] = trie[letter] || {};
    trie = trie[letter];
  }

  if (isLastLetter) {
    trie[_config2.default.END_WORD] = 1;
  }

  return trie;
}
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/checkPrefix.js":
/*!***************************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/checkPrefix.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = checkPrefix;

var _utils = __webpack_require__(/*! ./utils */ "../../node_modules/trie-prefix-tree/dist/utils.js");

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function checkPrefix(prefixNode, prefix) {
  var input = prefix.toLowerCase().split('');
  var prefixFound = input.every(function (letter, index) {
    if (!prefixNode[letter]) {
      return false;
    }
    return prefixNode = prefixNode[letter];
  });

  return {
    prefixFound: prefixFound,
    prefixNode: prefixNode
  };
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/config.js":
/*!**********************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/config.js ***!
  \**********************************************************/
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = {
  END_WORD: '$',
  END_WORD_REPLACER: '9a219a89-91cd-42e2-abd5-eb113af08ca8',
  PERMS_MIN_LEN: 2
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/create.js":
/*!**********************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/create.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports["default"] = create;

var _append = __webpack_require__(/*! ./append */ "../../node_modules/trie-prefix-tree/dist/append.js");

var _append2 = _interopRequireDefault(_append);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function create(input) {
  if (!Array.isArray(input)) {
    throw 'Expected parameter Array, received ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input));
  }

  var trie = input.reduce(function (accumulator, item) {
    item.toLowerCase().split('').reduce(_append2.default, accumulator);

    return accumulator;
  }, {});

  return trie;
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports["default"] = function (input) {
  if (!Array.isArray(input)) {
    throw 'Expected parameter Array, received ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input));
  }

  var trie = (0, _create2.default)([].concat(_toConsumableArray(input)));

  return {
    /**
     * Get the generated raw trie object
    */
    tree: function tree() {
      return trie;
    },


    /**
     * Get a string representation of the trie
    */
    dump: function dump() {
      var spacer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      return _utils2.default.stringify(trie, spacer);
    },


    /**
     * Add a new word to the trie
     */
    addWord: function addWord(word) {
      if (typeof word !== 'string' || word === '') {
        throw 'Expected parameter string, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));
      }

      var reducer = function reducer() {
        return _append2.default.apply(undefined, arguments);
      };

      var input = word.toLowerCase().split('');
      input.reduce(reducer, trie);

      return this;
    },


    /**
     * Remove an existing word from the trie
     */
    removeWord: function removeWord(word) {
      if (typeof word !== 'string' || word === '') {
        throw 'Expected parameter string, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));
      }

      var _checkPrefix = (0, _checkPrefix6.default)(trie, word),
          prefixFound = _checkPrefix.prefixFound,
          prefixNode = _checkPrefix.prefixNode;

      if (prefixFound) {
        delete prefixNode[_config2.default.END_WORD];
      }

      return this;
    },


    /**
     * Check a prefix is valid
     * @returns Boolean
    */
    isPrefix: function isPrefix(prefix) {
      if (typeof prefix !== 'string') {
        throw 'Expected string prefix, received ' + (typeof prefix === 'undefined' ? 'undefined' : _typeof(prefix));
      }

      var _checkPrefix2 = (0, _checkPrefix6.default)(trie, prefix),
          prefixFound = _checkPrefix2.prefixFound;

      return prefixFound;
    },


    /**
    * Get a list of all words in the trie with the given prefix
    * @returns Array
    */
    getPrefix: function getPrefix(strPrefix) {
      var sorted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (typeof strPrefix !== 'string') {
        throw 'Expected string prefix, received ' + (typeof strPrefix === 'undefined' ? 'undefined' : _typeof(strPrefix));
      }

      if (typeof sorted !== 'boolean') {
        throw 'Expected sort parameter as boolean, received ' + (typeof sorted === 'undefined' ? 'undefined' : _typeof(sorted));
      }

      if (!this.isPrefix(strPrefix)) {
        return [];
      }

      var prefixNode = strPrefix.length ? (0, _checkPrefix6.default)(trie, strPrefix).prefixNode : trie;

      return (0, _recursePrefix2.default)(prefixNode, strPrefix, sorted);
    },


    /**
    * Get a random word in the trie with the given prefix
    * @returns Array
    */
    getRandomWordWithPrefix: function getRandomWordWithPrefix(strPrefix) {
      if (typeof strPrefix !== 'string') {
        throw 'Expected string prefix, received ' + (typeof strPrefix === 'undefined' ? 'undefined' : _typeof(strPrefix));
      }

      if (!this.isPrefix(strPrefix)) {
        return '';
      }

      var _checkPrefix3 = (0, _checkPrefix6.default)(trie, strPrefix),
          prefixNode = _checkPrefix3.prefixNode;

      return (0, _recurseRandomWord2.default)(prefixNode, strPrefix);
    },


    /**
    * Count the number of words with the given prefixSearch
    * @returns Number
    */
    countPrefix: function countPrefix(strPrefix) {
      var prefixes = this.getPrefix(strPrefix);

      return prefixes.length;
    },


    /**
    * Get all words in the trie
    * @returns Array
    */
    getWords: function getWords() {
      var sorted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      return this.getPrefix('', sorted);
    },


    /**
    * Check the existence of a word in the trie
    * @returns Boolean
    */
    hasWord: function hasWord(word) {
      if (typeof word !== 'string') {
        throw 'Expected string word, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));
      }

      var _checkPrefix4 = (0, _checkPrefix6.default)(trie, word),
          prefixFound = _checkPrefix4.prefixFound,
          prefixNode = _checkPrefix4.prefixNode;

      if (prefixFound) {
        return prefixNode[_config2.default.END_WORD] === 1;
      }

      return false;
    },


    /**
    * Get a list of valid anagrams that can be made from the given letters
    * @returns Array
    */
    getAnagrams: function getAnagrams(letters) {
      if (typeof letters !== 'string') {
        throw 'Anagrams expected string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));
      }

      if (letters.length < PERMS_MIN_LEN) {
        throw 'getAnagrams expects at least ' + PERMS_MIN_LEN + ' letters';
      }

      return (0, _permutations2.default)(letters, trie, {
        type: 'anagram'
      });
    },


    /**
    * Get a list of all sub-anagrams that can be made from the given letters
    * @returns Array
    */
    getSubAnagrams: function getSubAnagrams(letters) {
      if (typeof letters !== 'string') {
        throw 'Expected string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));
      }

      if (letters.length < PERMS_MIN_LEN) {
        throw 'getSubAnagrams expects at least ' + PERMS_MIN_LEN + ' letters';
      }

      return (0, _permutations2.default)(letters, trie, {
        type: 'sub-anagram'
      });
    }
  };
};

var _create = __webpack_require__(/*! ./create */ "../../node_modules/trie-prefix-tree/dist/create.js");

var _create2 = _interopRequireDefault(_create);

var _append = __webpack_require__(/*! ./append */ "../../node_modules/trie-prefix-tree/dist/append.js");

var _append2 = _interopRequireDefault(_append);

var _checkPrefix5 = __webpack_require__(/*! ./checkPrefix */ "../../node_modules/trie-prefix-tree/dist/checkPrefix.js");

var _checkPrefix6 = _interopRequireDefault(_checkPrefix5);

var _recursePrefix = __webpack_require__(/*! ./recursePrefix */ "../../node_modules/trie-prefix-tree/dist/recursePrefix.js");

var _recursePrefix2 = _interopRequireDefault(_recursePrefix);

var _recurseRandomWord = __webpack_require__(/*! ./recurseRandomWord */ "../../node_modules/trie-prefix-tree/dist/recurseRandomWord.js");

var _recurseRandomWord2 = _interopRequireDefault(_recurseRandomWord);

var _utils = __webpack_require__(/*! ./utils */ "../../node_modules/trie-prefix-tree/dist/utils.js");

var _utils2 = _interopRequireDefault(_utils);

var _config = __webpack_require__(/*! ./config */ "../../node_modules/trie-prefix-tree/dist/config.js");

var _config2 = _interopRequireDefault(_config);

var _permutations = __webpack_require__(/*! ./permutations */ "../../node_modules/trie-prefix-tree/dist/permutations.js");

var _permutations2 = _interopRequireDefault(_permutations);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var PERMS_MIN_LEN = _config2.default.PERMS_MIN_LEN;

;
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/permutations.js":
/*!****************************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/permutations.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports["default"] = permutations;

var _config = __webpack_require__(/*! ./config */ "../../node_modules/trie-prefix-tree/dist/config.js");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function permutations(letters, trie) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    type: 'anagram'
  };

  if (typeof letters !== 'string') {
    throw 'Permutations expects string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));
  }

  var words = [];

  var permute = function permute(word, node) {
    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    var wordIsEmpty = word.length === 0;
    var wordFound = words.indexOf(prefix) !== -1;
    var endWordFound = node[_config2.default.END_WORD] === 1;

    if (wordIsEmpty && endWordFound && !wordFound) {
      words.push(prefix);
    }

    for (var i = 0, len = word.length; i < len; i++) {
      var letter = word[i];

      if (opts.type === 'sub-anagram') {
        if (endWordFound && !(words.indexOf(prefix) !== -1)) {
          words.push(prefix);
        }
      }

      if (node[letter]) {
        var remaining = word.substring(0, i) + word.substring(i + 1, len);
        permute(remaining, node[letter], prefix + letter, words);
      }
    }

    return words.sort();
  };

  return permute(letters, trie);
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/recursePrefix.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/recursePrefix.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = recursePrefix;

var _config = __webpack_require__(/*! ./config */ "../../node_modules/trie-prefix-tree/dist/config.js");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// sort items as they're being found
// to prevent slow .sort() in NodeJs
var pushInOrder = function pushInOrder(word, prefixes) {
  var i = 0;

  while (i < prefixes.length) {
    if (word < prefixes[i]) {
      break;
    }
    i += 1;
  }

  prefixes.splice(i, 0, word);

  return prefixes;
};

function recursePrefix(node, prefix, sorted) {
  var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var word = prefix;

  for (var branch in node) {
    var currentLetter = branch;
    if (branch === _config2.default.END_WORD && typeof node[branch] === 'number') {
      if (sorted) {
        pushInOrder(word, prefixes);
      } else {
        prefixes.push(word);
      }
      word = '';
    } else if (branch === _config2.default.END_WORD_REPLACER) {
      currentLetter = _config2.default.END_WORD;
    }
    recursePrefix(node[branch], prefix + currentLetter, sorted, prefixes);
  }

  return prefixes;
}
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/recurseRandomWord.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/recurseRandomWord.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = recurseRandomWord;

var _config = __webpack_require__(/*! ./config */ "../../node_modules/trie-prefix-tree/dist/config.js");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function recurseRandomWord(node, prefix) {
  var word = prefix;
  var branches = Object.keys(node);
  var branch = branches[Math.floor(Math.random() * branches.length)];

  if (branch === _config2.default.END_WORD) {
    return word;
  }
  return recurseRandomWord(node[branch], prefix + branch);
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/trie-prefix-tree/dist/utils.js":
/*!*********************************************************!*\
  !*** ../../node_modules/trie-prefix-tree/dist/utils.js ***!
  \*********************************************************/
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = {
  objectCopy: function objectCopy(obj) {
    if (typeof obj === 'undefined') {
      return {};
    }
    return JSON.parse(JSON.stringify(obj));
  },
  stringify: function stringify(obj) {
    var spacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

    if (typeof obj === 'undefined') {
      return '';
    }
    return JSON.stringify(obj, null, spacer);
  }
};
module.exports = exports['default'];

/***/ }),

/***/ "./unified-latex-util-match/index.ts":
/*!*******************************************!*\
  !*** ./unified-latex-util-match/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "anyEnvironment": () => (/* binding */ anyEnvironment),
/* harmony export */   "anyMacro": () => (/* binding */ anyMacro),
/* harmony export */   "anyString": () => (/* binding */ anyString),
/* harmony export */   "argument": () => (/* binding */ argument),
/* harmony export */   "blankArgument": () => (/* binding */ blankArgument),
/* harmony export */   "comment": () => (/* binding */ comment),
/* harmony export */   "environment": () => (/* binding */ environment),
/* harmony export */   "group": () => (/* binding */ group),
/* harmony export */   "macro": () => (/* binding */ macro),
/* harmony export */   "match": () => (/* reexport safe */ _libs_match__WEBPACK_IMPORTED_MODULE_0__.match),
/* harmony export */   "math": () => (/* binding */ math),
/* harmony export */   "parbreak": () => (/* binding */ parbreak),
/* harmony export */   "string": () => (/* binding */ string),
/* harmony export */   "whitespace": () => (/* binding */ whitespace)
/* harmony export */ });
/* harmony import */ var _libs_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/match */ "./unified-latex-util-match/libs/match.ts");


const { anyEnvironment, anyMacro, anyString, argument, blankArgument, comment, environment, group, macro, math, parbreak, string, whitespace, } = _libs_match__WEBPACK_IMPORTED_MODULE_0__.match;
// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to match different `Ast.Node` types in a `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you need a type-guard to ensure a node is of a certain type; for example, during a call to `unified-latex-until-visit`.
 */


/***/ }),

/***/ "./unified-latex-util-match/libs/match.ts":
/*!************************************************!*\
  !*** ./unified-latex-util-match/libs/match.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "match": () => (/* binding */ match)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");

/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createMacroMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const macrosHash = Array.isArray(macros)
        ? macros.length > 0
            ? typeof macros[0] === "string"
                ? Object.fromEntries(macros.map((macro) => {
                    if (typeof macro !== "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    return [macro, {}];
                }))
                : Object.fromEntries(macros.map((macro) => {
                    if (typeof macro === "string") {
                        throw new Error("Wrong branch of map function");
                    }
                    if (macro.escapeToken != null) {
                        return [
                            macro.content,
                            { escapeToken: macro.escapeToken },
                        ];
                    }
                    return [macro.content, {}];
                }))
            : {}
        : macros;
    return function matchAgainstMacros(node) {
        if (node == null || node.type !== "macro") {
            return false;
        }
        // At this point we have a macro type
        const spec = macrosHash[node.content];
        if (!spec) {
            return false;
        }
        if (typeof spec === "object" && "escapeToken" in spec) {
            return (spec.escapeToken == null ||
                spec.escapeToken === node.escapeToken);
        }
        return true;
    };
}
/**
 * Creates a macro matching function that uses a `SpecialMacroSpec` or list of macros
 * and generates a hash for quick lookup.
 */
function createEnvironmentMatcher(macros) {
    // We first make sure we have a record type with keys being the macro's contents
    const environmentsHash = Array.isArray(macros)
        ? Object.fromEntries(macros.map((str) => {
            return [str, {}];
        }))
        : macros;
    return function matchAgainstEnvironments(node) {
        if (!match.anyEnvironment(node)) {
            return false;
        }
        // At this point we have an environment type
        const envName = (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env);
        const spec = environmentsHash[envName];
        if (!spec) {
            return false;
        }
        return true;
    };
}
/**
 * Functions to match different types of nodes.
 */
const match = {
    macro(node, macroName) {
        if (node == null) {
            return false;
        }
        return (node.type === "macro" &&
            (macroName == null || node.content === macroName));
    },
    anyMacro(node) {
        return match.macro(node);
    },
    environment(node, envName) {
        if (node == null) {
            return false;
        }
        return ((node.type === "environment" || node.type === "mathenv") &&
            (envName == null || (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)(node.env) === envName));
    },
    anyEnvironment(node) {
        return match.environment(node);
    },
    comment(node) {
        if (node == null) {
            return false;
        }
        return node.type === "comment";
    },
    parbreak(node) {
        if (node == null) {
            return false;
        }
        return node.type === "parbreak";
    },
    whitespace(node) {
        if (node == null) {
            return false;
        }
        return node.type === "whitespace";
    },
    /**
     * Matches whitespace or a comment with leading whitespace.
     */
    whitespaceLike(node) {
        if (node == null) {
            return false;
        }
        return (node.type === "whitespace" ||
            (node.type === "whitespace" && node.leadingWhitespace === true));
    },
    string(node, value) {
        if (node == null) {
            return false;
        }
        return (node.type === "string" && (value == null || node.content === value));
    },
    anyString(node) {
        return match.string(node);
    },
    group(node) {
        if (node == null) {
            return false;
        }
        return node.type === "group";
    },
    argument(node) {
        if (node == null) {
            return false;
        }
        return node.type === "argument";
    },
    blankArgument(node) {
        if (!match.argument(node)) {
            return false;
        }
        return (node.openMark === "" &&
            node.closeMark === "" &&
            node.content.length === 0);
    },
    math(node) {
        if (node == null) {
            return false;
        }
        return node.type === "displaymath" || node.type === "inlinemath";
    },
    createMacroMatcher,
    createEnvironmentMatcher,
};


/***/ }),

/***/ "./unified-latex-util-print-raw/index.ts":
/*!***********************************************!*\
  !*** ./unified-latex-util-print-raw/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.linebreak),
/* harmony export */   "printRaw": () => (/* reexport safe */ _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__.printRaw)
/* harmony export */ });
/* harmony import */ var _libs_print_raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/print-raw */ "./unified-latex-util-print-raw/libs/print-raw.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to print a `unified-latex` Abstract Syntax Tree (AST) to a string.
 *
 * ## When should I use this?
 *
 * If you want to directly print an `Ast.Ast` to a string without any pretty printing or formatting.
 */


/***/ }),

/***/ "./unified-latex-util-print-raw/libs/print-raw.ts":
/*!********************************************************!*\
  !*** ./unified-latex-util-print-raw/libs/print-raw.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linebreak": () => (/* binding */ linebreak),
/* harmony export */   "printRaw": () => (/* binding */ printRaw)
/* harmony export */ });
const linebreak = Symbol("linebreak");
const ESCAPE = "\\";
/**
 * Renders the AST to an array inserting `linebreak` where needed;
 * This array may be nested.
 *
 * @param {*} node
 */
function _printRaw(node) {
    if (typeof node === "string") {
        return [node];
    }
    if (Array.isArray(node)) {
        return [].concat(...node.map((n) => _printRaw(n)));
    }
    // tmp variables
    let argsString, escape;
    switch (node.type) {
        case "root":
            return _printRaw(node.content);
        case "argument":
            return [node.openMark, ..._printRaw(node.content), node.closeMark];
        case "comment":
            var suffix = node.suffixParbreak ? "" : linebreak;
            // A comment is responsible for printing its own leading whitespace
            var leadingWhitespace = "";
            if (node.sameline && node.leadingWhitespace) {
                leadingWhitespace = " ";
            }
            if (node.sameline) {
                return [
                    leadingWhitespace,
                    "%",
                    ..._printRaw(node.content),
                    suffix,
                ];
            }
            return [linebreak, "%", ..._printRaw(node.content), suffix];
        case "environment":
        case "mathenv":
        case "verbatim":
            var env = _printRaw(node.env);
            var envStart = [ESCAPE + "begin{", ...env, "}"];
            var envEnd = [ESCAPE + "end{", ...env, "}"];
            argsString =
                node.args == null ? [] : _printRaw(node.args);
            return [
                ...envStart,
                ...argsString,
                ..._printRaw(node.content),
                ...envEnd,
            ];
        case "displaymath":
            return [ESCAPE + "[", ..._printRaw(node.content), ESCAPE + "]"];
        case "group":
            return ["{", ..._printRaw(node.content), "}"];
        case "inlinemath":
            return ["$", ..._printRaw(node.content), "$"];
        case "macro":
            argsString = node.args == null ? [] : _printRaw(node.args);
            escape = node.escapeToken == null ? ESCAPE : node.escapeToken;
            return [escape, ..._printRaw(node.content), ...argsString];
        case "parbreak":
            return [linebreak, linebreak];
        case "string":
            return [node.content];
        case "verb":
            return [
                ESCAPE,
                node.env,
                node.escape,
                ..._printRaw(node.content),
                node.escape,
            ];
        case "whitespace":
            return [" "];
        default:
            console.warn("Cannot find render for node ", node, `(of type ${typeof node})`);
            return ["" + node];
    }
}
function printRaw(node, options) {
    const asArray = options != null ? options.asArray : false;
    const printedTokens = _printRaw(node);
    if (asArray) {
        return printedTokens;
    }
    return printedTokens.map((x) => (x === linebreak ? "\n" : x)).join("");
}


/***/ }),

/***/ "./unified-latex-util-scan/libs/prefix-match.ts":
/*!******************************************************!*\
  !*** ./unified-latex-util-scan/libs/prefix-match.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Trie": () => (/* reexport default from dynamic */ trie_prefix_tree__WEBPACK_IMPORTED_MODULE_0___default.a),
/* harmony export */   "prefixMatch": () => (/* binding */ prefixMatch)
/* harmony export */ });
/* harmony import */ var trie_prefix_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! trie-prefix-tree */ "../../node_modules/trie-prefix-tree/dist/index.js");
/* harmony import */ var trie_prefix_tree__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(trie_prefix_tree__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");



/**
 * Efficiently search for a large number of strings using a prefix-tree.
 * The longest match is returned.
 *
 * @param options.startIndex the index to start scanning at. Defaults to 0.
 * @param options.matchSubstrings whether to allow matching only part of a substring.
 * @param options.assumeOneCharStrings assume that all strings are one character long (for example, like they are in math mode)
 */
function prefixMatch(nodes, prefixes, options) {
    const { startIndex = 0, matchSubstrings = false, assumeOneCharStrings = false, } = options || {};
    if (typeof prefixes === "string") {
        prefixes = [prefixes];
    }
    if (Array.isArray(prefixes)) {
        prefixes = trie_prefix_tree__WEBPACK_IMPORTED_MODULE_0___default()(prefixes);
    }
    const prefixTree = prefixes;
    const history = {
        lastPrefix: "",
        lastWord: "",
        index: startIndex,
        partialMatch: "",
    };
    /**
     * Try to match the next character. If it matches,
     * record it properly in the `history` object.
     */
    function tryToMatchNextChar(char, index) {
        let ret = false;
        if (prefixTree.isPrefix(history.lastPrefix + char)) {
            history.lastPrefix += char;
            history.index = index;
            ret = true;
        }
        if (prefixTree.hasWord(history.lastPrefix)) {
            history.lastWord = history.lastPrefix;
        }
        return ret;
    }
    // Loop through the nodes looking for the longest prefix match
    for (let i = 0; startIndex + i < nodes.length; i++) {
        const node = nodes[startIndex + i];
        if (!_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_1__.match.string(node)) {
            break;
        }
        if (assumeOneCharStrings && node.content.length !== 1) {
            break;
        }
        if (matchSubstrings) {
            // We need to test letter-by-letter for substring matches
            let fullMatch = true;
            history.partialMatch = "";
            for (let j = 0; j < node.content.length; j++) {
                const char = node.content[j];
                if (tryToMatchNextChar(char, startIndex + i)) {
                    history.partialMatch += char;
                }
                else {
                    fullMatch = false;
                    break;
                }
            }
            if (fullMatch) {
                history.partialMatch = "";
            }
            else {
                break;
            }
        }
        else {
            if (!tryToMatchNextChar(node.content, startIndex + i)) {
                break;
            }
        }
    }
    return history.lastWord
        ? {
            match: history.lastWord,
            endNodeIndex: history.index,
            endNodePartialMatch: history.partialMatch
                ? history.partialMatch
                : null,
        }
        : null;
}


/***/ }),

/***/ "./unified-latex-util-scan/libs/scan.ts":
/*!**********************************************!*\
  !*** ./unified-latex-util-scan/libs/scan.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scan": () => (/* binding */ scan)
/* harmony export */ });
/* harmony import */ var _unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../unified-latex-util-match */ "./unified-latex-util-match/index.ts");
/* harmony import */ var _unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../unified-latex-util-print-raw */ "./unified-latex-util-print-raw/index.ts");


/**
 * Scan a `nodes` looking for the first occurrence of `token`.
 * If `options.onlySkipWhitespaceAndComments==true`, then the scan
 * will only skip whitespace/comment nodes.
 */
function scan(nodes, token, options) {
    const { startIndex, onlySkipWhitespaceAndComments, allowSubstringMatches } = options || {};
    if (typeof token === "string") {
        token = { type: "string", content: token };
    }
    for (let i = startIndex || 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (node.type === token.type) {
            switch (node.type) {
                case "comment":
                case "displaymath":
                case "inlinemath":
                case "root":
                case "parbreak":
                case "whitespace":
                case "verb":
                case "verbatim":
                case "group":
                    return i;
                case "macro":
                    if (node.content === token.content) {
                        return i;
                    }
                    break;
                case "environment":
                case "mathenv":
                    if ((0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(node.env) ===
                        (0,_unified_latex_util_print_raw__WEBPACK_IMPORTED_MODULE_1__.printRaw)(token.env)) {
                        return i;
                    }
                    break;
                case "string":
                    if (node.content === token.content) {
                        return i;
                    }
                    if (allowSubstringMatches &&
                        node.content.indexOf(token.content) >= 0) {
                        return i;
                    }
                    break;
            }
        }
        if (onlySkipWhitespaceAndComments &&
            !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.whitespace(node) &&
            !_unified_latex_util_match__WEBPACK_IMPORTED_MODULE_0__.match.comment(node)) {
            return null;
        }
    }
    return null;
}


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./unified-latex-util-scan/index.ts ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Trie": () => (/* reexport safe */ _libs_prefix_match__WEBPACK_IMPORTED_MODULE_1__.Trie),
/* harmony export */   "prefixMatch": () => (/* reexport safe */ _libs_prefix_match__WEBPACK_IMPORTED_MODULE_1__.prefixMatch),
/* harmony export */   "scan": () => (/* reexport safe */ _libs_scan__WEBPACK_IMPORTED_MODULE_0__.scan)
/* harmony export */ });
/* harmony import */ var _libs_scan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/scan */ "./unified-latex-util-scan/libs/scan.ts");
/* harmony import */ var _libs_prefix_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/prefix-match */ "./unified-latex-util-scan/libs/prefix-match.ts");


// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to analyze `unified-latex` Abstract Syntax Tree (AST).
 *
 * ## When should I use this?
 *
 * If you want to look for particular AST nodes in an array; useful when making plugins.
 */

})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });

//# sourceMappingURL=data:application/json;charset=utf-8;base64,