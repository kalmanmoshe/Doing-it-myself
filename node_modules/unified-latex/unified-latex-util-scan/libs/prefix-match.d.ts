import Trie from "trie-prefix-tree";
import * as Ast from "../../unified-latex-types";
export { Trie };
/**
 * Efficiently search for a large number of strings using a prefix-tree.
 * The longest match is returned.
 *
 * @param options.startIndex the index to start scanning at. Defaults to 0.
 * @param options.matchSubstrings whether to allow matching only part of a substring.
 * @param options.assumeOneCharStrings assume that all strings are one character long (for example, like they are in math mode)
 */
export declare function prefixMatch(nodes: Ast.Node[], prefixes: string | string[] | ReturnType<typeof Trie>, options?: {
    startIndex?: number;
    matchSubstrings?: boolean;
    assumeOneCharStrings?: boolean;
}): {
    match: string;
    endNodeIndex: number;
    endNodePartialMatch: string | null;
} | null;
