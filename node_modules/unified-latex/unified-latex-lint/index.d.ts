/**
 * Object exporting all available lints.
 */
export declare const lints: {
    unifiedLatexLintArgumentColorCommands: import("unified").Plugin<void[] | [({
        fix?: boolean | undefined;
    } | undefined) | import("unified-lint-rule").Label | import("unified-lint-rule").Severity] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        fix?: boolean | undefined;
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintArgumentFontShapingCommands: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | ({
        fix?: boolean | undefined;
    } | undefined)] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        fix?: boolean | undefined;
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintConsistentInlineMath: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | ({
        preferredStyle: "tex" | "latex";
    } | undefined)] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        preferredStyle: "tex" | "latex";
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintNoDef: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | undefined] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintNoPlaintextOperators: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | ({
        fix?: boolean | undefined;
    } | undefined)] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        fix?: boolean | undefined;
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintNoTexDisplayMath: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | undefined] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintNoTexFontShapingCommands: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | ({
        fix?: boolean | undefined;
    } | undefined)] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        fix?: boolean | undefined;
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintObsoletePackages: import("unified").Plugin<void[] | [unknown] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, unknown], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
    unifiedLatexLintPreferSetlength: import("unified").Plugin<void[] | [import("unified-lint-rule").Label | import("unified-lint-rule").Severity | ({
        fix?: boolean | undefined;
    } | undefined)] | [boolean | import("unified-lint-rule").Label | import("unified-lint-rule").Severity, {
        fix?: boolean | undefined;
    } | undefined], import("../unified-latex-types").Root, import("../unified-latex-types").Root>;
};
/**
 * ## What is this?
 *
 * Linting functions for `unified-latex` ASTs. Lints are found in the `rules/` subdirectory. Lints
 * that can be fixed accept an optional `{fix: boolean}` argument.
 *
 * ## When should I use this?
 *
 * If you are building a linter for LaTeX code.
 *
 */
