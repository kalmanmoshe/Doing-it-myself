/******/ var __webpack_modules__ = ({

/***/ "./unified-latex-types/libs/ast-types.ts":
/*!***********************************************!*\
  !*** ./unified-latex-types/libs/ast-types.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-types/libs/info-specs.ts":
/*!************************************************!*\
  !*** ./unified-latex-types/libs/info-specs.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./unified-latex-types/libs/type-guard.ts":
/*!************************************************!*\
  !*** ./unified-latex-types/libs/type-guard.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************************!*\
  !*** ./unified-latex-types/index.ts ***!
  \**************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_ast_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/ast-types */ "./unified-latex-types/libs/ast-types.ts");
/* harmony import */ var _libs_type_guard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/type-guard */ "./unified-latex-types/libs/type-guard.ts");
/* harmony import */ var _libs_info_specs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libs/info-specs */ "./unified-latex-types/libs/info-specs.ts");



// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Types for the `unified-latex` Abstract Syntax Tree (AST). These types extend the `unist` AST,
 * but instead of a `children` attribute, they have a `content` attribute.
 *
 * ## When should I use this?
 *
 * If you're working with `unified-latex` ASTs.
 */

})();


//# sourceMappingURL=data:application/json;charset=utf-8;base64,