/******/ var __webpack_modules__ = ({

/***/ "./unified-latex-builder/libs/builders.ts":
/*!************************************************!*\
  !*** ./unified-latex-builder/libs/builders.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* binding */ SP),
/* harmony export */   "arg": () => (/* binding */ arg),
/* harmony export */   "args": () => (/* binding */ args),
/* harmony export */   "env": () => (/* binding */ env),
/* harmony export */   "m": () => (/* binding */ m),
/* harmony export */   "s": () => (/* binding */ s)
/* harmony export */ });
function normalizeNode(node) {
    if (typeof node === "string") {
        return s(node);
    }
    return node;
}
function normalizeArgument(arg, openMark = "{", closeMark = "}") {
    if (typeof arg === "string") {
        return {
            type: "argument",
            openMark,
            closeMark,
            content: [s(arg)],
        };
    }
    if (arg.type === "argument") {
        return arg;
    }
    return { type: "argument", openMark, closeMark, content: [arg] };
}
function normalizeArgumentsList(args, openMark = "{", closeMark = "}") {
    if (args == null) {
        return [];
    }
    if (Array.isArray(args)) {
        return args.map((arg) => normalizeArgument(arg, openMark, closeMark));
    }
    return [normalizeArgument(args, openMark, closeMark)];
}
const BRACES_MAP = {
    "*": { openMark: "", closeMark: "" },
    "{": { openMark: "{", closeMark: "}" },
    "[": { openMark: "[", closeMark: "]" },
    "(": { openMark: "(", closeMark: ")" },
};
const CLOSE_BRACES = new Set(Object.values(BRACES_MAP)
    .map((x) => x.closeMark)
    .filter((x) => x));
/**
 * Turn a braces signature into an array of braces.
 */
function bracesToOpenAndCloseMarks(braces) {
    const ret = [];
    for (const char of braces.split("")) {
        if (CLOSE_BRACES.has(char)) {
            continue;
        }
        const braces = BRACES_MAP[char];
        if (braces == null) {
            throw new Error(`Unknown open/close mark type "${char}"`);
        }
        braces;
        ret.push(braces);
    }
    return ret;
}
/**
 * Create an Argument list. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * args(["a", "b"], { braces: "[]{}" });
 * ```
 * will result in arguments `[a]{b}`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function args(args, special) {
    var _a, _b;
    if (!Array.isArray(args)) {
        args = [args];
    }
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces.length !== args.length) {
            throw new Error(`There is a difference between the number of supplied braces and the number of supplied arguments. ${args.length} supplied with braces signature ${special.braces}`);
        }
        return args.map((arg, i) => normalizeArgument(arg, braces[i].openMark, braces[i].closeMark));
    }
    const openMark = (_a = special === null || special === void 0 ? void 0 : special.defaultOpenMark) !== null && _a !== void 0 ? _a : "{";
    const closeMark = (_b = special === null || special === void 0 ? void 0 : special.defaultCloseMark) !== null && _b !== void 0 ? _b : "}";
    return normalizeArgumentsList(args, openMark, closeMark);
}
/**
 * Create an Argument. `special.braces` can optionally specify
 * the signature of the open/close marks that each argument uses. For example
 * ```
 * arg("a", { braces: "[]" });
 * ```
 * will result in arguments `[a]`. Valid braces are `*`, `[`, `{`, and `(`.
 */
function arg(args, special) {
    var _a, _b;
    if (typeof args === "string") {
        args = s(args);
    }
    if (!Array.isArray(args) && args.type === "argument") {
        return args;
    }
    let openMark = (_a = special === null || special === void 0 ? void 0 : special.openMark) !== null && _a !== void 0 ? _a : "{";
    let closeMark = (_b = special === null || special === void 0 ? void 0 : special.closeMark) !== null && _b !== void 0 ? _b : "}";
    if (special === null || special === void 0 ? void 0 : special.braces) {
        const braces = bracesToOpenAndCloseMarks(special.braces);
        if (braces[0]) {
            openMark = braces[0].openMark;
            closeMark = braces[0].closeMark;
        }
    }
    if (!Array.isArray(args)) {
        args = [args];
    }
    return { type: "argument", content: args, openMark, closeMark };
}
/**
 * Create a Macro with the given `name`. The macro
 * may be followed by any number of arguments.
 */
function m(name, marcoArgs, special) {
    const args = normalizeArgumentsList(marcoArgs);
    const escapeToken = special === null || special === void 0 ? void 0 : special.escapeToken;
    const ret = { type: "macro", content: name };
    if (args.length > 0) {
        ret.args = args;
    }
    if (escapeToken != null) {
        ret.escapeToken = escapeToken;
    }
    return ret;
}
/**
 * Create a String node from `value`
 */
function s(value) {
    if (typeof value === "string") {
        return { type: "string", content: value };
    }
    return value;
}
/**
 * Create an Environment node.
 */
function env(name, body, envArgs, special) {
    if (!Array.isArray(body)) {
        body = [body];
    }
    const args = normalizeArgumentsList(envArgs, "[", "]");
    const ret = {
        type: "environment",
        env: name,
        content: body.map(normalizeNode),
    };
    if (args.length > 0) {
        ret.args = args;
    }
    return ret;
}
/**
 * Whitespace node.
 */
const SP = { type: "whitespace" };


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!****************************************!*\
  !*** ./unified-latex-builder/index.ts ***!
  \****************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SP": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.SP),
/* harmony export */   "arg": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.arg),
/* harmony export */   "args": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.args),
/* harmony export */   "env": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.env),
/* harmony export */   "m": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.m),
/* harmony export */   "s": () => (/* reexport safe */ _libs_builders__WEBPACK_IMPORTED_MODULE_0__.s)
/* harmony export */ });
/* harmony import */ var _libs_builders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/builders */ "./unified-latex-builder/libs/builders.ts");

// NOTE: The docstring comment must be the last item in the index.ts file!
/**
 * ## What is this?
 *
 * Functions to help build a `unified-latex` Abstract Syntax Tree (AST)
 * with [hyperscript](https://github.com/dominictarr/hyperscript)-like syntax.
 *
 * ## When should I use this?
 *
 * If you want to programmatically create `Ast.Node` nodes.
 *
 */

})();

var __webpack_exports__SP = __webpack_exports__.SP;
var __webpack_exports__arg = __webpack_exports__.arg;
var __webpack_exports__args = __webpack_exports__.args;
var __webpack_exports__env = __webpack_exports__.env;
var __webpack_exports__m = __webpack_exports__.m;
var __webpack_exports__s = __webpack_exports__.s;
export { __webpack_exports__SP as SP, __webpack_exports__arg as arg, __webpack_exports__args as args, __webpack_exports__env as env, __webpack_exports__m as m, __webpack_exports__s as s };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,