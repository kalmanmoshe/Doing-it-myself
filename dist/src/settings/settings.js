export const DEFAULT_SETTINGS = {
    snippets: '[]',
    snippetVariables: '[]',
    // Basic settings
    snippetsEnabled: true,
    snippetsTrigger: "Tab",
    suppressSnippetTriggerOnIME: true,
    removeSnippetWhitespace: true,
    autoDelete$: true,
    loadSnippetsFromFile: false,
    loadSnippetVariablesFromFile: false,
    preambleFileLocation: "",
    snippetsFileLocation: "",
    snippetVariablesFileLocation: "",
    concealEnabled: false,
    concealRevealTimeout: 0,
    colorPairedBracketsEnabled: true,
    highlightCursorBracketsEnabled: true,
    mathPreviewEnabled: true,
    mathPreviewPositionIsAbove: true,
    matrixShortcutsEnabled: true,
    taboutEnabled: true,
    autoEnlargeBrackets: true,
    wordDelimiters: "., +-\\n\t:;!?\\/{}[]()=~$",
    // stile settings
    invertColorsInDarkMode: true,
    numberFormatting: ".000",
    background: "#44475A",
    evenRowBackground: "#f9f9f9",
    oddRowBackground: "#747688",
    infoModalBackground: "#002B36",
    fontSize: "0.85em",
    rowPadding: "5px 10px",
    iconSize: "14px",
    sessionHistory: [],
    // Raw settings
    autofractionExcludedEnvs: `[
		["^{", "}"],
		["\\\\pu{", "}"]
	]`,
    matrixShortcutsEnvNames: "pmatrix, cases, align, gather, bmatrix, Bmatrix, vmatrix, Vmatrix, array, matrix",
    autoEnlargeBracketsTriggers: "sum, int, frac, prod, bigcup, bigcap",
    forceMathLanguages: "math",
};
export function processLatexSuiteSettings(snippets, settings) {
    function strToArray(str) {
        return str.replace(/\s/g, "").split(",");
    }
    function getAutofractionExcludedEnvs(envsStr) {
        let envs = [];
        try {
            const envsJSON = JSON.parse(envsStr);
            envs = envsJSON.map(function (env) {
                return { openSymbol: env[0], closeSymbol: env[1] };
            });
        }
        catch (e) {
            console.log(e);
        }
        return envs;
    }
    return {
        ...settings,
        // Override raw settings with parsed settings
        snippets: snippets,
        autofractionExcludedEnvs: getAutofractionExcludedEnvs(settings.autofractionExcludedEnvs),
        matrixShortcutsEnvNames: strToArray(settings.matrixShortcutsEnvNames),
        autoEnlargeBracketsTriggers: strToArray(settings.autoEnlargeBracketsTriggers),
        forceMathLanguages: strToArray(settings.forceMathLanguages),
    };
}
//# sourceMappingURL=data:application/json;base64,