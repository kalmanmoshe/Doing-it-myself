import { __awaiter } from "tslib";
import { TFile, TFolder, Notice, debounce } from "obsidian";
import { parseSnippets, parseSnippetVariables } from "../snippets/parse";
// @ts-ignore
import differenceImplementation from "set.prototype.difference";
// @ts-ignore
import intersectionImplementation from "set.prototype.intersection";
import { sortSnippets } from "src/snippets/sort";
const difference = differenceImplementation;
const intersection = intersectionImplementation;
function isInFolder(file, dir) {
    let cur = file.parent;
    let cnt = 0;
    while (cur && (!cur.isRoot()) && (cnt < 100)) {
        if (cur.path === dir.path)
            return true;
        cur = cur.parent;
        cnt++;
    }
    return false;
}
function fileIsInFolder(plugin, folderPath, file) {
    const snippetDir = plugin.app.vault.getAbstractFileByPath(folderPath);
    const isFolder = snippetDir instanceof TFolder;
    return (isFolder && isInFolder(file, snippetDir));
}
const refreshFromFiles = debounce((plugin) => __awaiter(void 0, void 0, void 0, function* () {
    if (!(plugin.settings.loadSnippetVariablesFromFile || plugin.settings.loadSnippetsFromFile)) {
        return;
    }
    yield plugin.processSettings(false, true);
}), 500, true);
export const onFileChange = (plugin, file) => __awaiter(void 0, void 0, void 0, function* () {
    if (!(file instanceof TFile))
        return;
    if (plugin.settings.loadSnippetVariablesFromFile && file.path === plugin.settings.snippetVariablesFileLocation
        || plugin.settings.loadSnippetsFromFile && file.path === plugin.settings.snippetsFileLocation
        || fileIsInFolder(plugin, plugin.settings.snippetVariablesFileLocation, file)
        || fileIsInFolder(plugin, plugin.settings.snippetsFileLocation, file)) {
        refreshFromFiles(plugin);
    }
});
export const onFileCreate = (plugin, file) => {
    if (!(file instanceof TFile))
        return;
    if (plugin.settings.loadSnippetVariablesFromFile && fileIsInFolder(plugin, plugin.settings.snippetVariablesFileLocation, file)
        || plugin.settings.loadSnippetsFromFile && fileIsInFolder(plugin, plugin.settings.snippetsFileLocation, file)) {
        refreshFromFiles(plugin);
    }
};
export const onFileDelete = (plugin, file) => {
    if (!(file instanceof TFile))
        return;
    const snippetVariablesDir = plugin.app.vault.getAbstractFileByPath(plugin.settings.snippetVariablesFileLocation);
    const snippetDir = plugin.app.vault.getAbstractFileByPath(plugin.settings.snippetsFileLocation);
    if (plugin.settings.loadSnippetVariablesFromFile && snippetVariablesDir instanceof TFolder && file.path.contains(snippetVariablesDir.path)
        || plugin.settings.loadSnippetsFromFile && snippetDir instanceof TFolder && file.path.contains(snippetDir.path)) {
        refreshFromFiles(plugin);
    }
};
function* generateFilesWithin(fileOrFolder) {
    if (fileOrFolder instanceof TFile)
        yield fileOrFolder;
    else if (fileOrFolder instanceof TFolder)
        for (const child of fileOrFolder.children)
            yield* generateFilesWithin(child);
}
function getFilesWithin(vault, path) {
    const fileOrFolder = vault.getAbstractFileByPath(path);
    if (fileOrFolder === null) {
        return new Set();
    }
    const files = generateFilesWithin(fileOrFolder);
    return new Set(files);
}
export function getFileSets(plugin) {
    const variablesFolder = plugin.settings.loadSnippetVariablesFromFile
        ? getFilesWithin(plugin.app.vault, plugin.settings.snippetVariablesFileLocation)
        : new Set();
    const snippetsFolder = plugin.settings.loadSnippetsFromFile
        ? getFilesWithin(plugin.app.vault, plugin.settings.snippetsFileLocation)
        : new Set();
    const definitelyVariableFiles = difference(variablesFolder, snippetsFolder);
    const definitelySnippetFiles = difference(snippetsFolder, variablesFolder);
    const snippetOrVariableFiles = intersection(variablesFolder, snippetsFolder);
    return { definitelyVariableFiles, definitelySnippetFiles, snippetOrVariableFiles };
}
export function getVariablesFromFiles(plugin, files) {
    return __awaiter(this, void 0, void 0, function* () {
        const snippetVariables = {};
        for (const file of files.definitelyVariableFiles) {
            const content = yield plugin.app.vault.cachedRead(file);
            try {
                Object.assign(snippetVariables, yield parseSnippetVariables(content));
            }
            catch (e) {
                new Notice(`Failed to parse variable file ${file.name}: ${e}`);
                console.log(`Failed to parse variable file ${file.name}: ${e}`);
                files.definitelyVariableFiles.delete(file);
            }
        }
        return snippetVariables;
    });
}
export function tryGetVariablesFromUnknownFiles(plugin, files) {
    return __awaiter(this, void 0, void 0, function* () {
        const snippetVariables = {};
        for (const file of files.snippetOrVariableFiles) {
            const content = yield plugin.app.vault.cachedRead(file);
            try {
                Object.assign(snippetVariables, yield parseSnippetVariables(content));
                files.definitelyVariableFiles.add(file);
            }
            catch (e) {
                // No error here, we just assume this is a snippets file.
                // If it's not, then an error will be raised later, while parsing it.
                files.definitelySnippetFiles.add(file);
            }
            files.snippetOrVariableFiles.delete(file);
        }
        return snippetVariables;
    });
}
export function getPreambleFromFiles(plugin, files, preamble) {
    return __awaiter(this, void 0, void 0, function* () {
    });
}
export function getSnippetsFromFiles(plugin, files, snippetVariables) {
    return __awaiter(this, void 0, void 0, function* () {
        const snippets = [];
        for (const file of files.definitelySnippetFiles) {
            const content = yield plugin.app.vault.cachedRead(file);
            try {
                snippets.push(...yield parseSnippets(content, snippetVariables));
            }
            catch (e) {
                new Notice(`Failed to parse snippet file ${file.name}: ${e}`);
                console.log(`Failed to parse snippet file ${file.name}: ${e}`);
                files.definitelySnippetFiles.delete(file);
            }
        }
        return sortSnippets(snippets);
    });
}
//# sourceMappingURL=data:application/json;base64,