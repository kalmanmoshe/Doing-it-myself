import { keymap, highlightSpecialChars, drawSelection, dropCursor, EditorView, lineNumbers, rectangularSelection } from "@codemirror/view";
import { EditorState } from "@codemirror/state";
import { javascript } from "@codemirror/lang-javascript";
import { indentOnInput, indentUnit, bracketMatching, syntaxHighlighting, defaultHighlightStyle } from "@codemirror/language";
import { defaultKeymap, indentWithTab, history, historyKeymap } from "@codemirror/commands";
import { closeBrackets, closeBracketsKeymap } from "@codemirror/autocomplete";
import { searchKeymap, highlightSelectionMatches } from "@codemirror/search";
import { lintKeymap } from "@codemirror/lint";
import { obsidian } from "./obsidian_theme";
export const basicSetup = [
    lineNumbers(),
    highlightSpecialChars(),
    history(),
    javascript(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    indentUnit.of("    "),
    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    EditorView.lineWrapping,
    bracketMatching(),
    closeBrackets(),
    rectangularSelection(),
    highlightSelectionMatches(),
    obsidian,
    keymap.of([
        ...closeBracketsKeymap,
        ...defaultKeymap,
        ...searchKeymap,
        ...historyKeymap,
        indentWithTab,
        ...lintKeymap,
    ]),
].filter(ext => ext);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXR0aW5ncy91aS9zbmlwcGV0c19lZGl0b3IvZXh0ZW5zaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFhLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM3SCxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzVDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBZ0I7SUFDdEMsV0FBVyxFQUFFO0lBQ2IscUJBQXFCLEVBQUU7SUFDdkIsT0FBTyxFQUFFO0lBQ1QsVUFBVSxFQUFFO0lBQ1osYUFBYSxFQUFFO0lBQ2YsVUFBVSxFQUFFO0lBQ1osV0FBVyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDNUMsYUFBYSxFQUFFO0lBQ2YsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDckIsa0JBQWtCLENBQUMscUJBQXFCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDN0QsVUFBVSxDQUFDLFlBQVk7SUFDdkIsZUFBZSxFQUFFO0lBQ2pCLGFBQWEsRUFBRTtJQUNmLG9CQUFvQixFQUFFO0lBQ3RCLHlCQUF5QixFQUFFO0lBQzNCLFFBQVE7SUFDUixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1QsR0FBRyxtQkFBbUI7UUFDdEIsR0FBRyxhQUFhO1FBQ2hCLEdBQUcsWUFBWTtRQUNmLEdBQUcsYUFBYTtRQUNoQixhQUFhO1FBQ2IsR0FBRyxVQUFVO0tBQ2IsQ0FBQztDQUNGLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdFx0a2V5bWFwLFxyXG5cdFx0aGlnaGxpZ2h0U3BlY2lhbENoYXJzLFxyXG5cdFx0ZHJhd1NlbGVjdGlvbixcclxuXHRcdGRyb3BDdXJzb3IsXHJcblx0XHRFZGl0b3JWaWV3LFxyXG5cdFx0bGluZU51bWJlcnMsXHJcblx0XHRyZWN0YW5ndWxhclNlbGVjdGlvblxyXG5cdH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuXHRpbXBvcnQgeyBFeHRlbnNpb24sIEVkaXRvclN0YXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XHJcblx0aW1wb3J0IHsgamF2YXNjcmlwdCB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5nLWphdmFzY3JpcHRcIjtcclxuXHRpbXBvcnQgeyBpbmRlbnRPbklucHV0LCBpbmRlbnRVbml0LCBicmFja2V0TWF0Y2hpbmcsIHN5bnRheEhpZ2hsaWdodGluZywgZGVmYXVsdEhpZ2hsaWdodFN0eWxlIH0gZnJvbSBcIkBjb2RlbWlycm9yL2xhbmd1YWdlXCI7XHJcblx0aW1wb3J0IHsgZGVmYXVsdEtleW1hcCwgaW5kZW50V2l0aFRhYiwgaGlzdG9yeSwgaGlzdG9yeUtleW1hcCB9IGZyb20gXCJAY29kZW1pcnJvci9jb21tYW5kc1wiO1xyXG5cdGltcG9ydCB7IGNsb3NlQnJhY2tldHMsIGNsb3NlQnJhY2tldHNLZXltYXAgfSBmcm9tIFwiQGNvZGVtaXJyb3IvYXV0b2NvbXBsZXRlXCI7XHJcblx0aW1wb3J0IHsgc2VhcmNoS2V5bWFwLCBoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzIH0gZnJvbSBcIkBjb2RlbWlycm9yL3NlYXJjaFwiO1xyXG5cdGltcG9ydCB7IGxpbnRLZXltYXAgfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGludFwiO1xyXG5cdGltcG9ydCB7IG9ic2lkaWFuIH0gZnJvbSBcIi4vb2JzaWRpYW5fdGhlbWVcIjtcclxuXHJcblxyXG5cdGV4cG9ydCBjb25zdCBiYXNpY1NldHVwOiBFeHRlbnNpb25bXSA9IFtcclxuXHRcdGxpbmVOdW1iZXJzKCksXHJcblx0XHRoaWdobGlnaHRTcGVjaWFsQ2hhcnMoKSxcclxuXHRcdGhpc3RvcnkoKSxcclxuXHRcdGphdmFzY3JpcHQoKSxcclxuXHRcdGRyYXdTZWxlY3Rpb24oKSxcclxuXHRcdGRyb3BDdXJzb3IoKSxcclxuXHRcdEVkaXRvclN0YXRlLmFsbG93TXVsdGlwbGVTZWxlY3Rpb25zLm9mKHRydWUpLFxyXG5cdFx0aW5kZW50T25JbnB1dCgpLFxyXG5cdFx0aW5kZW50VW5pdC5vZihcIiAgICBcIiksXHJcblx0XHRzeW50YXhIaWdobGlnaHRpbmcoZGVmYXVsdEhpZ2hsaWdodFN0eWxlLCB7IGZhbGxiYWNrOiB0cnVlIH0pLFxyXG5cdFx0RWRpdG9yVmlldy5saW5lV3JhcHBpbmcsXHJcblx0XHRicmFja2V0TWF0Y2hpbmcoKSxcclxuXHRcdGNsb3NlQnJhY2tldHMoKSxcclxuXHRcdHJlY3Rhbmd1bGFyU2VsZWN0aW9uKCksXHJcblx0XHRoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzKCksXHJcblx0XHRvYnNpZGlhbixcclxuXHRcdGtleW1hcC5vZihbXHJcblx0XHRcdC4uLmNsb3NlQnJhY2tldHNLZXltYXAsXHJcblx0XHRcdC4uLmRlZmF1bHRLZXltYXAsXHJcblx0XHRcdC4uLnNlYXJjaEtleW1hcCxcclxuXHRcdFx0Li4uaGlzdG9yeUtleW1hcCxcclxuXHRcdFx0aW5kZW50V2l0aFRhYixcclxuXHRcdFx0Li4ubGludEtleW1hcCxcclxuXHRcdF0pLFxyXG5cdF0uZmlsdGVyKGV4dCA9PiBleHQpO1xyXG4iXX0=