import { keymap, highlightSpecialChars, drawSelection, dropCursor, EditorView, lineNumbers, rectangularSelection } from "@codemirror/view";
import { EditorState } from "@codemirror/state";
import { javascript } from "@codemirror/lang-javascript";
import { indentOnInput, indentUnit, bracketMatching, syntaxHighlighting, defaultHighlightStyle } from "@codemirror/language";
import { defaultKeymap, indentWithTab, history, historyKeymap } from "@codemirror/commands";
import { closeBrackets, closeBracketsKeymap } from "@codemirror/autocomplete";
import { searchKeymap, highlightSelectionMatches } from "@codemirror/search";
import { lintKeymap } from "@codemirror/lint";
import { obsidian } from "./obsidian_theme";
export const basicSetup = [
    lineNumbers(),
    highlightSpecialChars(),
    history(),
    javascript(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    indentUnit.of("    "),
    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    EditorView.lineWrapping,
    bracketMatching(),
    closeBrackets(),
    rectangularSelection(),
    highlightSelectionMatches(),
    obsidian,
    keymap.of([
        ...closeBracketsKeymap,
        ...defaultKeymap,
        ...searchKeymap,
        ...historyKeymap,
        indentWithTab,
        ...lintKeymap,
    ]),
].filter(ext => ext);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXR0aW5ncy91aS9zbmlwcGV0c19lZGl0b3IvZXh0ZW5zaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFhLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM3SCxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzVDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBZ0I7SUFDdEMsV0FBVyxFQUFFO0lBQ2IscUJBQXFCLEVBQUU7SUFDdkIsT0FBTyxFQUFFO0lBQ1QsVUFBVSxFQUFFO0lBQ1osYUFBYSxFQUFFO0lBQ2YsVUFBVSxFQUFFO0lBQ1osV0FBVyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDNUMsYUFBYSxFQUFFO0lBQ2YsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDckIsa0JBQWtCLENBQUMscUJBQXFCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDN0QsVUFBVSxDQUFDLFlBQVk7SUFDdkIsZUFBZSxFQUFFO0lBQ2pCLGFBQWEsRUFBRTtJQUNmLG9CQUFvQixFQUFFO0lBQ3RCLHlCQUF5QixFQUFFO0lBQzNCLFFBQVE7SUFDUixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1QsR0FBRyxtQkFBbUI7UUFDdEIsR0FBRyxhQUFhO1FBQ2hCLEdBQUcsWUFBWTtRQUNmLEdBQUcsYUFBYTtRQUNoQixhQUFhO1FBQ2IsR0FBRyxVQUFVO0tBQ2IsQ0FBQztDQUNGLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRcdGtleW1hcCxcblx0XHRoaWdobGlnaHRTcGVjaWFsQ2hhcnMsXG5cdFx0ZHJhd1NlbGVjdGlvbixcblx0XHRkcm9wQ3Vyc29yLFxuXHRcdEVkaXRvclZpZXcsXG5cdFx0bGluZU51bWJlcnMsXG5cdFx0cmVjdGFuZ3VsYXJTZWxlY3Rpb25cblx0fSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuXHRpbXBvcnQgeyBFeHRlbnNpb24sIEVkaXRvclN0YXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5cdGltcG9ydCB7IGphdmFzY3JpcHQgfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGFuZy1qYXZhc2NyaXB0XCI7XG5cdGltcG9ydCB7IGluZGVudE9uSW5wdXQsIGluZGVudFVuaXQsIGJyYWNrZXRNYXRjaGluZywgc3ludGF4SGlnaGxpZ2h0aW5nLCBkZWZhdWx0SGlnaGxpZ2h0U3R5bGUgfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGFuZ3VhZ2VcIjtcblx0aW1wb3J0IHsgZGVmYXVsdEtleW1hcCwgaW5kZW50V2l0aFRhYiwgaGlzdG9yeSwgaGlzdG9yeUtleW1hcCB9IGZyb20gXCJAY29kZW1pcnJvci9jb21tYW5kc1wiO1xuXHRpbXBvcnQgeyBjbG9zZUJyYWNrZXRzLCBjbG9zZUJyYWNrZXRzS2V5bWFwIH0gZnJvbSBcIkBjb2RlbWlycm9yL2F1dG9jb21wbGV0ZVwiO1xuXHRpbXBvcnQgeyBzZWFyY2hLZXltYXAsIGhpZ2hsaWdodFNlbGVjdGlvbk1hdGNoZXMgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc2VhcmNoXCI7XG5cdGltcG9ydCB7IGxpbnRLZXltYXAgfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGludFwiO1xuXHRpbXBvcnQgeyBvYnNpZGlhbiB9IGZyb20gXCIuL29ic2lkaWFuX3RoZW1lXCI7XG5cblxuXHRleHBvcnQgY29uc3QgYmFzaWNTZXR1cDogRXh0ZW5zaW9uW10gPSBbXG5cdFx0bGluZU51bWJlcnMoKSxcblx0XHRoaWdobGlnaHRTcGVjaWFsQ2hhcnMoKSxcblx0XHRoaXN0b3J5KCksXG5cdFx0amF2YXNjcmlwdCgpLFxuXHRcdGRyYXdTZWxlY3Rpb24oKSxcblx0XHRkcm9wQ3Vyc29yKCksXG5cdFx0RWRpdG9yU3RhdGUuYWxsb3dNdWx0aXBsZVNlbGVjdGlvbnMub2YodHJ1ZSksXG5cdFx0aW5kZW50T25JbnB1dCgpLFxuXHRcdGluZGVudFVuaXQub2YoXCIgICAgXCIpLFxuXHRcdHN5bnRheEhpZ2hsaWdodGluZyhkZWZhdWx0SGlnaGxpZ2h0U3R5bGUsIHsgZmFsbGJhY2s6IHRydWUgfSksXG5cdFx0RWRpdG9yVmlldy5saW5lV3JhcHBpbmcsXG5cdFx0YnJhY2tldE1hdGNoaW5nKCksXG5cdFx0Y2xvc2VCcmFja2V0cygpLFxuXHRcdHJlY3Rhbmd1bGFyU2VsZWN0aW9uKCksXG5cdFx0aGlnaGxpZ2h0U2VsZWN0aW9uTWF0Y2hlcygpLFxuXHRcdG9ic2lkaWFuLFxuXHRcdGtleW1hcC5vZihbXG5cdFx0XHQuLi5jbG9zZUJyYWNrZXRzS2V5bWFwLFxuXHRcdFx0Li4uZGVmYXVsdEtleW1hcCxcblx0XHRcdC4uLnNlYXJjaEtleW1hcCxcblx0XHRcdC4uLmhpc3RvcnlLZXltYXAsXG5cdFx0XHRpbmRlbnRXaXRoVGFiLFxuXHRcdFx0Li4ubGludEtleW1hcCxcblx0XHRdKSxcblx0XS5maWx0ZXIoZXh0ID0+IGV4dCk7XG4iXX0=