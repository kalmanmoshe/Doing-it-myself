import settings from "../data.json";
export function calculateBinom(n, k, p) {
    return calculateFactorial(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
}
export function calculateFactorial(n, k) {
    let factoriaN = 1, factoriaK = 1, factoriaNK = 1;
    for (let i = 1; i <= n; i++) {
        factoriaN *= i;
        if (i === k)
            factoriaK = factoriaN;
        if (i === n - k)
            factoriaNK = factoriaN;
    }
    return (factoriaN / (factoriaK * factoriaNK));
}
export function findAngleByCosineRule(side1, side2, oppositeSide) {
    // Law of Cosines: cos(C) = (a^2 + b^2 - c^2) / (2ab)
    const cosAngle = (Math.pow(side1, 2) + Math.pow(side2, 2) - Math.pow(oppositeSide, 2)) / (2 * side1 * side2);
    return radiansToDegrees(Math.acos(cosAngle));
}
export function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
}
export function radiansToDegrees(radians) {
    return radians * (180 / Math.PI);
}
export function roundBySettings(input) {
    const number = Number(input);
    return isNaN(number) ? input : Math.round(number * Number(settings.numberFormatting)) / Number(settings.numberFormatting);
}
export function quad(a, b, c, variable) {
    let x1 = (-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
    let x2 = (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
    x1 = roundBySettings(x1);
    x2 = roundBySettings(x2);
    return x1 === x2 ? `${variable} = ${x1}` : `${variable}_1 = ${x1},${variable}_2 = ${x2}`;
}
export function getUsableDegrees(degrees) {
    return ((degrees % 360) + 360) % 360;
}
export const polarToCartesian = (coord) => {
    const [angle, length] = coord.split(":").map(parseFloat);
    if (isNaN(angle) || isNaN(length)) {
        console.error("Invalid polar coordinates:", coord);
        return { X: 0, Y: 0 };
    }
    const radians = degreesToRadians(angle);
    return { X: length * Math.cos(radians), Y: length * Math.sin(radians) };
};
export function findIntersectionPoint(coordinate1, coordinate2, slope1, slope2) {
    const xValue = ((slope2 * coordinate2.X) - (slope1 * coordinate1.X) + (coordinate1.Y - coordinate2.Y)) / (slope2 - slope1);
    return {
        X: xValue,
        Y: createLineFunction(coordinate1, slope1)(xValue)
    };
}
function createLineFunction(coordinate, slope) {
    return function (x) {
        return slope * (x - coordinate.X) + coordinate.Y;
    };
}
export function findSlope(coordinate1, coordinate2) {
    const deltaY = coordinate2.Y - coordinate1.Y;
    const deltaX = coordinate2.X - coordinate1.X;
    return deltaY / deltaX;
}
export function calculateCircle(point1, point2, point3) {
    const x1 = point1.X, y1 = point1.Y;
    const x2 = point2.X, y2 = point2.Y;
    const x3 = point3.X, y3 = point3.Y;
    // Calculate the determinants needed for solving the system
    const A = x1 * (y2 - y3) - y1 * (x2 - x3) + (x2 * y3 - y2 * x3);
    const B = (x1 ** 2 + y1 ** 2) * (y3 - y2) + (x2 ** 2 + y2 ** 2) * (y1 - y3) + (x3 ** 2 + y3 ** 2) * (y2 - y1);
    const C = (x1 ** 2 + y1 ** 2) * (x2 - x3) + (x2 ** 2 + y2 ** 2) * (x3 - x1) + (x3 ** 2 + y3 ** 2) * (x1 - x2);
    const D = (x1 ** 2 + y1 ** 2) * (x3 * y2 - x2 * y3) + (x2 ** 2 + y2 ** 2) * (x1 * y3 - x3 * y1) + (x3 ** 2 + y3 ** 2) * (x2 * y1 - x1 * y2);
    if (A === 0) {
        return null; // The points are collinear, no unique circle
    }
    // Calculate the center (h, k) of the circle
    const h = -B / (2 * A);
    const k = -C / (2 * A);
    // Calculate the radius of the circle
    const r = Math.sqrt((B ** 2 + C ** 2 - 4 * A * D) / (4 * A ** 2));
    return {
        center: { X: h, Y: k },
        radius: r,
        equation: `(x - ${h.toFixed(2)})^2 + (y - ${k.toFixed(2)})^2 = ${r.toFixed(2)}^2`
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aFV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRoVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGNBQWMsQ0FBQztBQUdwQyxNQUFNLFVBQVUsY0FBYyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUMxRCxPQUFPLGtCQUFrQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDbkQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLFNBQVMsSUFBSSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUFFLFVBQVUsR0FBRyxTQUFTLENBQUM7S0FDekM7SUFDRCxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFZLEVBQUUsS0FBWSxFQUFFLFlBQW1CO0lBQ2pGLHFEQUFxRDtJQUNyRCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxH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QztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0IsRUFBRSxNQUFrQixFQUFFLE1BQWtCO0lBQ3RGLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRW5DLDJEQUEyRDtJQUMzRCxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFNUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUMsQ0FBQyw2Q0FBNkM7S0FDN0Q7SUFFRCw0Q0FBNEM7SUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFdkIscUNBQXFDO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRSxPQUFPO1FBQ0gsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3RCLE1BQU0sRUFBRSxDQUFDO1FBQ1QsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUk7S0FDcEYsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2V0dGluZ3MgZnJvbSBcIi4uL2RhdGEuanNvblwiO1xyXG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSBcIi4vdGlrempheC90aWt6amF4XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQmlub20objogbnVtYmVyLCBrOiBudW1iZXIsIHA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gY2FsY3VsYXRlRmFjdG9yaWFsKG4saykgKiBNYXRoLnBvdyhwLCBrKSAqIE1hdGgucG93KDEgLSBwLCBuIC0gayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGYWN0b3JpYWwobjogbnVtYmVyLCBrOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IGZhY3RvcmlhTiA9IDEsIGZhY3RvcmlhSyA9IDEsIGZhY3RvcmlhTksgPSAxO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbjsgaSsrKSB7XHJcbiAgICAgIGZhY3RvcmlhTiAqPSBpO1xyXG4gICAgICBpZiAoaSA9PT0gaykgZmFjdG9yaWFLID0gZmFjdG9yaWFOO1xyXG4gICAgICBpZiAoaSA9PT0gbiAtIGspIGZhY3RvcmlhTksgPSBmYWN0b3JpYU47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGZhY3RvcmlhTiAvIChmYWN0b3JpYUsgKiBmYWN0b3JpYU5LKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQW5nbGVCeUNvc2luZVJ1bGUoc2lkZTE6bnVtYmVyLCBzaWRlMjpudW1iZXIsIG9wcG9zaXRlU2lkZTpudW1iZXIpIHtcclxuICAgIC8vIExhdyBvZiBDb3NpbmVzOiBjb3MoQykgPSAoYV4yICsgYl4yIC0gY14yKSAvICgyYWIpXHJcbiAgICBjb25zdCBjb3NBbmdsZSA9IChNYXRoLnBvdyhzaWRlMSwgMikgKyBNYXRoLnBvdyhzaWRlMiwgMikgLSBNYXRoLnBvdyhvcHBvc2l0ZVNpZGUsIDIpKSAvICgyICogc2lkZTEgKiBzaWRlMik7XHJcbiAgICByZXR1cm4gcmFkaWFuc1RvRGVncmVlcyhNYXRoLmFjb3MoY29zQW5nbGUpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnMoZGVncmVlczogbnVtYmVyKXtcclxuICAgIHJldHVybiBkZWdyZWVzICogKE1hdGguUEkgLyAxODApO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnM6IG51bWJlcil7XHJcbiAgICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBNYXRoLlBJICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZEJ5U2V0dGluZ3MoaW5wdXQ6IGFueSk6IG51bWJlciAge1xyXG4gICAgY29uc3QgbnVtYmVyID0gTnVtYmVyKGlucHV0KTtcclxuICAgIHJldHVybiBpc05hTihudW1iZXIpID8gaW5wdXQgOiBNYXRoLnJvdW5kKG51bWJlciAqIE51bWJlcihzZXR0aW5ncy5udW1iZXJGb3JtYXR0aW5nKSkgLyBOdW1iZXIoc2V0dGluZ3MubnVtYmVyRm9ybWF0dGluZyk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gIHF1YWQoYTogbnVtYmVyLGI6IG51bWJlcixjOm51bWJlcix2YXJpYWJsZTpudW1iZXIpIHtcclxuICAgIGxldCB4MSA9ICgtYiArIE1hdGguc3FydChNYXRoLnBvdyhiLCAyKSAtIDQgKiBhICogYykpIC8gKDIgKiBhKTtcclxuICAgIGxldCB4MiA9ICgtYiAtIE1hdGguc3FydChNYXRoLnBvdyhiLCAyKSAtIDQgKiBhICogYykpIC8gKDIgKiBhKTtcclxuICAgIHgxPXJvdW5kQnlTZXR0aW5ncyh4MSk7XHJcbiAgICB4Mj1yb3VuZEJ5U2V0dGluZ3MoeDIpO1xyXG4gICAgcmV0dXJuIHgxPT09eDI/YCR7dmFyaWFibGV9ID0gJHt4MX1gOmAke3ZhcmlhYmxlfV8xID0gJHt4MX0sJHt2YXJpYWJsZX1fMiA9ICR7eDJ9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzYWJsZURlZ3JlZXMoZGVncmVlczogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoKGRlZ3JlZXMgJSAzNjApICsgMzYwKSAlIDM2MDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBvbGFyVG9DYXJ0ZXNpYW4gPSAoY29vcmQ6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgW2FuZ2xlLCBsZW5ndGhdID0gY29vcmQuc3BsaXQoXCI6XCIpLm1hcChwYXJzZUZsb2F0KTtcclxuICAgIGlmIChpc05hTihhbmdsZSkgfHwgaXNOYU4obGVuZ3RoKSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIHBvbGFyIGNvb3JkaW5hdGVzOlwiLCBjb29yZCk7XHJcbiAgICAgICAgcmV0dXJuIHsgWDogMCwgWTogMCB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmFkaWFucyA9IGRlZ3JlZXNUb1JhZGlhbnMoYW5nbGUpO1xyXG4gICAgcmV0dXJuIHsgWDogbGVuZ3RoICogTWF0aC5jb3MocmFkaWFucyksIFk6IGxlbmd0aCAqIE1hdGguc2luKHJhZGlhbnMpIH07XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZEludGVyc2VjdGlvblBvaW50KGNvb3JkaW5hdGUxOiBDb29yZGluYXRlLCBjb29yZGluYXRlMjogQ29vcmRpbmF0ZSwgc2xvcGUxOiBudW1iZXIsIHNsb3BlMjogbnVtYmVyKSB7XHJcbiAgICBjb25zdCB4VmFsdWUgPSAoKHNsb3BlMiAqIGNvb3JkaW5hdGUyLlgpIC0gKHNsb3BlMSAqIGNvb3JkaW5hdGUxLlgpICsgKGNvb3JkaW5hdGUxLlkgLSBjb29yZGluYXRlMi5ZKSkgLyAoc2xvcGUyIC0gc2xvcGUxKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgWDogeFZhbHVlLCBcclxuICAgICAgICBZOiBjcmVhdGVMaW5lRnVuY3Rpb24oY29vcmRpbmF0ZTEsIHNsb3BlMSkoeFZhbHVlKVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTGluZUZ1bmN0aW9uKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIHNsb3BlOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbih4OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gc2xvcGUgKiAoeCAtIGNvb3JkaW5hdGUuWCkgKyBjb29yZGluYXRlLlk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZFNsb3BlKGNvb3JkaW5hdGUxOiBDb29yZGluYXRlLCBjb29yZGluYXRlMjogQ29vcmRpbmF0ZSkge1xyXG4gICAgY29uc3QgZGVsdGFZID0gY29vcmRpbmF0ZTIuWSAtIGNvb3JkaW5hdGUxLlk7XHJcbiAgICBjb25zdCBkZWx0YVggPSBjb29yZGluYXRlMi5YIC0gY29vcmRpbmF0ZTEuWDtcclxuICAgIHJldHVybiBkZWx0YVkgLyBkZWx0YVg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVDaXJjbGUocG9pbnQxOiBDb29yZGluYXRlLCBwb2ludDI6IENvb3JkaW5hdGUsIHBvaW50MzogQ29vcmRpbmF0ZSkge1xyXG4gICAgY29uc3QgeDEgPSBwb2ludDEuWCwgeTEgPSBwb2ludDEuWTtcclxuICAgIGNvbnN0IHgyID0gcG9pbnQyLlgsIHkyID0gcG9pbnQyLlk7XHJcbiAgICBjb25zdCB4MyA9IHBvaW50My5YLCB5MyA9IHBvaW50My5ZO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRzIG5lZWRlZCBmb3Igc29sdmluZyB0aGUgc3lzdGVtXHJcbiAgICBjb25zdCBBID0geDEgKiAoeTIgLSB5MykgLSB5MSAqICh4MiAtIHgzKSArICh4MiAqIHkzIC0geTIgKiB4Myk7XHJcbiAgICBjb25zdCBCID0gKHgxICoqIDIgKyB5MSAqKiAyKSAqICh5MyAtIHkyKSArICh4MiAqKiAyICsgeTIgKiogMikgKiAoeTEgLSB5MykgKyAoeDMgKiogMiArIHkzICoqIDIpICogKHkyIC0geTEpO1xyXG4gICAgY29uc3QgQyA9ICh4MSAqKiAyICsgeTEgKiogMikgKiAoeDIgLSB4MykgKyAoeDIgKiogMiArIHkyICoqIDIpICogKHgzIC0geDEpICsgKHgzICoqIDIgKyB5MyAqKiAyKSAqICh4MSAtIHgyKTtcclxuICAgIGNvbnN0IEQgPSAoeDEgKiogMiArIHkxICoqIDIpICogKHgzICogeTIgLSB4MiAqIHkzKSArICh4MiAqKiAyICsgeTIgKiogMikgKiAoeDEgKiB5MyAtIHgzICogeTEpICsgKHgzICoqIDIgKyB5MyAqKiAyKSAqICh4MiAqIHkxIC0geDEgKiB5Mik7XHJcblxyXG4gICAgaWYgKEEgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gVGhlIHBvaW50cyBhcmUgY29sbGluZWFyLCBubyB1bmlxdWUgY2lyY2xlXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjZW50ZXIgKGgsIGspIG9mIHRoZSBjaXJjbGVcclxuICAgIGNvbnN0IGggPSAtQiAvICgyICogQSk7XHJcbiAgICBjb25zdCBrID0gLUMgLyAoMiAqIEEpO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjaXJjbGVcclxuICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoKEIgKiogMiArIEMgKiogMiAtIDQgKiBBICogRCkgLyAoNCAqIEEgKiogMikpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2VudGVyOiB7IFg6IGgsIFk6IGsgfSxcclxuICAgICAgICByYWRpdXM6IHIsXHJcbiAgICAgICAgZXF1YXRpb246IGAoeCAtICR7aC50b0ZpeGVkKDIpfSleMiArICh5IC0gJHtrLnRvRml4ZWQoMil9KV4yID0gJHtyLnRvRml4ZWQoMil9XjJgXHJcbiAgICB9O1xyXG59Il19