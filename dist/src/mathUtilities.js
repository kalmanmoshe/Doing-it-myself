import settings from "../data.json";
export function calculateBinom(n, k, p) {
    return calculateFactorial(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
}
export function calculateFactorial(n, k) {
    let factoriaN = 1, factoriaK = 1, factoriaNK = 1;
    for (let i = 1; i <= n; i++) {
        factoriaN *= i;
        if (i === k)
            factoriaK = factoriaN;
        if (i === n - k)
            factoriaNK = factoriaN;
    }
    return (factoriaN / (factoriaK * factoriaNK));
}
export function findAngleByCosineRule(side1, side2, oppositeSide) {
    // Law of Cosines: cos(C) = (a^2 + b^2 - c^2) / (2ab)
    const cosAngle = (Math.pow(side1, 2) + Math.pow(side2, 2) - Math.pow(oppositeSide, 2)) / (2 * side1 * side2);
    return radiansToDegrees(Math.acos(cosAngle));
}
export function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
}
export function radiansToDegrees(radians) {
    return radians * (180 / Math.PI);
}
export function roundBySettings(input) {
    const number = Number(input);
    return isNaN(number) ? input : Math.round(number * Number(settings.numberFormatting)) / Number(settings.numberFormatting);
}
export function quad(a, b, c, variable) {
    let x1 = (-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
    let x2 = (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
    x1 = roundBySettings(x1);
    x2 = roundBySettings(x2);
    return x1 === x2 ? `${variable} = ${x1}` : `${variable}_1 = ${x1},${variable}_2 = ${x2}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aFV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRoVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGNBQWMsQ0FBQztBQUNwQyxNQUFNLFVBQVUsY0FBYyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUUxRCxPQUFPLGtCQUFrQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDbkQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLFNBQVMsSUFBSSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUFFLFVBQVUsR0FBRyxTQUFTLENBQUM7S0FDekM7SUFDRCxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFZLEVBQUUsS0FBWSxFQUFFLFlBQW1CO0lBQ2pGLHFEQUFxRDtJQUNyRCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzdHLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBZTtJQUM1QyxPQUFPLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUNELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUFlO0lBQzVDLE9BQU8sT0FBTyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFVO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUgsQ0FBQztBQUdELE1BQU0sVUFBVyxJQUFJLENBQUMsQ0FBUyxFQUFDLENBQVMsRUFBQyxDQUFRLEVBQUMsUUFBZTtJQUM5RCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsRUFBRSxHQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QixFQUFFLEdBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sRUFBRSxLQUFHLEVBQUUsQ0FBQSxDQUFDLENBQUEsR0FBRyxRQUFRLE1BQU0sRUFBRSxFQUFFLENBQUEsQ0FBQyxDQUFBLEdBQUcsUUFBUSxRQUFRLEVBQUUsSUFBSSxRQUFRLFFBQVEsRUFBRSxFQUFFLENBQUM7QUFDdkYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR0aW5ncyBmcm9tIFwiLi4vZGF0YS5qc29uXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCaW5vbShuOiBudW1iZXIsIGs6IG51bWJlciwgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGNhbGN1bGF0ZUZhY3RvcmlhbChuLGspICogTWF0aC5wb3cocCwgaykgKiBNYXRoLnBvdygxIC0gcCwgbiAtIGspO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRmFjdG9yaWFsKG46IG51bWJlciwgazogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGxldCBmYWN0b3JpYU4gPSAxLCBmYWN0b3JpYUsgPSAxLCBmYWN0b3JpYU5LID0gMTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG47IGkrKykge1xyXG4gICAgICBmYWN0b3JpYU4gKj0gaTtcclxuICAgICAgaWYgKGkgPT09IGspIGZhY3RvcmlhSyA9IGZhY3RvcmlhTjtcclxuICAgICAgaWYgKGkgPT09IG4gLSBrKSBmYWN0b3JpYU5LID0gZmFjdG9yaWFOO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChmYWN0b3JpYU4gLyAoZmFjdG9yaWFLICogZmFjdG9yaWFOSykpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZEFuZ2xlQnlDb3NpbmVSdWxlKHNpZGUxOm51bWJlciwgc2lkZTI6bnVtYmVyLCBvcHBvc2l0ZVNpZGU6bnVtYmVyKSB7XHJcbiAgICAvLyBMYXcgb2YgQ29zaW5lczogY29zKEMpID0gKGFeMiArIGJeMiAtIGNeMikgLyAoMmFiKVxyXG4gICAgY29uc3QgY29zQW5nbGUgPSAoTWF0aC5wb3coc2lkZTEsIDIpICsgTWF0aC5wb3coc2lkZTIsIDIpIC0gTWF0aC5wb3cob3Bwb3NpdGVTaWRlLCAyKSkgLyAoMiAqIHNpZGUxICogc2lkZTIpO1xyXG4gICAgcmV0dXJuIHJhZGlhbnNUb0RlZ3JlZXMoTWF0aC5hY29zKGNvc0FuZ2xlKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKGRlZ3JlZXM6IG51bWJlcil7XHJcbiAgICByZXR1cm4gZGVncmVlcyAqIChNYXRoLlBJIC8gMTgwKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyhyYWRpYW5zOiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91bmRCeVNldHRpbmdzKGlucHV0OiBhbnkpOiBudW1iZXIgIHtcclxuICAgIGNvbnN0IG51bWJlciA9IE51bWJlcihpbnB1dCk7XHJcbiAgICByZXR1cm4gaXNOYU4obnVtYmVyKSA/IGlucHV0IDogTWF0aC5yb3VuZChudW1iZXIgKiBOdW1iZXIoc2V0dGluZ3MubnVtYmVyRm9ybWF0dGluZykpIC8gTnVtYmVyKHNldHRpbmdzLm51bWJlckZvcm1hdHRpbmcpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICBxdWFkKGE6IG51bWJlcixiOiBudW1iZXIsYzpudW1iZXIsdmFyaWFibGU6bnVtYmVyKSB7XHJcbiAgICBsZXQgeDEgPSAoLWIgKyBNYXRoLnNxcnQoTWF0aC5wb3coYiwgMikgLSA0ICogYSAqIGMpKSAvICgyICogYSk7XHJcbiAgICBsZXQgeDIgPSAoLWIgLSBNYXRoLnNxcnQoTWF0aC5wb3coYiwgMikgLSA0ICogYSAqIGMpKSAvICgyICogYSk7XHJcbiAgICB4MT1yb3VuZEJ5U2V0dGluZ3MoeDEpO1xyXG4gICAgeDI9cm91bmRCeVNldHRpbmdzKHgyKTtcclxuICAgIHJldHVybiB4MT09PXgyP2Ake3ZhcmlhYmxlfSA9ICR7eDF9YDpgJHt2YXJpYWJsZX1fMSA9ICR7eDF9LCR7dmFyaWFibGV9XzIgPSAke3gyfWA7XHJcbn1cclxuIl19