import { StateEffect } from "@codemirror/state";
import { invertedEffects, undo, redo } from "@codemirror/commands";
import { removeAllTabstops } from "./tabstops_state_field";
// Effects that mark the beginning and end of transactions to insert snippets
export const startSnippet = StateEffect.define();
export const endSnippet = StateEffect.define();
export const undidStartSnippet = StateEffect.define();
export const undidEndSnippet = StateEffect.define();
// Enables undoing and redoing snippets, taking care of the tabstops
export const snippetInvertedEffects = invertedEffects.of((tr) => {
    const effects = [];
    for (const effect of tr.effects) {
        if (effect.is(startSnippet)) {
            effects.push(undidStartSnippet.of(null));
        }
        else if (effect.is(undidStartSnippet)) {
            effects.push(startSnippet.of(null));
        }
        else if (effect.is(endSnippet)) {
            effects.push(undidEndSnippet.of(null));
        }
        else if (effect.is(undidEndSnippet)) {
            effects.push(endSnippet.of(null));
        }
    }
    return effects;
});
export const handleUndoRedo = (update) => {
    const undoTr = update.transactions.find(tr => tr.isUserEvent("undo"));
    const redoTr = update.transactions.find(tr => tr.isUserEvent("redo"));
    for (const tr of update.transactions) {
        for (const effect of tr.effects) {
            if (effect.is(startSnippet)) {
                if (redoTr) {
                    // Redo the tabstop expansion and selection
                    redo(update.view);
                }
            }
            else if (effect.is(undidEndSnippet)) {
                if (undoTr) {
                    // Undo the tabstop expansion and selection
                    undo(update.view);
                }
            }
        }
    }
    if (undoTr) {
        removeAllTabstops(update.view);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlbWlycm9yL2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTNELDZFQUE2RTtBQUM3RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHcEQsb0VBQW9FO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtJQUNwRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFbkIsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7WUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO2FBQ0ksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDO2FBQ0ksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQzthQUNJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7SUFDRixDQUFDO0lBR0QsT0FBTyxPQUFPLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFrQixFQUFFLEVBQUU7SUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFHdEUsS0FBSyxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFakMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7Z0JBQzdCLElBQUksTUFBTSxFQUFFLENBQUM7b0JBQ1osMkNBQTJDO29CQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQixDQUFDO1lBQ0YsQ0FBQztpQkFDSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxNQUFNLEVBQUUsQ0FBQztvQkFDWiwyQ0FBMkM7b0JBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25CLENBQUM7WUFDRixDQUFDO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ1osaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7QUFDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3VXBkYXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IFN0YXRlRWZmZWN0IH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBpbnZlcnRlZEVmZmVjdHMsIHVuZG8sIHJlZG8gfSBmcm9tIFwiQGNvZGVtaXJyb3IvY29tbWFuZHNcIjtcbmltcG9ydCB7IHJlbW92ZUFsbFRhYnN0b3BzIH0gZnJvbSBcIi4vdGFic3RvcHNfc3RhdGVfZmllbGRcIjtcblxuLy8gRWZmZWN0cyB0aGF0IG1hcmsgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRyYW5zYWN0aW9ucyB0byBpbnNlcnQgc25pcHBldHNcbmV4cG9ydCBjb25zdCBzdGFydFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmV4cG9ydCBjb25zdCBlbmRTbmlwcGV0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5leHBvcnQgY29uc3QgdW5kaWRTdGFydFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmV4cG9ydCBjb25zdCB1bmRpZEVuZFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcblxuXG4vLyBFbmFibGVzIHVuZG9pbmcgYW5kIHJlZG9pbmcgc25pcHBldHMsIHRha2luZyBjYXJlIG9mIHRoZSB0YWJzdG9wc1xuZXhwb3J0IGNvbnN0IHNuaXBwZXRJbnZlcnRlZEVmZmVjdHMgPSBpbnZlcnRlZEVmZmVjdHMub2YoKHRyOiBhbnkpID0+IHtcblx0Y29uc3QgZWZmZWN0cyA9IFtdO1xuXG5cdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcblx0XHRpZiAoZWZmZWN0LmlzKHN0YXJ0U25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZFN0YXJ0U25pcHBldC5vZihudWxsKSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVmZmVjdC5pcyh1bmRpZFN0YXJ0U25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaChzdGFydFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlZmZlY3QuaXMoZW5kU25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZEVuZFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlZmZlY3QuaXModW5kaWRFbmRTbmlwcGV0KSkge1xuXHRcdFx0ZWZmZWN0cy5wdXNoKGVuZFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0fVxuXG5cblx0cmV0dXJuIGVmZmVjdHM7XG59KTtcblxuXG5leHBvcnQgY29uc3QgaGFuZGxlVW5kb1JlZG8gPSAodXBkYXRlOiBWaWV3VXBkYXRlKSA9PiB7XG5cdGNvbnN0IHVuZG9UciA9IHVwZGF0ZS50cmFuc2FjdGlvbnMuZmluZCh0ciA9PiB0ci5pc1VzZXJFdmVudChcInVuZG9cIikpO1xuXHRjb25zdCByZWRvVHIgPSB1cGRhdGUudHJhbnNhY3Rpb25zLmZpbmQodHIgPT4gdHIuaXNVc2VyRXZlbnQoXCJyZWRvXCIpKTtcblxuXG5cdGZvciAoY29uc3QgdHIgb2YgdXBkYXRlLnRyYW5zYWN0aW9ucykge1xuXHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcblxuXHRcdFx0aWYgKGVmZmVjdC5pcyhzdGFydFNuaXBwZXQpKSB7XG5cdFx0XHRcdGlmIChyZWRvVHIpIHtcblx0XHRcdFx0XHQvLyBSZWRvIHRoZSB0YWJzdG9wIGV4cGFuc2lvbiBhbmQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0cmVkbyh1cGRhdGUudmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGVmZmVjdC5pcyh1bmRpZEVuZFNuaXBwZXQpKSB7XG5cdFx0XHRcdGlmICh1bmRvVHIpIHtcblx0XHRcdFx0XHQvLyBVbmRvIHRoZSB0YWJzdG9wIGV4cGFuc2lvbiBhbmQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0dW5kbyh1cGRhdGUudmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAodW5kb1RyKSB7XG5cdFx0cmVtb3ZlQWxsVGFic3RvcHModXBkYXRlLnZpZXcpO1xuXHR9XG59OyJdfQ==