import { StateEffect } from "@codemirror/state";
import { invertedEffects, undo, redo } from "@codemirror/commands";
import { removeAllTabstops } from "./tabstops_state_field";
// Effects that mark the beginning and end of transactions to insert snippets
export const startSnippet = StateEffect.define();
export const endSnippet = StateEffect.define();
export const undidStartSnippet = StateEffect.define();
export const undidEndSnippet = StateEffect.define();
// Enables undoing and redoing snippets, taking care of the tabstops
export const snippetInvertedEffects = invertedEffects.of((tr) => {
    const effects = [];
    for (const effect of tr.effects) {
        if (effect.is(startSnippet)) {
            effects.push(undidStartSnippet.of(null));
        }
        else if (effect.is(undidStartSnippet)) {
            effects.push(startSnippet.of(null));
        }
        else if (effect.is(endSnippet)) {
            effects.push(undidEndSnippet.of(null));
        }
        else if (effect.is(undidEndSnippet)) {
            effects.push(endSnippet.of(null));
        }
    }
    return effects;
});
export const handleUndoRedo = (update) => {
    const undoTr = update.transactions.find(tr => tr.isUserEvent("undo"));
    const redoTr = update.transactions.find(tr => tr.isUserEvent("redo"));
    for (const tr of update.transactions) {
        for (const effect of tr.effects) {
            if (effect.is(startSnippet)) {
                if (redoTr) {
                    // Redo the tabstop expansion and selection
                    redo(update.view);
                }
            }
            else if (effect.is(undidEndSnippet)) {
                if (undoTr) {
                    // Undo the tabstop expansion and selection
                    undo(update.view);
                }
            }
        }
    }
    if (undoTr) {
        removeAllTabstops(update.view);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlbWlycm9yL2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTNELDZFQUE2RTtBQUM3RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHcEQsb0VBQW9FO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtJQUNwRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFbkIsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7WUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO2FBQ0ksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDO2FBQ0ksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQzthQUNJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7SUFDRixDQUFDO0lBR0QsT0FBTyxPQUFPLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFrQixFQUFFLEVBQUU7SUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFHdEUsS0FBSyxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFakMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7Z0JBQzdCLElBQUksTUFBTSxFQUFFLENBQUM7b0JBQ1osMkNBQTJDO29CQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQixDQUFDO1lBQ0YsQ0FBQztpQkFDSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxNQUFNLEVBQUUsQ0FBQztvQkFDWiwyQ0FBMkM7b0JBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25CLENBQUM7WUFDRixDQUFDO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ1osaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7QUFDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3VXBkYXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgU3RhdGVFZmZlY3QgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuaW1wb3J0IHsgaW52ZXJ0ZWRFZmZlY3RzLCB1bmRvLCByZWRvIH0gZnJvbSBcIkBjb2RlbWlycm9yL2NvbW1hbmRzXCI7XHJcbmltcG9ydCB7IHJlbW92ZUFsbFRhYnN0b3BzIH0gZnJvbSBcIi4vdGFic3RvcHNfc3RhdGVfZmllbGRcIjtcclxuXHJcbi8vIEVmZmVjdHMgdGhhdCBtYXJrIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0cmFuc2FjdGlvbnMgdG8gaW5zZXJ0IHNuaXBwZXRzXHJcbmV4cG9ydCBjb25zdCBzdGFydFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcclxuZXhwb3J0IGNvbnN0IGVuZFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcclxuZXhwb3J0IGNvbnN0IHVuZGlkU3RhcnRTbmlwcGV0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XHJcbmV4cG9ydCBjb25zdCB1bmRpZEVuZFNuaXBwZXQgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcclxuXHJcblxyXG4vLyBFbmFibGVzIHVuZG9pbmcgYW5kIHJlZG9pbmcgc25pcHBldHMsIHRha2luZyBjYXJlIG9mIHRoZSB0YWJzdG9wc1xyXG5leHBvcnQgY29uc3Qgc25pcHBldEludmVydGVkRWZmZWN0cyA9IGludmVydGVkRWZmZWN0cy5vZigodHI6IGFueSkgPT4ge1xyXG5cdGNvbnN0IGVmZmVjdHMgPSBbXTtcclxuXHJcblx0Zm9yIChjb25zdCBlZmZlY3Qgb2YgdHIuZWZmZWN0cykge1xyXG5cdFx0aWYgKGVmZmVjdC5pcyhzdGFydFNuaXBwZXQpKSB7XHJcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZFN0YXJ0U25pcHBldC5vZihudWxsKSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChlZmZlY3QuaXModW5kaWRTdGFydFNuaXBwZXQpKSB7XHJcblx0XHRcdGVmZmVjdHMucHVzaChzdGFydFNuaXBwZXQub2YobnVsbCkpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoZWZmZWN0LmlzKGVuZFNuaXBwZXQpKSB7XHJcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZEVuZFNuaXBwZXQub2YobnVsbCkpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoZWZmZWN0LmlzKHVuZGlkRW5kU25pcHBldCkpIHtcclxuXHRcdFx0ZWZmZWN0cy5wdXNoKGVuZFNuaXBwZXQub2YobnVsbCkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cdHJldHVybiBlZmZlY3RzO1xyXG59KTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlVW5kb1JlZG8gPSAodXBkYXRlOiBWaWV3VXBkYXRlKSA9PiB7XHJcblx0Y29uc3QgdW5kb1RyID0gdXBkYXRlLnRyYW5zYWN0aW9ucy5maW5kKHRyID0+IHRyLmlzVXNlckV2ZW50KFwidW5kb1wiKSk7XHJcblx0Y29uc3QgcmVkb1RyID0gdXBkYXRlLnRyYW5zYWN0aW9ucy5maW5kKHRyID0+IHRyLmlzVXNlckV2ZW50KFwicmVkb1wiKSk7XHJcblxyXG5cclxuXHRmb3IgKGNvbnN0IHRyIG9mIHVwZGF0ZS50cmFuc2FjdGlvbnMpIHtcclxuXHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcclxuXHJcblx0XHRcdGlmIChlZmZlY3QuaXMoc3RhcnRTbmlwcGV0KSkge1xyXG5cdFx0XHRcdGlmIChyZWRvVHIpIHtcclxuXHRcdFx0XHRcdC8vIFJlZG8gdGhlIHRhYnN0b3AgZXhwYW5zaW9uIGFuZCBzZWxlY3Rpb25cclxuXHRcdFx0XHRcdHJlZG8odXBkYXRlLnZpZXcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmIChlZmZlY3QuaXModW5kaWRFbmRTbmlwcGV0KSkge1xyXG5cdFx0XHRcdGlmICh1bmRvVHIpIHtcclxuXHRcdFx0XHRcdC8vIFVuZG8gdGhlIHRhYnN0b3AgZXhwYW5zaW9uIGFuZCBzZWxlY3Rpb25cclxuXHRcdFx0XHRcdHVuZG8odXBkYXRlLnZpZXcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKHVuZG9Ucikge1xyXG5cdFx0cmVtb3ZlQWxsVGFic3RvcHModXBkYXRlLnZpZXcpO1xyXG5cdH1cclxufTsiXX0=