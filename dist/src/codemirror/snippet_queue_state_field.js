import { StateEffect, StateField } from "@codemirror/state";
import { SnippetChangeSpec } from "./snippet_change_spec";
const queueSnippetEffect = StateEffect.define();
const clearSnippetQueueEffect = StateEffect.define();
export const snippetQueueStateField = StateField.define({
    create() {
        return [];
    },
    update(oldState, transaction) {
        let snippetQueue = oldState;
        for (const effect of transaction.effects) {
            if (effect.is(queueSnippetEffect)) {
                snippetQueue.push(effect.value);
            }
            else if (effect.is(clearSnippetQueueEffect)) {
                snippetQueue = [];
            }
        }
        return snippetQueue;
    },
});
export function queueSnippet(view, from, to, insert, keyPressed) {
    const snippet = new SnippetChangeSpec(from, to, insert, keyPressed);
    console.log("snippet_queueSnippet", snippet);
    view.dispatch({
        effects: [queueSnippetEffect.of(snippet)],
    });
}
export function clearSnippetQueue(view) {
    view.dispatch({
        effects: [clearSnippetQueueEffect.of(null)],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25pcHBldF9xdWV1ZV9zdGF0ZV9maWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlbWlycm9yL3NuaXBwZXRfcXVldWVfc3RhdGVfZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQXFCLENBQUM7QUFDbkUsTUFBTSx1QkFBdUIsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBc0I7SUFFNUUsTUFBTTtRQUNMLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVztRQUMzQixJQUFJLFlBQVksR0FBRyxRQUFRLENBQUM7UUFFNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDMUMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQztnQkFDbkMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsQ0FBQztpQkFDSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDO2dCQUM3QyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ25CLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDckIsQ0FBQztDQUNELENBQUMsQ0FBQztBQUdILE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBZ0IsRUFBRSxJQUFZLEVBQUUsRUFBVSxFQUFFLE1BQWMsRUFBRSxVQUFtQjtJQUMzRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUMsT0FBTyxDQUFDLENBQUE7SUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNiLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWdCO0lBQ2pELElBQUksQ0FBQyxRQUFRLENBQUM7UUFDYixPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgeyBTdGF0ZUVmZmVjdCwgU3RhdGVGaWVsZCB9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBTbmlwcGV0Q2hhbmdlU3BlYyB9IGZyb20gXCIuL3NuaXBwZXRfY2hhbmdlX3NwZWNcIjtcclxuXHJcbmNvbnN0IHF1ZXVlU25pcHBldEVmZmVjdCA9IFN0YXRlRWZmZWN0LmRlZmluZTxTbmlwcGV0Q2hhbmdlU3BlYz4oKTtcclxuY29uc3QgY2xlYXJTbmlwcGV0UXVldWVFZmZlY3QgPSBTdGF0ZUVmZmVjdC5kZWZpbmUoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzbmlwcGV0UXVldWVTdGF0ZUZpZWxkID0gU3RhdGVGaWVsZC5kZWZpbmU8U25pcHBldENoYW5nZVNwZWNbXT4oe1xyXG5cclxuXHRjcmVhdGUoKSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fSxcclxuXHJcblx0dXBkYXRlKG9sZFN0YXRlLCB0cmFuc2FjdGlvbikge1xyXG5cdFx0bGV0IHNuaXBwZXRRdWV1ZSA9IG9sZFN0YXRlO1xyXG5cclxuXHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyYW5zYWN0aW9uLmVmZmVjdHMpIHtcclxuXHRcdFx0aWYgKGVmZmVjdC5pcyhxdWV1ZVNuaXBwZXRFZmZlY3QpKSB7XHJcblx0XHRcdFx0c25pcHBldFF1ZXVlLnB1c2goZWZmZWN0LnZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmIChlZmZlY3QuaXMoY2xlYXJTbmlwcGV0UXVldWVFZmZlY3QpKSB7XHJcblx0XHRcdFx0c25pcHBldFF1ZXVlID0gW107XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc25pcHBldFF1ZXVlO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWV1ZVNuaXBwZXQodmlldzogRWRpdG9yVmlldywgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyLCBpbnNlcnQ6IHN0cmluZywga2V5UHJlc3NlZD86IHN0cmluZykge1xyXG5cdGNvbnN0IHNuaXBwZXQgPSBuZXcgU25pcHBldENoYW5nZVNwZWMoZnJvbSwgdG8sIGluc2VydCwga2V5UHJlc3NlZCk7XHJcblx0Y29uc29sZS5sb2coXCJzbmlwcGV0X3F1ZXVlU25pcHBldFwiLHNuaXBwZXQpXHJcblx0dmlldy5kaXNwYXRjaCh7XHJcblx0XHRlZmZlY3RzOiBbcXVldWVTbmlwcGV0RWZmZWN0Lm9mKHNuaXBwZXQpXSxcclxuXHR9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU25pcHBldFF1ZXVlKHZpZXc6IEVkaXRvclZpZXcpIHtcclxuXHR2aWV3LmRpc3BhdGNoKHtcclxuXHRcdGVmZmVjdHM6IFtjbGVhclNuaXBwZXRRdWV1ZUVmZmVjdC5vZihudWxsKV0sXHJcblx0fSk7XHJcbn0iXX0=