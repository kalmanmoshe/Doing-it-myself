import { BracketState, BracketType } from "./mathParserStaticData";
var Encasing;
(function (Encasing) {
    Encasing[Encasing["None"] = 0] = "None";
    Encasing[Encasing["Brackets"] = 1] = "Brackets";
    Encasing[Encasing["Parentheses"] = 2] = "Parentheses";
})(Encasing || (Encasing = {}));
var LatexType;
(function (LatexType) {
    LatexType["Number"] = "number";
    LatexType["Syntax"] = "syntax";
    LatexType["Unit"] = "unit";
    LatexType["Path"] = "path";
    LatexType["Macro"] = "macro";
    LatexType["Formatting"] = "formatting";
    LatexType["PathConnector"] = "pathConnector";
})(LatexType || (LatexType = {}));
export const brackets = [
    // Parentheses
    { type: 'bracket', name: BracketType.Parentheses + '_' + BracketState.Open, references: ["("] },
    { type: 'bracket', name: BracketType.Parentheses + '_' + BracketState.Close, references: [")"] },
    { type: 'bracket', name: BracketType.CurlyBraces + '_' + BracketState.Open, references: ["{"] },
    { type: 'bracket', name: BracketType.CurlyBraces + '_' + BracketState.Close, references: ["}"] },
    { type: 'bracket', name: BracketType.SquareBrackets + '_' + BracketState.Open, references: ["["] },
    { type: 'bracket', name: BracketType.SquareBrackets + '_' + BracketState.Close, references: ["]"] },
];
const tikzMacros = [
    { type: LatexType.Macro, name: 'Definition', references: ['\\def'] },
];
const tikzFormatting = [
    { type: LatexType.Formatting, name: 'LineWidth', references: ['line width'] },
    { type: LatexType.Formatting, name: 'Label', references: ['label'] },
    { type: LatexType.Formatting, name: 'Large', references: ['\\Large'] },
    { type: LatexType.Formatting, name: 'Color', references: ['red'] },
    { type: LatexType.Formatting, name: 'Opacity', references: ['opacity'] },
];
const tikzUnits = [
    { type: LatexType.Unit, name: 'Point', references: ['pt'] },
    { type: LatexType.Unit, name: 'Centimeter', references: ['cm'] },
];
const tikzPathAndNodes = [
    { type: LatexType.Path, name: 'Draw', references: ['\\draw'] },
    { type: LatexType.Path, name: 'Coordinate', references: ['\\coordinate'] },
];
const tikzPathConnectors = [
    { type: LatexType.PathConnector, name: 'ReferenceLastAxis', latex: '--++', references: ['--++'] },
    { type: LatexType.PathConnector, name: 'ReferenceFirstAxis', latex: '--+', references: ['--+'] },
    { type: LatexType.PathConnector, name: 'AxisConnector', latex: '--', references: ['--'] },
];
const tikzComponents = [
    ...tikzFormatting,
    ...tikzUnits,
    ...tikzPathAndNodes,
    ...tikzPathConnectors,
    ...tikzMacros,
];
export const units = [
    { type: 'Unit', references: ['pt', 'cm', ',', ';', '-'] },
];
const tikzColors = [];
export const LatexMetadata = tikzComponents.map(c => createLatexMetadata(c));
export function createLatexMetadata(overrides) {
    const givenReferences = overrides?.references?.filter((ref) => typeof ref === 'string') || [];
    const defaultReferences = givenReferences.length > 0 ? givenReferences : [];
    const latex = overrides.latex || defaultReferences[0] || '';
    return {
        type: overrides.type ?? LatexType.Syntax,
        name: overrides.name ?? 'Unknown',
        latex: latex,
        references: [...defaultReferences],
    };
}
//# sourceMappingURL=data:application/json;base64,