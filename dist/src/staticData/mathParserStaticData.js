export const keyboardAutoReplaceHebrewToEnglishTriggers = [
    { key: "\u05D0", code: "KeyT", replacement: "t" },
    { key: "\u05D1", code: "KeyC", replacement: "c" },
    { key: "\u05D2", code: "KeyD", replacement: "d" },
    { key: "\u05D3", code: "KeyS", replacement: "s" },
    { key: "\u05D4", code: "KeyV", replacement: "v" },
    { key: "\u05D5", code: "KeyU", replacement: "u" },
    { key: "\u05D6", code: "KeyZ", replacement: "z" },
    { key: "\u05D7", code: "KeyJ", replacement: "j" },
    { key: "\u05D8", code: "KeyY", replacement: "y" },
    { key: "ך", code: "KeyL", replacement: "l" },
    { key: "\u05D9", code: "KeyH", replacement: "h" },
    { key: "\u05DB", code: "KeyF", replacement: "f" },
    { key: "\u05DC", code: "KeyK", replacement: "k" },
    { key: "\u05DE", code: "KeyN", replacement: "n" },
    { key: "\u05DD", code: "KeyO", replacement: "o" },
    { key: "\u05E0", code: "KeyB", replacement: "b" },
    { key: "\u05DF", code: "KeyI", replacement: "i" },
    { key: "\u05E1", code: "KeyX", replacement: "x" },
    { key: "\u05E2", code: "KeyG", replacement: "g" },
    { key: "\u05E4", code: "KeyP", replacement: "p" },
    { key: "\u05E6", code: "KeyM", replacement: "m" },
    { key: "\u05E8", code: "KeyR", replacement: "r" },
    { key: "\u05E7", code: "KeyE", replacement: "e" },
    { key: "\u05E9", code: "KeyA", replacement: "a" },
    { key: "\u05EA", code: "KeyC", replacement: "c" },
    { key: "/", code: "KeyQ", replacement: "q" },
    { key: "ת", code: "Comma", replacement: "," },
    { key: "'", code: "KeyW", replacement: "w" },
    { key: "\u05E5", code: "Period", replacement: "." },
    { key: ".", code: "Slash", replacement: "/" },
    { key: "]", code: "BracketLeft", replacement: "[" },
    { key: "[", code: "BracketRight", replacement: "]" },
    { key: "}", code: "BracketLeft", replacement: "{" },
    { key: "{", code: "BracketRight", replacement: "}" },
    { key: ")", code: "Digit9", replacement: "(" },
    { key: "(", code: "Digit0", replacement: ")" },
    { key: ">", code: "Comma", replacement: "<" },
    { key: "<", code: "Period", replacement: ">" }
];
export var OperatorType;
(function (OperatorType) {
    OperatorType["Comparison"] = "Comparison";
    OperatorType["Arithmetic"] = "Arithmetic";
    OperatorType["Trigonometric"] = "Trigonometric";
    OperatorType["Exponential"] = "Exponential";
    OperatorType["Logarithmic"] = "Logarithmic";
    OperatorType["Fraction"] = "Fraction";
    OperatorType["Radical"] = "Radical";
    OperatorType["Integral"] = "Integral";
    OperatorType["Summation"] = "Summation";
    OperatorType["Factorial"] = "Factorial";
})(OperatorType || (OperatorType = {}));
export const operatorNames = new Map([
    [OperatorType.Comparison, ['Equals', 'LessThan', 'GreaterThan']],
    [OperatorType.Arithmetic, ['Addition', 'Subtraction', 'Multiplication', 'Division']],
    [OperatorType.Trigonometric, ['Sine', 'Cosine', 'Tangent', 'Secant', 'Cosecant', 'Cotangent']],
    [OperatorType.Exponential, ['Exponent', 'Power']],
    [OperatorType.Logarithmic, []],
    [OperatorType.Fraction, ['Fraction']],
    [OperatorType.Radical, ['SquareRoot', 'NthRoot']],
    [OperatorType.Integral, ['Definite']],
    [OperatorType.Summation, []],
    [OperatorType.Factorial, ['Factorial']],
]);
//'Radical', 'Integral', 'Trigonometric', 'Logarithmic', 'Exponential'
export const operatorsWithImplicitMultiplication = [
    OperatorType.Radical, OperatorType.Integral, OperatorType.Trigonometric, OperatorType.Logarithmic, OperatorType.Factorial, OperatorType.Fraction
];
export var Associativity;
(function (Associativity) {
    Associativity["Right"] = "right";
    Associativity["Left"] = "left";
    Associativity["DoubleRight"] = "doubleRight";
})(Associativity || (Associativity = {}));
export var BracketType;
(function (BracketType) {
    BracketType["Parentheses"] = "parentheses";
    BracketType["SquareBrackets"] = "squareBrackets";
    BracketType["CurlyBraces"] = "curlyBracket";
    BracketType["None"] = "none";
})(BracketType || (BracketType = {}));
export var BracketState;
(function (BracketState) {
    BracketState["Open"] = "open";
    BracketState["Close"] = "close";
})(BracketState || (BracketState = {}));
export function createMathJaxOperatorMetadata(overrides) {
    function calculateDifference(max, min) {
        return max === min ? 1 : Math.abs(max - min) + (min > 0 ? 1 : 0);
    }
    const providedPositions = overrides.associativity?.positions instanceof Map
        ? overrides.associativity.positions
        : objectToMap(overrides.associativity?.positions);
    // Extract numeric keys and determine the range
    const numericKeys = Array.from(providedPositions.keys());
    const minKey = Math.min(...numericKeys);
    const maxKey = Math.max(...numericKeys);
    if (!isFinite(minKey) || !isFinite(maxKey)) {
        throw new Error("No valid numeric keys found for associativity positions.");
    }
    if (numericKeys.length !== calculateDifference(maxKey, minKey)) {
        throw new Error(`Associativity positions must be continuous (except for 0) missing Keys found, off by: ${calculateDifference(maxKey, minKey) - numericKeys.length}`);
    }
    const positions = new Map();
    for (const key of numericKeys) {
        const provided = providedPositions.get(key);
        positions.set(key, {
            bracketType: provided?.bracketType ?? BracketType.None,
            isBracketOptional: provided?.isBracketOptional ?? false,
        });
    }
    const references = overrides.references?.filter((ref) => ref !== undefined) || [];
    return {
        type: overrides.type ?? OperatorType.Arithmetic,
        name: overrides.name ?? 'Unknown',
        latex: stringLatex(overrides.latex) ?? references[0] ?? '',
        backslash: overrides.backslash ?? false,
        references: [...createReferencesFromlatex(overrides.latex), ...references],
        priority: overrides.priority ?? 0,
        associativity: {
            numPositions: overrides?.associativity?.numPositions ?? positions.size,
            commutative: overrides.associativity?.commutative ?? false,
            ranges: { ...{ min: minKey, max: maxKey }, ...overrides?.associativity?.ranges },
            positions,
        },
    };
}
function createReferencesFromlatex(latex) {
    const arr = [];
    if (!latex)
        return arr;
    arr.push(latex);
    if (latexCommand(latex))
        arr.push(`\\${latex}`);
    return arr;
}
const latexCommand = (str) => /^[a-zA-Z]+$/.test(str);
function stringLatex(latex) {
    if (!latex)
        return '';
    return latexCommand(latex) ? `\\${latex} ` : latex;
}
function objectToMap(obj) {
    if (!obj)
        return new Map();
    return new Map(Object.entries(obj).map(([key, value]) => [parseInt(key, 10), value]));
}
const partialMathJaxOperatorsMetadata = [
    {
        type: OperatorType.Comparison,
        name: 'Equals',
        latex: '=',
        references: ['='],
        priority: 6,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    {
        type: OperatorType.Comparison,
        name: 'LessThan',
        latex: '<',
        references: ['<'],
        priority: 6,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    {
        type: OperatorType.Comparison,
        name: 'GreaterThan',
        latex: '>',
        references: ['>'],
        priority: 6,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    /* Arithmetic */
    {
        type: OperatorType.Arithmetic,
        name: 'Addition',
        latex: '+',
        references: ['+'],
        priority: 4,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    {
        type: OperatorType.Arithmetic,
        name: 'Subtraction',
        latex: '-',
        references: ['-'],
        priority: 4,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    {
        type: OperatorType.Arithmetic,
        name: 'Multiplication',
        latex: 'cdot',
        references: ['*'],
        priority: 3,
        associativity: {
            positions: {
                '-1': { bracketType: BracketType.Parentheses, isBracketOptional: true },
                '1': { bracketType: BracketType.Parentheses, isBracketOptional: true },
            },
        },
    },
    {
        type: OperatorType.Arithmetic,
        name: 'Division',
        latex: 'div',
        references: ['/'],
        priority: 3,
        associativity: {
            positions: {
                '-1': {},
                '1': {},
            },
        },
    },
    /* Trigonometric */
    {
        type: OperatorType.Trigonometric,
        name: 'Sine',
        latex: 'sin',
        priority: 2,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.Parentheses },
            },
        },
    },
    {
        type: OperatorType.Trigonometric,
        name: 'Cosine',
        latex: 'cos',
        priority: 2,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.Parentheses },
            },
        },
    },
    {
        type: OperatorType.Trigonometric,
        name: 'Tangent',
        latex: 'tan',
        priority: 2,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.Parentheses },
            },
        },
    },
    /* Exponential */
    {
        type: OperatorType.Exponential,
        name: 'Power',
        latex: '^',
        references: ['^'],
        priority: 1,
        associativity: {
            positions: {
                '-1': { bracketType: BracketType.Parentheses, isBracketOptional: true },
                '1': { bracketType: BracketType.CurlyBraces },
            },
        },
    },
    {
        type: OperatorType.Exponential,
        name: 'Exponent',
        latex: 'e^',
        references: ['e^', '\\exp'],
        priority: 1,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.Parentheses },
            },
        },
    },
    /* Logarithmic */
    /* Fraction */
    {
        type: OperatorType.Fraction,
        name: 'Fraction',
        latex: 'frac',
        priority: 1,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.CurlyBraces },
                '2': { bracketType: BracketType.CurlyBraces },
            },
        },
    },
    /* Radical */
    {
        type: OperatorType.Radical,
        name: 'SquareRoot',
        latex: 'sqrt',
        priority: 1,
        associativity: {
            positions: {
                '1': { bracketType: BracketType.CurlyBraces },
            },
        },
    },
    /* Integral */
    {
        type: OperatorType.Integral,
        name: 'Integral',
        latex: '\\int',
        references: ['\\int', 'integral'],
        priority: 5,
        associativity: {
            positions: {
                '1': {},
            },
        },
    },
    /* Summation */
    /* Factorial */
    {
        type: OperatorType.Factorial,
        name: 'Factorial',
        latex: '!',
        references: ['!'],
        priority: 1,
        associativity: {
            positions: {
                '1': {},
            },
        },
    },
];
export const mathJaxOperatorsMetadata = partialMathJaxOperatorsMetadata.map((metadata) => createMathJaxOperatorMetadata(metadata));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aFBhcnNlclN0YXRpY0RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RhdGljRGF0YS9tYXRoUGFyc2VyU3RhdGljRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLENBQUMsTUFBTywwQ0FBMEMsR0FDeEQ7SUFDSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQzVDLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFB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QUNKLENBQUM7QUFHRixNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBOEIsK0JBQStCLENBQUMsR0FBRyxDQUNsRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCAga2V5Ym9hcmRBdXRvUmVwbGFjZUhlYnJld1RvRW5nbGlzaFRyaWdnZXJzID1cbltcbiAgICB7IGtleTogXCJcXHUwNUQwXCIsIGNvZGU6IFwiS2V5VFwiLCByZXBsYWNlbWVudDogXCJ0XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQxXCIsIGNvZGU6IFwiS2V5Q1wiLCByZXBsYWNlbWVudDogXCJjXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQyXCIsIGNvZGU6IFwiS2V5RFwiLCByZXBsYWNlbWVudDogXCJkXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQzXCIsIGNvZGU6IFwiS2V5U1wiLCByZXBsYWNlbWVudDogXCJzXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ0XCIsIGNvZGU6IFwiS2V5VlwiLCByZXBsYWNlbWVudDogXCJ2XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ1XCIsIGNvZGU6IFwiS2V5VVwiLCByZXBsYWNlbWVudDogXCJ1XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ2XCIsIGNvZGU6IFwiS2V5WlwiLCByZXBsYWNlbWVudDogXCJ6XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ3XCIsIGNvZGU6IFwiS2V5SlwiLCByZXBsYWNlbWVudDogXCJqXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ4XCIsIGNvZGU6IFwiS2V5WVwiLCByZXBsYWNlbWVudDogXCJ5XCIgfSxcbiAgICB7IGtleTogXCLXmlwiLCBjb2RlOiBcIktleUxcIiwgcmVwbGFjZW1lbnQ6IFwibFwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVEOVwiLCBjb2RlOiBcIktleUhcIiwgcmVwbGFjZW1lbnQ6IFwiaFwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVEQlwiLCBjb2RlOiBcIktleUZcIiwgcmVwbGFjZW1lbnQ6IFwiZlwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVEQ1wiLCBjb2RlOiBcIktleUtcIiwgcmVwbGFjZW1lbnQ6IFwia1wiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVERVwiLCBjb2RlOiBcIktleU5cIiwgcmVwbGFjZW1lbnQ6IFwiblwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVERFwiLCBjb2RlOiBcIktleU9cIiwgcmVwbGFjZW1lbnQ6IFwib1wiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFMFwiLCBjb2RlOiBcIktleUJcIiwgcmVwbGFjZW1lbnQ6IFwiYlwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVERlwiLCBjb2RlOiBcIktleUlcIiwgcmVwbGFjZW1lbnQ6IFwiaVwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFMVwiLCBjb2RlOiBcIktleVhcIiwgcmVwbGFjZW1lbnQ6IFwieFwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFMlwiLCBjb2RlOiBcIktleUdcIiwgcmVwbGFjZW1lbnQ6IFwiZ1wiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFNFwiLCBjb2RlOiBcIktleVBcIiwgcmVwbGFjZW1lbnQ6IFwicFwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFNlwiLCBjb2RlOiBcIktleU1cIiwgcmVwbGFjZW1lbnQ6IFwibVwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFOFwiLCBjb2RlOiBcIktleVJcIiwgcmVwbGFjZW1lbnQ6IFwiclwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFN1wiLCBjb2RlOiBcIktleUVcIiwgcmVwbGFjZW1lbnQ6IFwiZVwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFOVwiLCBjb2RlOiBcIktleUFcIiwgcmVwbGFjZW1lbnQ6IFwiYVwiIH0sXG4gICAgeyBrZXk6IFwiXFx1MDVFQVwiLCBjb2RlOiBcIktleUNcIiwgcmVwbGFjZW1lbnQ6IFwiY1wiIH0sXG4gICAgeyBrZXk6IFwiL1wiLCBjb2RlOiBcIktleVFcIiwgcmVwbGFjZW1lbnQ6IFwicVwiIH0sXG4gICAgeyBrZXk6IFwi16pcIiwgY29kZTogXCJDb21tYVwiLCByZXBsYWNlbWVudDogXCIsXCIgfSxcbiAgICB7IGtleTogXCInXCIsIGNvZGU6IFwiS2V5V1wiLCByZXBsYWNlbWVudDogXCJ3XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU1XCIsIGNvZGU6IFwiUGVyaW9kXCIsIHJlcGxhY2VtZW50OiBcIi5cIiB9LFxuICAgIHsga2V5OiBcIi5cIiwgY29kZTogXCJTbGFzaFwiLCByZXBsYWNlbWVudDogXCIvXCIgfSxcbiAgICB7IGtleTogXCJdXCIsIGNvZGU6IFwiQnJhY2tldExlZnRcIiwgcmVwbGFjZW1lbnQ6IFwiW1wiIH0sXG4gICAgeyBrZXk6IFwiW1wiLCBjb2RlOiBcIkJyYWNrZXRSaWdodFwiLCByZXBsYWNlbWVudDogXCJdXCIgfSxcbiAgICB7IGtleTogXCJ9XCIsIGNvZGU6IFwiQnJhY2tldExlZnRcIiwgcmVwbGFjZW1lbnQ6IFwie1wiIH0sXG4gICAgeyBrZXk6IFwie1wiLCBjb2RlOiBcIkJyYWNrZXRSaWdodFwiLCByZXBsYWNlbWVudDogXCJ9XCIgfSxcbiAgICB7IGtleTogXCIpXCIsIGNvZGU6IFwiRGlnaXQ5XCIsIHJlcGxhY2VtZW50OiBcIihcIiB9LFxuICAgIHsga2V5OiBcIihcIiwgY29kZTogXCJEaWdpdDBcIiwgcmVwbGFjZW1lbnQ6IFwiKVwiIH0sXG4gICAgeyBrZXk6IFwiPlwiLCBjb2RlOiBcIkNvbW1hXCIsIHJlcGxhY2VtZW50OiBcIjxcIiB9LFxuICAgIHsga2V5OiBcIjxcIiwgY29kZTogXCJQZXJpb2RcIiwgcmVwbGFjZW1lbnQ6IFwiPlwiIH1cbl07XG5cblxuXG5cblxuICBcblxuXG5cblxuZXhwb3J0IGVudW0gT3BlcmF0b3JUeXBlIHtcbiAgICBDb21wYXJpc29uID0gJ0NvbXBhcmlzb24nLFxuICAgIEFyaXRobWV0aWMgPSAnQXJpdGhtZXRpYycsXG4gICAgVHJpZ29ub21ldHJpYyA9ICdUcmlnb25vbWV0cmljJyxcbiAgICBFeHBvbmVudGlhbCA9ICdFeHBvbmVudGlhbCcsXG4gICAgTG9nYXJpdGhtaWMgPSAnTG9nYXJpdGhtaWMnLFxuICAgIEZyYWN0aW9uID0gJ0ZyYWN0aW9uJyxcbiAgICBSYWRpY2FsID0gJ1JhZGljYWwnLFxuICAgIEludGVncmFsID0gJ0ludGVncmFsJyxcbiAgICBTdW1tYXRpb24gPSAnU3VtbWF0aW9uJyxcbiAgICBGYWN0b3JpYWwgPSAnRmFjdG9yaWFsJyxcbn1cblxuZXhwb3J0IGNvbnN0IG9wZXJhdG9yTmFtZXMgPSBuZXcgTWFwPE9wZXJhdG9yVHlwZSwgc3RyaW5nW10+KFtcbiAgICBbT3BlcmF0b3JUeXBlLkNvbXBhcmlzb24sIFsnRXF1YWxzJywgJ0xlc3NUaGFuJywgJ0dyZWF0ZXJUaGFuJ11dLFxuICAgIFtPcGVyYXRvclR5cGUuQXJpdGhtZXRpYywgWydBZGRpdGlvbicsICdTdWJ0cmFjdGlvbicsICdNdWx0aXBsaWNhdGlvbicsICdEaXZpc2lvbiddXSxcbiAgICBbT3BlcmF0b3JUeXBlLlRyaWdvbm9tZXRyaWMsIFsnU2luZScsICdDb3NpbmUnLCAnVGFuZ2VudCcsICdTZWNhbnQnLCAnQ29zZWNhbnQnLCAnQ290YW5nZW50J11dLFxuICAgIFtPcGVyYXRvclR5cGUuRXhwb25lbnRpYWwsIFsnRXhwb25lbnQnLCAnUG93ZXInXV0sXG4gICAgW09wZXJhdG9yVHlwZS5Mb2dhcml0aG1pYywgW11dLFxuICAgIFtPcGVyYXRvclR5cGUuRnJhY3Rpb24sIFsnRnJhY3Rpb24nXV0sXG4gICAgW09wZXJhdG9yVHlwZS5SYWRpY2FsLCBbJ1NxdWFyZVJvb3QnLCdOdGhSb290J11dLFxuICAgIFtPcGVyYXRvclR5cGUuSW50ZWdyYWwsIFsnRGVmaW5pdGUnXV0sXG4gICAgW09wZXJhdG9yVHlwZS5TdW1tYXRpb24sIFtdXSxcbiAgICBbT3BlcmF0b3JUeXBlLkZhY3RvcmlhbCwgWydGYWN0b3JpYWwnXV0sXG5dKTtcblxuLy8nUmFkaWNhbCcsICdJbnRlZ3JhbCcsICdUcmlnb25vbWV0cmljJywgJ0xvZ2FyaXRobWljJywgJ0V4cG9uZW50aWFsJ1xuZXhwb3J0IGNvbnN0IG9wZXJhdG9yc1dpdGhJbXBsaWNpdE11bHRpcGxpY2F0aW9uID0gW1xuICAgIE9wZXJhdG9yVHlwZS5SYWRpY2FsLE9wZXJhdG9yVHlwZS5JbnRlZ3JhbCxPcGVyYXRvclR5cGUuVHJpZ29ub21ldHJpYyxPcGVyYXRvclR5cGUuTG9nYXJpdGhtaWMsT3BlcmF0b3JUeXBlLkZhY3RvcmlhbCxPcGVyYXRvclR5cGUuRnJhY3Rpb25cbl1cblxuXG5leHBvcnQgZW51bSBBc3NvY2lhdGl2aXR5IHtcbiAgICBSaWdodCA9ICdyaWdodCcsXG4gICAgTGVmdCA9ICdsZWZ0JyxcbiAgICBEb3VibGVSaWdodCA9ICdkb3VibGVSaWdodCcsXG59XG5cbmV4cG9ydCBlbnVtIEJyYWNrZXRUeXBlIHtcbiAgICBQYXJlbnRoZXNlcyA9ICdwYXJlbnRoZXNlcycsXG4gICAgU3F1YXJlQnJhY2tldHMgPSAnc3F1YXJlQnJhY2tldHMnLFxuICAgIEN1cmx5QnJhY2VzID0gJ2N1cmx5QnJhY2tldCcsXG4gICAgTm9uZSA9ICdub25lJyxcbn1cbmV4cG9ydCBlbnVtIEJyYWNrZXRTdGF0ZXtcbiAgICBPcGVuPSdvcGVuJyxcbiAgICBDbG9zZT0nY2xvc2UnLFxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0aEpheE9wZXJhdG9yTWV0YWRhdGEge1xuICAgIHR5cGU6IE9wZXJhdG9yVHlwZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbGF0ZXg6IHN0cmluZztcbiAgICBiYWNrc2xhc2g6IGJvb2xlYW47XG4gICAgcmVmZXJlbmNlczogc3RyaW5nW107XG4gICAgcHJpb3JpdHk6IG51bWJlcjtcbiAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgIG51bVBvc2l0aW9uczogbnVtYmVyO1xuICAgICAgICBjb21tdXRhdGl2ZTogYm9vbGVhbjtcbiAgICAgICAgcmFuZ2VzOiB7IG1pbjogbnVtYmVyOyBtYXg6IG51bWJlciB9O1xuICAgICAgICBwb3NpdGlvbnM6IE1hcDxudW1iZXIsIHtcbiAgICAgICAgICAgIGJyYWNrZXRUeXBlOiBCcmFja2V0VHlwZTtcbiAgICAgICAgICAgIGlzQnJhY2tldE9wdGlvbmFsOiBib29sZWFuO1xuICAgICAgICB9PjtcbiAgICB9O1xufVxuXG5cbnR5cGUgRGVlcFBhcnRpYWw8VD4gPSB7XG4gICAgW1AgaW4ga2V5b2YgVF0/OiBUW1BdIGV4dGVuZHMgTWFwPG51bWJlciwgaW5mZXIgVj5cbiAgICAgICAgPyBSZWNvcmQ8bnVtYmVyLCBEZWVwUGFydGlhbDxWPj5cbiAgICAgICAgOiBUW1BdIGV4dGVuZHMgb2JqZWN0XG4gICAgICAgID8gRGVlcFBhcnRpYWw8VFtQXT5cbiAgICAgICAgOiBUW1BdO1xufTtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXRoSmF4T3BlcmF0b3JNZXRhZGF0YShcbiAgICBvdmVycmlkZXM6IERlZXBQYXJ0aWFsPE1hdGhKYXhPcGVyYXRvck1ldGFkYXRhPlxuKTogTWF0aEpheE9wZXJhdG9yTWV0YWRhdGEge1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpZmZlcmVuY2UobWF4OiBudW1iZXIsIG1pbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIG1heCA9PT0gbWluID8gMSA6IE1hdGguYWJzKG1heCAtIG1pbikgKyAobWluID4gMCA/IDEgOiAwKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcHJvdmlkZWRQb3NpdGlvbnMgPVxuICAgICAgICBvdmVycmlkZXMuYXNzb2NpYXRpdml0eT8ucG9zaXRpb25zIGluc3RhbmNlb2YgTWFwXG4gICAgICAgICAgICA/IG92ZXJyaWRlcy5hc3NvY2lhdGl2aXR5LnBvc2l0aW9uc1xuICAgICAgICAgICAgOiBvYmplY3RUb01hcChvdmVycmlkZXMuYXNzb2NpYXRpdml0eT8ucG9zaXRpb25zKTtcblxuICAgIC8vIEV4dHJhY3QgbnVtZXJpYyBrZXlzIGFuZCBkZXRlcm1pbmUgdGhlIHJhbmdlXG4gICAgY29uc3QgbnVtZXJpY0tleXMgPSBBcnJheS5mcm9tKHByb3ZpZGVkUG9zaXRpb25zLmtleXMoKSk7XG4gICAgY29uc3QgbWluS2V5ID0gTWF0aC5taW4oLi4ubnVtZXJpY0tleXMpO1xuICAgIGNvbnN0IG1heEtleSA9IE1hdGgubWF4KC4uLm51bWVyaWNLZXlzKTtcblxuICAgIGlmICghaXNGaW5pdGUobWluS2V5KSB8fCAhaXNGaW5pdGUobWF4S2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWxpZCBudW1lcmljIGtleXMgZm91bmQgZm9yIGFzc29jaWF0aXZpdHkgcG9zaXRpb25zLlwiKTtcbiAgICB9XG4gICAgaWYgKG51bWVyaWNLZXlzLmxlbmd0aCAhPT0gY2FsY3VsYXRlRGlmZmVyZW5jZShtYXhLZXksIG1pbktleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3NvY2lhdGl2aXR5IHBvc2l0aW9ucyBtdXN0IGJlIGNvbnRpbnVvdXMgKGV4Y2VwdCBmb3IgMCkgbWlzc2luZyBLZXlzIGZvdW5kLCBvZmYgYnk6ICR7Y2FsY3VsYXRlRGlmZmVyZW5jZShtYXhLZXksIG1pbktleSktbnVtZXJpY0tleXMubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgTWFwPG51bWJlciwgeyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUsaXNCcmFja2V0T3B0aW9uYWw6IGJvb2xlYW4gfT4oKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBudW1lcmljS2V5cykge1xuICAgICAgICBjb25zdCBwcm92aWRlZCA9IHByb3ZpZGVkUG9zaXRpb25zLmdldChrZXkpO1xuICAgICAgICBwb3NpdGlvbnMuc2V0KGtleSwge1xuICAgICAgICAgICAgYnJhY2tldFR5cGU6IHByb3ZpZGVkPy5icmFja2V0VHlwZSA/PyBCcmFja2V0VHlwZS5Ob25lLFxuICAgICAgICAgICAgaXNCcmFja2V0T3B0aW9uYWw6IHByb3ZpZGVkPy5pc0JyYWNrZXRPcHRpb25hbCA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVmZXJlbmNlcyA9b3ZlcnJpZGVzLnJlZmVyZW5jZXM/LmZpbHRlcigocmVmKTogcmVmIGlzIHN0cmluZyA9PiByZWYgIT09IHVuZGVmaW5lZCkgfHwgW11cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IG92ZXJyaWRlcy50eXBlID8/IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxuICAgICAgICBuYW1lOiBvdmVycmlkZXMubmFtZSA/PyAnVW5rbm93bicsXG4gICAgICAgIGxhdGV4OiBzdHJpbmdMYXRleChvdmVycmlkZXMubGF0ZXgpID8/IHJlZmVyZW5jZXNbMF0gPz8gJycsXG4gICAgICAgIGJhY2tzbGFzaDogb3ZlcnJpZGVzLmJhY2tzbGFzaCA/PyBmYWxzZSxcbiAgICAgICAgcmVmZXJlbmNlczogWy4uLmNyZWF0ZVJlZmVyZW5jZXNGcm9tbGF0ZXgob3ZlcnJpZGVzLmxhdGV4KSwuLi5yZWZlcmVuY2VzXSxcbiAgICAgICAgcHJpb3JpdHk6IG92ZXJyaWRlcy5wcmlvcml0eSA/PyAwLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBudW1Qb3NpdGlvbnM6IG92ZXJyaWRlcz8uYXNzb2NpYXRpdml0eT8ubnVtUG9zaXRpb25zPz9wb3NpdGlvbnMuc2l6ZSxcbiAgICAgICAgICAgIGNvbW11dGF0aXZlOiBvdmVycmlkZXMuYXNzb2NpYXRpdml0eT8uY29tbXV0YXRpdmUgPz8gZmFsc2UsXG4gICAgICAgICAgICByYW5nZXM6IHsgLi4ueyBtaW46IG1pbktleSwgbWF4OiBtYXhLZXkgfSwgLi4ub3ZlcnJpZGVzPy5hc3NvY2lhdGl2aXR5Py5yYW5nZXMgfSxcbiAgICAgICAgICAgIHBvc2l0aW9ucyxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWZlcmVuY2VzRnJvbWxhdGV4KGxhdGV4Pzogc3RyaW5nKTpzdHJpbmdbXXtcbiAgICBjb25zdCBhcnI6IHN0cmluZ1tdPVtdO1xuICAgIGlmKCFsYXRleClyZXR1cm4gYXJyO1xuICAgIGFyci5wdXNoKGxhdGV4KVxuICAgIGlmKGxhdGV4Q29tbWFuZChsYXRleCkpYXJyLnB1c2goYFxcXFwke2xhdGV4fWApXG4gICAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGxhdGV4Q29tbWFuZD0gKHN0cjogc3RyaW5nKSA9PiAvXlthLXpBLVpdKyQvLnRlc3Qoc3RyKTtcblxuZnVuY3Rpb24gc3RyaW5nTGF0ZXgobGF0ZXg/OiBzdHJpbmcpe1xuICAgIGlmKCFsYXRleClyZXR1cm4gJyc7XG4gICAgcmV0dXJuIGxhdGV4Q29tbWFuZChsYXRleCk/YFxcXFwke2xhdGV4fSBgOmxhdGV4XG59XG5cblxuXG5mdW5jdGlvbiBvYmplY3RUb01hcDxUPihvYmo/OiBSZWNvcmQ8bnVtYmVyIHwgc3RyaW5nLCBUPik6IE1hcDxudW1iZXIsIFQ+IHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG5ldyBNYXAoKTtcbiAgICByZXR1cm4gbmV3IE1hcChcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gW3BhcnNlSW50KGtleSwgMTApLCB2YWx1ZV0pXG4gICAgKTtcbn1cblxuXG5cblxuXG5cblxuY29uc3QgcGFydGlhbE1hdGhKYXhPcGVyYXRvcnNNZXRhZGF0YTogRGVlcFBhcnRpYWw8TWF0aEpheE9wZXJhdG9yTWV0YWRhdGE+W109W1xuICAgIHtcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkNvbXBhcmlzb24sXG4gICAgICAgIG5hbWU6ICdFcXVhbHMnLFxuICAgICAgICBsYXRleDogJz0nLFxuICAgICAgICByZWZlcmVuY2VzOiBbJz0nXSxcbiAgICAgICAgcHJpb3JpdHk6IDYsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICctMSc6IHt9LFxuICAgICAgICAgICAgICAgICcxJzoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuQ29tcGFyaXNvbixcbiAgICAgICAgbmFtZTogJ0xlc3NUaGFuJyxcbiAgICAgICAgbGF0ZXg6ICc8JyxcbiAgICAgICAgcmVmZXJlbmNlczogWyc8J10sXG4gICAgICAgIHByaW9yaXR5OiA2LFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnLTEnOiB7fSxcbiAgICAgICAgICAgICAgICAnMSc6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkNvbXBhcmlzb24sXG4gICAgICAgIG5hbWU6ICdHcmVhdGVyVGhhbicsXG4gICAgICAgIGxhdGV4OiAnPicsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnPiddLFxuICAgICAgICBwcmlvcml0eTogNixcbiAgICAgICAgYXNzb2NpYXRpdml0eTogeyBcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICctMSc6IHt9LFxuICAgICAgICAgICAgICAgICcxJzoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgLyogQXJpdGhtZXRpYyAqL1xuICAgIHtcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkFyaXRobWV0aWMsXG4gICAgICAgIG5hbWU6ICdBZGRpdGlvbicsXG4gICAgICAgIGxhdGV4OiAnKycsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnKyddLFxuICAgICAgICBwcmlvcml0eTogNCxcbiAgICAgICAgYXNzb2NpYXRpdml0eToge1xuICAgICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgJy0xJzoge30sXG4gICAgICAgICAgICAgICAgJzEnOiB7fSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxuICAgICAgICBuYW1lOiAnU3VidHJhY3Rpb24nLFxuICAgICAgICBsYXRleDogJy0nLFxuICAgICAgICByZWZlcmVuY2VzOiBbJy0nXSxcbiAgICAgICAgcHJpb3JpdHk6IDQsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICctMSc6IHt9LFxuICAgICAgICAgICAgICAgICcxJzoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuQXJpdGhtZXRpYyxcbiAgICAgICAgbmFtZTogJ011bHRpcGxpY2F0aW9uJyxcbiAgICAgICAgbGF0ZXg6ICdjZG90JyxcbiAgICAgICAgcmVmZXJlbmNlczogWycqJ10sXG4gICAgICAgIHByaW9yaXR5OiAzLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnLTEnOiB7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzLGlzQnJhY2tldE9wdGlvbmFsOiB0cnVlfSxcbiAgICAgICAgICAgICAgICAnMSc6IHticmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMsaXNCcmFja2V0T3B0aW9uYWw6IHRydWV9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkFyaXRobWV0aWMsXG4gICAgICAgIG5hbWU6ICdEaXZpc2lvbicsXG4gICAgICAgIGxhdGV4OiAnZGl2JyxcbiAgICAgICAgcmVmZXJlbmNlczogWycvJ10sXG4gICAgICAgIHByaW9yaXR5OiAzLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnLTEnOiB7fSxcbiAgICAgICAgICAgICAgICAnMSc6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qIFRyaWdvbm9tZXRyaWMgKi9cbiAgICB7XG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Ucmlnb25vbWV0cmljLFxuICAgICAgICBuYW1lOiAnU2luZScsXG4gICAgICAgIGxhdGV4OiAnc2luJyxcbiAgICAgICAgcHJpb3JpdHk6IDIsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICcxJzogeyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Ucmlnb25vbWV0cmljLFxuICAgICAgICBuYW1lOiAnQ29zaW5lJyxcbiAgICAgICAgbGF0ZXg6ICdjb3MnLFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgYXNzb2NpYXRpdml0eToge1xuICAgICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgJzEnOiB7IGJyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5QYXJlbnRoZXNlcyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLlRyaWdvbm9tZXRyaWMsXG4gICAgICAgIG5hbWU6ICdUYW5nZW50JyxcbiAgICAgICAgbGF0ZXg6ICd0YW4nLFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgYXNzb2NpYXRpdml0eToge1xuICAgICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgJzEnOiB7IGJyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5QYXJlbnRoZXNlcyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qIEV4cG9uZW50aWFsICovXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuRXhwb25lbnRpYWwsXG4gICAgICAgIG5hbWU6ICdQb3dlcicsXG4gICAgICAgIGxhdGV4OiAnXicsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXiddLFxuICAgICAgICBwcmlvcml0eTogMSxcbiAgICAgICAgYXNzb2NpYXRpdml0eToge1xuICAgICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgJy0xJzogeyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMsaXNCcmFja2V0T3B0aW9uYWw6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAnMSc6IHsgYnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLkN1cmx5QnJhY2VzIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuRXhwb25lbnRpYWwsXG4gICAgICAgIG5hbWU6ICdFeHBvbmVudCcsXG4gICAgICAgIGxhdGV4OiAnZV4nLFxuICAgICAgICByZWZlcmVuY2VzOiBbJ2VeJywgJ1xcXFxleHAnXSxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICcxJzogeyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAvKiBMb2dhcml0aG1pYyAqL1xuICAgIC8qIEZyYWN0aW9uICovXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuRnJhY3Rpb24sXG4gICAgICAgIG5hbWU6ICdGcmFjdGlvbicsXG4gICAgICAgIGxhdGV4OiAnZnJhYycsXG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnMSc6IHsgYnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLkN1cmx5QnJhY2VzIH0sXG4gICAgICAgICAgICAgICAgJzInOiB7IGJyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5DdXJseUJyYWNlcyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qIFJhZGljYWwgKi9cbiAgICB7XG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5SYWRpY2FsLFxuICAgICAgICBuYW1lOiAnU3F1YXJlUm9vdCcsXG4gICAgICAgIGxhdGV4OiAnc3FydCcsXG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnMSc6IHsgIGJyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5DdXJseUJyYWNlcyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qIEludGVncmFsICovXG4gICAge1xuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuSW50ZWdyYWwsXG4gICAgICAgIG5hbWU6ICdJbnRlZ3JhbCcsXG4gICAgICAgIGxhdGV4OiAnXFxcXGludCcsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXGludCcsICdpbnRlZ3JhbCddLFxuICAgICAgICBwcmlvcml0eTogNSxcbiAgICAgICAgYXNzb2NpYXRpdml0eToge1xuICAgICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgJzEnOiB7fSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAvKiBTdW1tYXRpb24gKi9cbiAgICAvKiBGYWN0b3JpYWwgKi9cbiAgICB7XG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5GYWN0b3JpYWwsXG4gICAgICAgIG5hbWU6ICdGYWN0b3JpYWwnLFxuICAgICAgICBsYXRleDogJyEnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJyEnXSxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczoge1xuICAgICAgICAgICAgICAgICcxJzoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG5dO1xuXG5cbmV4cG9ydCBjb25zdCBtYXRoSmF4T3BlcmF0b3JzTWV0YWRhdGE6IE1hdGhKYXhPcGVyYXRvck1ldGFkYXRhW10gPSBwYXJ0aWFsTWF0aEpheE9wZXJhdG9yc01ldGFkYXRhLm1hcChcbiAgICAobWV0YWRhdGEpID0+IGNyZWF0ZU1hdGhKYXhPcGVyYXRvck1ldGFkYXRhKG1ldGFkYXRhKVxuKTsiXX0=