import { BracketType } from './encasings';
export const keyboardAutoReplaceHebrewToEnglishTriggers = [
    { key: "\u05D0", code: "KeyT", replacement: "t" },
    { key: "\u05D1", code: "KeyC", replacement: "c" },
    { key: "\u05D2", code: "KeyD", replacement: "d" },
    { key: "\u05D3", code: "KeyS", replacement: "s" },
    { key: "\u05D4", code: "KeyV", replacement: "v" },
    { key: "\u05D5", code: "KeyU", replacement: "u" },
    { key: "\u05D6", code: "KeyZ", replacement: "z" },
    { key: "\u05D7", code: "KeyJ", replacement: "j" },
    { key: "\u05D8", code: "KeyY", replacement: "y" },
    { key: "ך", code: "KeyL", replacement: "l" },
    { key: "\u05D9", code: "KeyH", replacement: "h" },
    { key: "\u05DB", code: "KeyF", replacement: "f" },
    { key: "\u05DC", code: "KeyK", replacement: "k" },
    { key: "\u05DE", code: "KeyN", replacement: "n" },
    { key: "\u05DD", code: "KeyO", replacement: "o" },
    { key: "\u05E0", code: "KeyB", replacement: "b" },
    { key: "\u05DF", code: "KeyI", replacement: "i" },
    { key: "\u05E1", code: "KeyX", replacement: "x" },
    { key: "\u05E2", code: "KeyG", replacement: "g" },
    { key: "\u05E4", code: "KeyP", replacement: "p" },
    { key: "\u05E6", code: "KeyM", replacement: "m" },
    { key: "\u05E8", code: "KeyR", replacement: "r" },
    { key: "\u05E7", code: "KeyE", replacement: "e" },
    { key: "\u05E9", code: "KeyA", replacement: "a" },
    { key: "\u05EA", code: "KeyC", replacement: "c" },
    { key: "/", code: "KeyQ", replacement: "q" },
    { key: "ת", code: "Comma", replacement: "," },
    { key: "'", code: "KeyW", replacement: "w" },
    { key: "\u05E5", code: "Period", replacement: "." },
    { key: ".", code: "Slash", replacement: "/" },
    { key: "]", code: "BracketLeft", replacement: "[" },
    { key: "[", code: "BracketRight", replacement: "]" },
    { key: "}", code: "BracketLeft", replacement: "{" },
    { key: "{", code: "BracketRight", replacement: "}" },
    { key: ")", code: "Digit9", replacement: "(" },
    { key: "(", code: "Digit0", replacement: ")" },
    { key: ">", code: "Comma", replacement: "<" },
    { key: "<", code: "Period", replacement: ">" }
];
export var OperatorType;
(function (OperatorType) {
    OperatorType["Comparison"] = "Comparison";
    OperatorType["Arithmetic"] = "Arithmetic";
    OperatorType["Trigonometric"] = "Trigonometric";
    OperatorType["Exponential"] = "Exponential";
    OperatorType["Logarithmic"] = "Logarithmic";
    OperatorType["Fraction"] = "Fraction";
    OperatorType["Radical"] = "Radical";
    OperatorType["Integral"] = "Integral";
    OperatorType["Summation"] = "Summation";
    OperatorType["Factorial"] = "Factorial";
})(OperatorType || (OperatorType = {}));
export const operatorNames = new Map([
    [OperatorType.Comparison, ['Equals', 'LessThan', 'GreaterThan']],
    [OperatorType.Arithmetic, ['Addition', 'Subtraction', 'Multiplication', 'Division']],
    [OperatorType.Trigonometric, ['Sine', 'Cosine', 'Tangent', 'Secant', 'Cosecant', 'Cotangent']],
    [OperatorType.Exponential, ['Exponent', 'Power']],
    [OperatorType.Logarithmic, []],
    [OperatorType.Fraction, ['Fraction']],
    [OperatorType.Radical, ['SquareRoot', 'NthRoot']],
    [OperatorType.Integral, ['Definite']],
    [OperatorType.Summation, []],
    [OperatorType.Factorial, ['Factorial']],
]);
//'Radical', 'Integral', 'Trigonometric', 'Logarithmic', 'Exponential'
export const operatorsWithImplicitMultiplication = [
    OperatorType.Radical, OperatorType.Integral, OperatorType.Trigonometric, OperatorType.Logarithmic, OperatorType.Factorial, OperatorType.Fraction
];
export var associativityFormatType;
(function (associativityFormatType) {
    associativityFormatType[associativityFormatType["Latex"] = 0] = "Latex";
    associativityFormatType[associativityFormatType["MathJax"] = 1] = "MathJax";
})(associativityFormatType || (associativityFormatType = {}));
export function createMathJaxOperatorMetadata(overrides) {
    var _a, _b, _c, _d, _e;
    const references = ((_a = overrides.references) === null || _a === void 0 ? void 0 : _a.filter((ref) => ref !== undefined)) || [];
    const associativity = createMathJaxAssociativityMetadataFromPartial(((_b = overrides.associativity) !== null && _b !== void 0 ? _b : []));
    const associativityFormatTypeString = [...associativity.entries()].map(([_, value]) => value.string);
    return {
        type: (_c = overrides.type) !== null && _c !== void 0 ? _c : OperatorType.Arithmetic,
        name: (_d = overrides.name) !== null && _d !== void 0 ? _d : 'Unknown',
        references: [...associativityFormatTypeString, ...references],
        priority: (_e = overrides.priority) !== null && _e !== void 0 ? _e : 0,
        associativity
    };
}
function createMathJaxAssociativityMetadataFromPartial(overrides) {
    const overridesMap = new Map(overrides);
    const map = new Map();
    const formatTypes = Object.keys(associativityFormatType);
    for (const format of formatTypes) {
        const key = associativityFormatType[format];
        let value = overridesMap.get(key) || [...overridesMap.values()].find(v => v !== undefined);
        map.set(key, createMathJaxAssociativityValue(value));
    }
    return map;
}
function createMathJaxAssociativityValue(overrides = {}) {
    var _a, _b, _c, _d, _e, _f, _g;
    function calculateDifference(max, min) {
        return max === min ? 1 : Math.abs(max - min) + (min > 0 ? 1 : 0);
    }
    const providedPositions = new Map(overrides.positions);
    // Safely get numeric keys, handling empty or missing values
    const numericKeys = Array.from(providedPositions.keys());
    const [minKey, maxKey] = [Math.min(...numericKeys), Math.max(...numericKeys)];
    // Ensure positions are continuous, considering exceptions for 0
    const expectedLength = calculateDifference(maxKey, minKey);
    if (numericKeys.length !== expectedLength) {
        throw new Error(`Associativity positions must be continuous (except for 0). Missing keys, off by: ${expectedLength - numericKeys.length}`);
    }
    // Create the `positions` map with default values when necessary
    const positions = new Map();
    for (const key of numericKeys) {
        const provided = providedPositions.get(key);
        positions.set(key, {
            bracketType: (_a = provided === null || provided === void 0 ? void 0 : provided.bracketType) !== null && _a !== void 0 ? _a : BracketType.None,
            isBracketOptional: (_b = provided === null || provided === void 0 ? void 0 : provided.isBracketOptional) !== null && _b !== void 0 ? _b : false,
        });
    }
    return {
        string: (_c = overrides.string) !== null && _c !== void 0 ? _c : '',
        backslash: (_d = overrides.backslash) !== null && _d !== void 0 ? _d : false,
        numPositions: (_e = overrides.numPositions) !== null && _e !== void 0 ? _e : positions.size,
        commutative: (_f = overrides.commutative) !== null && _f !== void 0 ? _f : false,
        ranges: (_g = overrides.ranges) !== null && _g !== void 0 ? _g : { min: minKey, max: maxKey },
        positions
    };
}
const partialMathJaxOperatorsMetadata = [
    {
        type: OperatorType.Comparison,
        name: 'Equals',
        references: ['='],
        priority: 6,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '=',
                    positions: [[-1, {}], [1, {}]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Comparison,
        name: 'LessThan',
        references: ['<'],
        priority: 6,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '<',
                    positions: [[-1, {}], [1, {}]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Comparison,
        name: 'GreaterThan',
        references: ['>'],
        priority: 6,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '>',
                    positions: [[-1, {}], [1, {}]]
                }
            ],
        ]
    },
    /* Arithmetic */
    {
        type: OperatorType.Arithmetic,
        name: 'Addition',
        references: ['+'],
        priority: 4,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '+',
                    positions: [[-1, {}], [1, {}]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Arithmetic,
        name: 'Subtraction',
        references: ['-'],
        priority: 4,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '-',
                    positions: [[-1, {}], [1, {}]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Arithmetic,
        name: 'Multiplication',
        references: ['*'],
        priority: 3,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'cdot',
                    positions: [[-1, { bracketType: BracketType.Parentheses, isBracketOptional: true }], [1, { bracketType: BracketType.Parentheses, isBracketOptional: true }]]
                }
            ],
        ]
    },
    /* Trigonometric */
    {
        type: OperatorType.Trigonometric,
        name: 'Sine',
        priority: 2,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'sin',
                    positions: [[1, { bracketType: BracketType.Parentheses }]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Trigonometric,
        name: 'Cosine',
        priority: 2,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'cos',
                    positions: [[1, { bracketType: BracketType.Parentheses }]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Trigonometric,
        name: 'Tangent',
        priority: 2,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'tan',
                    positions: [[1, { bracketType: BracketType.Parentheses }]]
                }
            ],
        ]
    },
    /* Exponential */
    {
        type: OperatorType.Exponential,
        name: 'Power',
        references: ['^'],
        priority: 1,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: '^',
                    positions: [[-1, { bracketType: BracketType.Parentheses, isBracketOptional: true }], [1, { bracketType: BracketType.CurlyBraces }]]
                }
            ],
            [associativityFormatType.Latex,
                {
                    string: '^',
                    positions: [[-1, { bracketType: BracketType.Parentheses, isBracketOptional: true }], [1, { bracketType: BracketType.Parentheses, isBracketOptional: true }]]
                }
            ],
        ]
    },
    {
        type: OperatorType.Exponential,
        name: 'Exponent',
        references: ['e^', '\\exp'],
        priority: 1,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'e^',
                    positions: [[1, { bracketType: BracketType.Parentheses }]]
                }
            ],
        ]
    },
    /* Logarithmic */
    /* Fraction */
    {
        type: OperatorType.Fraction,
        name: 'Fraction',
        priority: 1,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'frac',
                    positions: [[1, { bracketType: BracketType.CurlyBraces }], [2, { bracketType: BracketType.CurlyBraces }]]
                }
            ],
        ]
    },
    /* Radical */
    {
        type: OperatorType.Radical,
        name: 'SquareRoot',
        priority: 1,
        associativity: [
            [associativityFormatType.MathJax,
                {
                    string: 'sqrt',
                    positions: [[1, { bracketType: BracketType.CurlyBraces }]]
                }
            ],
        ]
    },
];
export const mathJaxOperatorsMetadata = partialMathJaxOperatorsMetadata.map((metadata) => createMathJaxOperatorMetadata(metadata));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aFBhcnNlclN0YXRpY0RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RhdGljRGF0YS9tYXRoUGFyc2VyU3RhdGljRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFPLDBDQUEwQyxHQUN4RDtJQUNJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDNUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUM1QyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQzdDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDNUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNuRCxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQzdDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDbkQsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNwRCxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ25ELEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDcEQsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQzlDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDN0MsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtDQUNqRCxDQUFDO0FBV0YsTUFBTSxDQUFOLElBQVksWUFXWDtBQVhELFdBQVksWUFBWTtJQUNwQix5Q0FBeUIsQ0FBQTtJQUN6Qix5Q0FBeUIsQ0FBQTtJQUN6QiwrQ0FBK0IsQ0FBQTtJQUMvQiwyQ0FBMkIsQ0FBQTtJQUMzQiwyQ0FBMkIsQ0FBQTtJQUMzQixxQ0FBcUIsQ0FBQTtJQUNyQixtQ0FBbUIsQ0FBQTtJQUNuQixxQ0FBcUIsQ0FBQTtJQUNyQix1Q0FBdUIsQ0FBQTtJQUN2Qix1Q0FBdUIsQ0FBQTtBQUMzQixDQUFDLEVBWFcsWUFBWSxLQUFaLFlBQVksUUFXdkI7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQXlCO0lBQ3pELENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNwRixDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzlGLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQzlCLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO0lBQzVCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQzFDLENBQUMsQ0FBQztBQUVILHNFQUFzRTtBQUN0RSxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRztJQUMvQyxZQUFZLENBQUMsT0FBTyxFQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxZQUFZLENBQUMsV0FBVyxFQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUMsWUFBWSxDQUFDLFFBQVE7Q0FDOUksQ0FBQTtBQUdELE1BQU0sQ0FBTixJQUFZLHVCQUdYO0FBSEQsV0FBWSx1QkFBdUI7SUFDL0IsdUVBQUssQ0FBQTtJQUNMLDJFQUFPLENBQUE7QUFDWCxDQUFDLEVBSFcsdUJBQXVCLEtBQXZCLHVCQUF1QixRQUdsQztBQTZCRCxNQUFNLFVBQVUsNkJBQTZCLENBQ3pDLFNBQStDOztJQUUvQyxNQUFNLFVBQVUsR0FBRyxDQUFBLE1BQUEsU0FBUyxDQUFDLFVBQVUsMENBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFpQixFQUFFLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxLQUFJLEVBQUUsQ0FBQztJQUNqRyxNQUFNLGFBQWEsR0FBRyw2Q0FBNkMsQ0FDL0QsQ0FBQyxNQUFBLFNBQVMsQ0FBQyxhQUF5RSxtQ0FBSSxFQUFFLENBQUMsQ0FDOUYsQ0FBQztJQUNGLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckcsT0FBTztRQUNILElBQUksRUFBRSxNQUFBLFNBQVMsQ0FBQyxJQUFJLG1DQUFJLFlBQVksQ0FBQyxVQUFVO1FBQy9DLElBQUksRUFBRSxNQUFBLFNBQVMsQ0FBQyxJQUFJLG1DQUFJLFNBQVM7UUFDakMsVUFBVSxFQUFFLENBQUMsR0FBRyw2QkFBNkIsRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUM3RCxRQUFRLEVBQUUsTUFBQSxTQUFTLENBQUMsUUFBUSxtQ0FBSSxDQUFDO1FBQ2pDLGFBQWE7S0FDaEIsQ0FBQztBQUNOLENBQUM7QUFJRCxTQUFTLDZDQUE2QyxDQUNsRCxTQUFvRTtJQUdwRSxNQUFNLFlBQVksR0FBQyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUVyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBK0MsQ0FBQztJQUVuRSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFFeEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUMvQixNQUFNLEdBQUcsR0FBRyx1QkFBdUIsQ0FBQyxNQUE4QyxDQUFDLENBQUM7UUFDcEYsSUFBSSxLQUFLLEdBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1FBQzFGLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLCtCQUErQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUdELFNBQVMsK0JBQStCLENBQUMsWUFBeUMsRUFBRTs7SUFDaEYsU0FBUyxtQkFBbUIsQ0FBQyxHQUFXLEVBQUUsR0FBVztRQUNqRCxPQUFPLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV2RCw0REFBNEQ7SUFDNUQsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRXhELE1BQU0sQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFHNUUsZ0VBQWdFO0lBQ2hFLE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssY0FBYyxFQUFFLENBQUM7UUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FDWCxvRkFBb0YsY0FBYyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FDNUgsQ0FBQztJQUNOLENBQUM7SUFFRCxnRUFBZ0U7SUFDaEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQW9FLENBQUM7SUFFOUYsS0FBSyxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUM1QixNQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDZixXQUFXLEVBQUUsTUFBQSxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsV0FBVyxtQ0FBSSxXQUFXLENBQUMsSUFBSTtZQUN0RCxpQkFBaUIsRUFBRSxNQUFBLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxpQkFBaUIsbUNBQUksS0FBSztTQUMxRCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBR0csT0FBTztRQUNILE1BQU0sRUFBRSxNQUFBLFNBQVMsQ0FBQyxNQUFNLG1DQUFJLEVBQUU7UUFDOUIsU0FBUyxFQUFFLE1BQUEsU0FBUyxDQUFDLFNBQVMsbUNBQUksS0FBSztRQUN2QyxZQUFZLEVBQUUsTUFBQSxTQUFTLENBQUMsWUFBWSxtQ0FBSSxTQUFTLENBQUMsSUFBSTtRQUN0RCxXQUFXLEVBQUUsTUFBQSxTQUFTLENBQUMsV0FBVyxtQ0FBSSxLQUFLO1FBQzNDLE1BQU0sRUFBRSxNQUFBLFNBQVMsQ0FBQyxNQUFNLG1DQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFO1FBQ3hELFNBQVM7S0FDWixDQUFDO0FBQ1YsQ0FBQztBQWNELE1BQU0sK0JBQStCLEdBQXlDO0lBQzFFO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxVQUFVO1FBQzdCLElBQUksRUFBRSxRQUFRO1FBQ2QsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ2pCLFFBQVEsRUFBRSxDQUFDO1FBQ1gsYUFBYSxFQUFFO1lBQ1gsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPO2dCQUM1QjtvQkFDSSxNQUFNLEVBQUksR0FBRztvQkFDYixTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUMvQjthQUNKO1NBQ0o7S0FDSjtJQUNEO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxVQUFVO1FBQzdCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqQixRQUFRLEVBQUUsQ0FBQztRQUNYLGFBQWEsRUFBRTtZQUNYLENBQUMsdUJBQXVCLENBQUMsT0FBTztnQkFDNUI7b0JBQ0ksTUFBTSxFQUFJLEdBQUc7b0JBQ2IsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQztpQkFDL0I7YUFDSjtTQUNKO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxZQUFZLENBQUMsVUFBVTtRQUM3QixJQUFJLEVBQUUsYUFBYTtRQUNuQixVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFDakIsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxHQUFHO29CQUNiLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsZ0JBQWdCO0lBQ2hCO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxVQUFVO1FBQzdCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqQixRQUFRLEVBQUUsQ0FBQztRQUNYLGFBQWEsRUFBRTtZQUNYLENBQUMsdUJBQXVCLENBQUMsT0FBTztnQkFDNUI7b0JBQ0ksTUFBTSxFQUFJLEdBQUc7b0JBQ2IsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQztpQkFDL0I7YUFDSjtTQUNKO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxZQUFZLENBQUMsVUFBVTtRQUM3QixJQUFJLEVBQUUsYUFBYTtRQUNuQixVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFDakIsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxHQUFHO29CQUNiLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSjtLQUNKO0lBQ0Q7UUFDSSxJQUFJLEVBQUUsWUFBWSxDQUFDLFVBQVU7UUFDN0IsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFDakIsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxNQUFNO29CQUNoQixTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFDLGlCQUFpQixFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7aUJBQ3ZKO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsbUJBQW1CO0lBQ25CO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxhQUFhO1FBQ2hDLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxLQUFLO29CQUNmLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRDthQUNKO1NBQ0o7S0FDSjtJQUNEO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxhQUFhO1FBQ2hDLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxLQUFLO29CQUNmLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRDthQUNKO1NBQ0o7S0FDSjtJQUNEO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxhQUFhO1FBQ2hDLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUU7WUFDWCxDQUFDLHVCQUF1QixDQUFDLE9BQU87Z0JBQzVCO29CQUNJLE1BQU0sRUFBSSxLQUFLO29CQUNmLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRDthQUNKO1NBQ0o7S0FDSjtJQUNELGlCQUFpQjtJQUNqQjtRQUNJLElBQUksRUFBRSxZQUFZLENBQUMsV0FBVztRQUM5QixJQUFJLEVBQUUsT0FBTztRQUNiLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqQixRQUFRLEVBQUUsQ0FBQztRQUNYLGFBQWEsRUFBRTtZQUNYLENBQUMsdUJBQXVCLENBQUMsT0FBTztnQkFDNUI7b0JBQ0ksTUFBTSxFQUFJLEdBQUc7b0JBQ2IsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7aUJBQ2pJO2FBQ0o7WUFDRCxDQUFDLHVCQUF1QixDQUFDLEtBQUs7Z0JBQzFCO29CQUNJLE1BQU0sRUFBSSxHQUFHO29CQUNiLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztpQkFDMUo7YUFDSjtTQUNKO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxZQUFZLENBQUMsV0FBVztRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1FBQzNCLFFBQVEsRUFBRSxDQUFDO1FBQ1gsYUFBYSxFQUFFO1lBQ1gsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPO2dCQUM1QjtvQkFDSSxNQUFNLEVBQUksSUFBSTtvQkFDZCxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztpQkFDM0Q7YUFDSjtTQUNKO0tBQ0o7SUFDRCxpQkFBaUI7SUFDakIsY0FBYztJQUNkO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxRQUFRO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFFBQVEsRUFBRSxDQUFDO1FBQ1gsYUFBYSxFQUFFO1lBQ1gsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPO2dCQUM1QjtvQkFDSSxNQUFNLEVBQUksTUFBTTtvQkFDaEIsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7aUJBQ3ZHO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsYUFBYTtJQUNiO1FBQ0ksSUFBSSxFQUFFLFlBQVksQ0FBQyxPQUFPO1FBQzFCLElBQUksRUFBRSxZQUFZO1FBQ2xCLFFBQVEsRUFBRSxDQUFDO1FBQ1gsYUFBYSxFQUFFO1lBQ1gsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPO2dCQUM1QjtvQkFDSSxNQUFNLEVBQUksTUFBTTtvQkFDaEIsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7aUJBQzNEO2FBQ0o7U0FDSjtLQUNKO0NBQ0osQ0FBQztBQUdGLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUE4QiwrQkFBK0IsQ0FBQyxHQUFHLENBQ2xHLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLENBQUMsQ0FDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmluZyB9IGZyb20gJ3ZhbGlib3QnO1xyXG5pbXBvcnQgeyBCcmFja2V0VHlwZSB9IGZyb20gJy4vZW5jYXNpbmdzJztcclxuZXhwb3J0IGNvbnN0ICBrZXlib2FyZEF1dG9SZXBsYWNlSGVicmV3VG9FbmdsaXNoVHJpZ2dlcnMgPVxyXG5bXHJcbiAgICB7IGtleTogXCJcXHUwNUQwXCIsIGNvZGU6IFwiS2V5VFwiLCByZXBsYWNlbWVudDogXCJ0XCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RDFcIiwgY29kZTogXCJLZXlDXCIsIHJlcGxhY2VtZW50OiBcImNcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVEMlwiLCBjb2RlOiBcIktleURcIiwgcmVwbGFjZW1lbnQ6IFwiZFwiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNUQzXCIsIGNvZGU6IFwiS2V5U1wiLCByZXBsYWNlbWVudDogXCJzXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RDRcIiwgY29kZTogXCJLZXlWXCIsIHJlcGxhY2VtZW50OiBcInZcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVENVwiLCBjb2RlOiBcIktleVVcIiwgcmVwbGFjZW1lbnQ6IFwidVwiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNUQ2XCIsIGNvZGU6IFwiS2V5WlwiLCByZXBsYWNlbWVudDogXCJ6XCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RDdcIiwgY29kZTogXCJLZXlKXCIsIHJlcGxhY2VtZW50OiBcImpcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVEOFwiLCBjb2RlOiBcIktleVlcIiwgcmVwbGFjZW1lbnQ6IFwieVwiIH0sXHJcbiAgICB7IGtleTogXCLXmlwiLCBjb2RlOiBcIktleUxcIiwgcmVwbGFjZW1lbnQ6IFwibFwiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNUQ5XCIsIGNvZGU6IFwiS2V5SFwiLCByZXBsYWNlbWVudDogXCJoXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1REJcIiwgY29kZTogXCJLZXlGXCIsIHJlcGxhY2VtZW50OiBcImZcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVEQ1wiLCBjb2RlOiBcIktleUtcIiwgcmVwbGFjZW1lbnQ6IFwia1wiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNURFXCIsIGNvZGU6IFwiS2V5TlwiLCByZXBsYWNlbWVudDogXCJuXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RERcIiwgY29kZTogXCJLZXlPXCIsIHJlcGxhY2VtZW50OiBcIm9cIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVFMFwiLCBjb2RlOiBcIktleUJcIiwgcmVwbGFjZW1lbnQ6IFwiYlwiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNURGXCIsIGNvZGU6IFwiS2V5SVwiLCByZXBsYWNlbWVudDogXCJpXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RTFcIiwgY29kZTogXCJLZXlYXCIsIHJlcGxhY2VtZW50OiBcInhcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVFMlwiLCBjb2RlOiBcIktleUdcIiwgcmVwbGFjZW1lbnQ6IFwiZ1wiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNUU0XCIsIGNvZGU6IFwiS2V5UFwiLCByZXBsYWNlbWVudDogXCJwXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RTZcIiwgY29kZTogXCJLZXlNXCIsIHJlcGxhY2VtZW50OiBcIm1cIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVFOFwiLCBjb2RlOiBcIktleVJcIiwgcmVwbGFjZW1lbnQ6IFwiclwiIH0sXHJcbiAgICB7IGtleTogXCJcXHUwNUU3XCIsIGNvZGU6IFwiS2V5RVwiLCByZXBsYWNlbWVudDogXCJlXCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RTlcIiwgY29kZTogXCJLZXlBXCIsIHJlcGxhY2VtZW50OiBcImFcIiB9LFxyXG4gICAgeyBrZXk6IFwiXFx1MDVFQVwiLCBjb2RlOiBcIktleUNcIiwgcmVwbGFjZW1lbnQ6IFwiY1wiIH0sXHJcbiAgICB7IGtleTogXCIvXCIsIGNvZGU6IFwiS2V5UVwiLCByZXBsYWNlbWVudDogXCJxXCIgfSxcclxuICAgIHsga2V5OiBcIteqXCIsIGNvZGU6IFwiQ29tbWFcIiwgcmVwbGFjZW1lbnQ6IFwiLFwiIH0sXHJcbiAgICB7IGtleTogXCInXCIsIGNvZGU6IFwiS2V5V1wiLCByZXBsYWNlbWVudDogXCJ3XCIgfSxcclxuICAgIHsga2V5OiBcIlxcdTA1RTVcIiwgY29kZTogXCJQZXJpb2RcIiwgcmVwbGFjZW1lbnQ6IFwiLlwiIH0sXHJcbiAgICB7IGtleTogXCIuXCIsIGNvZGU6IFwiU2xhc2hcIiwgcmVwbGFjZW1lbnQ6IFwiL1wiIH0sXHJcbiAgICB7IGtleTogXCJdXCIsIGNvZGU6IFwiQnJhY2tldExlZnRcIiwgcmVwbGFjZW1lbnQ6IFwiW1wiIH0sXHJcbiAgICB7IGtleTogXCJbXCIsIGNvZGU6IFwiQnJhY2tldFJpZ2h0XCIsIHJlcGxhY2VtZW50OiBcIl1cIiB9LFxyXG4gICAgeyBrZXk6IFwifVwiLCBjb2RlOiBcIkJyYWNrZXRMZWZ0XCIsIHJlcGxhY2VtZW50OiBcIntcIiB9LFxyXG4gICAgeyBrZXk6IFwie1wiLCBjb2RlOiBcIkJyYWNrZXRSaWdodFwiLCByZXBsYWNlbWVudDogXCJ9XCIgfSxcclxuICAgIHsga2V5OiBcIilcIiwgY29kZTogXCJEaWdpdDlcIiwgcmVwbGFjZW1lbnQ6IFwiKFwiIH0sXHJcbiAgICB7IGtleTogXCIoXCIsIGNvZGU6IFwiRGlnaXQwXCIsIHJlcGxhY2VtZW50OiBcIilcIiB9LFxyXG4gICAgeyBrZXk6IFwiPlwiLCBjb2RlOiBcIkNvbW1hXCIsIHJlcGxhY2VtZW50OiBcIjxcIiB9LFxyXG4gICAgeyBrZXk6IFwiPFwiLCBjb2RlOiBcIlBlcmlvZFwiLCByZXBsYWNlbWVudDogXCI+XCIgfVxyXG5dO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZW51bSBPcGVyYXRvclR5cGUge1xyXG4gICAgQ29tcGFyaXNvbiA9ICdDb21wYXJpc29uJyxcclxuICAgIEFyaXRobWV0aWMgPSAnQXJpdGhtZXRpYycsXHJcbiAgICBUcmlnb25vbWV0cmljID0gJ1RyaWdvbm9tZXRyaWMnLFxyXG4gICAgRXhwb25lbnRpYWwgPSAnRXhwb25lbnRpYWwnLFxyXG4gICAgTG9nYXJpdGhtaWMgPSAnTG9nYXJpdGhtaWMnLFxyXG4gICAgRnJhY3Rpb24gPSAnRnJhY3Rpb24nLFxyXG4gICAgUmFkaWNhbCA9ICdSYWRpY2FsJyxcclxuICAgIEludGVncmFsID0gJ0ludGVncmFsJyxcclxuICAgIFN1bW1hdGlvbiA9ICdTdW1tYXRpb24nLFxyXG4gICAgRmFjdG9yaWFsID0gJ0ZhY3RvcmlhbCcsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvcGVyYXRvck5hbWVzID0gbmV3IE1hcDxPcGVyYXRvclR5cGUsIHN0cmluZ1tdPihbXHJcbiAgICBbT3BlcmF0b3JUeXBlLkNvbXBhcmlzb24sIFsnRXF1YWxzJywgJ0xlc3NUaGFuJywgJ0dyZWF0ZXJUaGFuJ11dLFxyXG4gICAgW09wZXJhdG9yVHlwZS5Bcml0aG1ldGljLCBbJ0FkZGl0aW9uJywgJ1N1YnRyYWN0aW9uJywgJ011bHRpcGxpY2F0aW9uJywgJ0RpdmlzaW9uJ11dLFxyXG4gICAgW09wZXJhdG9yVHlwZS5Ucmlnb25vbWV0cmljLCBbJ1NpbmUnLCAnQ29zaW5lJywgJ1RhbmdlbnQnLCAnU2VjYW50JywgJ0Nvc2VjYW50JywgJ0NvdGFuZ2VudCddXSxcclxuICAgIFtPcGVyYXRvclR5cGUuRXhwb25lbnRpYWwsIFsnRXhwb25lbnQnLCAnUG93ZXInXV0sXHJcbiAgICBbT3BlcmF0b3JUeXBlLkxvZ2FyaXRobWljLCBbXV0sXHJcbiAgICBbT3BlcmF0b3JUeXBlLkZyYWN0aW9uLCBbJ0ZyYWN0aW9uJ11dLFxyXG4gICAgW09wZXJhdG9yVHlwZS5SYWRpY2FsLCBbJ1NxdWFyZVJvb3QnLCdOdGhSb290J11dLFxyXG4gICAgW09wZXJhdG9yVHlwZS5JbnRlZ3JhbCwgWydEZWZpbml0ZSddXSxcclxuICAgIFtPcGVyYXRvclR5cGUuU3VtbWF0aW9uLCBbXV0sXHJcbiAgICBbT3BlcmF0b3JUeXBlLkZhY3RvcmlhbCwgWydGYWN0b3JpYWwnXV0sXHJcbl0pO1xyXG5cclxuLy8nUmFkaWNhbCcsICdJbnRlZ3JhbCcsICdUcmlnb25vbWV0cmljJywgJ0xvZ2FyaXRobWljJywgJ0V4cG9uZW50aWFsJ1xyXG5leHBvcnQgY29uc3Qgb3BlcmF0b3JzV2l0aEltcGxpY2l0TXVsdGlwbGljYXRpb24gPSBbXHJcbiAgICBPcGVyYXRvclR5cGUuUmFkaWNhbCxPcGVyYXRvclR5cGUuSW50ZWdyYWwsT3BlcmF0b3JUeXBlLlRyaWdvbm9tZXRyaWMsT3BlcmF0b3JUeXBlLkxvZ2FyaXRobWljLE9wZXJhdG9yVHlwZS5GYWN0b3JpYWwsT3BlcmF0b3JUeXBlLkZyYWN0aW9uXHJcbl1cclxuXHJcblxyXG5leHBvcnQgZW51bSBhc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZXtcclxuICAgIExhdGV4LFxyXG4gICAgTWF0aEpheCxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNYXRoSmF4T3BlcmF0b3JNZXRhZGF0YSB7XHJcbiAgICB0eXBlOiBPcGVyYXRvclR5cGU7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICByZWZlcmVuY2VzOiBzdHJpbmdbXTtcclxuICAgIHByaW9yaXR5OiBudW1iZXI7XHJcbiAgICBhc3NvY2lhdGl2aXR5OiBBc3NvY2lhdGl2aXR5XHJcbn1cclxuXHJcbnR5cGUgQXNzb2NpYXRpdml0eSA9IE1hcDxhc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZSx7XHJcbiAgICBzdHJpbmc6IHN0cmluZztcclxuICAgIGJhY2tzbGFzaDogYm9vbGVhbjtcclxuICAgIG51bVBvc2l0aW9uczogbnVtYmVyO1xyXG4gICAgY29tbXV0YXRpdmU6IGJvb2xlYW47XHJcbiAgICByYW5nZXM6IHsgbWluOiBudW1iZXI7IG1heDogbnVtYmVyIH07XHJcbiAgICBwb3NpdGlvbnM6IE1hcDxudW1iZXIsIHtcclxuICAgICAgICBicmFja2V0VHlwZTogQnJhY2tldFR5cGU7XHJcbiAgICAgICAgaXNCcmFja2V0T3B0aW9uYWw6IGJvb2xlYW47XHJcbiAgICB9PjtcclxufT47XHJcblxyXG5leHBvcnQgdHlwZSBBc3NvY2lhdGl2aXR5VmFsdWUgPSBBc3NvY2lhdGl2aXR5IGV4dGVuZHMgTWFwPGFueSwgaW5mZXIgVj4gPyBWIDogbmV2ZXI7XHJcblxyXG5cclxudHlwZSBEZWVwUGFydGlhbDxUPiA9IHtcclxuICAgIFtQIGluIGtleW9mIFRdPzogVFtQXSBleHRlbmRzIG9iamVjdCA/IERlZXBQYXJ0aWFsPFRbUF0+IDogVFtQXTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXRoSmF4T3BlcmF0b3JNZXRhZGF0YShcclxuICAgIG92ZXJyaWRlczogRGVlcFBhcnRpYWw8TWF0aEpheE9wZXJhdG9yTWV0YWRhdGE+XHJcbik6IE1hdGhKYXhPcGVyYXRvck1ldGFkYXRhIHtcclxuICAgIGNvbnN0IHJlZmVyZW5jZXMgPSBvdmVycmlkZXMucmVmZXJlbmNlcz8uZmlsdGVyKChyZWYpOiByZWYgaXMgc3RyaW5nID0+IHJlZiAhPT0gdW5kZWZpbmVkKSB8fCBbXTtcclxuICAgIGNvbnN0IGFzc29jaWF0aXZpdHkgPSBjcmVhdGVNYXRoSmF4QXNzb2NpYXRpdml0eU1ldGFkYXRhRnJvbVBhcnRpYWwoXHJcbiAgICAgICAgKG92ZXJyaWRlcy5hc3NvY2lhdGl2aXR5IGFzIFthc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZSwgUGFydGlhbDxBc3NvY2lhdGl2aXR5VmFsdWU+XVtdID8/IFtdKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGFzc29jaWF0aXZpdHlGb3JtYXRUeXBlU3RyaW5nID0gWy4uLmFzc29jaWF0aXZpdHkuZW50cmllcygpXS5tYXAoKFtfLCB2YWx1ZV0pID0+IHZhbHVlLnN0cmluZyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IG92ZXJyaWRlcy50eXBlID8/IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxyXG4gICAgICAgIG5hbWU6IG92ZXJyaWRlcy5uYW1lID8/ICdVbmtub3duJyxcclxuICAgICAgICByZWZlcmVuY2VzOiBbLi4uYXNzb2NpYXRpdml0eUZvcm1hdFR5cGVTdHJpbmcsIC4uLnJlZmVyZW5jZXNdLFxyXG4gICAgICAgIHByaW9yaXR5OiBvdmVycmlkZXMucHJpb3JpdHkgPz8gMCxcclxuICAgICAgICBhc3NvY2lhdGl2aXR5XHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU1hdGhKYXhBc3NvY2lhdGl2aXR5TWV0YWRhdGFGcm9tUGFydGlhbChcclxuICAgIG92ZXJyaWRlcz86IFthc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZSwgUGFydGlhbDxBc3NvY2lhdGl2aXR5VmFsdWU+XVtdXHJcbik6IEFzc29jaWF0aXZpdHkge1xyXG5cclxuICAgIGNvbnN0IG92ZXJyaWRlc01hcD1uZXcgTWFwKG92ZXJyaWRlcylcclxuXHJcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwPGFzc29jaWF0aXZpdHlGb3JtYXRUeXBlLCBBc3NvY2lhdGl2aXR5VmFsdWU+KCk7XHJcblxyXG4gICAgY29uc3QgZm9ybWF0VHlwZXMgPSBPYmplY3Qua2V5cyhhc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZSlcclxuICAgIFxyXG4gICAgZm9yIChjb25zdCBmb3JtYXQgb2YgZm9ybWF0VHlwZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZVtmb3JtYXQgYXMga2V5b2YgdHlwZW9mIGFzc29jaWF0aXZpdHlGb3JtYXRUeXBlXTtcclxuICAgICAgICBsZXQgdmFsdWU9IG92ZXJyaWRlc01hcC5nZXQoa2V5KSB8fCBbLi4ub3ZlcnJpZGVzTWFwLnZhbHVlcygpXS5maW5kKHYgPT4gdiAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICBtYXAuc2V0KGtleSxjcmVhdGVNYXRoSmF4QXNzb2NpYXRpdml0eVZhbHVlKHZhbHVlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTWF0aEpheEFzc29jaWF0aXZpdHlWYWx1ZShvdmVycmlkZXM6IFBhcnRpYWw8QXNzb2NpYXRpdml0eVZhbHVlPiA9IHt9KTogQXNzb2NpYXRpdml0eVZhbHVlIHtcclxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpZmZlcmVuY2UobWF4OiBudW1iZXIsIG1pbjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gbWF4ID09PSBtaW4gPyAxIDogTWF0aC5hYnMobWF4IC0gbWluKSArIChtaW4gPiAwID8gMSA6IDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb3ZpZGVkUG9zaXRpb25zID0gbmV3IE1hcChvdmVycmlkZXMucG9zaXRpb25zKTtcclxuXHJcbiAgICAvLyBTYWZlbHkgZ2V0IG51bWVyaWMga2V5cywgaGFuZGxpbmcgZW1wdHkgb3IgbWlzc2luZyB2YWx1ZXNcclxuICAgIGNvbnN0IG51bWVyaWNLZXlzID0gQXJyYXkuZnJvbShwcm92aWRlZFBvc2l0aW9ucy5rZXlzKCkpXHJcbiAgICBcclxuICAgIGNvbnN0IFttaW5LZXksbWF4S2V5XSA9IFtNYXRoLm1pbiguLi5udW1lcmljS2V5cyksTWF0aC5tYXgoLi4ubnVtZXJpY0tleXMpXTtcclxuXHJcblxyXG4gICAgLy8gRW5zdXJlIHBvc2l0aW9ucyBhcmUgY29udGludW91cywgY29uc2lkZXJpbmcgZXhjZXB0aW9ucyBmb3IgMFxyXG4gICAgY29uc3QgZXhwZWN0ZWRMZW5ndGggPSBjYWxjdWxhdGVEaWZmZXJlbmNlKG1heEtleSwgbWluS2V5KTtcclxuICAgIGlmIChudW1lcmljS2V5cy5sZW5ndGggIT09IGV4cGVjdGVkTGVuZ3RoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBgQXNzb2NpYXRpdml0eSBwb3NpdGlvbnMgbXVzdCBiZSBjb250aW51b3VzIChleGNlcHQgZm9yIDApLiBNaXNzaW5nIGtleXMsIG9mZiBieTogJHtleHBlY3RlZExlbmd0aCAtIG51bWVyaWNLZXlzLmxlbmd0aH1gXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGBwb3NpdGlvbnNgIG1hcCB3aXRoIGRlZmF1bHQgdmFsdWVzIHdoZW4gbmVjZXNzYXJ5XHJcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgTWFwPG51bWJlciwgeyBicmFja2V0VHlwZTogQnJhY2tldFR5cGU7IGlzQnJhY2tldE9wdGlvbmFsOiBib29sZWFuIH0+KCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgbnVtZXJpY0tleXMpIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlZCA9IHByb3ZpZGVkUG9zaXRpb25zLmdldChrZXkpO1xyXG4gICAgICAgIHBvc2l0aW9ucy5zZXQoa2V5LCB7XHJcbiAgICAgICAgICAgIGJyYWNrZXRUeXBlOiBwcm92aWRlZD8uYnJhY2tldFR5cGUgPz8gQnJhY2tldFR5cGUuTm9uZSxcclxuICAgICAgICAgICAgaXNCcmFja2V0T3B0aW9uYWw6IHByb3ZpZGVkPy5pc0JyYWNrZXRPcHRpb25hbCA/PyBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0cmluZzogb3ZlcnJpZGVzLnN0cmluZyA/PyAnJyxcclxuICAgICAgICAgICAgYmFja3NsYXNoOiBvdmVycmlkZXMuYmFja3NsYXNoID8/IGZhbHNlLFxyXG4gICAgICAgICAgICBudW1Qb3NpdGlvbnM6IG92ZXJyaWRlcy5udW1Qb3NpdGlvbnMgPz8gcG9zaXRpb25zLnNpemUsXHJcbiAgICAgICAgICAgIGNvbW11dGF0aXZlOiBvdmVycmlkZXMuY29tbXV0YXRpdmUgPz8gZmFsc2UsXHJcbiAgICAgICAgICAgIHJhbmdlczogb3ZlcnJpZGVzLnJhbmdlcyA/PyB7IG1pbjogbWluS2V5LCBtYXg6IG1heEtleSB9LFxyXG4gICAgICAgICAgICBwb3NpdGlvbnNcclxuICAgICAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBwYXJ0aWFsTWF0aEpheE9wZXJhdG9yc01ldGFkYXRhOiBEZWVwUGFydGlhbDxNYXRoSmF4T3BlcmF0b3JNZXRhZGF0YT5bXT1bXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkNvbXBhcmlzb24sXHJcbiAgICAgICAgbmFtZTogJ0VxdWFscycsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc9J10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDYsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJz0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7fV0sIFsxLHt9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Db21wYXJpc29uLFxyXG4gICAgICAgIG5hbWU6ICdMZXNzVGhhbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc8J10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDYsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7fV0sIFsxLHt9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Db21wYXJpc29uLFxyXG4gICAgICAgIG5hbWU6ICdHcmVhdGVyVGhhbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc+J10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDYsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJz4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7fV0sIFsxLHt9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgLyogQXJpdGhtZXRpYyAqL1xyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxyXG4gICAgICAgIG5hbWU6ICdBZGRpdGlvbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWycrJ10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDQsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJysnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7fV0sIFsxLHt9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxyXG4gICAgICAgIG5hbWU6ICdTdWJ0cmFjdGlvbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyctJ10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDQsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJy0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7fV0sIFsxLHt9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Bcml0aG1ldGljLFxyXG4gICAgICAgIG5hbWU6ICdNdWx0aXBsaWNhdGlvbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWycqJ10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDMsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJ2Nkb3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW1stMSx7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzLGlzQnJhY2tldE9wdGlvbmFsOiB0cnVlfV0sIFsxLHticmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMsaXNCcmFja2V0T3B0aW9uYWw6IHRydWV9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgLyogVHJpZ29ub21ldHJpYyAqL1xyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Ucmlnb25vbWV0cmljLFxyXG4gICAgICAgIG5hbWU6ICdTaW5lJyxcclxuICAgICAgICBwcmlvcml0eTogMixcclxuICAgICAgICBhc3NvY2lhdGl2aXR5OiBbXHJcbiAgICAgICAgICAgIFthc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZS5NYXRoSmF4LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyAgOiAnc2luJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtbMSx7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLlRyaWdvbm9tZXRyaWMsXHJcbiAgICAgICAgbmFtZTogJ0Nvc2luZScsXHJcbiAgICAgICAgcHJpb3JpdHk6IDIsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJ2NvcycsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbWzEse2JyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5QYXJlbnRoZXNlcyB9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5Ucmlnb25vbWV0cmljLFxyXG4gICAgICAgIG5hbWU6ICdUYW5nZW50JyxcclxuICAgICAgICBwcmlvcml0eTogMixcclxuICAgICAgICBhc3NvY2lhdGl2aXR5OiBbXHJcbiAgICAgICAgICAgIFthc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZS5NYXRoSmF4LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyAgOiAndGFuJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtbMSx7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICAvKiBFeHBvbmVudGlhbCAqL1xyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IE9wZXJhdG9yVHlwZS5FeHBvbmVudGlhbCxcclxuICAgICAgICBuYW1lOiAnUG93ZXInLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXiddLFxyXG4gICAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IFtcclxuICAgICAgICAgICAgW2Fzc29jaWF0aXZpdHlGb3JtYXRUeXBlLk1hdGhKYXgsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICA6ICdeJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtbLTEseyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUuUGFyZW50aGVzZXMsaXNCcmFja2V0T3B0aW9uYWw6IHRydWUgfV0sWzEseyBicmFja2V0VHlwZTogQnJhY2tldFR5cGUuQ3VybHlCcmFjZXN9XV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW2Fzc29jaWF0aXZpdHlGb3JtYXRUeXBlLkxhdGV4LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyAgOiAnXicsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbWy0xLHsgYnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzLGlzQnJhY2tldE9wdGlvbmFsOiB0cnVlIH1dLFsxLHsgYnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzLGlzQnJhY2tldE9wdGlvbmFsOiB0cnVlIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLkV4cG9uZW50aWFsLFxyXG4gICAgICAgIG5hbWU6ICdFeHBvbmVudCcsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWydlXicsICdcXFxcZXhwJ10sXHJcbiAgICAgICAgcHJpb3JpdHk6IDEsXHJcbiAgICAgICAgYXNzb2NpYXRpdml0eTogW1xyXG4gICAgICAgICAgICBbYXNzb2NpYXRpdml0eUZvcm1hdFR5cGUuTWF0aEpheCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgIDogJ2VeJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtbMSx7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLlBhcmVudGhlc2VzIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICAvKiBMb2dhcml0aG1pYyAqL1xyXG4gICAgLyogRnJhY3Rpb24gKi9cclxuICAgIHtcclxuICAgICAgICB0eXBlOiBPcGVyYXRvclR5cGUuRnJhY3Rpb24sXHJcbiAgICAgICAgbmFtZTogJ0ZyYWN0aW9uJyxcclxuICAgICAgICBwcmlvcml0eTogMSxcclxuICAgICAgICBhc3NvY2lhdGl2aXR5OiBbXHJcbiAgICAgICAgICAgIFthc3NvY2lhdGl2aXR5Rm9ybWF0VHlwZS5NYXRoSmF4LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyAgOiAnZnJhYycsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbWzEse2JyYWNrZXRUeXBlOiBCcmFja2V0VHlwZS5DdXJseUJyYWNlcyB9XSxbMix7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLkN1cmx5QnJhY2VzIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICAvKiBSYWRpY2FsICovXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogT3BlcmF0b3JUeXBlLlJhZGljYWwsXHJcbiAgICAgICAgbmFtZTogJ1NxdWFyZVJvb3QnLFxyXG4gICAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICAgIGFzc29jaWF0aXZpdHk6IFtcclxuICAgICAgICAgICAgW2Fzc29jaWF0aXZpdHlGb3JtYXRUeXBlLk1hdGhKYXgsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICA6ICdzcXJ0JyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtbMSx7YnJhY2tldFR5cGU6IEJyYWNrZXRUeXBlLkN1cmx5QnJhY2VzIH1dXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbl07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IG1hdGhKYXhPcGVyYXRvcnNNZXRhZGF0YTogTWF0aEpheE9wZXJhdG9yTWV0YWRhdGFbXSA9IHBhcnRpYWxNYXRoSmF4T3BlcmF0b3JzTWV0YWRhdGEubWFwKFxyXG4gICAgKG1ldGFkYXRhKSA9PiBjcmVhdGVNYXRoSmF4T3BlcmF0b3JNZXRhZGF0YShtZXRhZGF0YSlcclxuKTsiXX0=