import { degreesToRadians } from "./mathUtilities";
import { findParenIndex, Paren, findDeepestParenthesesScope } from "../utils/ParenUtensils";
import { getMathJaxOperatorsByPriority, getValuesWithKeysBySide, mahtjaxAssociativitymetadata, searchMathJaxOperators } from "../staticData/dataManager";
import { MathGroup, MathJaxOperator, Token, ensureAcceptableFormatForMathGroupItems, deepSearchWithPath, stringToBasicMathJaxTokens } from "./mathJaxTokens";
const greekLetters = [
    'Alpha', 'alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta',
    'Iota', 'Kappa', 'Lambda', 'Mu', 'mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho',
    'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega'
];
/*const latexOperators=[
    'tan', 'sin', 'cos', 'binom', 'frac', 'asin', 'acos',
    'atan', 'arccos', 'arcsin', 'arctan', 'cdot','sqrt'
]*/
export function findConsecutiveSequences(arr) {
    const sequences = [];
    let start = 0;
    for (let i = 1; i <= arr.length; i++) {
        if (arr[i] !== arr[i - 1] + 1) {
            if (i - start > 1) {
                sequences.push(arr.slice(start, i));
            }
            start = i;
        }
    }
    return sequences;
}
export class MathInfo {
    constructor() {
        this.debugInfo = "";
        this.solutionInfo = [];
        this.mathInfo = [];
        this.graph = "";
        this.mathSnapshots = [];
    }
    addGraphInfo(value) {
        this.graph += value;
    }
    addDebugInfo(msg, value) {
        this.debugInfo += (typeof msg === "object" ? JSON.stringify(msg, null, 1) : msg) + " : " + (typeof value === "object" ? JSON.stringify(value, null, 1) : value) + "\n ";
    }
    addSolutionInfo(mes) {
        this.solutionInfo.push(mes);
        this.addDebugInfo("Solved", mes);
    }
    addMathInfo(msg) {
        this.mathInfo.push(msg);
    }
    addMathSnapshot(math) {
        this.mathSnapshots.push(math);
        const result = deepSearchWithPath(math, (item) => item instanceof MathJaxOperator && item.solution !== undefined);
        if (!result)
            return;
        const customFormatter = (check, string) => {
            if (check instanceof MathJaxOperator && check.solution !== undefined) {
                return `{\\color{red}${string}}`;
            }
            return string;
        };
        this.mathInfo.push(math.toString(customFormatter));
        this.solutionInfo.push(result.item.toStringSolution());
    }
}
function rearrangeEquation(tokens, tokenToisolate) {
}
function isolateMultiplication(tokens, isolatToken) {
}
export class Position {
    constructor(tokens, index) {
        this.index = index;
        this.transition = this.index;
        this.start = this.index;
        this.end = this.index;
        this.position(tokens);
    }
    position(tokens) {
        this.operator = tokens[this.index].value;
        const metadata = searchMathJaxOperators(this.operator);
        if (!metadata)
            throw new Error(`Operator ${this.operator} not found in metadata`);
        const beforeIndex = [];
        const afterIndex = [];
        getValuesWithKeysBySide(mahtjaxAssociativitymetadata(metadata).positions, true).forEach(() => {
            const item = this.applyPosition(tokens, this.start, true);
            beforeIndex.push(item.mathGroup);
            this.start = item.lastItemOfPrevious;
        });
        getValuesWithKeysBySide(mahtjaxAssociativitymetadata(metadata).positions, false).forEach(() => {
            const item = this.applyPosition(tokens, this.end, false);
            afterIndex.push(item.mathGroup);
            this.end = item.lastItemOfPrevious;
        });
        this.groups = beforeIndex.reverse().concat(afterIndex);
    }
    applyPosition(tokens, index, isLeft) {
        let breakChar = index;
        let target;
        const modifiedIndex = index + (isLeft ? -1 : 1);
        if ((isLeft && index <= 0) || (!isLeft && index >= tokens.length - 1) || !tokens[modifiedIndex]) {
            throw new Error("at applyPosition: \"index wasn't valid\" index: " + index);
        }
        if (tokens[modifiedIndex] instanceof Paren) {
            const parenIndex = findParenIndex(tokens[modifiedIndex], tokens);
            breakChar = isLeft ? parenIndex.open : parenIndex.close + 1;
            // Insure proper formatting removed everything including parentheses
            target = ensureAcceptableFormatForMathGroupItems(tokens.slice(parenIndex.open, parenIndex.close + 1));
        }
        else {
            breakChar = modifiedIndex;
            target = ensureAcceptableFormatForMathGroupItems(tokens[breakChar]);
        }
        if ((target === null || target === void 0 ? void 0 : target.length) === 0) {
            throw new Error(`at applyPosition: couldn't find target token for direction ${isLeft ? 'left' : 'right'} and operator"${tokens[index].value}"`);
        }
        return {
            mathGroup: new MathGroup(target),
            lastItemOfPrevious: breakChar,
        };
    }
}
function parseSafetyChecks(operator) {
    if ((operator.commutative && operator.groups.length < operator.groupNum) || (!operator.commutative && operator.groups.length !== operator.groupNum)) {
        throw new Error(`Invalid number of groups for operator ${operator.operator} expected ${operator.groupNum} but got ${operator.groups.length}`);
    }
}
export function parseOperator(operator) {
    parseSafetyChecks(operator);
    function getOperableValue(group) {
        if (!group || !group.isOperable())
            return null;
        return group.getOperableValue();
    }
    const group1 = getOperableValue(operator.groups[0]);
    const group2 = getOperableValue(operator.groups[1]);
    if (group1 === null || (group2 === null && operator.groups.length > 1))
        return false;
    switch (operator.operator) {
        case "Sine":
            operator.solution = new MathGroup([new Token(Math.sin(degreesToRadians(group1)))]);
            break;
        case "SquareRoot":
            if (group1 < 0) {
                throw new Error("Cannot calculate the square root of a negative number.");
            }
            operator.solution = new MathGroup([new Token(Math.pow(group1, 0.5))]);
            break;
        case "Fraction": {
            if (group2 === 0) {
                throw new Error("Division by zero is not allowed");
            }
            operator.solution = new MathGroup([new Token(group1 / group2)]);
            break;
        }
        case "Power": {
            operator.solution = new MathGroup([new Token(Math.pow(group1, group2))]);
            break;
        }
        default:
            throw new Error(`Unknown operator type in parseOperator: ${operator.operator}`);
    }
    return true;
}
function basicMathJaxTokensToMathGroup(basicTokens) {
    const defineGroupsAndOperators = (tokens) => {
        const range = operationsOrder(tokens);
        if (range.start === null || range.end === null)
            return false;
        if (range.specificOperatorIndex === null && range.start === 0 && range.end === tokens.length)
            return true;
        let newMathGroupSuccess = null;
        if (range.specificOperatorIndex !== null)
            newMathGroupSuccess = createOperatorItemFromTokens(tokens, range.specificOperatorIndex);
        else
            newMathGroupSuccess = createMathGroupInsertFromTokens(tokens, range.start, range.end);
        if (!newMathGroupSuccess)
            return false;
        return defineGroupsAndOperators(tokens);
    };
    const createMathGroupInsertFromTokens = (tokens, start, end) => {
        const newMathGroup = new MathGroup(ensureAcceptableFormatForMathGroupItems(tokens.slice(start, end + 1)));
        tokens.splice(start, (end - start) + 1, newMathGroup);
        return true;
    };
    const createOperatorItemFromTokens = (tokens, index) => {
        const metadata = searchMathJaxOperators(tokens[index].value);
        if (!metadata)
            throw new Error(`Operator ${tokens[index].value} not found in metadata`);
        const position = new Position(tokens, index);
        const newOperator = MathJaxOperator.create(position.operator, mahtjaxAssociativitymetadata(metadata).numPositions, position.groups);
        tokens.splice(position.start, (position.end - position.start) + 1, newOperator);
        return true;
    };
    const success = defineGroupsAndOperators(basicTokens);
    if (!success)
        return;
    const GroupedBasicTokens = basicTokens.filter((t) => !(t instanceof Paren));
    return new MathGroup(GroupedBasicTokens);
}
function stringToMathGroup(string) {
    const basicTokens = stringToBasicMathJaxTokens(string);
    const mathGroup = basicMathJaxTokensToMathGroup(basicTokens);
    return mathGroup;
}
function operationsOrder(tokens) {
    function findOperatorIndex(begin, end, tokens, regex) {
        const index = tokens.slice(begin, end).findIndex((token) => token.type === "operator" && regex.test(token.value));
        return index > -1 ? index + begin : null;
    }
    const { begin, end } = findDeepestParenthesesScope(tokens);
    let priority = null;
    for (let i = 1; i <= 6; i++) {
        priority = findOperatorIndex(begin, end, tokens, getMathJaxOperatorsByPriority(i, true));
        if (priority !== null)
            break;
    }
    return { start: begin, end: end, specificOperatorIndex: priority };
}
export class MathPraiser {
    constructor(input, mathGroup, solution, mathInfo) {
        this.input = "";
        this.mathInfo = new MathInfo();
        if (input)
            this.input = input;
        if (mathGroup)
            this.mathGroup = mathGroup;
        if (solution)
            this.solution = solution;
        if (mathInfo)
            this.mathInfo = mathInfo;
    }
    setInput(input) {
        this.input = input;
        this.processInput();
        console.log(this.input);
        const mathGroup = stringToMathGroup(this.input);
        if (!mathGroup)
            throw new Error("Invalid input");
        this.mathGroup = mathGroup;
        console.log('this.mathGroup', this.mathGroup.toString(), this.mathGroup);
    }
    toStringLatex() { return this.mathGroup.toStringLatex(); }
    addSolution() {
        this.input = this.mathGroup.toString();
        this.controller();
        this.solution = this.mathGroup;
        this.addDebugInfo("solution", this.solution);
    }
    getMathGroup() { return this.mathGroup; }
    parse(tokens) {
        const operatorIndex = tokens.getItems().findIndex(t => t instanceof MathJaxOperator && t.isOperable);
        if (operatorIndex < 0)
            return;
        const operator = tokens.getItems()[operatorIndex];
        operator.groups.forEach(group => {
            this.parse(group);
        });
        operator.parseMathjaxOperator();
        if (!operator.solution) {
            operator.isOperable = false;
            return;
        }
        this.mathInfo.addMathSnapshot(this.mathGroup.clone());
        tokens.replaceItemCell(operator.solution, operatorIndex);
    }
    controller() {
        this.parse(this.mathGroup);
        combineSimilarValues(this.mathGroup);
        this.mathGroup.combiningLikeTerms();
    }
    solutionToString() {
        return (this.mathGroup.toString()) || "";
    }
    addDebugInfo(mes, value) {
        this.mathInfo.addDebugInfo(mes, value);
    }
    processInput() {
        this.input = this.input
            .replace(/(Math.|\\|\s|left|right)/g, "")
            .replace(/{/g, "(")
            .replace(/}/g, ")");
        //.replace(/(?<!\\|[a-zA-Z])(tan|sin|cos|binom|frac|asin|acos|atan|arccos|arcsin|arctan|cdot)/g, "\\$1");
    }
    finalReturn() {
        // return this.tokens.reconstruct()
    }
}
function deepClone(items) {
    let clone = [];
    items.forEach(item => {
        clone.push(item instanceof Array ? deepClone(item) : item.clone());
    });
    return clone;
}
function combineSimilarValues(math) {
    const op = math.getItems().find(t => t instanceof MathJaxOperator);
    if (!op)
        return;
    /*const a=new MathOverview()
    a.defineGlobalOverview(math.getItems())
    a.separateIntoIndividuals()*/
}
class mathVariables {
}
export function flattenArray(arr) {
    let result = [];
    let stack = Array.isArray(arr) ? [...arr] : [arr];
    while (stack.length) {
        const next = stack.pop();
        if (Array.isArray(next)) {
            stack.push(...next);
        }
        else {
            result.push(next);
        }
    }
    return result.reverse();
}
//# sourceMappingURL=data:application/json;base64,