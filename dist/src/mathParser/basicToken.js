import { isOperatorWithAssociativity, mahtjaxAssociativitymetadata, searchAllMathJaxOperatorsAndSymbols, searchMathJaxOperators, searchTikzComponents } from "../staticData/dataManager";
class BasicToken {
    constructor(type, value) {
        if (type)
            this.type = type;
        if (value)
            this.value = value;
    }
    getType() { return this.type; }
    getValue() { return this.value; }
    getNumberValue() { return this.value; }
    getStringValue() { return this.value; }
    setValue(value) { this.value = value; }
    isValueString() { return typeof this.value === 'string'; }
}
export class BasicMathJaxToken extends BasicToken {
    constructor(type, value) {
        super(type, value);
    }
    getStringValue() {
        return this.value;
    }
    getLatexSymbol() {
        var _a;
        const metadata = typeof this.value === "string" ? searchMathJaxOperators(this.value) : undefined;
        return metadata ? (_a = mahtjaxAssociativitymetadata(metadata)) === null || _a === void 0 ? void 0 : _a.string : undefined;
    }
    getFullType() {
        return this.type;
    }
    static create(value) {
        if (typeof value === "string") {
            const operator = searchAllMathJaxOperatorsAndSymbols(value);
            if (operator) {
                return new BasicMathJaxToken(/[\(\)]/.test(value) ? 'bracket' : 'operator', operator.name);
            }
            return new BasicMathJaxToken('variable', value);
        }
        return new BasicMathJaxToken('number', value);
    }
    clone() { return new BasicMathJaxToken(this.type || "", this.value); }
    isValueToken() {
        return this.type === "variable" || this.type === "number";
    }
    toStringLatex() {
        let latexString = "";
        if (this.isValueString()) {
            latexString += this.getLatexSymbol() || "";
        }
        if (this.type === "number") {
            latexString += this.value;
        }
        return latexString;
    }
    affectedOperatorRange(direction) {
        if (this.type !== "operator" || this.value === "Equals") {
            return false;
        }
        if (typeof this.value === "string" &&
            direction === "left" &&
            !isOperatorWithAssociativity(this.value, [-1, 1], true)) {
            return false;
        }
        return true;
    }
}
export class BasicTikzToken extends BasicToken {
    constructor(type, value) {
        super(type, value);
    }
    getStringValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
    }
    getNumberValue() {
        return this.value;
    }
    static create(value) {
        const token = new BasicTikzToken();
        if (typeof value === "number") {
            token.type = "number";
            token.value = value;
        }
        else if (typeof value === "string") {
            const tikzCommand = searchTikzComponents(value);
            if (tikzCommand) {
                token.type = tikzCommand.type.replace(/Bracket/, "Syntax");
                token.value = tikzCommand.name;
            }
        }
        return token;
    }
    clone() { return new BasicTikzToken(this.type, this.value); }
    toString() {
        if (typeof this.value === "number") {
            return this.getNumberValue().toString();
        }
        const component = searchTikzComponents(this.value);
        if (component && component.latex) {
            return component.latex;
        }
        return this.value;
    }
}
//# sourceMappingURL=data:application/json;base64,