import { arrToRegexString, regExp } from "src/tikzjax/tikzjax";
export function searchSymbols(query) {
    const combinedData = [...latexOperators, ...symbolTranslator, ...Brackets];
    return combinedData.find(item => Object.values(item).some(value => typeof value === 'string' && value.includes(query)));
}
export function searchOperators(query) {
    return latexOperators.find(item => Object.values(item).flat().some((value) => typeof value === 'string' && value?.includes(query)));
}
export const escapeForRegex = (string) => {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};
export function getAllLatexReferences() {
    return [...latexOperators, ...Brackets]
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function getAllOperatorReferences() {
    return latexOperators
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function getOperatorsByPriority(priorityLevel, toRegex) {
    const prioritized = latexOperators
        .filter(operator => operator.priority === priorityLevel)
        .map(operator => operator.name);
    return toRegex ? regExp(prioritized) : prioritized;
}
export function getOperatorsBySides(side) {
    const sides = latexOperators
        .filter(operator => operator.associativity === side)
        .map(operator => operator.name);
    return sides;
}
export function getOperatorsByBracket(bracket) {
    const brackets = latexOperators
        .filter(operator => operator.bracket === bracket)
        .map(operator => operator.name);
    return brackets;
}
export function hasImplicitMultiplication(operatorName) {
    const operator = latexOperators.find(op => op.name === operatorName);
    if (!operator) {
        return false;
    }
    return operatorsWithImplicitMultiplication.includes(operator.type);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9zeW1ib2xzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQUs7SUFDL0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLGNBQWMsRUFBRSxHQUFHLGdCQUFnQixFQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDMUUsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzdCLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNyRCxDQUNKLENBQUM7QUFDTixDQUFDO0FBR0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFLO0lBQ2pDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3RDLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBRyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNyRCxDQUNKLENBQUM7QUFDTixDQUFDO0FBR0QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDckMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxxQkFBcUI7SUFDakMsT0FBTyxDQUFDLEdBQUcsY0FBYyxFQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ2pDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQzFDLElBQUksRUFBRTtTQUNOLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QjtJQUNwQyxPQUFPLGNBQWM7U0FDaEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7U0FDMUMsSUFBSSxFQUFFO1NBQ04sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsYUFBYSxFQUFDLE9BQU87SUFDeEQsTUFBTSxXQUFXLEdBQUMsY0FBYztTQUMvQixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLGFBQWEsQ0FBQztTQUN2RCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsT0FBTyxPQUFPLENBQUEsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLENBQUEsV0FBVyxDQUFDO0FBQ25ELENBQUM7QUFDRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBSTtJQUNwQyxNQUFNLEtBQUssR0FBQyxjQUFjO1NBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDO1NBQ25ELEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBQ0QsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQU87SUFDekMsTUFBTSxRQUFRLEdBQUMsY0FBYztTQUM1QixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQztTQUNoRCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxZQUFZO0lBQ2xELE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUFBLE9BQU8sS0FBSyxDQUFDO0lBQUEsQ0FBQztJQUM5QixPQUFPLG1DQUFtQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFyclRvUmVnZXhTdHJpbmcsIHJlZ0V4cCB9IGZyb20gXCJzcmMvdGlrempheC90aWt6amF4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hTeW1ib2xzKHF1ZXJ5KSB7XG4gICAgY29uc3QgY29tYmluZWREYXRhID0gWy4uLmxhdGV4T3BlcmF0b3JzLCAuLi5zeW1ib2xUcmFuc2xhdG9yLC4uLkJyYWNrZXRzXTtcbiAgICByZXR1cm4gY29tYmluZWREYXRhLmZpbmQoaXRlbSA9PlxuICAgICAgICBPYmplY3QudmFsdWVzKGl0ZW0pLnNvbWUodmFsdWUgPT4gXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluY2x1ZGVzKHF1ZXJ5KVxuICAgICAgICApXG4gICAgKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoT3BlcmF0b3JzKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGxhdGV4T3BlcmF0b3JzLmZpbmQoaXRlbSA9PlxuICAgICAgICBPYmplY3QudmFsdWVzKGl0ZW0pLmZsYXQoKS5zb21lKCh2YWx1ZSkgPT5cbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiZ2YWx1ZT8uaW5jbHVkZXMocXVlcnkpLFxuICAgICAgICApXG4gICAgKTtcbn1cblxuXG5leHBvcnQgY29uc3QgZXNjYXBlRm9yUmVnZXggPSAoc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxMYXRleFJlZmVyZW5jZXMoKSB7XG4gICAgcmV0dXJuIFsuLi5sYXRleE9wZXJhdG9ycywuLi5CcmFja2V0c11cbiAgICAgICAgLm1hcChvcGVyYXRvciA9PiBvcGVyYXRvci5yZWZlcmVuY2VzIHx8IFtdKSBcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAubWFwKGVzY2FwZUZvclJlZ2V4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbE9wZXJhdG9yUmVmZXJlbmNlcygpIHtcbiAgICByZXR1cm4gbGF0ZXhPcGVyYXRvcnNcbiAgICAgICAgLm1hcChvcGVyYXRvciA9PiBvcGVyYXRvci5yZWZlcmVuY2VzIHx8IFtdKSBcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAubWFwKGVzY2FwZUZvclJlZ2V4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yc0J5UHJpb3JpdHkocHJpb3JpdHlMZXZlbCx0b1JlZ2V4KSB7XG4gICAgY29uc3QgcHJpb3JpdGl6ZWQ9bGF0ZXhPcGVyYXRvcnNcbiAgICAuZmlsdGVyKG9wZXJhdG9yID0+IG9wZXJhdG9yLnByaW9yaXR5ID09PSBwcmlvcml0eUxldmVsKVxuICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IubmFtZSk7XG4gICAgcmV0dXJuIHRvUmVnZXg/cmVnRXhwKHByaW9yaXRpemVkKTpwcmlvcml0aXplZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvcnNCeVNpZGVzKHNpZGUpIHtcbiAgICBjb25zdCBzaWRlcz1sYXRleE9wZXJhdG9yc1xuICAgIC5maWx0ZXIob3BlcmF0b3IgPT4gb3BlcmF0b3IuYXNzb2NpYXRpdml0eSA9PT0gc2lkZSlcbiAgICAubWFwKG9wZXJhdG9yID0+IG9wZXJhdG9yLm5hbWUpO1xuICAgIHJldHVybiBzaWRlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvcnNCeUJyYWNrZXQoYnJhY2tldCkge1xuICAgIGNvbnN0IGJyYWNrZXRzPWxhdGV4T3BlcmF0b3JzXG4gICAgLmZpbHRlcihvcGVyYXRvciA9PiBvcGVyYXRvci5icmFja2V0ID09PSBicmFja2V0KVxuICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IubmFtZSk7XG4gICAgcmV0dXJuIGJyYWNrZXRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzSW1wbGljaXRNdWx0aXBsaWNhdGlvbihvcGVyYXRvck5hbWUpIHtcbiAgICBjb25zdCBvcGVyYXRvciA9IGxhdGV4T3BlcmF0b3JzLmZpbmQob3AgPT4gb3AubmFtZSA9PT0gb3BlcmF0b3JOYW1lKTtcbiAgICBpZiAoIW9wZXJhdG9yKSB7cmV0dXJuIGZhbHNlO31cbiAgICByZXR1cm4gb3BlcmF0b3JzV2l0aEltcGxpY2l0TXVsdGlwbGljYXRpb24uaW5jbHVkZXMob3BlcmF0b3IudHlwZSk7XG59XG5cblxuXG4iXX0=