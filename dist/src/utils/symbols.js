import { arrToRegexString, regExp } from "src/tikzjax/tikzjax";
export function searchSymbols(query) {
    const combinedData = [...latexOperators, ...symbolTranslator, ...Brackets];
    return combinedData.find(item => Object.values(item).some(value => typeof value === 'string' && value.includes(query)));
}
export function searchOperators(query) {
    return latexOperators.find(item => Object.values(item).flat().some((value) => typeof value === 'string' && value?.includes(query)));
}
export const escapeForRegex = (string) => {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};
export function getAllLatexReferences() {
    return [...latexOperators, ...Brackets]
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function getAllOperatorReferences() {
    return latexOperators
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function getOperatorsByPriority(priorityLevel, toRegex) {
    const prioritized = latexOperators
        .filter(operator => operator.priority === priorityLevel)
        .map(operator => operator.name);
    return toRegex ? regExp(prioritized) : prioritized;
}
export function getOperatorsBySides(side) {
    const sides = latexOperators
        .filter(operator => operator.associativity === side)
        .map(operator => operator.name);
    return sides;
}
export function getOperatorsByBracket(bracket) {
    const brackets = latexOperators
        .filter(operator => operator.bracket === bracket)
        .map(operator => operator.name);
    return brackets;
}
export function hasImplicitMultiplication(operatorName) {
    const operator = latexOperators.find(op => op.name === operatorName);
    if (!operator) {
        return false;
    }
    return operatorsWithImplicitMultiplication.includes(operator.type);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9zeW1ib2xzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQUs7SUFDL0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLGNBQWMsRUFBRSxHQUFHLGdCQUFnQixFQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDMUUsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzdCLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNyRCxDQUNKLENBQUM7QUFDTixDQUFDO0FBR0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFLO0lBQ2pDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3RDLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBRyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNyRCxDQUNKLENBQUM7QUFDTixDQUFDO0FBR0QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDckMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxxQkFBcUI7SUFDakMsT0FBTyxDQUFDLEdBQUcsY0FBYyxFQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ2pDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQzFDLElBQUksRUFBRTtTQUNOLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QjtJQUNwQyxPQUFPLGNBQWM7U0FDaEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7U0FDMUMsSUFBSSxFQUFFO1NBQ04sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsYUFBYSxFQUFDLE9BQU87SUFDeEQsTUFBTSxXQUFXLEdBQUMsY0FBYztTQUMvQixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLGFBQWEsQ0FBQztTQUN2RCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsT0FBTyxPQUFPLENBQUEsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLENBQUEsV0FBVyxDQUFDO0FBQ25ELENBQUM7QUFDRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBSTtJQUNwQyxNQUFNLEtBQUssR0FBQyxjQUFjO1NBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDO1NBQ25ELEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBQ0QsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQU87SUFDekMsTUFBTSxRQUFRLEdBQUMsY0FBYztTQUM1QixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQztTQUNoRCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxZQUFZO0lBQ2xELE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUFBLE9BQU8sS0FBSyxDQUFDO0lBQUEsQ0FBQztJQUM5QixPQUFPLG1DQUFtQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFyclRvUmVnZXhTdHJpbmcsIHJlZ0V4cCB9IGZyb20gXCJzcmMvdGlrempheC90aWt6amF4XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoU3ltYm9scyhxdWVyeSkge1xyXG4gICAgY29uc3QgY29tYmluZWREYXRhID0gWy4uLmxhdGV4T3BlcmF0b3JzLCAuLi5zeW1ib2xUcmFuc2xhdG9yLC4uLkJyYWNrZXRzXTtcclxuICAgIHJldHVybiBjb21iaW5lZERhdGEuZmluZChpdGVtID0+XHJcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhpdGVtKS5zb21lKHZhbHVlID0+IFxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluY2x1ZGVzKHF1ZXJ5KVxyXG4gICAgICAgIClcclxuICAgICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoT3BlcmF0b3JzKHF1ZXJ5KSB7XHJcbiAgICByZXR1cm4gbGF0ZXhPcGVyYXRvcnMuZmluZChpdGVtID0+XHJcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhpdGVtKS5mbGF0KCkuc29tZSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiZ2YWx1ZT8uaW5jbHVkZXMocXVlcnkpLFxyXG4gICAgICAgIClcclxuICAgICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZXNjYXBlRm9yUmVnZXggPSAoc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbExhdGV4UmVmZXJlbmNlcygpIHtcclxuICAgIHJldHVybiBbLi4ubGF0ZXhPcGVyYXRvcnMsLi4uQnJhY2tldHNdXHJcbiAgICAgICAgLm1hcChvcGVyYXRvciA9PiBvcGVyYXRvci5yZWZlcmVuY2VzIHx8IFtdKSBcclxuICAgICAgICAuZmxhdCgpXHJcbiAgICAgICAgLm1hcChlc2NhcGVGb3JSZWdleCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxPcGVyYXRvclJlZmVyZW5jZXMoKSB7XHJcbiAgICByZXR1cm4gbGF0ZXhPcGVyYXRvcnNcclxuICAgICAgICAubWFwKG9wZXJhdG9yID0+IG9wZXJhdG9yLnJlZmVyZW5jZXMgfHwgW10pIFxyXG4gICAgICAgIC5mbGF0KClcclxuICAgICAgICAubWFwKGVzY2FwZUZvclJlZ2V4KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yc0J5UHJpb3JpdHkocHJpb3JpdHlMZXZlbCx0b1JlZ2V4KSB7XHJcbiAgICBjb25zdCBwcmlvcml0aXplZD1sYXRleE9wZXJhdG9yc1xyXG4gICAgLmZpbHRlcihvcGVyYXRvciA9PiBvcGVyYXRvci5wcmlvcml0eSA9PT0gcHJpb3JpdHlMZXZlbClcclxuICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IubmFtZSk7XHJcbiAgICByZXR1cm4gdG9SZWdleD9yZWdFeHAocHJpb3JpdGl6ZWQpOnByaW9yaXRpemVkO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvcnNCeVNpZGVzKHNpZGUpIHtcclxuICAgIGNvbnN0IHNpZGVzPWxhdGV4T3BlcmF0b3JzXHJcbiAgICAuZmlsdGVyKG9wZXJhdG9yID0+IG9wZXJhdG9yLmFzc29jaWF0aXZpdHkgPT09IHNpZGUpXHJcbiAgICAubWFwKG9wZXJhdG9yID0+IG9wZXJhdG9yLm5hbWUpO1xyXG4gICAgcmV0dXJuIHNpZGVzO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvcnNCeUJyYWNrZXQoYnJhY2tldCkge1xyXG4gICAgY29uc3QgYnJhY2tldHM9bGF0ZXhPcGVyYXRvcnNcclxuICAgIC5maWx0ZXIob3BlcmF0b3IgPT4gb3BlcmF0b3IuYnJhY2tldCA9PT0gYnJhY2tldClcclxuICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IubmFtZSk7XHJcbiAgICByZXR1cm4gYnJhY2tldHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNJbXBsaWNpdE11bHRpcGxpY2F0aW9uKG9wZXJhdG9yTmFtZSkge1xyXG4gICAgY29uc3Qgb3BlcmF0b3IgPSBsYXRleE9wZXJhdG9ycy5maW5kKG9wID0+IG9wLm5hbWUgPT09IG9wZXJhdG9yTmFtZSk7XHJcbiAgICBpZiAoIW9wZXJhdG9yKSB7cmV0dXJuIGZhbHNlO31cclxuICAgIHJldHVybiBvcGVyYXRvcnNXaXRoSW1wbGljaXRNdWx0aXBsaWNhdGlvbi5pbmNsdWRlcyhvcGVyYXRvci50eXBlKTtcclxufVxyXG5cclxuXHJcblxyXG4iXX0=