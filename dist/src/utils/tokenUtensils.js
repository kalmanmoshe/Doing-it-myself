export class Paren {
    type;
    depth;
    depthID;
    constructor(depth, depthID, type) {
        this.depth = depth;
        this.depthID = depthID;
        this.type = type;
    }
    toString() { this.id = this.depth + "." + this.depthID; }
    compare(Paren) { return this.depth === Paren.depth && this.depthID === Paren.depthID; }
}
const open = ['Parentheses_open', 'Curly_brackets_open', 'Square_brackets_open'];
const close = ['Parentheses_close', 'Curly_brackets_close', 'Square_brackets_close'];
export function idParentheses(tokens) {
    let depth = 0;
    const depthCounts = {};
    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (open.includes(token.name)) {
            if (!depthCounts[depth]) {
                depthCounts[depth] = 0;
            }
            const depthID = depthCounts[depth]++;
            token.value = new Paren(depth, depthID, token.value);
            // Increase depth for nested parentheses
            depth++;
            continue;
        }
        if (close.includes(token.name)) {
            // Decrease depth and check for unmatched closing parenthesis
            depth--;
            if (depth < 0) {
                console.error(token.value, tokens);
                throw new Error("Unmatched closing parenthesis detected.");
            }
            // Assign a unique ID to the closing parenthesis
            const depthID = depthCounts[depth] - 1;
            token.value = new Paren(depth, depthID, token.value);
        }
    }
    // Check for unmatched opening parentheses
    if (depth !== 0) {
        console.error(tokens);
        throw new Error(`Unmatched opening parenthesis(es) detected: depth=${depth}`);
    }
}
export function mapBrackets(type, tokens) {
    return tokens
        .map((token, index) => token.name === type
        ? findParenIndex(token.value, undefined, tokens)
        : null)
        .filter((t) => t !== null);
}
export function findParenIndex(id, index, tokens) {
    id = id ? id : tokens[index].value;
    const openIndex = tokens.findIndex(token => open.includes(token.name)
        && token.value?.compare(id));
    const closeIndex = tokens.findLastIndex(token => close.includes(token.name)
        && token.value?.compare(id));
    return { open: openIndex, close: closeIndex, id: id };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5VdGVuc2lscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy90b2tlblV0ZW5zaWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxLQUFLO0lBQ2QsSUFBSSxDQUFDO0lBQ0wsS0FBSyxDQUFDO0lBQ04sT0FBTyxDQUFDO0lBRVIsWUFBWSxLQUFLLEVBQUMsT0FBTyxFQUFDLElBQUk7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBQyxPQUFPLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUE7SUFDbEIsQ0FBQztJQUNELFFBQVEsS0FBRyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxLQUFLLElBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFHLEtBQUssQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLE9BQU8sS0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQztDQUNoRjtBQUNELE1BQU0sSUFBSSxHQUFDLENBQUMsa0JBQWtCLEVBQUMscUJBQXFCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM3RSxNQUFNLEtBQUssR0FBQyxDQUFDLG1CQUFtQixFQUFDLHNCQUFzQixFQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFakYsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFNO0lBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxNQUFNLEtBQUssR0FBRyxNQUFN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ICBkZXB0aDtcbiAgICBkZXB0aElEO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlcHRoLGRlcHRoSUQsdHlwZSl7XG4gICAgICAgIHRoaXMuZGVwdGg9ZGVwdGg7XG4gICAgICAgIHRoaXMuZGVwdGhJRD1kZXB0aElEO1xuICAgICAgICB0aGlzLnR5cGU9dHlwZVxuICAgIH1cbiAgICB0b1N0cmluZygpe3RoaXMuaWQ9dGhpcy5kZXB0aCArIFwiLlwiICsgdGhpcy5kZXB0aElEfVxuICAgIGNvbXBhcmUoUGFyZW4pe3JldHVybiB0aGlzLmRlcHRoPT09UGFyZW4uZGVwdGgmJnRoaXMuZGVwdGhJRD09PVBhcmVuLmRlcHRoSUR9XG59XG5jb25zdCBvcGVuPVsnUGFyZW50aGVzZXNfb3BlbicsJ0N1cmx5X2JyYWNrZXRzX29wZW4nLCdTcXVhcmVfYnJhY2tldHNfb3BlbiddO1xuY29uc3QgY2xvc2U9WydQYXJlbnRoZXNlc19jbG9zZScsJ0N1cmx5X2JyYWNrZXRzX2Nsb3NlJywnU3F1YXJlX2JyYWNrZXRzX2Nsb3NlJ107XG5cbmV4cG9ydCBmdW5jdGlvbiBpZFBhcmVudGhlc2VzKHRva2Vucykge1xuICAgIGxldCBkZXB0aCA9IDA7XG4gICAgY29uc3QgZGVwdGhDb3VudHMgPSB7fTtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChvcGVuLmluY2x1ZGVzKHRva2VuLm5hbWUpKSB7XG4gICAgICAgICAgICBpZiAoIWRlcHRoQ291bnRzW2RlcHRoXSkge1xuICAgICAgICAgICAgICAgIGRlcHRoQ291bnRzW2RlcHRoXSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRlcHRoSUQgPSBkZXB0aENvdW50c1tkZXB0aF0rKztcbiAgICAgICAgICAgIHRva2VuLnZhbHVlID0gbmV3IFBhcmVuKGRlcHRoLCBkZXB0aElELHRva2VuLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gSW5jcmVhc2UgZGVwdGggZm9yIG5lc3RlZCBwYXJlbnRoZXNlc1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsb3NlLmluY2x1ZGVzKHRva2VuLm5hbWUpKSB7XG4gICAgICAgICAgICAvLyBEZWNyZWFzZSBkZXB0aCBhbmQgY2hlY2sgZm9yIHVubWF0Y2hlZCBjbG9zaW5nIHBhcmVudGhlc2lzXG4gICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgaWYgKGRlcHRoIDwgMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodG9rZW4udmFsdWUsdG9rZW5zKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVubWF0Y2hlZCBjbG9zaW5nIHBhcmVudGhlc2lzIGRldGVjdGVkLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXNzaWduIGEgdW5pcXVlIElEIHRvIHRoZSBjbG9zaW5nIHBhcmVudGhlc2lzXG4gICAgICAgICAgICBjb25zdCBkZXB0aElEID0gZGVwdGhDb3VudHNbZGVwdGhdIC0gMTtcbiAgICAgICAgICAgIHRva2VuLnZhbHVlID0gbmV3IFBhcmVuKGRlcHRoLCBkZXB0aElELHRva2VuLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciB1bm1hdGNoZWQgb3BlbmluZyBwYXJlbnRoZXNlc1xuICAgIGlmIChkZXB0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRva2VucylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbm1hdGNoZWQgb3BlbmluZyBwYXJlbnRoZXNpcyhlcykgZGV0ZWN0ZWQ6IGRlcHRoPSR7ZGVwdGh9YCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcEJyYWNrZXRzKHR5cGUsdG9rZW5zKXtcbiAgICByZXR1cm4gdG9rZW5zXG4gICAgICAgIC5tYXAoKHRva2VuLCBpbmRleCkgPT4gXG4gICAgICAgICAgICB0b2tlbi5uYW1lID09PSB0eXBlXG4gICAgICAgICAgICAgICAgPyBmaW5kUGFyZW5JbmRleCh0b2tlbi52YWx1ZSwgdW5kZWZpbmVkLCB0b2tlbnMpIFxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICApXG4gICAgICAgIC5maWx0ZXIoKHQpID0+IHQgIT09IG51bGwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVuSW5kZXgoaWQsaW5kZXgsdG9rZW5zKXtcbiAgICBpZD1pZD9pZDp0b2tlbnNbaW5kZXhdLnZhbHVlO1xuXG4gICAgY29uc3Qgb3BlbkluZGV4PXRva2Vucy5maW5kSW5kZXgoXG4gICAgICAgIHRva2VuPT5vcGVuLmluY2x1ZGVzKHRva2VuLm5hbWUpXG4gICAgICAgICYmdG9rZW4udmFsdWU/LmNvbXBhcmUoaWQpXG4gICAgKVxuICAgIGNvbnN0IGNsb3NlSW5kZXg9dG9rZW5zLmZpbmRMYXN0SW5kZXgoXG4gICAgICAgIHRva2VuPT5jbG9zZS5pbmNsdWRlcyh0b2tlbi5uYW1lKVxuICAgICAgICAmJnRva2VuLnZhbHVlPy5jb21wYXJlKGlkKVxuICAgIClcbiAgICByZXR1cm57b3Blbjogb3BlbkluZGV4LGNsb3NlOiBjbG9zZUluZGV4LGlkOmlkfVxufSJdfQ==