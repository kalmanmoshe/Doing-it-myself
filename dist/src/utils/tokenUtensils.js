export class Paren {
    type;
    depth;
    depthID;
    constructor(depth, depthID, type) {
        this.depth = depth;
        this.depthID = depthID;
        this.type = type;
    }
    toString() { this.id = this.depth + "." + this.depthID; }
    compare(Paren) { return this.depth === Paren.depth && this.depthID === Paren.depthID; }
}
const open = ['Parentheses_open', 'Curly_brackets_open', 'Square_brackets_open'];
const close = ['Parentheses_close', 'Curly_brackets_close', 'Square_brackets_close'];
export function idParentheses(tokens) {
    let depth = 0;
    const depthCounts = {};
    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (open.includes(token.name)) {
            if (!depthCounts[depth]) {
                depthCounts[depth] = 0;
            }
            const depthID = depthCounts[depth]++;
            token.value = new Paren(depth, depthID, token.value);
            // Increase depth for nested parentheses
            depth++;
            continue;
        }
        if (close.includes(token.name)) {
            // Decrease depth and check for unmatched closing parenthesis
            depth--;
            if (depth < 0) {
                console.error(token.value, tokens);
                throw new Error("Unmatched closing parenthesis detected.");
            }
            // Assign a unique ID to the closing parenthesis
            const depthID = depthCounts[depth] - 1;
            token.value = new Paren(depth, depthID, token.value);
        }
    }
    // Check for unmatched opening parentheses
    if (depth !== 0) {
        console.error(tokens);
        throw new Error(`Unmatched opening parenthesis(es) detected: depth=${depth}`);
    }
}
export function mapBrackets(type, tokens) {
    return tokens
        .map((token, index) => token.name === type
        ? findParenIndex(token.value, undefined, tokens)
        : null)
        .filter((t) => t !== null);
}
export function findParenIndex(id, index, tokens) {
    id = id ? id : tokens[index].value;
    const openIndex = tokens.findIndex(token => open.includes(token.name)
        && token.value?.compare(id));
    const closeIndex = tokens.findLastIndex(token => close.includes(token.name)
        && token.value?.compare(id));
    return { open: openIndex, close: closeIndex, id: id };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5VdGVuc2lscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy90b2tlblV0ZW5zaWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxLQUFLO0lBQ2QsSUFBSSxDQUFDO0lBQ0wsS0FBSyxDQUFDO0lBQ04sT0FBTyxDQUFDO0lBRVIsWUFBWSxLQUFLLEVBQUMsT0FBTyxFQUFDLElBQUk7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBQyxPQUFPLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUE7SUFDbEIsQ0FBQztJQUNELFFBQVEsS0FBRyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxLQUFLLElBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFHLEtBQUssQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLE9BQU8sS0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQztDQUNoRjtBQUNELE1BQU0sSUFBSSxHQUFDLENBQUMsa0JBQWtCLEVBQUMscUJBQXFCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM3RSxNQUFNLEtBQUssR0FBQyxDQUFDLG1CQUFtQixFQUFDLHNCQUFzQixFQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFakYsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFNO0lBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxNQUFNLEtBQUssR0FBRyxNQUFN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XG4gICAgZGVwdGg7XHJcbiAgICBkZXB0aElEO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihkZXB0aCxkZXB0aElELHR5cGUpe1xyXG4gICAgICAgIHRoaXMuZGVwdGg9ZGVwdGg7XHJcbiAgICAgICAgdGhpcy5kZXB0aElEPWRlcHRoSUQ7XHJcbiAgICAgICAgdGhpcy50eXBlPXR5cGVcclxuICAgIH1cclxuICAgIHRvU3RyaW5nKCl7dGhpcy5pZD10aGlzLmRlcHRoICsgXCIuXCIgKyB0aGlzLmRlcHRoSUR9XHJcbiAgICBjb21wYXJlKFBhcmVuKXtyZXR1cm4gdGhpcy5kZXB0aD09PVBhcmVuLmRlcHRoJiZ0aGlzLmRlcHRoSUQ9PT1QYXJlbi5kZXB0aElEfVxyXG59XHJcbmNvbnN0IG9wZW49WydQYXJlbnRoZXNlc19vcGVuJywnQ3VybHlfYnJhY2tldHNfb3BlbicsJ1NxdWFyZV9icmFja2V0c19vcGVuJ107XHJcbmNvbnN0IGNsb3NlPVsnUGFyZW50aGVzZXNfY2xvc2UnLCdDdXJseV9icmFja2V0c19jbG9zZScsJ1NxdWFyZV9icmFja2V0c19jbG9zZSddO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlkUGFyZW50aGVzZXModG9rZW5zKSB7XHJcbiAgICBsZXQgZGVwdGggPSAwO1xyXG4gICAgY29uc3QgZGVwdGhDb3VudHMgPSB7fTtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAob3Blbi5pbmNsdWRlcyh0b2tlbi5uYW1lKSkge1xyXG4gICAgICAgICAgICBpZiAoIWRlcHRoQ291bnRzW2RlcHRoXSkge1xyXG4gICAgICAgICAgICAgICAgZGVwdGhDb3VudHNbZGVwdGhdID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGVwdGhJRCA9IGRlcHRoQ291bnRzW2RlcHRoXSsrO1xyXG4gICAgICAgICAgICB0b2tlbi52YWx1ZSA9IG5ldyBQYXJlbihkZXB0aCwgZGVwdGhJRCx0b2tlbi52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbmNyZWFzZSBkZXB0aCBmb3IgbmVzdGVkIHBhcmVudGhlc2VzXHJcbiAgICAgICAgICAgIGRlcHRoKys7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsb3NlLmluY2x1ZGVzKHRva2VuLm5hbWUpKSB7XHJcbiAgICAgICAgICAgIC8vIERlY3JlYXNlIGRlcHRoIGFuZCBjaGVjayBmb3IgdW5tYXRjaGVkIGNsb3NpbmcgcGFyZW50aGVzaXNcclxuICAgICAgICAgICAgZGVwdGgtLTtcclxuICAgICAgICAgICAgaWYgKGRlcHRoIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcih0b2tlbi52YWx1ZSx0b2tlbnMpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbm1hdGNoZWQgY2xvc2luZyBwYXJlbnRoZXNpcyBkZXRlY3RlZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFzc2lnbiBhIHVuaXF1ZSBJRCB0byB0aGUgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG4gICAgICAgICAgICBjb25zdCBkZXB0aElEID0gZGVwdGhDb3VudHNbZGVwdGhdIC0gMTtcclxuICAgICAgICAgICAgdG9rZW4udmFsdWUgPSBuZXcgUGFyZW4oZGVwdGgsIGRlcHRoSUQsdG9rZW4udmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBmb3IgdW5tYXRjaGVkIG9wZW5pbmcgcGFyZW50aGVzZXNcclxuICAgIGlmIChkZXB0aCAhPT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IodG9rZW5zKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5tYXRjaGVkIG9wZW5pbmcgcGFyZW50aGVzaXMoZXMpIGRldGVjdGVkOiBkZXB0aD0ke2RlcHRofWApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBCcmFja2V0cyh0eXBlLHRva2Vucyl7XHJcbiAgICByZXR1cm4gdG9rZW5zXHJcbiAgICAgICAgLm1hcCgodG9rZW4sIGluZGV4KSA9PiBcclxuICAgICAgICAgICAgdG9rZW4ubmFtZSA9PT0gdHlwZVxyXG4gICAgICAgICAgICAgICAgPyBmaW5kUGFyZW5JbmRleCh0b2tlbi52YWx1ZSwgdW5kZWZpbmVkLCB0b2tlbnMpIFxyXG4gICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5maWx0ZXIoKHQpID0+IHQgIT09IG51bGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVuSW5kZXgoaWQsaW5kZXgsdG9rZW5zKXtcclxuICAgIGlkPWlkP2lkOnRva2Vuc1tpbmRleF0udmFsdWU7XHJcblxyXG4gICAgY29uc3Qgb3BlbkluZGV4PXRva2Vucy5maW5kSW5kZXgoXHJcbiAgICAgICAgdG9rZW49Pm9wZW4uaW5jbHVkZXModG9rZW4ubmFtZSlcclxuICAgICAgICAmJnRva2VuLnZhbHVlPy5jb21wYXJlKGlkKVxyXG4gICAgKVxyXG4gICAgY29uc3QgY2xvc2VJbmRleD10b2tlbnMuZmluZExhc3RJbmRleChcclxuICAgICAgICB0b2tlbj0+Y2xvc2UuaW5jbHVkZXModG9rZW4ubmFtZSlcclxuICAgICAgICAmJnRva2VuLnZhbHVlPy5jb21wYXJlKGlkKVxyXG4gICAgKVxyXG4gICAgcmV0dXJue29wZW46IG9wZW5JbmRleCxjbG9zZTogY2xvc2VJbmRleCxpZDppZH1cclxufSJdfQ==