export class Paren {
    type;
    depth;
    depthID;
    constructor(depth, depthID, type) {
        this.depth = depth;
        this.depthID = depthID;
        this.type = type;
    }
    toString() { this.id = this.depth + "." + this.depthID; }
    compare(Paren) { return this.depth === Paren.depth && this.depthID === Paren.depthID; }
    addDepth(num) { this.depth += num; }
    adddepthID(num) { this.depthID += num; }
}
const open = ['Parentheses_open', 'Curly_brackets_open', 'Square_brackets_open'];
const close = ['Parentheses_close', 'Curly_brackets_close', 'Square_brackets_close'];
export function idParentheses(tokens) {
    let depth = 0;
    const depthCounts = {};
    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (open.includes(token.name)) {
            if (!depthCounts[depth]) {
                depthCounts[depth] = 0;
            }
            const depthID = depthCounts[depth]++;
            token.value = new Paren(depth, depthID, token.value);
            // Increase depth for nested parentheses
            depth++;
            continue;
        }
        if (close.includes(token.name)) {
            // Decrease depth and check for unmatched closing parenthesis
            depth--;
            if (depth < 0) {
                console.error(token.value, tokens);
                throw new Error("Unmatched closing parenthesis detected.");
            }
            // Assign a unique ID to the closing parenthesis
            const depthID = depthCounts[depth] - 1;
            token.value = new Paren(depth, depthID, token.value);
        }
    }
    // Check for unmatched opening parentheses
    if (depth !== 0) {
        console.error(tokens);
        throw new Error(`Unmatched opening parenthesis(es) detected: depth=${depth}`);
    }
}
export function mapBrackets(type, tokens) {
    return tokens
        .map((token, index) => token.name === type
        ? findParenIndex(token.value, undefined, tokens)
        : null)
        .filter((t) => t !== null);
}
export function findModifiedParenIndex(id, index, tokens, depth, depthID, filter) {
    // Initialize `id` as a new instance if not already provided
    id = id
        ? new Paren(id.depth, id.depthID)
        : new Paren(tokens[index].value.depth, tokens[index].value.depthID);
    if (depth !== undefined && depthID !== undefined) {
        id.depth += depth || 0;
        id.depthID += depthID || 0;
    }
    const openIndex = tokens.findIndex(token => {
        if (open.includes(token.name) && token.value?.compare(id)) {
            if (filter && !token.name.startsWith(filter)) {
                id.depth = token.value.depth + (depth || 0);
                id.depthID = token.value.depthID + (depthID || 0);
                return false;
            }
            return true;
        }
        return false;
    });
    const closeIndex = tokens.findLastIndex(token => close.includes(token.name) &&
        token.value?.compare(id));
    return { open: openIndex, close: closeIndex, id };
}
export function findParenIndex(id, index, tokens) {
    id = id ? id : tokens[index].value;
    const openIndex = tokens.findIndex(token => open.includes(token.name)
        && token.value?.compare(id));
    const closeIndex = tokens.findLastIndex(token => close.includes(token.name)
        && token.value?.compare(id));
    return { open: openIndex, close: closeIndex, id: id };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5VdGVuc2lscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy90b2tlblV0ZW5zaWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxLQUFLO0lBQ2QsSUFBSSxDQUFDO0lBQ0wsS0FBSyxDQUFDO0lBQ04sT0FBTyxDQUFDO0lBRVIsWUFBWSxLQUFLLEVBQUMsT0FBTyxFQUFDLElBQUk7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBQyxPQUFPLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUE7SUFDbEIsQ0FBQztJQUNELFFBQVEsS0FBRyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxLQUFLLElBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFHLEtBQUssQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLE9BQU8sS0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQztJQUM3RSxRQUFRLENBQUMsR0FBRyxJQUFFLElBQUksQ0FBQyxLQUFLLElBQUUsR0FBRyxDQUFBLENBQUEsQ0FBQztJQUM5QixVQUFVLENBQUMsR0FBRyxJQUFFLElBQUksQ0FBQyxPQUFPLElBQUUsR0FBRyxDQUFBLENBQUEsQ0FBQztDQUNyQztBQUNELE1BQU0sSUFBSSxHQUFDLENBQUMsa0JBQWtCLEVBQUMscUJBQXFCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM3RSxNQUFNLEtBQUssR0FBQyxDQUFDLG1CQUFtQixFQUFDLHNCQUFzQixFQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFakYsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFNO0lBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNk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LENBQzVCLEtBQUssQ0FBQSxFQUFFLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1dBQzlCLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUM3QixDQUFBO0lBQ0QsTUFBTSxVQUFVLEdBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDakMsS0FBSyxDQUFBLEVBQUUsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7V0FDL0IsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQzdCLENBQUE7SUFDRCxPQUFNLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQTtBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFBhcmVue1xyXG4gICAgdHlwZTtcclxuICAgIGRlcHRoO1xyXG4gICAgZGVwdGhJRDtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoZGVwdGgsZGVwdGhJRCx0eXBlKXtcclxuICAgICAgICB0aGlzLmRlcHRoPWRlcHRoO1xyXG4gICAgICAgIHRoaXMuZGVwdGhJRD1kZXB0aElEO1xyXG4gICAgICAgIHRoaXMudHlwZT10eXBlXHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpe3RoaXMuaWQ9dGhpcy5kZXB0aCArIFwiLlwiICsgdGhpcy5kZXB0aElEfVxyXG4gICAgY29tcGFyZShQYXJlbil7cmV0dXJuIHRoaXMuZGVwdGg9PT1QYXJlbi5kZXB0aCYmdGhpcy5kZXB0aElEPT09UGFyZW4uZGVwdGhJRH1cclxuICAgIGFkZERlcHRoKG51bSl7dGhpcy5kZXB0aCs9bnVtfVxyXG4gICAgYWRkZGVwdGhJRChudW0pe3RoaXMuZGVwdGhJRCs9bnVtfVxyXG59XHJcbmNvbnN0IG9wZW49WydQYXJlbnRoZXNlc19vcGVuJywnQ3VybHlfYnJhY2tldHNfb3BlbicsJ1NxdWFyZV9icmFja2V0c19vcGVuJ107XHJcbmNvbnN0IGNsb3NlPVsnUGFyZW50aGVzZXNfY2xvc2UnLCdDdXJseV9icmFja2V0c19jbG9zZScsJ1NxdWFyZV9icmFja2V0c19jbG9zZSddO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlkUGFyZW50aGVzZXModG9rZW5zKSB7XHJcbiAgICBsZXQgZGVwdGggPSAwO1xyXG4gICAgY29uc3QgZGVwdGhDb3VudHMgPSB7fTtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAob3Blbi5pbmNsdWRlcyh0b2tlbi5uYW1lKSkge1xyXG4gICAgICAgICAgICBpZiAoIWRlcHRoQ291bnRzW2RlcHRoXSkge1xyXG4gICAgICAgICAgICAgICAgZGVwdGhDb3VudHNbZGVwdGhdID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGVwdGhJRCA9IGRlcHRoQ291bnRzW2RlcHRoXSsrO1xyXG4gICAgICAgICAgICB0b2tlbi52YWx1ZSA9IG5ldyBQYXJlbihkZXB0aCwgZGVwdGhJRCx0b2tlbi52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbmNyZWFzZSBkZXB0aCBmb3IgbmVzdGVkIHBhcmVudGhlc2VzXHJcbiAgICAgICAgICAgIGRlcHRoKys7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsb3NlLmluY2x1ZGVzKHRva2VuLm5hbWUpKSB7XHJcbiAgICAgICAgICAgIC8vIERlY3JlYXNlIGRlcHRoIGFuZCBjaGVjayBmb3IgdW5tYXRjaGVkIGNsb3NpbmcgcGFyZW50aGVzaXNcclxuICAgICAgICAgICAgZGVwdGgtLTtcclxuICAgICAgICAgICAgaWYgKGRlcHRoIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcih0b2tlbi52YWx1ZSx0b2tlbnMpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbm1hdGNoZWQgY2xvc2luZyBwYXJlbnRoZXNpcyBkZXRlY3RlZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFzc2lnbiBhIHVuaXF1ZSBJRCB0byB0aGUgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG4gICAgICAgICAgICBjb25zdCBkZXB0aElEID0gZGVwdGhDb3VudHNbZGVwdGhdIC0gMTtcclxuICAgICAgICAgICAgdG9rZW4udmFsdWUgPSBuZXcgUGFyZW4oZGVwdGgsIGRlcHRoSUQsdG9rZW4udmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBmb3IgdW5tYXRjaGVkIG9wZW5pbmcgcGFyZW50aGVzZXNcclxuICAgIGlmIChkZXB0aCAhPT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IodG9rZW5zKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5tYXRjaGVkIG9wZW5pbmcgcGFyZW50aGVzaXMoZXMpIGRldGVjdGVkOiBkZXB0aD0ke2RlcHRofWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFwQnJhY2tldHModHlwZSx0b2tlbnMpe1xyXG4gICAgcmV0dXJuIHRva2Vuc1xyXG4gICAgICAgIC5tYXAoKHRva2VuLCBpbmRleCkgPT4gXHJcbiAgICAgICAgICAgIHRva2VuLm5hbWUgPT09IHR5cGVcclxuICAgICAgICAgICAgICAgID8gZmluZFBhcmVuSW5kZXgodG9rZW4udmFsdWUsIHVuZGVmaW5lZCwgdG9rZW5zKSBcclxuICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgIClcclxuICAgICAgICAuZmlsdGVyKCh0KSA9PiB0ICE9PSBudWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNb2RpZmllZFBhcmVuSW5kZXgoaWQsIGluZGV4LCB0b2tlbnMsIGRlcHRoLCBkZXB0aElELCBmaWx0ZXIpIHtcclxuICAgIC8vIEluaXRpYWxpemUgYGlkYCBhcyBhIG5ldyBpbnN0YW5jZSBpZiBub3QgYWxyZWFkeSBwcm92aWRlZFxyXG4gICAgaWQgPSBpZFxyXG4gICAgICAgID8gbmV3IFBhcmVuKGlkLmRlcHRoLCBpZC5kZXB0aElEKVxyXG4gICAgICAgIDogbmV3IFBhcmVuKHRva2Vuc1tpbmRleF0udmFsdWUuZGVwdGgsIHRva2Vuc1tpbmRleF0udmFsdWUuZGVwdGhJRCk7XHJcblxyXG4gICAgaWYgKGRlcHRoICE9PSB1bmRlZmluZWQgJiYgZGVwdGhJRCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWQuZGVwdGggKz0gZGVwdGggfHwgMDtcclxuICAgICAgICBpZC5kZXB0aElEICs9IGRlcHRoSUQgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcGVuSW5kZXggPSB0b2tlbnMuZmluZEluZGV4KHRva2VuID0+IHtcclxuICAgICAgICBpZiAob3Blbi5pbmNsdWRlcyh0b2tlbi5uYW1lKSAmJiB0b2tlbi52YWx1ZT8uY29tcGFyZShpZCkpIHtcclxuICAgICAgICAgICAgaWYgKGZpbHRlciAmJiAhdG9rZW4ubmFtZS5zdGFydHNXaXRoKGZpbHRlcikpIHtcclxuICAgICAgICAgICAgICAgIGlkLmRlcHRoID0gdG9rZW4udmFsdWUuZGVwdGggKyAoZGVwdGggfHwgMClcclxuICAgICAgICAgICAgICAgIGlkLmRlcHRoSUQ9dG9rZW4udmFsdWUuZGVwdGhJRCArIChkZXB0aElEIHx8IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNsb3NlSW5kZXggPSB0b2tlbnMuZmluZExhc3RJbmRleChcclxuICAgICAgICB0b2tlbiA9PlxyXG4gICAgICAgICAgICBjbG9zZS5pbmNsdWRlcyh0b2tlbi5uYW1lKSAmJlxyXG4gICAgICAgICAgICB0b2tlbi52YWx1ZT8uY29tcGFyZShpZClcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHsgb3Blbjogb3BlbkluZGV4LCBjbG9zZTogY2xvc2VJbmRleCwgaWQgfTtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVuSW5kZXgoaWQsaW5kZXgsdG9rZW5zKXtcclxuICAgIGlkPWlkP2lkOnRva2Vuc1tpbmRleF0udmFsdWU7XHJcblxyXG4gICAgY29uc3Qgb3BlbkluZGV4PXRva2Vucy5maW5kSW5kZXgoXHJcbiAgICAgICAgdG9rZW49Pm9wZW4uaW5jbHVkZXModG9rZW4ubmFtZSlcclxuICAgICAgICAmJnRva2VuLnZhbHVlPy5jb21wYXJlKGlkKVxyXG4gICAgKVxyXG4gICAgY29uc3QgY2xvc2VJbmRleD10b2tlbnMuZmluZExhc3RJbmRleChcclxuICAgICAgICB0b2tlbj0+Y2xvc2UuaW5jbHVkZXModG9rZW4ubmFtZSlcclxuICAgICAgICAmJnRva2VuLnZhbHVlPy5jb21wYXJlKGlkKVxyXG4gICAgKVxyXG4gICAgcmV0dXJue29wZW46IG9wZW5JbmRleCxjbG9zZTogY2xvc2VJbmRleCxpZDppZH1cclxufSJdfQ==