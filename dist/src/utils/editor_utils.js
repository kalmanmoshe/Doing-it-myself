import { Platform } from "obsidian";
import { EditorView } from "@codemirror/view";
export function replaceRange(view, start, end, replacement) {
    view.dispatch({
        changes: { from: start, to: end, insert: replacement }
    });
}
export function getCharacterAtPos(viewOrState, pos) {
    const state = viewOrState instanceof EditorView ? viewOrState.state : viewOrState;
    const doc = state.doc;
    return doc.slice(pos, pos + 1).toString();
}
export function setCursor(view, pos) {
    view.dispatch({
        selection: { anchor: pos, head: pos }
    });
    resetCursorBlink();
}
export function setSelection(view, start, end) {
    view.dispatch({
        selection: { anchor: start, head: end }
    });
    resetCursorBlink();
}
export function resetCursorBlink() {
    if (Platform.isMobile)
        return;
    const cursorLayer = document.getElementsByClassName("cm-cursorLayer")[0];
    if (cursorLayer) {
        const curAnim = cursorLayer.style.animationName;
        cursorLayer.style.animationName = curAnim === "cm-blink" ? "cm-blink2" : "cm-blink";
    }
}
export function reverse(s) {
    return s.split("").reverse().join("");
}
export function findMatchingBracket(text, start, openBracket, closeBracket, searchBackwards, end) {
    if (searchBackwards) {
        const reversedIndex = findMatchingBracket(reverse(text), text.length - (start + closeBracket.length), reverse(closeBracket), reverse(openBracket), false);
        if (reversedIndex === -1)
            return -1;
        return text.length - (reversedIndex + openBracket.length);
    }
    let brackets = 0;
    const stop = end ? end : text.length;
    for (let i = start; i < stop; i++) {
        if (text.slice(i, i + openBracket.length) === openBracket) {
            brackets++;
        }
        else if (text.slice(i, i + closeBracket.length) === closeBracket) {
            brackets--;
            if (brackets === 0) {
                return i;
            }
        }
    }
    return -1;
}
export function getOpenBracket(closeBracket) {
    const openBrackets = { ")": "(", "]": "[", "}": "{" };
    return openBrackets[closeBracket];
}
export function getCloseBracket(openBracket) {
    const closeBrackets = { "(": ")", "[": "]", "{": "}" };
    return closeBrackets[openBracket];
}
export var Direction;
(function (Direction) {
    Direction[Direction["Backward"] = -1] = "Backward";
    Direction[Direction["Forward"] = 1] = "Forward";
})(Direction || (Direction = {}));
/**
  * Searches for a token in siblings and parents, in only one direction.
  *
  * @param cursor: Where to start iteration
  * @param dir: In which direction to look for the target node
  * @param target: What substring the target node should have
  *
  * @returns The node found or null if none was found.
  */
export function escalateToToken(cursor, dir, target) {
    // Allow the starting node to be a match
    if (cursor.name.contains(target)) {
        return cursor.node;
    }
    while ((cursor.name != "Document") &&
        ((dir == Direction.Backward && cursor.prev())
            || (dir == Direction.Forward && cursor.next())
            || cursor.parent())) {
        if (cursor.name.contains(target)) {
            return cursor.node;
        }
    }
    return null;
}
/**
 * Check if the user is typing in an IME composition.
 * Returns true even if the given event is the first keydown event of an IME composition.
 */
export function isComposing(view, event) {
    // view.composing and event.isComposing are false for the first keydown event of an IME composition,
    // so we need to check for event.keyCode === 229 to prevent IME from triggering keydown events.
    // Note that keyCode is deprecated - it is used here because it is apparently the only way to detect the first keydown event of an IME composition.
    return view.composing || event.keyCode === 229;
}
export const findLine = (state, pos, dir, regex) => {
    const { doc } = state;
    for (let i = pos + dir; i > 0 && i <= doc.lines; i += dir) {
        const line = doc.line(i).text.trim();
        if (line.match(regex))
            return doc.line(i);
    }
    return null;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2VkaXRvcl91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUk5QyxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQWdCLEVBQUUsS0FBYSxFQUFFLEdBQVcsRUFBRSxXQUFtQjtJQUM3RixJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2IsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUM7S0FDcEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxXQUFxQyxFQUFFLEdBQVc7SUFDbkYsTUFBTSxLQUFLLEdBQUcsV0FBVyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ2xGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdEIsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsQ0FBQztBQUdELE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBZ0IsRUFBRSxHQUFXO0lBQ3RELElBQUksQ0FBQyxRQUFRLENBQUM7UUFDYixTQUFTLEVBQUUsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUM7S0FDbkMsQ0FBQyxDQUFDO0lBRUgsZ0JBQWdCLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBR0QsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFnQixFQUFFLEtBQWEsRUFBRSxHQUFXO0lB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S0FBSyxHQUFHLENBQUM7QUFDaEQsQ0FBQztBQUdELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQWtCLEVBQUUsR0FBVyxFQUFDLEdBQWMsRUFBRSxLQUFhLEVBQUUsRUFBRTtJQUN6RixNQUFNLEVBQUMsR0FBRyxFQUFDLEdBQUMsS0FBSyxDQUFBO0lBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUM1RCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IFN5bnRheE5vZGUsIFRyZWVDdXJzb3IgfSBmcm9tIFwiQGxlemVyL2NvbW1vblwiO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VSYW5nZSh2aWV3OiBFZGl0b3JWaWV3LCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgcmVwbGFjZW1lbnQ6IHN0cmluZykge1xuXHR2aWV3LmRpc3BhdGNoKHtcblx0XHRjaGFuZ2VzOiB7ZnJvbTogc3RhcnQsIHRvOiBlbmQsIGluc2VydDogcmVwbGFjZW1lbnR9XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyQXRQb3Modmlld09yU3RhdGU6IEVkaXRvclZpZXcgfCBFZGl0b3JTdGF0ZSwgcG9zOiBudW1iZXIpIHtcblx0Y29uc3Qgc3RhdGUgPSB2aWV3T3JTdGF0ZSBpbnN0YW5jZW9mIEVkaXRvclZpZXcgPyB2aWV3T3JTdGF0ZS5zdGF0ZSA6IHZpZXdPclN0YXRlO1xuXHRjb25zdCBkb2MgPSBzdGF0ZS5kb2M7XG5cdHJldHVybiBkb2Muc2xpY2UocG9zLCBwb3MrMSkudG9TdHJpbmcoKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3Vyc29yKHZpZXc6IEVkaXRvclZpZXcsIHBvczogbnVtYmVyKSB7XG5cdHZpZXcuZGlzcGF0Y2goe1xuXHRcdHNlbGVjdGlvbjoge2FuY2hvcjogcG9zLCBoZWFkOiBwb3N9XG5cdH0pO1xuXG5cdHJlc2V0Q3Vyc29yQmxpbmsoKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2VsZWN0aW9uKHZpZXc6IEVkaXRvclZpZXcsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG5cdHZpZXcuZGlzcGF0Y2goe1xuXHRcdHNlbGVjdGlvbjoge2FuY2hvcjogc3RhcnQsIGhlYWQ6IGVuZH1cblx0fSk7XG5cblx0cmVzZXRDdXJzb3JCbGluaygpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEN1cnNvckJsaW5rKCkge1xuXHRpZiAoUGxhdGZvcm0uaXNNb2JpbGUpIHJldHVybjtcblxuXHRjb25zdCBjdXJzb3JMYXllciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjbS1jdXJzb3JMYXllclwiKVswXSBhcyBIVE1MRWxlbWVudDtcblxuXHRpZiAoY3Vyc29yTGF5ZXIpIHtcblx0XHRjb25zdCBjdXJBbmltID0gY3Vyc29yTGF5ZXIuc3R5bGUuYW5pbWF0aW9uTmFtZTtcblx0XHRjdXJzb3JMYXllci5zdHlsZS5hbmltYXRpb25OYW1lID0gY3VyQW5pbSA9PT0gXCJjbS1ibGlua1wiID8gXCJjbS1ibGluazJcIiA6IFwiY20tYmxpbmtcIjtcblx0fVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlKHM6IHN0cmluZyl7XG5cdHJldHVybiBzLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdCcmFja2V0KHRleHQ6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgb3BlbkJyYWNrZXQ6IHN0cmluZywgY2xvc2VCcmFja2V0OiBzdHJpbmcsIHNlYXJjaEJhY2t3YXJkczogYm9vbGVhbiwgZW5kPzogbnVtYmVyKTpudW1iZXIge1xuXHRpZiAoc2VhcmNoQmFja3dhcmRzKSB7XG5cdFx0Y29uc3QgcmV2ZXJzZWRJbmRleCA9IGZpbmRNYXRjaGluZ0JyYWNrZXQocmV2ZXJzZSh0ZXh0KSwgdGV4dC5sZW5ndGggLSAoc3RhcnQgKyBjbG9zZUJyYWNrZXQubGVuZ3RoKSwgcmV2ZXJzZShjbG9zZUJyYWNrZXQpLCByZXZlcnNlKG9wZW5CcmFja2V0KSwgZmFsc2UpO1xuXG5cdFx0aWYgKHJldmVyc2VkSW5kZXggPT09IC0xKSByZXR1cm4gLTE7XG5cblx0XHRyZXR1cm4gdGV4dC5sZW5ndGggLSAocmV2ZXJzZWRJbmRleCArIG9wZW5CcmFja2V0Lmxlbmd0aClcblx0fVxuXG5cdGxldCBicmFja2V0cyA9IDA7XG5cdGNvbnN0IHN0b3AgPSBlbmQgPyBlbmQgOiB0ZXh0Lmxlbmd0aDtcblxuXHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdG9wOyBpKyspIHtcblx0XHRpZiAodGV4dC5zbGljZShpLCBpICsgb3BlbkJyYWNrZXQubGVuZ3RoKSA9PT0gb3BlbkJyYWNrZXQpIHtcblx0XHRcdGJyYWNrZXRzKys7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHRleHQuc2xpY2UoaSwgaSArIGNsb3NlQnJhY2tldC5sZW5ndGgpID09PSBjbG9zZUJyYWNrZXQpIHtcblx0XHRcdGJyYWNrZXRzLS07XG5cblx0XHRcdGlmIChicmFja2V0cyA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gLTE7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZW5CcmFja2V0KGNsb3NlQnJhY2tldDogc3RyaW5nKSB7XG5cdGNvbnN0IG9wZW5CcmFja2V0czp7W2Nsb3NlQnJhY2tldDogc3RyaW5nXTogc3RyaW5nfSA9IHtcIilcIjogXCIoXCIsIFwiXVwiOiBcIltcIiwgXCJ9XCI6IFwie1wifTtcblxuXHRyZXR1cm4gb3BlbkJyYWNrZXRzW2Nsb3NlQnJhY2tldF07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3NlQnJhY2tldChvcGVuQnJhY2tldDogc3RyaW5nKSB7XG5cdGNvbnN0IGNsb3NlQnJhY2tldHM6e1tvcGVuQnJhY2tldDogc3RyaW5nXTogc3RyaW5nfSA9IHtcIihcIjogXCIpXCIsIFwiW1wiOiBcIl1cIiwgXCJ7XCI6IFwifVwifTtcblxuXHRyZXR1cm4gY2xvc2VCcmFja2V0c1tvcGVuQnJhY2tldF07XG59XG5cblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcblx0QmFja3dhcmQ9LTEsXG5cdEZvcndhcmQ9MSxcbn1cblxuLyoqXG4gICogU2VhcmNoZXMgZm9yIGEgdG9rZW4gaW4gc2libGluZ3MgYW5kIHBhcmVudHMsIGluIG9ubHkgb25lIGRpcmVjdGlvbi5cbiAgKlxuICAqIEBwYXJhbSBjdXJzb3I6IFdoZXJlIHRvIHN0YXJ0IGl0ZXJhdGlvblxuICAqIEBwYXJhbSBkaXI6IEluIHdoaWNoIGRpcmVjdGlvbiB0byBsb29rIGZvciB0aGUgdGFyZ2V0IG5vZGVcbiAgKiBAcGFyYW0gdGFyZ2V0OiBXaGF0IHN1YnN0cmluZyB0aGUgdGFyZ2V0IG5vZGUgc2hvdWxkIGhhdmVcbiAgKlxuICAqIEByZXR1cm5zIFRoZSBub2RlIGZvdW5kIG9yIG51bGwgaWYgbm9uZSB3YXMgZm91bmQuXG4gICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYWxhdGVUb1Rva2VuKGN1cnNvcjogVHJlZUN1cnNvciwgZGlyOiBEaXJlY3Rpb24sIHRhcmdldDogc3RyaW5nKTogU3ludGF4Tm9kZSB8IG51bGwge1xuXHQvLyBBbGxvdyB0aGUgc3RhcnRpbmcgbm9kZSB0byBiZSBhIG1hdGNoXG5cdGlmIChjdXJzb3IubmFtZS5jb250YWlucyh0YXJnZXQpKSB7XG5cdFx0cmV0dXJuIGN1cnNvci5ub2RlO1xuXHR9XG5cblx0d2hpbGUgKFxuXHRcdChjdXJzb3IubmFtZSAhPSBcIkRvY3VtZW50XCIpICYmXG5cdFx0KChkaXIgPT0gRGlyZWN0aW9uLkJhY2t3YXJkICYmIGN1cnNvci5wcmV2KCkpXG5cdFx0fHwgKGRpciA9PSBEaXJlY3Rpb24uRm9yd2FyZCAmJiBjdXJzb3IubmV4dCgpKVxuXHRcdHx8IGN1cnNvci5wYXJlbnQoKSlcblx0KSB7XG5cdFx0aWYgKGN1cnNvci5uYW1lLmNvbnRhaW5zKHRhcmdldCkpIHtcblx0XHRcdHJldHVybiBjdXJzb3Iubm9kZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHR5cGluZyBpbiBhbiBJTUUgY29tcG9zaXRpb24uXG4gKiBSZXR1cm5zIHRydWUgZXZlbiBpZiB0aGUgZ2l2ZW4gZXZlbnQgaXMgdGhlIGZpcnN0IGtleWRvd24gZXZlbnQgb2YgYW4gSU1FIGNvbXBvc2l0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb3NpbmcodmlldzogRWRpdG9yVmlldywgZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcblx0Ly8gdmlldy5jb21wb3NpbmcgYW5kIGV2ZW50LmlzQ29tcG9zaW5nIGFyZSBmYWxzZSBmb3IgdGhlIGZpcnN0IGtleWRvd24gZXZlbnQgb2YgYW4gSU1FIGNvbXBvc2l0aW9uLFxuXHQvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBldmVudC5rZXlDb2RlID09PSAyMjkgdG8gcHJldmVudCBJTUUgZnJvbSB0cmlnZ2VyaW5nIGtleWRvd24gZXZlbnRzLlxuXHQvLyBOb3RlIHRoYXQga2V5Q29kZSBpcyBkZXByZWNhdGVkIC0gaXQgaXMgdXNlZCBoZXJlIGJlY2F1c2UgaXQgaXMgYXBwYXJlbnRseSB0aGUgb25seSB3YXkgdG8gZGV0ZWN0IHRoZSBmaXJzdCBrZXlkb3duIGV2ZW50IG9mIGFuIElNRSBjb21wb3NpdGlvbi5cblx0cmV0dXJuIHZpZXcuY29tcG9zaW5nIHx8IGV2ZW50LmtleUNvZGUgPT09IDIyOTtcbn1cblxuXG5leHBvcnQgY29uc3QgZmluZExpbmUgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBwb3M6IG51bWJlcixkaXI6IERpcmVjdGlvbiwgcmVnZXg6IFJlZ0V4cCkgPT4ge1xuXHRjb25zdCB7ZG9jfT1zdGF0ZVxuXHRmb3IgKGxldCBpID0gcG9zICsgZGlyOyBpID4gMCAmJiBpIDw9IGRvYy5saW5lczsgaSArPSBkaXIpIHtcblx0Y29uc3QgbGluZSA9IGRvYy5saW5lKGkpLnRleHQudHJpbSgpO1xuXHRpZiAobGluZS5tYXRjaChyZWdleCkpIHJldHVybiBkb2MubGluZShpKTtcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn07Il19