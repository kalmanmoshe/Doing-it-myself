import { Platform } from "obsidian";
import { EditorView } from "@codemirror/view";
export function replaceRange(view, start, end, replacement) {
    view.dispatch({
        changes: { from: start, to: end, insert: replacement }
    });
}
export function getCharacterAtPos(viewOrState, pos) {
    const state = viewOrState instanceof EditorView ? viewOrState.state : viewOrState;
    const doc = state.doc;
    return doc.slice(pos, pos + 1).toString();
}
export function setCursor(view, pos) {
    view.dispatch({
        selection: { anchor: pos, head: pos }
    });
    resetCursorBlink();
}
export function setSelection(view, start, end) {
    view.dispatch({
        selection: { anchor: start, head: end }
    });
    resetCursorBlink();
}
export function resetCursorBlink() {
    if (Platform.isMobile)
        return;
    const cursorLayer = document.getElementsByClassName("cm-cursorLayer")[0];
    if (cursorLayer) {
        const curAnim = cursorLayer.style.animationName;
        cursorLayer.style.animationName = curAnim === "cm-blink" ? "cm-blink2" : "cm-blink";
    }
}
export function reverse(s) {
    return s.split("").reverse().join("");
}
export function findMatchingBracket(text, start, openBracket, closeBracket, searchBackwards, end) {
    if (searchBackwards) {
        const reversedIndex = findMatchingBracket(reverse(text), text.length - (start + closeBracket.length), reverse(closeBracket), reverse(openBracket), false);
        if (reversedIndex === -1)
            return -1;
        return text.length - (reversedIndex + openBracket.length);
    }
    let brackets = 0;
    const stop = end ? end : text.length;
    for (let i = start; i < stop; i++) {
        if (text.slice(i, i + openBracket.length) === openBracket) {
            brackets++;
        }
        else if (text.slice(i, i + closeBracket.length) === closeBracket) {
            brackets--;
            if (brackets === 0) {
                return i;
            }
        }
    }
    return -1;
}
export function getOpenBracket(closeBracket) {
    const openBrackets = { ")": "(", "]": "[", "}": "{" };
    return openBrackets[closeBracket];
}
export function getCloseBracket(openBracket) {
    const closeBrackets = { "(": ")", "[": "]", "{": "}" };
    return closeBrackets[openBracket];
}
export var Direction;
(function (Direction) {
    Direction[Direction["Backward"] = 0] = "Backward";
    Direction[Direction["Forward"] = 1] = "Forward";
})(Direction || (Direction = {}));
/**
  * Searches for a token in siblings and parents, in only one direction.
  *
  * @param cursor: Where to start iteration
  * @param dir: In which direction to look for the target node
  * @param target: What substring the target node should have
  *
  * @returns The node found or null if none was found.
  */
export function escalateToToken(cursor, dir, target) {
    // Allow the starting node to be a match
    if (cursor.name.contains(target)) {
        return cursor.node;
    }
    while ((cursor.name != "Document") &&
        ((dir == Direction.Backward && cursor.prev())
            || (dir == Direction.Forward && cursor.next())
            || cursor.parent())) {
        console.log(cursor.name, target);
        if (cursor.name.contains(target)) {
            return cursor.node;
        }
    }
    return null;
}
/**
 * Check if the user is typing in an IME composition.
 * Returns true even if the given event is the first keydown event of an IME composition.
 */
export function isComposing(view, event) {
    // view.composing and event.isComposing are false for the first keydown event of an IME composition,
    // so we need to check for event.keyCode === 229 to prevent IME from triggering keydown events.
    // Note that keyCode is deprecated - it is used here because it is apparently the only way to detect the first keydown event of an IME composition.
    return view.composing || event.keyCode === 229;
}
//# sourceMappingURL=data:application/json;base64,