export const keyboardAutoReplaceHebrewToEnglishTriggers = [
    { key: "\u05D0", code: "KeyT", replacement: "t" },
    { key: "\u05D1", code: "KeyC", replacement: "c" },
    { key: "\u05D2", code: "KeyD", replacement: "d" },
    { key: "\u05D3", code: "KeyS", replacement: "s" },
    { key: "\u05D4", code: "KeyV", replacement: "v" },
    { key: "\u05D5", code: "KeyU", replacement: "u" },
    { key: "\u05D6", code: "KeyZ", replacement: "z" },
    { key: "\u05D7", code: "KeyJ", replacement: "j" },
    { key: "\u05D8", code: "KeyY", replacement: "y" },
    { key: "ך", code: "KeyL", replacement: "l" },
    { key: "\u05D9", code: "KeyH", replacement: "h" },
    { key: "\u05DB", code: "KeyF", replacement: "f" },
    { key: "\u05DC", code: "KeyK", replacement: "k" },
    { key: "\u05DE", code: "KeyN", replacement: "n" },
    { key: "\u05DD", code: "KeyO", replacement: "o" },
    { key: "\u05E0", code: "KeyB", replacement: "b" },
    { key: "\u05DF", code: "KeyI", replacement: "i" },
    { key: "\u05E1", code: "KeyX", replacement: "x" },
    { key: "\u05E2", code: "KeyG", replacement: "g" },
    { key: "\u05E4", code: "KeyP", replacement: "p" },
    { key: "\u05E6", code: "KeyM", replacement: "m" },
    { key: "\u05E8", code: "KeyR", replacement: "r" },
    { key: "\u05E7", code: "KeyE", replacement: "e" },
    { key: "\u05E9", code: "KeyA", replacement: "a" },
    { key: "\u05EA", code: "KeyC", replacement: "c" },
    { key: "ת", code: "Comma", replacement: "," },
    { key: "'", code: "KeyW", replacement: "w" },
    { key: "\u05E5", code: "Period", replacement: "." },
    { key: ".", code: "Slash", replacement: "/" },
    { key: "]", code: "BracketLeft", replacement: "[" },
    { key: "[", code: "BracketRight", replacement: "]" },
    { key: "}", code: "BracketLeft", replacement: "{" },
    { key: "{", code: "BracketRight", replacement: "}" },
    { key: ")", code: "Digit9", replacement: "(" },
    { key: "(", code: "Digit0", replacement: ")" },
    { key: ">", code: "Comma", replacement: "<" },
    { key: "<", code: "Period", replacement: ">" }
];
export const tikzSyntax = [
    { type: 'Syntax', name: 'Equals', references: ['='] },
    { type: 'Syntax', name: 'Comma', references: [','] },
    { type: 'Syntax', name: 'Hashtag', references: ['#'] },
    { type: 'Syntax', name: 'Colon', references: [':'] },
    { type: 'Syntax', name: 'Semicolon', references: [';'] },
    { type: 'Syntax', name: 'Dash', references: ['-'] },
    { type: 'Syntax', name: 'Plus', references: ['+'] }
];
export const tikzMacros = [
    { type: 'Macro', name: 'Definition', references: ['\\def'] },
];
export const tikzFormatting = [
    { type: 'Formatting', name: 'LineWidth', references: ['line width'] },
    { type: 'Formatting', name: 'Label', references: ['label'] },
    { type: 'Formatting', name: 'Large', references: ['\\Large'] },
    { type: 'Formatting', name: 'Color', value: 'red', references: ['red'] },
    { type: 'Formatting', name: 'Opacity', references: ['opacity'] }
];
export const tikzUnits = [
    { type: 'Unit', name: 'Point', references: ['pt'] },
    { type: 'Unit', name: 'Centimeter', references: ['cm'] }
];
export const tikzPathAndNodes = [
    { type: 'Path', name: 'Draw', references: ['\\draw'] },
    { type: 'Node', name: 'Coordinate', references: ['\\coordinate'] }
];
export const tikzPathConnectors = [
    { type: 'PathConnector', name: 'ReferenceLastAxis', latex: '--++', references: ['--++'] },
    { type: 'PathConnector', name: 'ReferenceFirstAxis', latex: '--+', references: ['--+'] },
    { type: 'PathConnector', name: 'AxisConnector', latex: '--', references: ['--'] }
];
export const brackets = [
    { type: 'Bracket', name: "Parentheses_open", references: ["("], },
    { type: 'Bracket', name: "Parentheses_close", references: [")"], },
    { type: 'Bracket', name: "Curly_brackets_open", references: ["{"], },
    { type: 'Bracket', name: "Curly_brackets_close", references: ["}"], },
    { type: 'Bracket', name: "Square_brackets_open", references: ["["], },
    { type: 'Bracket', name: "Square_brackets_close", references: ["]"], },
    { type: 'Bracket', name: "Angle Brackets_open", references: ["<"], },
    { type: 'Bracket', name: "Angle Brackets_close", references: [">"], }
];
export const tikzComponents = [
    ...tikzSyntax, ...tikzFormatting, ...tikzUnits, ...tikzPathAndNodes, ...tikzPathConnectors, ...tikzMacros, ...brackets
];
export const units = [
    {
        references: ['pt', 'cm', ',', ';', '-'],
    },
];
export const operatorsWithImplicitMultiplication = [
    'Radical', 'Integral', 'Trigonometric', 'Logarithmic', 'Fraction', 'Radical'
];
//'Radical', 'Integral', 'Trigonometric', 'Logarithmic', 'Exponential'
export const mathJaxOperators = [
    /* Comparison */
    {
        type: 'Comparison',
        name: 'Equals',
        latex: '=',
        references: ['='],
        priority: 6,
        associativity: 'both',
        bracket: 'none',
    },
    {
        type: 'Comparison',
        name: 'Less Than',
        latex: '<',
        references: ['<'],
        priority: 6,
        associativity: 'both',
        bracket: 'none',
    },
    {
        type: 'Comparison',
        name: 'Greater Than',
        latex: '>',
        references: ['>'],
        priority: 6,
        associativity: 'both',
        bracket: 'none',
    },
    /* Arithmetic */
    {
        type: 'Arithmetic',
        name: 'Plus',
        latex: '+',
        references: ['+'],
        priority: 4,
        associativity: 'both',
        bracket: 'none',
    },
    {
        type: 'Arithmetic',
        name: 'Minus',
        latex: '-',
        references: ['-'],
        priority: 4,
        associativity: 'both',
        bracket: 'none',
    },
    {
        type: 'Arithmetic',
        name: 'Multiplication',
        latex: '\\cdot',
        references: ['\\cdot', 'cdot', '*',],
        priority: 3,
        associativity: 'both',
        bracket: 'none',
    },
    {
        type: 'Arithmetic',
        name: 'Division',
        latex: '\\div',
        references: ['\\div', '/'],
        priority: 3,
        associativity: 'both',
        bracket: 'none',
    },
    /* Trigonometric */
    {
        type: 'Trigonometric',
        name: 'Sin',
        latex: '\\sin',
        references: ['sin', '\\sin'],
        priority: 2,
        associativity: 'right',
        bracket: 'none',
    },
    {
        type: 'Trigonometric',
        name: 'Cos',
        latex: '\\cos',
        references: ['cos', '\\cos'],
        priority: 2,
        associativity: 'right',
        bracket: 'none',
    },
    {
        type: 'Trigonometric',
        name: 'Tan',
        latex: '\\tan',
        references: ['tan', '\\tan'],
        priority: 2,
        associativity: 'right',
        bracket: 'none',
    },
    /* Exponential */
    {
        type: 'Exponential',
        name: 'Pow',
        latex: '^',
        references: ['^'],
        priority: 1,
        associativity: 'both',
        bracket: 'right',
    },
    {
        type: 'Exponential',
        name: 'Exponential',
        latex: 'e^',
        references: ['e^', '\\exp'],
        priority: 1,
        associativity: 'right',
        bracket: 'none',
    },
    /* Logarithmic */
    {
        type: 'Logarithmic',
        name: 'Log',
        latex: '\\log',
        references: ['log', '\\log'],
        priority: 2,
        associativity: 'right',
        bracket: 'none',
    },
    {
        type: 'Logarithmic',
        name: 'Natural Logarithm',
        latex: '\\ln',
        references: ['ln', '\\ln'],
        priority: 2,
        associativity: 'right',
        bracket: 'none',
    },
    /* Fraction */
    {
        type: 'Fraction',
        name: 'Fraction',
        latex: '\\frac',
        references: ['\\frac', 'frac'],
        priority: 1,
        associativity: 'doubleRight',
        bracket: 'doubleRight',
    },
    /* Radical */
    {
        type: 'Radical',
        name: 'Square Root',
        latex: '\\sqrt',
        references: ['sqrt', '\\sqrt'],
        priority: 1,
        associativity: 'right',
        bracket: 'right',
    },
    /* Integral */
    {
        type: 'Integral',
        name: 'Integral',
        latex: '\\int',
        references: ['\\int', 'integral'],
        priority: 5,
        associativity: 'right',
        bracket: 'none',
    },
    /* Summation */
    {
        type: 'Summation',
        name: 'Summation',
        latex: '\\sum',
        references: ['\\sum', 'summation'],
        priority: 5,
        associativity: 'right',
        bracket: 'none',
    },
    /* Factorial */
    {
        type: 'Factorial',
        name: 'Factorial',
        latex: '!',
        references: ['!'],
        priority: 1,
        associativity: 'right',
        bracket: 'none',
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljRGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9zdGF0aWNEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFPLDBDQUEwQyxHQUN4RDtJQUNJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDNUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO0lBQ2pELEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDakQsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUNqRCxFQUFFLEdB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Q0FBQztRQUNsQyxRQUFRLEVBQUUsQ0FBQztRQUNYLGFBQWEsRUFBRSxPQUFPO1FBQ3RCLE9BQU8sRUFBRSxNQUFNO0tBQ2xCO0lBQ0QsZUFBZTtJQUNmO1FBQ0ksSUFBSSxFQUFFLFdBQVc7UUFDakIsSUFBSSxFQUFFLFdBQVc7UUFDakIsS0FBSyxFQUFFLEdBQUc7UUFDVixVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFDakIsUUFBUSxFQUFFLENBQUM7UUFDWCxhQUFhLEVBQUUsT0FBTztRQUN0QixPQUFPLEVBQUUsTUFBTTtLQUNsQjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuZXhwb3J0IGNvbnN0ICBrZXlib2FyZEF1dG9SZXBsYWNlSGVicmV3VG9FbmdsaXNoVHJpZ2dlcnMgPVxuW1xuICAgIHsga2V5OiBcIlxcdTA1RDBcIiwgY29kZTogXCJLZXlUXCIsIHJlcGxhY2VtZW50OiBcInRcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDFcIiwgY29kZTogXCJLZXlDXCIsIHJlcGxhY2VtZW50OiBcImNcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDJcIiwgY29kZTogXCJLZXlEXCIsIHJlcGxhY2VtZW50OiBcImRcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDNcIiwgY29kZTogXCJLZXlTXCIsIHJlcGxhY2VtZW50OiBcInNcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDRcIiwgY29kZTogXCJLZXlWXCIsIHJlcGxhY2VtZW50OiBcInZcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDVcIiwgY29kZTogXCJLZXlVXCIsIHJlcGxhY2VtZW50OiBcInVcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDZcIiwgY29kZTogXCJLZXlaXCIsIHJlcGxhY2VtZW50OiBcInpcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDdcIiwgY29kZTogXCJLZXlKXCIsIHJlcGxhY2VtZW50OiBcImpcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RDhcIiwgY29kZTogXCJLZXlZXCIsIHJlcGxhY2VtZW50OiBcInlcIiB9LFxuICAgIHsga2V5OiBcIteaXCIsIGNvZGU6IFwiS2V5TFwiLCByZXBsYWNlbWVudDogXCJsXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUQ5XCIsIGNvZGU6IFwiS2V5SFwiLCByZXBsYWNlbWVudDogXCJoXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNURCXCIsIGNvZGU6IFwiS2V5RlwiLCByZXBsYWNlbWVudDogXCJmXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNURDXCIsIGNvZGU6IFwiS2V5S1wiLCByZXBsYWNlbWVudDogXCJrXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNURFXCIsIGNvZGU6IFwiS2V5TlwiLCByZXBsYWNlbWVudDogXCJuXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUREXCIsIGNvZGU6IFwiS2V5T1wiLCByZXBsYWNlbWVudDogXCJvXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUUwXCIsIGNvZGU6IFwiS2V5QlwiLCByZXBsYWNlbWVudDogXCJiXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNURGXCIsIGNvZGU6IFwiS2V5SVwiLCByZXBsYWNlbWVudDogXCJpXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUUxXCIsIGNvZGU6IFwiS2V5WFwiLCByZXBsYWNlbWVudDogXCJ4XCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUUyXCIsIGNvZGU6IFwiS2V5R1wiLCByZXBsYWNlbWVudDogXCJnXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU0XCIsIGNvZGU6IFwiS2V5UFwiLCByZXBsYWNlbWVudDogXCJwXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU2XCIsIGNvZGU6IFwiS2V5TVwiLCByZXBsYWNlbWVudDogXCJtXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU4XCIsIGNvZGU6IFwiS2V5UlwiLCByZXBsYWNlbWVudDogXCJyXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU3XCIsIGNvZGU6IFwiS2V5RVwiLCByZXBsYWNlbWVudDogXCJlXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUU5XCIsIGNvZGU6IFwiS2V5QVwiLCByZXBsYWNlbWVudDogXCJhXCIgfSxcbiAgICB7IGtleTogXCJcXHUwNUVBXCIsIGNvZGU6IFwiS2V5Q1wiLCByZXBsYWNlbWVudDogXCJjXCIgfSxcbiAgICB7IGtleTogXCLXqlwiLCBjb2RlOiBcIkNvbW1hXCIsIHJlcGxhY2VtZW50OiBcIixcIiB9LFxuICAgIHsga2V5OiBcIidcIiwgY29kZTogXCJLZXlXXCIsIHJlcGxhY2VtZW50OiBcIndcIiB9LFxuICAgIHsga2V5OiBcIlxcdTA1RTVcIiwgY29kZTogXCJQZXJpb2RcIiwgcmVwbGFjZW1lbnQ6IFwiLlwiIH0sXG4gICAgeyBrZXk6IFwiLlwiLCBjb2RlOiBcIlNsYXNoXCIsIHJlcGxhY2VtZW50OiBcIi9cIiB9LFxuICAgIHsga2V5OiBcIl1cIiwgY29kZTogXCJCcmFja2V0TGVmdFwiLCByZXBsYWNlbWVudDogXCJbXCIgfSxcbiAgICB7IGtleTogXCJbXCIsIGNvZGU6IFwiQnJhY2tldFJpZ2h0XCIsIHJlcGxhY2VtZW50OiBcIl1cIiB9LFxuICAgIHsga2V5OiBcIn1cIiwgY29kZTogXCJCcmFja2V0TGVmdFwiLCByZXBsYWNlbWVudDogXCJ7XCIgfSxcbiAgICB7IGtleTogXCJ7XCIsIGNvZGU6IFwiQnJhY2tldFJpZ2h0XCIsIHJlcGxhY2VtZW50OiBcIn1cIiB9LFxuICAgIHsga2V5OiBcIilcIiwgY29kZTogXCJEaWdpdDlcIiwgcmVwbGFjZW1lbnQ6IFwiKFwiIH0sXG4gICAgeyBrZXk6IFwiKFwiLCBjb2RlOiBcIkRpZ2l0MFwiLCByZXBsYWNlbWVudDogXCIpXCIgfSxcbiAgICB7IGtleTogXCI+XCIsIGNvZGU6IFwiQ29tbWFcIiwgcmVwbGFjZW1lbnQ6IFwiPFwiIH0sXG4gICAgeyBrZXk6IFwiPFwiLCBjb2RlOiBcIlBlcmlvZFwiLCByZXBsYWNlbWVudDogXCI+XCIgfVxuXTtcblxuXG5cblxuZXhwb3J0IGNvbnN0IHRpa3pTeW50YXggPSBbXG4gICAgeyB0eXBlOiAnU3ludGF4JywgbmFtZTogJ0VxdWFscycsIHJlZmVyZW5jZXM6IFsnPSddIH0sXG4gICAgeyB0eXBlOiAnU3ludGF4JywgbmFtZTogJ0NvbW1hJywgcmVmZXJlbmNlczogWycsJ10gfSxcbiAgICB7IHR5cGU6ICdTeW50YXgnLCBuYW1lOiAnSGFzaHRhZycsIHJlZmVyZW5jZXM6IFsnIyddIH0sXG4gICAgeyB0eXBlOiAnU3ludGF4JywgbmFtZTogJ0NvbG9uJywgcmVmZXJlbmNlczogWyc6J10gfSxcbiAgICB7IHR5cGU6ICdTeW50YXgnLCBuYW1lOiAnU2VtaWNvbG9uJywgcmVmZXJlbmNlczogWyc7J10gfSxcbiAgICB7IHR5cGU6ICdTeW50YXgnLCBuYW1lOiAnRGFzaCcsIHJlZmVyZW5jZXM6IFsnLSddIH0sXG4gICAgeyB0eXBlOiAnU3ludGF4JywgbmFtZTogJ1BsdXMnLCByZWZlcmVuY2VzOiBbJysnXSB9XG4gIF07XG5leHBvcnQgY29uc3QgdGlrek1hY3Jvcz1bXG4gICAgeyB0eXBlOiAnTWFjcm8nLCBuYW1lOiAnRGVmaW5pdGlvbicsIHJlZmVyZW5jZXM6IFsnXFxcXGRlZiddIH0sXG5dXG5leHBvcnQgY29uc3QgdGlrekZvcm1hdHRpbmcgPSBbXG4gICAgeyB0eXBlOiAnRm9ybWF0dGluZycsIG5hbWU6ICdMaW5lV2lkdGgnLCByZWZlcmVuY2VzOiBbJ2xpbmUgd2lkdGgnXSB9LFxuICAgIHsgdHlwZTogJ0Zvcm1hdHRpbmcnLCBuYW1lOiAnTGFiZWwnLCByZWZlcmVuY2VzOiBbJ2xhYmVsJ10gfSxcbiAgICB7IHR5cGU6ICdGb3JtYXR0aW5nJywgbmFtZTogJ0xhcmdlJywgcmVmZXJlbmNlczogWydcXFxcTGFyZ2UnXSB9LFxuICAgIHsgdHlwZTogJ0Zvcm1hdHRpbmcnLCBuYW1lOiAnQ29sb3InLCB2YWx1ZTogJ3JlZCcsIHJlZmVyZW5jZXM6IFsncmVkJ10gfSxcbiAgICB7IHR5cGU6ICdGb3JtYXR0aW5nJywgbmFtZTogJ09wYWNpdHknLCByZWZlcmVuY2VzOiBbJ29wYWNpdHknXSB9XG4gIF07XG4gIFxuZXhwb3J0IGNvbnN0IHRpa3pVbml0cyA9IFtcbiAgICB7IHR5cGU6ICdVbml0JywgbmFtZTogJ1BvaW50JywgcmVmZXJlbmNlczogWydwdCddIH0sXG4gICAgeyB0eXBlOiAnVW5pdCcsIG5hbWU6ICdDZW50aW1ldGVyJywgcmVmZXJlbmNlczogWydjbSddIH1cbiAgXTtcbiAgXG5leHBvcnQgY29uc3QgdGlrelBhdGhBbmROb2RlcyA9IFtcbiAgICB7IHR5cGU6ICdQYXRoJywgbmFtZTogJ0RyYXcnLCByZWZlcmVuY2VzOiBbJ1xcXFxkcmF3J10gfSxcbiAgICB7IHR5cGU6ICdOb2RlJywgbmFtZTogJ0Nvb3JkaW5hdGUnLCByZWZlcmVuY2VzOiBbJ1xcXFxjb29yZGluYXRlJ10gfVxuICBdO1xuICBcbmV4cG9ydCBjb25zdCB0aWt6UGF0aENvbm5lY3RvcnMgPSBbXG4gICAgeyB0eXBlOiAnUGF0aENvbm5lY3RvcicsIG5hbWU6ICdSZWZlcmVuY2VMYXN0QXhpcycsIGxhdGV4OiAnLS0rKycsIHJlZmVyZW5jZXM6IFsnLS0rKyddIH0sXG4gICAgeyB0eXBlOiAnUGF0aENvbm5lY3RvcicsIG5hbWU6ICdSZWZlcmVuY2VGaXJzdEF4aXMnLCBsYXRleDogJy0tKycsIHJlZmVyZW5jZXM6IFsnLS0rJ10gfSxcbiAgICB7IHR5cGU6ICdQYXRoQ29ubmVjdG9yJywgbmFtZTogJ0F4aXNDb25uZWN0b3InLCBsYXRleDogJy0tJywgcmVmZXJlbmNlczogWyctLSddIH1cbiAgXTtcblxuZXhwb3J0IGNvbnN0IGJyYWNrZXRzID0gW1xuICAgIHsgdHlwZTogJ0JyYWNrZXQnLCBuYW1lOiBcIlBhcmVudGhlc2VzX29wZW5cIiwgcmVmZXJlbmNlczogW1wiKFwiXSx9LFxuICAgIHsgdHlwZTogJ0JyYWNrZXQnLCBuYW1lOiBcIlBhcmVudGhlc2VzX2Nsb3NlXCIsIHJlZmVyZW5jZXM6IFtcIilcIl0sfSxcbiAgICB7IHR5cGU6ICdCcmFja2V0JywgbmFtZTogXCJDdXJseV9icmFja2V0c19vcGVuXCIsIHJlZmVyZW5jZXM6IFtcIntcIl0sfSxcbiAgICB7IHR5cGU6ICdCcmFja2V0JywgbmFtZTogXCJDdXJseV9icmFja2V0c19jbG9zZVwiLCByZWZlcmVuY2VzOiBbXCJ9XCJdLH0sXG4gICAgeyB0eXBlOiAnQnJhY2tldCcsIG5hbWU6IFwiU3F1YXJlX2JyYWNrZXRzX29wZW5cIiwgcmVmZXJlbmNlczogW1wiW1wiXSx9LFxuICAgIHsgdHlwZTogJ0JyYWNrZXQnLCBuYW1lOiBcIlNxdWFyZV9icmFja2V0c19jbG9zZVwiLCByZWZlcmVuY2VzOiBbXCJdXCJdLH0sXG4gICAgeyB0eXBlOiAnQnJhY2tldCcsIG5hbWU6IFwiQW5nbGUgQnJhY2tldHNfb3BlblwiLCByZWZlcmVuY2VzOiBbXCI8XCJdLH0sXG4gICAgeyB0eXBlOiAnQnJhY2tldCcsIG5hbWU6IFwiQW5nbGUgQnJhY2tldHNfY2xvc2VcIiwgcmVmZXJlbmNlczogW1wiPlwiXSx9XG5dO1xuXG5leHBvcnQgY29uc3QgdGlrekNvbXBvbmVudHM9W1xuICAgIC4uLnRpa3pTeW50YXgsLi4udGlrekZvcm1hdHRpbmcsLi4udGlrelVuaXRzLC4uLnRpa3pQYXRoQW5kTm9kZXMsLi4udGlrelBhdGhDb25uZWN0b3JzLC4uLnRpa3pNYWNyb3MsLi4uYnJhY2tldHNcbl1cbiAgXG5leHBvcnQgY29uc3QgdW5pdHM9W1xuICAgIHtcbiAgICAgICAgcmVmZXJlbmNlczogWydwdCcsJ2NtJywnLCcsJzsnLCctJ10sXG4gICAgfSxcbl1cblxuXG5cbiAgXG5cbmV4cG9ydCBjb25zdCBvcGVyYXRvcnNXaXRoSW1wbGljaXRNdWx0aXBsaWNhdGlvbiA9IFtcbiAgICAnUmFkaWNhbCcsICdJbnRlZ3JhbCcsICdUcmlnb25vbWV0cmljJywgJ0xvZ2FyaXRobWljJywnRnJhY3Rpb24nLCdSYWRpY2FsJ1xuXVxuLy8nUmFkaWNhbCcsICdJbnRlZ3JhbCcsICdUcmlnb25vbWV0cmljJywgJ0xvZ2FyaXRobWljJywgJ0V4cG9uZW50aWFsJ1xuXG5leHBvcnQgY29uc3QgbWF0aEpheE9wZXJhdG9ycyA9IFtcbiAgICAvKiBDb21wYXJpc29uICovXG4gICAge1xuICAgICAgICB0eXBlOiAnQ29tcGFyaXNvbicsXG4gICAgICAgIG5hbWU6ICdFcXVhbHMnLCBcbiAgICAgICAgbGF0ZXg6ICc9JyxcbiAgICAgICAgcmVmZXJlbmNlczogWyc9J10sXG4gICAgICAgIHByaW9yaXR5OiA2LCBcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ2JvdGgnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdDb21wYXJpc29uJyxcbiAgICAgICAgbmFtZTogJ0xlc3MgVGhhbicsXG4gICAgICAgIGxhdGV4OiAnPCcsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnPCddLFxuICAgICAgICBwcmlvcml0eTogNixcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ2JvdGgnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdDb21wYXJpc29uJyxcbiAgICAgICAgbmFtZTogJ0dyZWF0ZXIgVGhhbicsXG4gICAgICAgIGxhdGV4OiAnPicsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnPiddLFxuICAgICAgICBwcmlvcml0eTogNixcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ2JvdGgnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICAvKiBBcml0aG1ldGljICovXG4gICAge1xuICAgICAgICB0eXBlOiAnQXJpdGhtZXRpYycsXG4gICAgICAgIG5hbWU6ICdQbHVzJyxcbiAgICAgICAgbGF0ZXg6ICcrJyxcbiAgICAgICAgcmVmZXJlbmNlczogWycrJ10sXG4gICAgICAgIHByaW9yaXR5OiA0LFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAnYm90aCcsXG4gICAgICAgIGJyYWNrZXQ6ICdub25lJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0FyaXRobWV0aWMnLFxuICAgICAgICBuYW1lOiAnTWludXMnLFxuICAgICAgICBsYXRleDogJy0nLFxuICAgICAgICByZWZlcmVuY2VzOiBbJy0nXSxcbiAgICAgICAgcHJpb3JpdHk6IDQsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdib3RoJyxcbiAgICAgICAgYnJhY2tldDogJ25vbmUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnQXJpdGhtZXRpYycsXG4gICAgICAgIG5hbWU6ICdNdWx0aXBsaWNhdGlvbicsXG4gICAgICAgIGxhdGV4OiAnXFxcXGNkb3QnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJ1xcXFxjZG90JywnY2RvdCcsICcqJyxdLFxuICAgICAgICBwcmlvcml0eTogMyxcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ2JvdGgnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdBcml0aG1ldGljJyxcbiAgICAgICAgbmFtZTogJ0RpdmlzaW9uJyxcbiAgICAgICAgbGF0ZXg6ICdcXFxcZGl2JyxcbiAgICAgICAgcmVmZXJlbmNlczogWydcXFxcZGl2JywgJy8nXSxcbiAgICAgICAgcHJpb3JpdHk6IDMsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdib3RoJyxcbiAgICAgICAgYnJhY2tldDogJ25vbmUnLFxuICAgIH0sXG4gICAgLyogVHJpZ29ub21ldHJpYyAqL1xuICAgIHtcbiAgICAgICAgdHlwZTogJ1RyaWdvbm9tZXRyaWMnLFxuICAgICAgICBuYW1lOiAnU2luJyxcbiAgICAgICAgbGF0ZXg6ICdcXFxcc2luJyxcbiAgICAgICAgcmVmZXJlbmNlczogWydzaW4nLCAnXFxcXHNpbiddLFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ3JpZ2h0JyxcbiAgICAgICAgYnJhY2tldDogJ25vbmUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnVHJpZ29ub21ldHJpYycsXG4gICAgICAgIG5hbWU6ICdDb3MnLFxuICAgICAgICBsYXRleDogJ1xcXFxjb3MnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJ2NvcycsICdcXFxcY29zJ10sXG4gICAgICAgIHByaW9yaXR5OiAyLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAncmlnaHQnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdUcmlnb25vbWV0cmljJyxcbiAgICAgICAgbmFtZTogJ1RhbicsXG4gICAgICAgIGxhdGV4OiAnXFxcXHRhbicsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsndGFuJywgJ1xcXFx0YW4nXSxcbiAgICAgICAgcHJpb3JpdHk6IDIsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdyaWdodCcsXG4gICAgICAgIGJyYWNrZXQ6ICdub25lJyxcbiAgICB9LFxuICAgIC8qIEV4cG9uZW50aWFsICovXG4gICAge1xuICAgICAgICB0eXBlOiAnRXhwb25lbnRpYWwnLFxuICAgICAgICBuYW1lOiAnUG93JyxcbiAgICAgICAgbGF0ZXg6ICdeJyxcbiAgICAgICAgcmVmZXJlbmNlczogWydeJ10sXG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAnYm90aCcsXG4gICAgICAgIGJyYWNrZXQ6ICdyaWdodCcsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdFeHBvbmVudGlhbCcsXG4gICAgICAgIG5hbWU6ICdFeHBvbmVudGlhbCcsXG4gICAgICAgIGxhdGV4OiAnZV4nLFxuICAgICAgICByZWZlcmVuY2VzOiBbJ2VeJywgJ1xcXFxleHAnXSxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdyaWdodCcsXG4gICAgICAgIGJyYWNrZXQ6ICdub25lJyxcbiAgICB9LFxuICAgIC8qIExvZ2FyaXRobWljICovXG4gICAge1xuICAgICAgICB0eXBlOiAnTG9nYXJpdGhtaWMnLFxuICAgICAgICBuYW1lOiAnTG9nJyxcbiAgICAgICAgbGF0ZXg6ICdcXFxcbG9nJyxcbiAgICAgICAgcmVmZXJlbmNlczogWydsb2cnLCAnXFxcXGxvZyddLFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ3JpZ2h0JyxcbiAgICAgICAgYnJhY2tldDogJ25vbmUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnTG9nYXJpdGhtaWMnLFxuICAgICAgICBuYW1lOiAnTmF0dXJhbCBMb2dhcml0aG0nLFxuICAgICAgICBsYXRleDogJ1xcXFxsbicsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnbG4nLCAnXFxcXGxuJ10sXG4gICAgICAgIHByaW9yaXR5OiAyLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAncmlnaHQnLFxuICAgICAgICBicmFja2V0OiAnbm9uZScsXG4gICAgfSxcbiAgICAvKiBGcmFjdGlvbiAqL1xuICAgIHtcbiAgICAgICAgdHlwZTogJ0ZyYWN0aW9uJyxcbiAgICAgICAgbmFtZTogJ0ZyYWN0aW9uJyxcbiAgICAgICAgbGF0ZXg6ICdcXFxcZnJhYycsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXGZyYWMnLCdmcmFjJ10sXG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAnZG91YmxlUmlnaHQnLFxuICAgICAgICBicmFja2V0OiAnZG91YmxlUmlnaHQnLFxuICAgIH0sXG4gICAgLyogUmFkaWNhbCAqL1xuICAgIHtcbiAgICAgICAgdHlwZTogJ1JhZGljYWwnLFxuICAgICAgICBuYW1lOiAnU3F1YXJlIFJvb3QnLFxuICAgICAgICBsYXRleDogJ1xcXFxzcXJ0JyxcbiAgICAgICAgcmVmZXJlbmNlczogWydzcXJ0JywgJ1xcXFxzcXJ0J10sXG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBhc3NvY2lhdGl2aXR5OiAncmlnaHQnLFxuICAgICAgICBicmFja2V0OiAncmlnaHQnLFxuICAgIH0sXG4gICAgLyogSW50ZWdyYWwgKi9cbiAgICB7XG4gICAgICAgIHR5cGU6ICdJbnRlZ3JhbCcsXG4gICAgICAgIG5hbWU6ICdJbnRlZ3JhbCcsXG4gICAgICAgIGxhdGV4OiAnXFxcXGludCcsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXGludCcsICdpbnRlZ3JhbCddLFxuICAgICAgICBwcmlvcml0eTogNSxcbiAgICAgICAgYXNzb2NpYXRpdml0eTogJ3JpZ2h0JyxcbiAgICAgICAgYnJhY2tldDogJ25vbmUnLFxuICAgIH0sXG4gICAgLyogU3VtbWF0aW9uICovXG4gICAge1xuICAgICAgICB0eXBlOiAnU3VtbWF0aW9uJyxcbiAgICAgICAgbmFtZTogJ1N1bW1hdGlvbicsXG4gICAgICAgIGxhdGV4OiAnXFxcXHN1bScsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXHN1bScsICdzdW1tYXRpb24nXSxcbiAgICAgICAgcHJpb3JpdHk6IDUsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdyaWdodCcsXG4gICAgICAgIGJyYWNrZXQ6ICdub25lJyxcbiAgICB9LFxuICAgIC8qIEZhY3RvcmlhbCAqL1xuICAgIHtcbiAgICAgICAgdHlwZTogJ0ZhY3RvcmlhbCcsXG4gICAgICAgIG5hbWU6ICdGYWN0b3JpYWwnLFxuICAgICAgICBsYXRleDogJyEnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJyEnXSxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGFzc29jaWF0aXZpdHk6ICdyaWdodCcsXG4gICAgICAgIGJyYWNrZXQ6ICdub25lJyxcbiAgICB9XG5dO1xuIl19