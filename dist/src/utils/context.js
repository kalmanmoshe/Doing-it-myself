import { Direction, escalateToToken, findLine, findMatchingBracket, getCharacterAtPos, getCloseBracket } from "src/utils/editor_utils";
import { Mode } from "../snippets/options";
import { getLatexSuiteConfig } from "../snippets/codemirror/config";
import { syntaxTree } from "@codemirror/language";
export class Context {
    static fromState(state) {
        const ctx = new Context();
        const sel = state.selection;
        ctx.state = state;
        ctx.pos = sel.main.to;
        ctx.ranges = Array.from(sel.ranges).reverse();
        ctx.mode = new Mode();
        ctx.boundsCache = new Map();
        const codeblockLanguage = langIfWithinCodeblock(state);
        const inCode = codeblockLanguage !== null;
        const settings = getLatexSuiteConfig(state);
        const forceMath = codeblockLanguage ? settings.forceMathLanguages.contains(codeblockLanguage) : false;
        ctx.mode.codeMath = forceMath;
        ctx.mode.code = inCode && !forceMath;
        if (ctx.mode.code && codeblockLanguage)
            ctx.codeblockLanguage = codeblockLanguage;
        ctx.mode.html = getHtmlBounds(state) !== null;
        // first, check if math mode should be "generally" on
        const inMath = forceMath || isWithinEquation(state);
        if (inMath && !forceMath) {
            const inInlineEquation = isWithinInlineEquation(state);
            ctx.mode.blockMath = !inInlineEquation;
            ctx.mode.inlineMath = inInlineEquation;
        }
        if (inMath) {
            ctx.mode.textEnv = ctx.inTextEnvironment();
        }
        ctx.mode.text = !inCode && !inMath;
        return ctx;
    }
    static fromView(view) {
        return Context.fromState(view.state);
    }
    shouldTranslate() {
        const lengToTranslate = ['tikz'];
        return this.mode.isntInText() && (!this.mode.code || lengToTranslate.contains(this.codeblockLanguage));
    }
    isWithinEnvironment(pos, env) {
        if (!this.mode.inMath())
            return false;
        const bounds = this.getInnerBounds();
        if (!bounds)
            return false;
        const { start, end } = bounds;
        const text = this.state.sliceDoc(start, end);
        // pos referred to the absolute position in the whole document, but we just sliced the text
        // so now pos must be relative to the start in order to be any useful
        pos -= start;
        const openBracket = env.openSymbol.slice(-1);
        const closeBracket = getCloseBracket(openBracket);
        // Take care when the open symbol ends with a bracket {, [, or (
        // as then the closing symbol, }, ] or ), is not unique to this open symbol
        let offset;
        let openSearchSymbol;
        if (["{", "[", "("].contains(openBracket) && env.closeSymbol === closeBracket) {
            offset = env.openSymbol.length - 1;
            openSearchSymbol = openBracket;
        }
        else {
            offset = 0;
            openSearchSymbol = env.openSymbol;
        }
        let left = text.lastIndexOf(env.openSymbol, pos - 1);
        while (left != -1) {
            const right = findMatchingBracket(text, left + offset, openSearchSymbol, env.closeSymbol, false);
            if (right === -1)
                return false;
            // Check whether the cursor lies inside the environment symbols
            if ((right >= pos) && (pos >= left + env.openSymbol.length)) {
                return true;
            }
            if (left <= 0)
                return false;
            // Find the next open symbol
            left = text.lastIndexOf(env.openSymbol, left - 1);
        }
        return false;
    }
    inTextEnvironment() {
        return (this.isWithinEnvironment(this.pos, { openSymbol: "\\text{", closeSymbol: "}" }) ||
            this.isWithinEnvironment(this.pos, { openSymbol: "\\tag{", closeSymbol: "}" }) ||
            this.isWithinEnvironment(this.pos, { openSymbol: "\\begin{", closeSymbol: "}" }) ||
            this.isWithinEnvironment(this.pos, { openSymbol: "\\end{", closeSymbol: "}" }));
    }
    getBounds(pos = this.pos) {
        // yes, I also want the cache to work over the produced range instead of just that one through
        // a BTree or the like, but that'd be probably overkill
        if (this.boundsCache.has(pos)) {
            return this.boundsCache.get(pos) || null;
        }
        let bounds;
        if (this.mode.code) {
            // means a codeblock language triggered the math mode -> use the codeblock bounds instead
            bounds = getCodeblockBounds(this.state, pos);
        }
        else {
            bounds = getEquationBounds(this.state);
        }
        if (bounds)
            this.boundsCache.set(pos, bounds);
        return bounds;
    }
    // Accounts for equations within text environments, e.g. $$\text{... $...$}$$
    getInnerBounds(pos = this.pos) {
        let bounds;
        if (this.mode.code) {
            // means a codeblock language triggered the math mode -> use the codeblock bounds instead
            bounds = getCodeblockBounds(this.state, pos);
        }
        else {
            bounds = getInnerEquationBounds(this.state);
        }
        return bounds;
    }
}
const isWithinEquation = (state) => {
    const pos = state.selection.main.to;
    const tree = syntaxTree(state);
    let syntaxNode = tree.resolveInner(pos, -1);
    if (syntaxNode.name.contains("math-end"))
        return false;
    if (!syntaxNode.parent) {
        syntaxNode = tree.resolveInner(pos, 1);
        if (syntaxNode.name.contains("math-begin"))
            return false;
    }
    // Account/allow for being on an empty line in a equation
    if (!syntaxNode.parent) {
        const left = tree.resolveInner(pos - 1, -1);
        const right = tree.resolveInner(pos + 1, 1);
        return (left.name.contains("math") && right.name.contains("math") && !(left.name.contains("math-end")));
    }
    return (syntaxNode.name.contains("math"));
};
const isWithinInlineEquation = (state) => {
    const pos = state.selection.main.to;
    const tree = syntaxTree(state);
    let syntaxNode = tree.resolveInner(pos, -1);
    if (syntaxNode.name.contains("math-end"))
        return false;
    if (!syntaxNode.parent) {
        syntaxNode = tree.resolveInner(pos, 1);
        if (syntaxNode.name.contains("math-begin"))
            return false;
    }
    // Account/allow for being on an empty line in a equation
    if (!syntaxNode.parent)
        syntaxNode = tree.resolveInner(pos - 1, -1);
    const cursor = syntaxNode.cursor();
    const res = escalateToToken(cursor, Direction.Backward, "math-begin");
    return !(res === null || res === void 0 ? void 0 : res.name.contains("math-block"));
};
/**
 * Figures out where this equation starts and where it ends.
 *
 * **Note:** If you intend to use this directly, check out Context.getBounds instead, which caches and also takes care of codeblock languages which should behave like math mode.
 */
export const getEquationBounds = (state, pos) => {
    if (!pos)
        pos = state.selection.main.to;
    const tree = syntaxTree(state);
    let syntaxNode = tree.resolveInner(pos, -1);
    if (!syntaxNode.parent) {
        syntaxNode = tree.resolveInner(pos, 1);
    }
    // Account/allow for being on an empty line in a equation
    if (!syntaxNode.parent)
        syntaxNode = tree.resolveInner(pos - 1, -1);
    const cursor = syntaxNode.cursor();
    const begin = escalateToToken(cursor, Direction.Backward, "math-begin");
    const end = escalateToToken(cursor, Direction.Forward, "math-end");
    if (begin && end) {
        return { start: begin.to, end: end.from };
    }
    else {
        return null;
    }
};
// Accounts for equations within text environments, e.g. $$\text{... $...$}$$
const getInnerEquationBounds = (state, pos) => {
    if (!pos)
        pos = state.selection.main.to;
    let text = state.doc.toString();
    // ignore \$
    text = text.replaceAll("\\$", "\\R");
    const left = text.lastIndexOf("$", pos - 1);
    const right = text.indexOf("$", pos);
    if (left === -1 || right === -1)
        return null;
    return { start: left + 1, end: right };
};
export const getHtmlBounds = (state, pos = state.selection.main.from) => {
    state = fixState(state);
    const tree = syntaxTree(state);
    let cursor = tree.cursorAt(pos, -1);
    const blockBegin = escalateToToken(cursor, Direction.Backward, "html-begin");
    cursor = tree.cursorAt(pos, -1);
    const blockEnd = escalateToToken(cursor, Direction.Forward, "html-end");
    if (blockBegin && blockEnd)
        return { start: blockBegin.from, end: blockEnd.to };
    if (blockBegin && !blockEnd)
        return { start: blockBegin.from, end: state.doc.length };
    return null;
};
/**
 * Figures out where this codeblock starts and where it ends.
 *
 * **Note:** If you intend to use this directly, check out Context.getBounds instead, which caches and also takes care of codeblock languages which should behave like math mode.
 */
const getCodeblockBounds = (state, pos = state.selection.main.from) => {
    state = fixState(state);
    const tree = syntaxTree(state);
    let cursor = tree.cursorAt(pos, -1);
    const blockBegin = escalateToToken(cursor, Direction.Backward, "HyperMD-codeblock-begin");
    cursor = tree.cursorAt(pos, -1);
    const blockEnd = escalateToToken(cursor, Direction.Forward, "HyperMD-codeblock-end");
    if (blockBegin && blockEnd)
        return { start: blockBegin.to + 1, end: blockEnd.from - 1 };
    return null;
};
const fixState = (state) => {
    if (syntaxTree(state).cursorAt(state.selection.main.from, -1).name === "Document") {
        state = state.update({
            changes: { from: state.selection.main.from, insert: "\u200B" }
        }).state;
    }
    return state;
};
const findFirstNonNewlineBefore = (state, pos) => {
    let currentPos = pos;
    while (currentPos >= 0) {
        const char = getCharacterAtPos(state, currentPos - 1);
        if (char !== "\n") {
            return currentPos;
        }
        currentPos--;
    }
    return 0;
};
//The position I get has.to be.at least one line.before the head of the code block
const langIfWithinCodeblock = (state) => {
    const tree = syntaxTree(state);
    const pos = state.selection.ranges[0].from;
    const adjustedPos = pos === 0 ? 0 : findFirstNonNewlineBefore(state, pos);
    const cursor = tree.cursorAt(adjustedPos, -1);
    const inCodeblock = cursor.name.contains("codeblock");
    if (!inCodeblock)
        return null;
    // locate the start of the block
    const codeblockBegin = findLine(state, state.doc.lineAt(pos).number, Direction.Backward, /^\`\`\`/);
    if (codeblockBegin == null) {
        console.warn("unable to locate start of the codeblock even though inside one");
        return "";
    }
    // extract the language
    // codeblocks may start and end with an arbitrary number of backticks
    const language = codeblockBegin.text.replace(/`+/, "");
    return language;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2SSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTWxELE1BQU0sT0FBTyxPQUFPO0lBUW5CLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBa0I7UUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDdEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM5QyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdEIsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRTVCLE1BQU0saUJBQWlCLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLEtBQUssSUFBSSxDQUFDO1FBQzFDLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLE1BQU0s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QixxRUFBcUU7SUFDckUsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvclN0YXRlLCBTZWxlY3Rpb25SYW5nZSB9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgRGlyZWN0aW9uLCBlc2NhbGF0ZVRvVG9rZW4sIGZpbmRMaW5lLCBmaW5kTWF0Y2hpbmdCcmFja2V0LCBnZXRDaGFyYWN0ZXJBdFBvcywgZ2V0Q2xvc2VCcmFja2V0IH0gZnJvbSBcInNyYy91dGlscy9lZGl0b3JfdXRpbHNcIjtcclxuaW1wb3J0IHsgTW9kZSB9IGZyb20gXCIuLi9zbmlwcGV0cy9vcHRpb25zXCI7XHJcbmltcG9ydCB7IEVudmlyb25tZW50IH0gZnJvbSBcIi4uL3NuaXBwZXRzL2Vudmlyb25tZW50XCI7XHJcbmltcG9ydCB7IGdldExhdGV4U3VpdGVDb25maWcgfSBmcm9tIFwiLi4vc25pcHBldHMvY29kZW1pcnJvci9jb25maWdcIjtcclxuaW1wb3J0IHsgc3ludGF4VHJlZSB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5ndWFnZVwiO1xyXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kcyB7XHJcblx0c3RhcnQ6IG51bWJlcjtcclxuXHRlbmQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRleHQge1xyXG5cdHN0YXRlOiBFZGl0b3JTdGF0ZTtcclxuXHRtb2RlITogTW9kZTtcclxuXHRwb3M6IG51bWJlcjtcclxuXHRyYW5nZXM6IFNlbGVjdGlvblJhbmdlW107XHJcblx0Y29kZWJsb2NrTGFuZ3VhZ2U6IHN0cmluZztcclxuXHRib3VuZHNDYWNoZTogTWFwPG51bWJlciwgQm91bmRzPjtcclxuXHJcblx0c3RhdGljIGZyb21TdGF0ZShzdGF0ZTogRWRpdG9yU3RhdGUpOkNvbnRleHQge1xyXG5cdFx0Y29uc3QgY3R4ID0gbmV3IENvbnRleHQoKTtcclxuXHRcdGNvbnN0IHNlbCA9IHN0YXRlLnNlbGVjdGlvbjtcclxuXHRcdGN0eC5zdGF0ZSA9IHN0YXRlO1xyXG5cdFx0Y3R4LnBvcyA9IHNlbC5tYWluLnRvO1xyXG5cdFx0Y3R4LnJhbmdlcyA9IEFycmF5LmZyb20oc2VsLnJhbmdlcykucmV2ZXJzZSgpO1xyXG5cdFx0Y3R4Lm1vZGUgPSBuZXcgTW9kZSgpO1xyXG5cdFx0Y3R4LmJvdW5kc0NhY2hlID0gbmV3IE1hcCgpO1xyXG5cclxuXHRcdGNvbnN0IGNvZGVibG9ja0xhbmd1YWdlID0gbGFuZ0lmV2l0aGluQ29kZWJsb2NrKHN0YXRlKTtcclxuXHRcdGNvbnN0IGluQ29kZSA9IGNvZGVibG9ja0xhbmd1YWdlICE9PSBudWxsO1xyXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSBnZXRMYXRleFN1aXRlQ29uZmlnKHN0YXRlKTtcclxuXHRcdGNvbnN0IGZvcmNlTWF0aCA9IGNvZGVibG9ja0xhbmd1YWdlP3NldHRpbmdzLmZvcmNlTWF0aExhbmd1YWdlcy5jb250YWlucyhjb2RlYmxvY2tMYW5ndWFnZSk6ZmFsc2U7XHJcblx0XHRjdHgubW9kZS5jb2RlTWF0aCA9IGZvcmNlTWF0aDtcclxuXHRcdGN0eC5tb2RlLmNvZGUgPSBpbkNvZGUgJiYgIWZvcmNlTWF0aDtcclxuXHRcdGlmIChjdHgubW9kZS5jb2RlJiZjb2RlYmxvY2tMYW5ndWFnZSkgY3R4LmNvZGVibG9ja0xhbmd1YWdlID0gY29kZWJsb2NrTGFuZ3VhZ2U7XHJcblx0XHRjdHgubW9kZS5odG1sID0gZ2V0SHRtbEJvdW5kcyhzdGF0ZSkgIT09IG51bGw7XHJcblx0XHRcclxuXHRcdC8vIGZpcnN0LCBjaGVjayBpZiBtYXRoIG1vZGUgc2hvdWxkIGJlIFwiZ2VuZXJhbGx5XCIgb25cclxuXHRcdGNvbnN0IGluTWF0aCA9IGZvcmNlTWF0aCB8fCBpc1dpdGhpbkVxdWF0aW9uKHN0YXRlKTtcclxuXHJcblx0XHRpZiAoaW5NYXRoICYmICFmb3JjZU1hdGgpIHtcclxuXHRcdFx0Y29uc3QgaW5JbmxpbmVFcXVhdGlvbiA9IGlzV2l0aGluSW5saW5lRXF1YXRpb24oc3RhdGUpO1xyXG5cclxuXHRcdFx0Y3R4Lm1vZGUuYmxvY2tNYXRoID0gIWluSW5saW5lRXF1YXRpb247XHJcblx0XHRcdGN0eC5tb2RlLmlubGluZU1hdGggPSBpbklubGluZUVxdWF0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChpbk1hdGgpIHtcclxuXHRcdFx0Y3R4Lm1vZGUudGV4dEVudiA9IGN0eC5pblRleHRFbnZpcm9ubWVudCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN0eC5tb2RlLnRleHQgPSAhaW5Db2RlICYmICFpbk1hdGg7XHJcblxyXG5cdFx0cmV0dXJuIGN0eDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tVmlldyh2aWV3OiBFZGl0b3JWaWV3KTpDb250ZXh0IHtcclxuXHRcdHJldHVybiBDb250ZXh0LmZyb21TdGF0ZSh2aWV3LnN0YXRlKTtcclxuXHR9XHJcblx0c2hvdWxkVHJhbnNsYXRlKCl7XHJcblx0XHRjb25zdCBsZW5nVG9UcmFuc2xhdGU9IFsndGlreiddXHJcblx0XHRcclxuXHRcdHJldHVybiB0aGlzLm1vZGUuaXNudEluVGV4dCgpJiYoIXRoaXMubW9kZS5jb2RlfHxsZW5nVG9UcmFuc2xhdGUuY29udGFpbnModGhpcy5jb2RlYmxvY2tMYW5ndWFnZSkpXHJcblx0fVxyXG5cdGlzV2l0aGluRW52aXJvbm1lbnQocG9zOiBudW1iZXIsIGVudjogRW52aXJvbm1lbnQpOiBib29sZWFuIHtcclxuXHRcdGlmICghdGhpcy5tb2RlLmluTWF0aCgpKSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0Y29uc3QgYm91bmRzID0gdGhpcy5nZXRJbm5lckJvdW5kcygpO1xyXG5cdFx0aWYgKCFib3VuZHMpIHJldHVybiBmYWxzZTtcclxuXHJcblx0XHRjb25zdCB7c3RhcnQsIGVuZH0gPSBib3VuZHM7XHJcblx0XHRjb25zdCB0ZXh0ID0gdGhpcy5zdGF0ZS5zbGljZURvYyhzdGFydCwgZW5kKTtcclxuXHRcdC8vIHBvcyByZWZlcnJlZCB0byB0aGUgYWJzb2x1dGUgcG9zaXRpb24gaW4gdGhlIHdob2xlIGRvY3VtZW50LCBidXQgd2UganVzdCBzbGljZWQgdGhlIHRleHRcclxuXHRcdC8vIHNvIG5vdyBwb3MgbXVzdCBiZSByZWxhdGl2ZSB0byB0aGUgc3RhcnQgaW4gb3JkZXIgdG8gYmUgYW55IHVzZWZ1bFxyXG5cdFx0cG9zIC09IHN0YXJ0O1xyXG5cclxuXHRcdGNvbnN0IG9wZW5CcmFja2V0ID0gZW52Lm9wZW5TeW1ib2wuc2xpY2UoLTEpO1xyXG5cdFx0Y29uc3QgY2xvc2VCcmFja2V0ID0gZ2V0Q2xvc2VCcmFja2V0KG9wZW5CcmFja2V0KTtcclxuXHJcblx0XHQvLyBUYWtlIGNhcmUgd2hlbiB0aGUgb3BlbiBzeW1ib2wgZW5kcyB3aXRoIGEgYnJhY2tldCB7LCBbLCBvciAoXHJcblx0XHQvLyBhcyB0aGVuIHRoZSBjbG9zaW5nIHN5bWJvbCwgfSwgXSBvciApLCBpcyBub3QgdW5pcXVlIHRvIHRoaXMgb3BlbiBzeW1ib2xcclxuXHRcdGxldCBvZmZzZXQ7XHJcblx0XHRsZXQgb3BlblNlYXJjaFN5bWJvbDtcclxuXHJcblx0XHRpZiAoW1wie1wiLCBcIltcIiwgXCIoXCJdLmNvbnRhaW5zKG9wZW5CcmFja2V0KSAmJiBlbnYuY2xvc2VTeW1ib2wgPT09IGNsb3NlQnJhY2tldCkge1xyXG5cdFx0XHRvZmZzZXQgPSBlbnYub3BlblN5bWJvbC5sZW5ndGggLSAxO1xyXG5cdFx0XHRvcGVuU2VhcmNoU3ltYm9sID0gb3BlbkJyYWNrZXQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRvZmZzZXQgPSAwO1xyXG5cdFx0XHRvcGVuU2VhcmNoU3ltYm9sID0gZW52Lm9wZW5TeW1ib2w7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGxlZnQgPSB0ZXh0Lmxhc3RJbmRleE9mKGVudi5vcGVuU3ltYm9sLCBwb3MgLSAxKTtcclxuXHJcblx0XHR3aGlsZSAobGVmdCAhPSAtMSkge1xyXG5cdFx0XHRjb25zdCByaWdodCA9IGZpbmRNYXRjaGluZ0JyYWNrZXQodGV4dCwgbGVmdCArIG9mZnNldCwgb3BlblNlYXJjaFN5bWJvbCwgZW52LmNsb3NlU3ltYm9sLCBmYWxzZSk7XHJcblxyXG5cdFx0XHRpZiAocmlnaHQgPT09IC0xKSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIHRoZSBjdXJzb3IgbGllcyBpbnNpZGUgdGhlIGVudmlyb25tZW50IHN5bWJvbHNcclxuXHRcdFx0aWYgKChyaWdodCA+PSBwb3MpICYmIChwb3MgPj0gbGVmdCArIGVudi5vcGVuU3ltYm9sLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGxlZnQgPD0gMCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8gRmluZCB0aGUgbmV4dCBvcGVuIHN5bWJvbFxyXG5cdFx0XHRsZWZ0ID0gdGV4dC5sYXN0SW5kZXhPZihlbnYub3BlblN5bWJvbCwgbGVmdCAtIDEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGluVGV4dEVudmlyb25tZW50KCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0dGhpcy5pc1dpdGhpbkVudmlyb25tZW50KHRoaXMucG9zLCB7b3BlblN5bWJvbDogXCJcXFxcdGV4dHtcIiwgY2xvc2VTeW1ib2w6IFwifVwifSkgfHxcclxuXHRcdFx0dGhpcy5pc1dpdGhpbkVudmlyb25tZW50KHRoaXMucG9zLCB7b3BlblN5bWJvbDogXCJcXFxcdGFne1wiLCBjbG9zZVN5bWJvbDogXCJ9XCJ9KSB8fFxyXG5cdFx0XHR0aGlzLmlzV2l0aGluRW52aXJvbm1lbnQodGhpcy5wb3MsIHtvcGVuU3ltYm9sOiBcIlxcXFxiZWdpbntcIiwgY2xvc2VTeW1ib2w6IFwifVwifSkgfHxcclxuXHRcdFx0dGhpcy5pc1dpdGhpbkVudmlyb25tZW50KHRoaXMucG9zLCB7b3BlblN5bWJvbDogXCJcXFxcZW5ke1wiLCBjbG9zZVN5bWJvbDogXCJ9XCJ9KVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kcyhwb3M6IG51bWJlciA9IHRoaXMucG9zKTogQm91bmRzfG51bGwge1xyXG5cdFx0Ly8geWVzLCBJIGFsc28gd2FudCB0aGUgY2FjaGUgdG8gd29yayBvdmVyIHRoZSBwcm9kdWNlZCByYW5nZSBpbnN0ZWFkIG9mIGp1c3QgdGhhdCBvbmUgdGhyb3VnaFxyXG5cdFx0Ly8gYSBCVHJlZSBvciB0aGUgbGlrZSwgYnV0IHRoYXQnZCBiZSBwcm9iYWJseSBvdmVya2lsbFxyXG5cdFx0aWYgKHRoaXMuYm91bmRzQ2FjaGUuaGFzKHBvcykpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYm91bmRzQ2FjaGUuZ2V0KHBvcyl8fG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGJvdW5kcztcclxuXHRcdGlmICh0aGlzLm1vZGUuY29kZSkge1xyXG5cdFx0XHQvLyBtZWFucyBhIGNvZGVibG9jayBsYW5ndWFnZSB0cmlnZ2VyZWQgdGhlIG1hdGggbW9kZSAtPiB1c2UgdGhlIGNvZGVibG9jayBib3VuZHMgaW5zdGVhZFxyXG5cdFx0XHRib3VuZHMgPSBnZXRDb2RlYmxvY2tCb3VuZHModGhpcy5zdGF0ZSwgcG9zKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGJvdW5kcyA9IGdldEVxdWF0aW9uQm91bmRzKHRoaXMuc3RhdGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYoYm91bmRzKVxyXG5cdFx0dGhpcy5ib3VuZHNDYWNoZS5zZXQocG9zLCBib3VuZHMpO1xyXG5cdFx0cmV0dXJuIGJvdW5kcztcclxuXHR9XHJcblxyXG5cdC8vIEFjY291bnRzIGZvciBlcXVhdGlvbnMgd2l0aGluIHRleHQgZW52aXJvbm1lbnRzLCBlLmcuICQkXFx0ZXh0ey4uLiAkLi4uJH0kJFxyXG5cdGdldElubmVyQm91bmRzKHBvczogbnVtYmVyID0gdGhpcy5wb3MpOiBCb3VuZHN8bnVsbCB7XHJcblx0XHRsZXQgYm91bmRzO1xyXG5cdFx0aWYgKHRoaXMubW9kZS5jb2RlKSB7XHJcblx0XHRcdC8vIG1lYW5zIGEgY29kZWJsb2NrIGxhbmd1YWdlIHRyaWdnZXJlZCB0aGUgbWF0aCBtb2RlIC0+IHVzZSB0aGUgY29kZWJsb2NrIGJvdW5kcyBpbnN0ZWFkXHJcblx0XHRcdGJvdW5kcyA9IGdldENvZGVibG9ja0JvdW5kcyh0aGlzLnN0YXRlLCBwb3MpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ym91bmRzID0gZ2V0SW5uZXJFcXVhdGlvbkJvdW5kcyh0aGlzLnN0YXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYm91bmRzO1xyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IGlzV2l0aGluRXF1YXRpb24gPSAoc3RhdGU6IEVkaXRvclN0YXRlKTpib29sZWFuID0+IHtcclxuXHRjb25zdCBwb3MgPSBzdGF0ZS5zZWxlY3Rpb24ubWFpbi50bztcclxuXHRjb25zdCB0cmVlID0gc3ludGF4VHJlZShzdGF0ZSk7XHJcblxyXG5cdGxldCBzeW50YXhOb2RlID0gdHJlZS5yZXNvbHZlSW5uZXIocG9zLCAtMSk7XHJcblx0aWYgKHN5bnRheE5vZGUubmFtZS5jb250YWlucyhcIm1hdGgtZW5kXCIpKSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdGlmICghc3ludGF4Tm9kZS5wYXJlbnQpIHtcclxuXHRcdHN5bnRheE5vZGUgPSB0cmVlLnJlc29sdmVJbm5lcihwb3MsIDEpO1xyXG5cdFx0aWYgKHN5bnRheE5vZGUubmFtZS5jb250YWlucyhcIm1hdGgtYmVnaW5cIikpIHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8vIEFjY291bnQvYWxsb3cgZm9yIGJlaW5nIG9uIGFuIGVtcHR5IGxpbmUgaW4gYSBlcXVhdGlvblxyXG5cdGlmICghc3ludGF4Tm9kZS5wYXJlbnQpIHtcclxuXHRcdGNvbnN0IGxlZnQgPSB0cmVlLnJlc29sdmVJbm5lcihwb3MgLSAxLCAtMSk7XHJcblx0XHRjb25zdCByaWdodCA9IHRyZWUucmVzb2x2ZUlubmVyKHBvcyArIDEsIDEpO1xyXG5cclxuXHRcdHJldHVybiAobGVmdC5uYW1lLmNvbnRhaW5zKFwibWF0aFwiKSAmJiByaWdodC5uYW1lLmNvbnRhaW5zKFwibWF0aFwiKSAmJiAhKGxlZnQubmFtZS5jb250YWlucyhcIm1hdGgtZW5kXCIpKSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gKHN5bnRheE5vZGUubmFtZS5jb250YWlucyhcIm1hdGhcIikpO1xyXG59XHJcblxyXG5jb25zdCBpc1dpdGhpbklubGluZUVxdWF0aW9uID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSk6Ym9vbGVhbiA9PiB7XHJcblx0Y29uc3QgcG9zID0gc3RhdGUuc2VsZWN0aW9uLm1haW4udG87XHJcblx0Y29uc3QgdHJlZSA9IHN5bnRheFRyZWUoc3RhdGUpO1xyXG5cclxuXHRsZXQgc3ludGF4Tm9kZSA9IHRyZWUucmVzb2x2ZUlubmVyKHBvcywgLTEpO1xyXG5cdGlmIChzeW50YXhOb2RlLm5hbWUuY29udGFpbnMoXCJtYXRoLWVuZFwiKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRpZiAoIXN5bnRheE5vZGUucGFyZW50KSB7XHJcblx0XHRzeW50YXhOb2RlID0gdHJlZS5yZXNvbHZlSW5uZXIocG9zLCAxKTtcclxuXHRcdGlmIChzeW50YXhOb2RlLm5hbWUuY29udGFpbnMoXCJtYXRoLWJlZ2luXCIpKSByZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvLyBBY2NvdW50L2FsbG93IGZvciBiZWluZyBvbiBhbiBlbXB0eSBsaW5lIGluIGEgZXF1YXRpb25cclxuXHRpZiAoIXN5bnRheE5vZGUucGFyZW50KSBzeW50YXhOb2RlID0gdHJlZS5yZXNvbHZlSW5uZXIocG9zIC0gMSwgLTEpO1xyXG5cclxuXHRjb25zdCBjdXJzb3IgPSBzeW50YXhOb2RlLmN1cnNvcigpO1xyXG5cdGNvbnN0IHJlcyA9IGVzY2FsYXRlVG9Ub2tlbihjdXJzb3IsIERpcmVjdGlvbi5CYWNrd2FyZCwgXCJtYXRoLWJlZ2luXCIpO1xyXG5cclxuXHRyZXR1cm4gIXJlcz8ubmFtZS5jb250YWlucyhcIm1hdGgtYmxvY2tcIik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaWd1cmVzIG91dCB3aGVyZSB0aGlzIGVxdWF0aW9uIHN0YXJ0cyBhbmQgd2hlcmUgaXQgZW5kcy5cclxuICpcclxuICogKipOb3RlOioqIElmIHlvdSBpbnRlbmQgdG8gdXNlIHRoaXMgZGlyZWN0bHksIGNoZWNrIG91dCBDb250ZXh0LmdldEJvdW5kcyBpbnN0ZWFkLCB3aGljaCBjYWNoZXMgYW5kIGFsc28gdGFrZXMgY2FyZSBvZiBjb2RlYmxvY2sgbGFuZ3VhZ2VzIHdoaWNoIHNob3VsZCBiZWhhdmUgbGlrZSBtYXRoIG1vZGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RXF1YXRpb25Cb3VuZHMgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBwb3M/OiBudW1iZXIpOkJvdW5kc3xudWxsID0+IHtcclxuXHRpZiAoIXBvcykgcG9zID0gc3RhdGUuc2VsZWN0aW9uLm1haW4udG87XHJcblx0Y29uc3QgdHJlZSA9IHN5bnRheFRyZWUoc3RhdGUpO1xyXG5cclxuXHRsZXQgc3ludGF4Tm9kZSA9IHRyZWUucmVzb2x2ZUlubmVyKHBvcywgLTEpO1xyXG5cclxuXHRpZiAoIXN5bnRheE5vZGUucGFyZW50KSB7XHJcblx0XHRzeW50YXhOb2RlID0gdHJlZS5yZXNvbHZlSW5uZXIocG9zLCAxKTtcclxuXHR9XHJcblxyXG5cdC8vIEFjY291bnQvYWxsb3cgZm9yIGJlaW5nIG9uIGFuIGVtcHR5IGxpbmUgaW4gYSBlcXVhdGlvblxyXG5cdGlmICghc3ludGF4Tm9kZS5wYXJlbnQpIHN5bnRheE5vZGUgPSB0cmVlLnJlc29sdmVJbm5lcihwb3MgLSAxLCAtMSk7XHJcblxyXG5cdGNvbnN0IGN1cnNvciA9IHN5bnRheE5vZGUuY3Vyc29yKCk7XHJcblx0Y29uc3QgYmVnaW4gPSBlc2NhbGF0ZVRvVG9rZW4oY3Vyc29yLCBEaXJlY3Rpb24uQmFja3dhcmQsIFwibWF0aC1iZWdpblwiKTtcclxuXHRjb25zdCBlbmQgPSBlc2NhbGF0ZVRvVG9rZW4oY3Vyc29yLCBEaXJlY3Rpb24uRm9yd2FyZCwgXCJtYXRoLWVuZFwiKTtcclxuXHJcblx0aWYgKGJlZ2luICYmIGVuZCkge1xyXG5cdFx0cmV0dXJuIHtzdGFydDogYmVnaW4udG8sIGVuZDogZW5kLmZyb219O1xyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxufVxyXG5cclxuLy8gQWNjb3VudHMgZm9yIGVxdWF0aW9ucyB3aXRoaW4gdGV4dCBlbnZpcm9ubWVudHMsIGUuZy4gJCRcXHRleHR7Li4uICQuLi4kfSQkXHJcbmNvbnN0IGdldElubmVyRXF1YXRpb25Cb3VuZHMgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBwb3M/OiBudW1iZXIpOkJvdW5kc3xudWxsID0+IHtcclxuXHRpZiAoIXBvcykgcG9zID0gc3RhdGUuc2VsZWN0aW9uLm1haW4udG87XHJcblx0bGV0IHRleHQgPSBzdGF0ZS5kb2MudG9TdHJpbmcoKTtcclxuXHJcblx0Ly8gaWdub3JlIFxcJFxyXG5cdHRleHQgPSB0ZXh0LnJlcGxhY2VBbGwoXCJcXFxcJFwiLCBcIlxcXFxSXCIpO1xyXG5cclxuXHRjb25zdCBsZWZ0ID0gdGV4dC5sYXN0SW5kZXhPZihcIiRcIiwgcG9zLTEpO1xyXG5cdGNvbnN0IHJpZ2h0ID0gdGV4dC5pbmRleE9mKFwiJFwiLCBwb3MpO1xyXG5cclxuXHRpZiAobGVmdCA9PT0gLTEgfHwgcmlnaHQgPT09IC0xKSByZXR1cm4gbnVsbDtcclxuXHJcblx0cmV0dXJuIHtzdGFydDogbGVmdCArIDEsIGVuZDogcmlnaHR9O1xyXG59XHJcbmV4cG9ydCBjb25zdCBnZXRIdG1sQm91bmRzPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBwb3M6IG51bWJlciA9IHN0YXRlLnNlbGVjdGlvbi5tYWluLmZyb20pOkJvdW5kc3xudWxsID0+IHtcclxuXHRzdGF0ZT1maXhTdGF0ZShzdGF0ZSlcclxuXHRjb25zdCB0cmVlID0gc3ludGF4VHJlZShzdGF0ZSk7XHJcblx0bGV0IGN1cnNvciA9IHRyZWUuY3Vyc29yQXQocG9zLCAtMSk7XHJcblx0Y29uc3QgYmxvY2tCZWdpbiA9IGVzY2FsYXRlVG9Ub2tlbihjdXJzb3IsIERpcmVjdGlvbi5CYWNrd2FyZCwgXCJodG1sLWJlZ2luXCIpO1xyXG5cclxuXHRjdXJzb3IgPSB0cmVlLmN1cnNvckF0KHBvcywgLTEpO1xyXG5cdGNvbnN0IGJsb2NrRW5kID0gZXNjYWxhdGVUb1Rva2VuKGN1cnNvciwgRGlyZWN0aW9uLkZvcndhcmQsIFwiaHRtbC1lbmRcIik7XHJcblx0aWYoYmxvY2tCZWdpbiYmYmxvY2tFbmQpXHJcblx0XHRyZXR1cm4geyBzdGFydDogYmxvY2tCZWdpbi5mcm9tLCBlbmQ6IGJsb2NrRW5kLnRvIH07XHJcblx0aWYgKGJsb2NrQmVnaW4mJiFibG9ja0VuZClcclxuXHRyZXR1cm4geyBzdGFydDogYmxvY2tCZWdpbi5mcm9tLCBlbmQ6IHN0YXRlLmRvYy5sZW5ndGggfTtcclxuXHRyZXR1cm4gbnVsbFxyXG59XHJcbi8qKlxyXG4gKiBGaWd1cmVzIG91dCB3aGVyZSB0aGlzIGNvZGVibG9jayBzdGFydHMgYW5kIHdoZXJlIGl0IGVuZHMuXHJcbiAqXHJcbiAqICoqTm90ZToqKiBJZiB5b3UgaW50ZW5kIHRvIHVzZSB0aGlzIGRpcmVjdGx5LCBjaGVjayBvdXQgQ29udGV4dC5nZXRCb3VuZHMgaW5zdGVhZCwgd2hpY2ggY2FjaGVzIGFuZCBhbHNvIHRha2VzIGNhcmUgb2YgY29kZWJsb2NrIGxhbmd1YWdlcyB3aGljaCBzaG91bGQgYmVoYXZlIGxpa2UgbWF0aCBtb2RlLlxyXG4gKi9cclxuY29uc3QgZ2V0Q29kZWJsb2NrQm91bmRzID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgcG9zOiBudW1iZXIgPSBzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tKTpCb3VuZHN8bnVsbCA9PiB7XHJcblx0c3RhdGU9Zml4U3RhdGUoc3RhdGUpXHJcblx0Y29uc3QgdHJlZSA9IHN5bnRheFRyZWUoc3RhdGUpO1xyXG5cclxuXHRsZXQgY3Vyc29yID0gdHJlZS5jdXJzb3JBdChwb3MsIC0xKTtcclxuXHRjb25zdCBibG9ja0JlZ2luID0gZXNjYWxhdGVUb1Rva2VuKGN1cnNvciwgRGlyZWN0aW9uLkJhY2t3YXJkLCBcIkh5cGVyTUQtY29kZWJsb2NrLWJlZ2luXCIpO1xyXG5cclxuXHRjdXJzb3IgPSB0cmVlLmN1cnNvckF0KHBvcywgLTEpO1xyXG5cdGNvbnN0IGJsb2NrRW5kID0gZXNjYWxhdGVUb1Rva2VuKGN1cnNvciwgRGlyZWN0aW9uLkZvcndhcmQsIFwiSHlwZXJNRC1jb2RlYmxvY2stZW5kXCIpO1xyXG5cdGlmIChibG9ja0JlZ2luJiZibG9ja0VuZClcclxuXHRyZXR1cm4geyBzdGFydDogYmxvY2tCZWdpbi50byArIDEsIGVuZDogYmxvY2tFbmQuZnJvbSAtIDEgfTtcclxuXHRyZXR1cm4gbnVsbFxyXG59XHJcbmNvbnN0IGZpeFN0YXRlPShzdGF0ZTpFZGl0b3JTdGF0ZSk9PntcclxuXHRpZihzeW50YXhUcmVlKHN0YXRlKS5jdXJzb3JBdChzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tLCAtMSkubmFtZSA9PT0gXCJEb2N1bWVudFwiKXtcclxuXHRcdHN0YXRlID0gc3RhdGUudXBkYXRlKHtcclxuXHRcdFx0Y2hhbmdlczogeyBmcm9tOiBzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tLCBpbnNlcnQ6IFwiXFx1MjAwQlwiIH1cclxuXHRcdCAgfSkuc3RhdGU7XHJcblx0fVxyXG5cdHJldHVybiBzdGF0ZVxyXG59XHJcbmNvbnN0IGZpbmRGaXJzdE5vbk5ld2xpbmVCZWZvcmUgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBwb3M6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBsZXQgY3VycmVudFBvcyA9IHBvcztcclxuICAgIHdoaWxlIChjdXJyZW50UG9zID49IDApIHtcclxuICAgICAgICBjb25zdCBjaGFyID0gZ2V0Q2hhcmFjdGVyQXRQb3Moc3RhdGUsIGN1cnJlbnRQb3MtMSk7XHJcbiAgICAgICAgaWYgKGNoYXIgIT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQb3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1cnJlbnRQb3MtLTtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG59O1xyXG5cclxuLy9UaGUgcG9zaXRpb24gSSBnZXQgaGFzLnRvIGJlLmF0IGxlYXN0IG9uZSBsaW5lLmJlZm9yZSB0aGUgaGVhZCBvZiB0aGUgY29kZSBibG9ja1xyXG5jb25zdCBsYW5nSWZXaXRoaW5Db2RlYmxvY2sgPSAoc3RhdGU6IEVkaXRvclN0YXRlKTogc3RyaW5nIHwgbnVsbCA9PiB7XHJcblx0Y29uc3QgdHJlZSA9IHN5bnRheFRyZWUoc3RhdGUpO1xyXG5cclxuXHRjb25zdCBwb3MgPSBzdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzWzBdLmZyb207XHJcblx0XHJcblxyXG5cclxuXHRjb25zdCBhZGp1c3RlZFBvcyA9cG9zID09PSAwID8gMCA6IGZpbmRGaXJzdE5vbk5ld2xpbmVCZWZvcmUoc3RhdGUsIHBvcyk7XHJcblx0Y29uc3QgY3Vyc29yID0gdHJlZS5jdXJzb3JBdChhZGp1c3RlZFBvcywgLTEpO1xyXG5cdGNvbnN0IGluQ29kZWJsb2NrID0gY3Vyc29yLm5hbWUuY29udGFpbnMoXCJjb2RlYmxvY2tcIik7XHJcblx0XHJcblx0aWYgKCFpbkNvZGVibG9jaykgcmV0dXJuIG51bGw7XHJcblx0XHJcblxyXG5cdC8vIGxvY2F0ZSB0aGUgc3RhcnQgb2YgdGhlIGJsb2NrXHJcblx0Y29uc3QgY29kZWJsb2NrQmVnaW4gPSBmaW5kTGluZShzdGF0ZSxzdGF0ZS5kb2MubGluZUF0KHBvcykubnVtYmVyLERpcmVjdGlvbi5CYWNrd2FyZCwvXlxcYFxcYFxcYC8pXHJcblx0XHJcblx0aWYgKGNvZGVibG9ja0JlZ2luID09IG51bGwpIHtcclxuXHRcdGNvbnNvbGUud2FybihcInVuYWJsZSB0byBsb2NhdGUgc3RhcnQgb2YgdGhlIGNvZGVibG9jayBldmVuIHRob3VnaCBpbnNpZGUgb25lXCIpO1xyXG5cdFx0cmV0dXJuIFwiXCI7XHJcblx0fVxyXG5cclxuXHQvLyBleHRyYWN0IHRoZSBsYW5ndWFnZVxyXG5cdC8vIGNvZGVibG9ja3MgbWF5IHN0YXJ0IGFuZCBlbmQgd2l0aCBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIGJhY2t0aWNrc1xyXG5cdGNvbnN0IGxhbmd1YWdlID0gY29kZWJsb2NrQmVnaW4udGV4dC5yZXBsYWNlKC9gKy8sIFwiXCIpO1xyXG5cdHJldHVybiBsYW5ndWFnZTtcclxufVxyXG4iXX0=