import { Context } from "./utils/context";
import { getCharacterAtPos, isComposing, replaceRange, setCursor } from "./editor utilities/editor_utils";
import { keyboardAutoReplaceHebrewToEnglishTriggers } from "./staticData/mathParserStaticData";
import { setSelectionToNextTabstop } from "./snippets/snippet_management";
import { runSnippets } from "./features/run_snippets";
import { getLatexSuiteConfig } from "./snippets/codemirror/config";
import { runAutoFraction } from "./features/autofraction";
import { runMatrixShortcuts } from "./features/matrix_shortcuts";
import { shouldTaboutByCloseBracket, tabout } from "./features/tabout";
import { handleMathTooltip } from "./editor_extensions/math_tooltip";
import { removeAllTabstops } from "./snippets/codemirror/tabstops_state_field";
import { clearSnippetQueue } from "./snippets/codemirror/snippet_queue_state_field";
import { handleUndoRedo } from "./snippets/codemirror/history";
import { suggestor } from "./suggestor";
/*
class="cm-gutters" aria-hidden="true" style="min-height: 7865px; position: sticky;"
spellcheck="false" autocorrect="off" translate="no" contenteditable="true"

*/
export const onScroll = (event, view) => {
    suggestor.updatePositionFromView(view);
};
export const onMove = (event, view) => {
    if (!suggestor.isSuggesterDeployed()) {
        return;
    }
    const suggestionItems = document.body.querySelectorAll(".suggestion-item");
    const clickedSuggestion = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (clickedSuggestion) {
        const index = Array.from(suggestionItems).indexOf(clickedSuggestion);
        suggestor.selectionIndex = index;
        suggestor.updateSelection(suggestionItems);
    }
};
export const onClick = (event, view) => {
    if (!suggestor.isSuggesterDeployed()) {
        return;
    }
    const suggestionItems = document.body.querySelectorAll(".suggestion-item");
    // Check if the click is on a suggestion item
    const clickedSuggestion = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (clickedSuggestion) {
        suggestor.selectDropdownItem(clickedSuggestion, view);
    }
    const dropdownItem = document.body.querySelector(".suggestion-dropdown");
    const clickedDropdown = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (!clickedDropdown) {
        suggestor.close();
    }
};
export const onKeydown = (event, view) => {
    let key = event.key;
    let trigger;
    const ctx = Context.fromView(view);
    if (!(event.ctrlKey || event.metaKey) && ctx.shouldTranslate()) {
        trigger = keyboardAutoReplaceHebrewToEnglishTriggers.find((trigger2) => trigger2.key === event.key && trigger2.code === event.code);
        key = trigger?.replacement || key;
    }
    if (ctx.codeblockLanguage === "tikz") {
        suggestor.open(ctx, view);
    }
    if (suggestor.isSuggesterDeployed()) {
        handleDropdownNavigation(event, view);
    }
    const success = handleKeydown(key, event.shiftKey, event.ctrlKey || event.metaKey, isComposing(view, event), view);
    if (success)
        event.preventDefault();
    else if (key !== event.key && trigger) {
        event.preventDefault();
        key = trigger.replacement;
        replaceRange(view, view.state.selection.main.from, view.state.selection.main.to, key);
        setCursor(view, view.state.selection.main.from + key.length);
    }
};
export const handleUpdate = (update) => {
    const settings = getLatexSuiteConfig(update.state);
    // The math tooltip handler is driven by view updates because it utilizes
    // information about visual line, which is not available in EditorState
    if (settings.mathPreviewEnabled) {
        handleMathTooltip(update);
    }
    handleUndoRedo(update);
};
const handleDropdownNavigation = (event, view) => {
    const items = suggestor.getAlldropdownItems();
    switch (true) {
        case event.key === "ArrowDown":
            suggestor.selectionIndex = (suggestor.selectionIndex + 1) % items.length;
            suggestor.updateSelection(items);
            event.preventDefault();
            break;
        case event.key === "ArrowUp":
            suggestor.selectionIndex = (suggestor.selectionIndex - 1 + items.length) % items.length;
            suggestor.updateSelection(items);
            event.preventDefault();
            break;
        case event.key === "ArrowLeft" || event.key === "ArrowRight":
            suggestor.close();
            break;
        case event.key === "Backspace":
            suggestor.close();
            //suggestor.open(ctx,view)
            break;
        case event.key === "Enter":
            suggestor.selectDropdownItem(items[suggestor.selectionIndex], view);
            event.preventDefault();
            break;
        case event.key === "Escape":
            suggestor.close();
            event.preventDefault();
            break;
        default:
            return false;
    }
    return true;
};
export const handleKeydown = (key, shiftKey, ctrlKey, isIME, view) => {
    const settings = getLatexSuiteConfig(view);
    const ctx = Context.fromView(view);
    let success = false;
    /*
    * When backspace is pressed, if the cursor is inside an empty inline math,
    * delete both $ symbols, not just the first one.
    */
    if (settings.autoDelete$ && key === "Backspace" && ctx.mode.inMath()) {
        const charAtPos = getCharacterAtPos(view, ctx.pos);
        const charAtPrevPos = getCharacterAtPos(view, ctx.pos - 1);
        if (charAtPos === "$" && charAtPrevPos === "$") {
            replaceRange(view, ctx.pos - 1, ctx.pos + 1, "");
            // Note: not sure if removeAllTabstops is necessary
            removeAllTabstops(view);
            return true;
        }
    }
    if (settings.snippetsEnabled) {
        // Prevent IME from triggering keydown events.
        if (settings.suppressSnippetTriggerOnIME && isIME)
            return;
        // Allows Ctrl + z for undo, instead of triggering a snippet ending with z
        if (!ctrlKey) {
            try {
                success = runSnippets(view, ctx, key);
                if (success)
                    return true;
            }
            catch (e) {
                clearSnippetQueue(view);
                console.error(e);
            }
        }
    }
    if (key === "Tab") {
        success = setSelectionToNextTabstop(view);
        if (success)
            return true;
    }
    if (ctx.mode.strictlyInMath()) {
        if (key === "/") {
            success = runAutoFraction(view, ctx);
            if (success)
                return true;
        }
    }
    if (settings.matrixShortcutsEnabled && ctx.mode.blockMath) {
        if (["Tab", "Enter"].contains(key)) {
            success = runMatrixShortcuts(view, ctx, key, shiftKey);
            if (success)
                return true;
        }
    }
    if (key === "Tab" && shiftKey) {
        success = tabout(view, ctx, -1);
        if (success)
            return true;
    }
    else if (key === "Tab" || shouldTaboutByCloseBracket(view, key)) {
        success = tabout(view, ctx, 1);
        if (success)
            return true;
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,