import { Context } from "./utils/context";
import { getCharacterAtPos, isComposing, replaceRange, setCursor } from "./editor utilities/editor_utils";
import { keyboardAutoReplaceHebrewToEnglishTriggers } from "./staticData/mathParserStaticData";
import { setSelectionToNextTabstop } from "./snippets/snippet_management";
import { runSnippets } from "./features/run_snippets";
import { getLatexSuiteConfig } from "./snippets/codemirror/config";
import { runAutoFraction } from "./features/autofraction";
import { runMatrixShortcuts } from "./features/matrix_shortcuts";
import { shouldTaboutByCloseBracket, tabout } from "./features/tabout";
import { handleMathTooltip } from "./editor_extensions/math_tooltip";
import { removeAllTabstops } from "./snippets/codemirror/tabstops_state_field";
import { clearSnippetQueue } from "./snippets/codemirror/snippet_queue_state_field";
import { handleUndoRedo } from "./snippets/codemirror/history";
import { suggestor } from "./suggestor";
/*
class="cm-gutters" aria-hidden="true" style="min-height: 7865px; position: sticky;"
spellcheck="false" autocorrect="off" translate="no" contenteditable="true"

*/
export const onScroll = (event, view) => {
    suggestor.updatePositionFromView(view);
};
export const onMove = (event, view) => {
    if (!suggestor.isSuggesterDeployed()) {
        return;
    }
    const suggestionItems = document.body.querySelectorAll(".suggestion-item");
    const clickedSuggestion = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (clickedSuggestion) {
        const index = Array.from(suggestionItems).indexOf(clickedSuggestion);
        suggestor.setSelectionIndex(index);
    }
};
export const onClick = (event, view) => {
    if (!suggestor.isSuggesterDeployed()) {
        return;
    }
    const suggestionItems = document.body.querySelectorAll(".suggestion-item");
    // Check if the click is on a suggestion item
    const clickedSuggestion = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (clickedSuggestion) {
        suggestor.selectDropdownItem(view);
    }
    const dropdownItem = document.body.querySelector(".suggestion-dropdown");
    const clickedDropdown = Array.from(suggestionItems).find((item) => item.contains(event.target));
    if (!clickedDropdown) {
        suggestor.close();
    }
};
export const onKeydown = (event, view) => {
    let key = event.key;
    let trigger;
    const ctx = Context.fromView(view);
    if (!(event.ctrlKey || event.metaKey) && ctx.shouldTranslate()) {
        trigger = keyboardAutoReplaceHebrewToEnglishTriggers.find((trigger2) => trigger2.key === event.key && trigger2.code === event.code);
        key = trigger?.replacement || key;
    }
    if (suggestor.isSuggesterDeployed()) {
        suggestor.handleDropdownNavigation(event, view);
    }
    const success = handleKeydown(key, event.shiftKey, event.ctrlKey || event.metaKey, isComposing(view, event), view, ctx);
    if (success)
        event.preventDefault();
    else if (key !== event.key && trigger) {
        event.preventDefault();
        key = trigger.replacement;
        replaceRange(view, view.state.selection.main.from, view.state.selection.main.to, key);
        setCursor(view, view.state.selection.main.from + key.length);
    }
};
export const onTransaction = (update) => {
    if (update.transactions[0].docChanged) {
        const ctx = Context.fromView(update.view);
        if (ctx.codeblockLanguage === "tikz") {
            suggestor.open(ctx, update.view);
        }
    }
    const settings = getLatexSuiteConfig(update.state);
    // The math tooltip handler is driven by view updates because it utilizes
    // information about visual line, which is not available in EditorState
    if (settings.mathPreviewEnabled) {
        handleMathTooltip(update);
    }
    handleUndoRedo(update);
};
export const handleKeydown = (key, shiftKey, ctrlKey, isIME, view, ctx) => {
    const settings = getLatexSuiteConfig(view);
    let success = false;
    /*
    * When backspace is pressed, if the cursor is inside an empty inline math,
    * delete both $ symbols, not just the first one.
    */
    if (settings.autoDelete$ && key === "Backspace" && ctx.mode.inMath()) {
        const charAtPos = getCharacterAtPos(view, ctx.pos);
        const charAtPrevPos = getCharacterAtPos(view, ctx.pos - 1);
        if (charAtPos === "$" && charAtPrevPos === "$") {
            replaceRange(view, ctx.pos - 1, ctx.pos + 1, "");
            // Note: not sure if removeAllTabstops is necessary
            removeAllTabstops(view);
            return true;
        }
    }
    if (settings.snippetsEnabled) {
        // Prevent IME from triggering keydown events.
        if (settings.suppressSnippetTriggerOnIME && isIME)
            return;
        // Allows Ctrl + z for undo, instead of triggering a snippet ending with z
        if (!ctrlKey) {
            try {
                success = runSnippets(view, ctx, key);
                if (success)
                    return true;
            }
            catch (e) {
                clearSnippetQueue(view);
                console.error(e);
            }
        }
    }
    if (key === "Tab") {
        success = setSelectionToNextTabstop(view);
        if (success)
            return true;
    }
    if (ctx.mode.strictlyInMath()) {
        if (key === "/") {
            success = runAutoFraction(view, ctx);
            if (success)
                return true;
        }
    }
    if (settings.matrixShortcutsEnabled && ctx.mode.blockMath) {
        if (["Tab", "Enter"].contains(key)) {
            success = runMatrixShortcuts(view, ctx, key, shiftKey);
            if (success)
                return true;
        }
    }
    if (key === "Tab" && shiftKey) {
        success = tabout(view, ctx, -1);
        if (success)
            return true;
    }
    else if (key === "Tab" || shouldTaboutByCloseBracket(view, key)) {
        success = tabout(view, ctx, 1);
        if (success)
            return true;
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0RWRpdG9yRXh0ZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXRFZGl0b3JFeHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMxRyxPQUFPLEVBQUUsMENBQTBDLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUUvRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG1CQUFtQixFQUFnQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkUsT0FBTyxFQUE4QyxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxpQkFBaUIsRUFBc0IsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsaUJBQWlCLEVBQTBCLE1BQU0saURBQWlELENBQUM7QUFDNUcsT0FBTyxFQUFFLGNBQWMsRUFBMEIsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDOzs7O0VBSUU7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUMsQ0FBQyxLQUFZLEVBQUMsSUFBZ0IsRUFBQyxFQUFFO0lBQ3RELFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJ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QUcsQ0FBQyxFQUFFLENBQUM7WUFDcEMsT0FBTyxHQUFHLGtCQUFrQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZELElBQUksT0FBTztnQkFBRSxPQUFPLElBQUksQ0FBQztRQUMxQixDQUFDO0lBQ0YsQ0FBQztJQUNELElBQUksR0FBRyxLQUFLLEtBQUssSUFBRSxRQUFRLEVBQUUsQ0FBQztRQUM3QixPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLE9BQU87WUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQixDQUFDO1NBQ0ksSUFBSSxHQUFHLEtBQUssS0FBSyxJQUFJLDBCQUEwQixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2pFLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLE9BQU87WUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgRWRpdG9yVmlldywgVmlld1BsdWdpbiwgVmlld1VwZGF0ZSAsRGVjb3JhdGlvbiwgdG9vbHRpcHMsIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuL3V0aWxzL2NvbnRleHRcIjtcclxuaW1wb3J0IHsgZ2V0Q2hhcmFjdGVyQXRQb3MsIGlzQ29tcG9zaW5nLCByZXBsYWNlUmFuZ2UsIHNldEN1cnNvciB9IGZyb20gXCIuL2VkaXRvciB1dGlsaXRpZXMvZWRpdG9yX3V0aWxzXCI7XHJcbmltcG9ydCB7IGtleWJvYXJkQXV0b1JlcGxhY2VIZWJyZXdUb0VuZ2xpc2hUcmlnZ2VycyB9IGZyb20gXCIuL3N0YXRpY0RhdGEvbWF0aFBhcnNlclN0YXRpY0RhdGFcIjtcclxuaW1wb3J0IHsgUnRsRm9yYyB9IGZyb20gXCIuL2VkaXRvckRlY29yYXRpb25zXCI7XHJcbmltcG9ydCB7IHNldFNlbGVjdGlvblRvTmV4dFRhYnN0b3AgfSBmcm9tIFwiLi9zbmlwcGV0cy9zbmlwcGV0X21hbmFnZW1lbnRcIjtcclxuXHJcbmltcG9ydCB7IHJ1blNuaXBwZXRzIH0gZnJvbSBcIi4vZmVhdHVyZXMvcnVuX3NuaXBwZXRzXCI7XHJcbmltcG9ydCB7IGdldExhdGV4U3VpdGVDb25maWcsIGdldExhdGV4U3VpdGVDb25maWdFeHRlbnNpb24gfSBmcm9tIFwiLi9zbmlwcGV0cy9jb2RlbWlycm9yL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBydW5BdXRvRnJhY3Rpb24gfSBmcm9tIFwiLi9mZWF0dXJlcy9hdXRvZnJhY3Rpb25cIjtcclxuaW1wb3J0IHsgcnVuTWF0cml4U2hvcnRjdXRzIH0gZnJvbSBcIi4vZmVhdHVyZXMvbWF0cml4X3Nob3J0Y3V0c1wiO1xyXG5pbXBvcnQgeyBzaG91bGRUYWJvdXRCeUNsb3NlQnJhY2tldCwgdGFib3V0IH0gZnJvbSBcIi4vZmVhdHVyZXMvdGFib3V0XCI7XHJcbmltcG9ydCB7IGN1cnNvclRvb2x0aXBCYXNlVGhlbWUsIGN1cnNvclRvb2x0aXBGaWVsZCwgaGFuZGxlTWF0aFRvb2x0aXAgfSBmcm9tIFwiLi9lZGl0b3JfZXh0ZW5zaW9ucy9tYXRoX3Rvb2x0aXBcIjtcclxuaW1wb3J0IHsgcmVtb3ZlQWxsVGFic3RvcHMsIHRhYnN0b3BzU3RhdGVGaWVsZCB9IGZyb20gXCIuL3NuaXBwZXRzL2NvZGVtaXJyb3IvdGFic3RvcHNfc3RhdGVfZmllbGRcIjtcclxuaW1wb3J0IHsgY2xlYXJTbmlwcGV0UXVldWUsIHNuaXBwZXRRdWV1ZVN0YXRlRmllbGQgfSBmcm9tIFwiLi9zbmlwcGV0cy9jb2RlbWlycm9yL3NuaXBwZXRfcXVldWVfc3RhdGVfZmllbGRcIjtcclxuaW1wb3J0IHsgaGFuZGxlVW5kb1JlZG8sIHNuaXBwZXRJbnZlcnRlZEVmZmVjdHMgfSBmcm9tIFwiLi9zbmlwcGV0cy9jb2RlbWlycm9yL2hpc3RvcnlcIjtcclxuaW1wb3J0IHsgc3VnZ2VzdG9yIH0gZnJvbSBcIi4vc3VnZ2VzdG9yXCI7XHJcbmltcG9ydCB7IGNvbnRleHQgfSBmcm9tIFwiZXNidWlsZC13YXNtXCI7XHJcblxyXG4vKlxyXG5jbGFzcz1cImNtLWd1dHRlcnNcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cIm1pbi1oZWlnaHQ6IDc4NjVweDsgcG9zaXRpb246IHN0aWNreTtcIlxyXG5zcGVsbGNoZWNrPVwiZmFsc2VcIiBhdXRvY29ycmVjdD1cIm9mZlwiIHRyYW5zbGF0ZT1cIm5vXCIgY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXHJcblxyXG4qL1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uU2Nyb2xsPShldmVudDogRXZlbnQsdmlldzogRWRpdG9yVmlldyk9PntcclxuXHRzdWdnZXN0b3IudXBkYXRlUG9zaXRpb25Gcm9tVmlldyh2aWV3KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBvbk1vdmU9KGV2ZW50OiBNb3VzZUV2ZW50LHZpZXc6IEVkaXRvclZpZXcpPT57XHJcblx0aWYoIXN1Z2dlc3Rvci5pc1N1Z2dlc3RlckRlcGxveWVkKCkpe3JldHVybn1cclxuXHRjb25zdCBzdWdnZXN0aW9uSXRlbXMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3VnZ2VzdGlvbi1pdGVtXCIpO1xyXG5cdGNvbnN0IGNsaWNrZWRTdWdnZXN0aW9uID0gQXJyYXkuZnJvbShzdWdnZXN0aW9uSXRlbXMpLmZpbmQoKGl0ZW0pID0+XHJcblx0XHRpdGVtLmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKVxyXG5cdCk7XHJcblx0aWYgKGNsaWNrZWRTdWdnZXN0aW9uKSB7XHJcblx0XHRjb25zdCBpbmRleCA9IEFycmF5LmZyb20oc3VnZ2VzdGlvbkl0ZW1zKS5pbmRleE9mKGNsaWNrZWRTdWdnZXN0aW9uKTtcclxuXHRcdHN1Z2dlc3Rvci5zZXRTZWxlY3Rpb25JbmRleChpbmRleClcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3Qgb25DbGljaz0oZXZlbnQ6IE1vdXNlRXZlbnQsdmlldzogRWRpdG9yVmlldyk9PntcclxuXHRpZighc3VnZ2VzdG9yLmlzU3VnZ2VzdGVyRGVwbG95ZWQoKSl7cmV0dXJufVxyXG5cdGNvbnN0IHN1Z2dlc3Rpb25JdGVtcyA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIi5zdWdnZXN0aW9uLWl0ZW1cIik7XHJcblxyXG5cdC8vIENoZWNrIGlmIHRoZSBjbGljayBpcyBvbiBhIHN1Z2dlc3Rpb24gaXRlbVxyXG5cdGNvbnN0IGNsaWNrZWRTdWdnZXN0aW9uID0gQXJyYXkuZnJvbShzdWdnZXN0aW9uSXRlbXMpLmZpbmQoKGl0ZW0pID0+XHJcblx0XHRpdGVtLmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKVxyXG5cdCk7XHJcblx0aWYgKGNsaWNrZWRTdWdnZXN0aW9uKSB7XHJcblx0XHRzdWdnZXN0b3Iuc2VsZWN0RHJvcGRvd25JdGVtKHZpZXcpO1xyXG5cdH1cclxuXHRjb25zdCBkcm9wZG93bkl0ZW0gPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIuc3VnZ2VzdGlvbi1kcm9wZG93blwiKTtcclxuXHRjb25zdCBjbGlja2VkRHJvcGRvd24gPSBBcnJheS5mcm9tKHN1Z2dlc3Rpb25JdGVtcykuZmluZCgoaXRlbSkgPT5cclxuXHRcdGl0ZW0uY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpXHJcblx0KTtcclxuXHRpZighY2xpY2tlZERyb3Bkb3duKXtcclxuXHRcdHN1Z2dlc3Rvci5jbG9zZSgpXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgb25LZXlkb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50LCB2aWV3OiBFZGl0b3JWaWV3KSA9PiB7XHJcblx0bGV0IGtleSA9IGV2ZW50LmtleTtcclxuXHRsZXQgdHJpZ2dlclxyXG5cdGNvbnN0IGN0eCA9IENvbnRleHQuZnJvbVZpZXcodmlldyk7XHJcblx0aWYgKCEoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSAmJiBjdHguc2hvdWxkVHJhbnNsYXRlKCkpIHtcclxuXHQgIHRyaWdnZXIgPSBrZXlib2FyZEF1dG9SZXBsYWNlSGVicmV3VG9FbmdsaXNoVHJpZ2dlcnMuZmluZCgodHJpZ2dlcjIpID0+IHRyaWdnZXIyLmtleSA9PT0gZXZlbnQua2V5ICYmIHRyaWdnZXIyLmNvZGUgPT09IGV2ZW50LmNvZGUpO1xyXG5cdCAga2V5ID0gdHJpZ2dlcj8ucmVwbGFjZW1lbnR8fGtleTtcclxuXHR9XHJcblx0aWYoc3VnZ2VzdG9yLmlzU3VnZ2VzdGVyRGVwbG95ZWQoKSl7XHJcblx0XHRzdWdnZXN0b3IuaGFuZGxlRHJvcGRvd25OYXZpZ2F0aW9uKGV2ZW50LHZpZXcpXHJcblx0fVxyXG5cdFxyXG5cdGNvbnN0IHN1Y2Nlc3MgPSBoYW5kbGVLZXlkb3duKGtleSwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSwgaXNDb21wb3NpbmcodmlldywgZXZlbnQpLCB2aWV3LGN0eCk7XHJcblx0aWYgKHN1Y2Nlc3MpXHJcblx0ICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdGVsc2UgaWYgKGtleSAhPT0gZXZlbnQua2V5JiZ0cmlnZ2VyKSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0a2V5ID0gdHJpZ2dlci5yZXBsYWNlbWVudDtcclxuXHRcdHJlcGxhY2VSYW5nZSh2aWV3LHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uZnJvbSx2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLnRvLGtleSlcclxuXHRcdHNldEN1cnNvcih2aWV3LHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uZnJvbStrZXkubGVuZ3RoKVxyXG4gIH1cclxufTtcclxuZXhwb3J0IGNvbnN0IG9uVHJhbnNhY3Rpb24gPSAodXBkYXRlOiBWaWV3VXBkYXRlKSA9PiB7XHJcblx0aWYodXBkYXRlLnRyYW5zYWN0aW9uc1swXS5kb2NDaGFuZ2VkKXtcclxuXHRcdGNvbnN0IGN0eD1Db250ZXh0LmZyb21WaWV3KHVwZGF0ZS52aWV3KTtcclxuXHRcdGlmKGN0eC5jb2RlYmxvY2tMYW5ndWFnZT09PVwidGlrelwiKXtcclxuXHRcdFx0c3VnZ2VzdG9yLm9wZW4oY3R4LHVwZGF0ZS52aWV3KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y29uc3Qgc2V0dGluZ3MgPSBnZXRMYXRleFN1aXRlQ29uZmlnKHVwZGF0ZS5zdGF0ZSk7XHJcblxyXG5cdC8vIFRoZSBtYXRoIHRvb2x0aXAgaGFuZGxlciBpcyBkcml2ZW4gYnkgdmlldyB1cGRhdGVzIGJlY2F1c2UgaXQgdXRpbGl6ZXNcclxuXHQvLyBpbmZvcm1hdGlvbiBhYm91dCB2aXN1YWwgbGluZSwgd2hpY2ggaXMgbm90IGF2YWlsYWJsZSBpbiBFZGl0b3JTdGF0ZVxyXG5cdGlmIChzZXR0aW5ncy5tYXRoUHJldmlld0VuYWJsZWQpIHtcclxuXHRcdGhhbmRsZU1hdGhUb29sdGlwKHVwZGF0ZSk7XHJcblx0fVxyXG5cclxuXHRoYW5kbGVVbmRvUmVkbyh1cGRhdGUpO1xyXG5cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlS2V5ZG93biA9IChrZXk6IHN0cmluZywgc2hpZnRLZXk6IGJvb2xlYW4sIGN0cmxLZXk6IGJvb2xlYW4sIGlzSU1FOiBib29sZWFuLCB2aWV3OiBFZGl0b3JWaWV3LCBjdHg6IENvbnRleHQpID0+IHtcclxuXHRjb25zdCBzZXR0aW5ncyA9IGdldExhdGV4U3VpdGVDb25maWcodmlldyk7XHJcblxyXG5cdGxldCBzdWNjZXNzID0gZmFsc2U7XHJcblxyXG5cdC8qXHJcblx0KiBXaGVuIGJhY2tzcGFjZSBpcyBwcmVzc2VkLCBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSBhbiBlbXB0eSBpbmxpbmUgbWF0aCxcclxuXHQqIGRlbGV0ZSBib3RoICQgc3ltYm9scywgbm90IGp1c3QgdGhlIGZpcnN0IG9uZS5cclxuXHQqL1xyXG5cdGlmIChzZXR0aW5ncy5hdXRvRGVsZXRlJCAmJiBrZXkgPT09IFwiQmFja3NwYWNlXCIgJiYgY3R4Lm1vZGUuaW5NYXRoKCkpIHtcclxuXHRcdGNvbnN0IGNoYXJBdFBvcyA9IGdldENoYXJhY3RlckF0UG9zKHZpZXcsIGN0eC5wb3MpO1xyXG5cdFx0Y29uc3QgY2hhckF0UHJldlBvcyA9IGdldENoYXJhY3RlckF0UG9zKHZpZXcsIGN0eC5wb3MgLSAxKTtcclxuXHJcblx0XHRpZiAoY2hhckF0UG9zID09PSBcIiRcIiAmJiBjaGFyQXRQcmV2UG9zID09PSBcIiRcIikge1xyXG5cdFx0XHRyZXBsYWNlUmFuZ2UodmlldywgY3R4LnBvcyAtIDEsIGN0eC5wb3MgKyAxLCBcIlwiKTtcclxuXHRcdFx0Ly8gTm90ZTogbm90IHN1cmUgaWYgcmVtb3ZlQWxsVGFic3RvcHMgaXMgbmVjZXNzYXJ5XHJcblx0XHRcdHJlbW92ZUFsbFRhYnN0b3BzKHZpZXcpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0aWYgKHNldHRpbmdzLnNuaXBwZXRzRW5hYmxlZCkge1xyXG5cclxuXHRcdC8vIFByZXZlbnQgSU1FIGZyb20gdHJpZ2dlcmluZyBrZXlkb3duIGV2ZW50cy5cclxuXHRcdGlmIChzZXR0aW5ncy5zdXBwcmVzc1NuaXBwZXRUcmlnZ2VyT25JTUUgJiYgaXNJTUUpIHJldHVybjtcclxuXHJcblx0XHQvLyBBbGxvd3MgQ3RybCArIHogZm9yIHVuZG8sIGluc3RlYWQgb2YgdHJpZ2dlcmluZyBhIHNuaXBwZXQgZW5kaW5nIHdpdGggelxyXG5cdFx0aWYgKCFjdHJsS2V5KSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0c3VjY2VzcyA9IHJ1blNuaXBwZXRzKHZpZXcsIGN0eCwga2V5KTtcclxuXHRcdFx0XHRpZiAoc3VjY2VzcykgcmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRjbGVhclNuaXBwZXRRdWV1ZSh2aWV3KTtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoa2V5ID09PSBcIlRhYlwiKSB7XHJcblx0XHRzdWNjZXNzID0gc2V0U2VsZWN0aW9uVG9OZXh0VGFic3RvcCh2aWV3KTtcclxuXHJcblx0XHRpZiAoc3VjY2VzcykgcmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdGlmIChjdHgubW9kZS5zdHJpY3RseUluTWF0aCgpKSB7XHJcblx0XHRpZiAoa2V5ID09PSBcIi9cIikge1xyXG5cdFx0XHRzdWNjZXNzID0gcnVuQXV0b0ZyYWN0aW9uKHZpZXcsIGN0eCk7XHJcblxyXG5cdFx0XHRpZiAoc3VjY2VzcykgcmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoc2V0dGluZ3MubWF0cml4U2hvcnRjdXRzRW5hYmxlZCAmJiBjdHgubW9kZS5ibG9ja01hdGgpIHtcclxuXHRcdGlmIChbXCJUYWJcIiwgXCJFbnRlclwiXS5jb250YWlucyhrZXkpKSB7XHJcblx0XHRcdHN1Y2Nlc3MgPSBydW5NYXRyaXhTaG9ydGN1dHModmlldywgY3R4LCBrZXksIHNoaWZ0S2V5KTtcclxuXHRcdFx0aWYgKHN1Y2Nlc3MpIHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoa2V5ID09PSBcIlRhYlwiJiZzaGlmdEtleSkge1xyXG5cdFx0c3VjY2VzcyA9IHRhYm91dCh2aWV3LCBjdHgsLTEpO1xyXG5cdFx0aWYgKHN1Y2Nlc3MpIHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHRlbHNlIGlmIChrZXkgPT09IFwiVGFiXCIgfHwgc2hvdWxkVGFib3V0QnlDbG9zZUJyYWNrZXQodmlldywga2V5KSkge1xyXG5cdFx0c3VjY2VzcyA9IHRhYm91dCh2aWV3LCBjdHgsMSk7XHJcblx0XHRpZiAoc3VjY2VzcykgcmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbiJdfQ==