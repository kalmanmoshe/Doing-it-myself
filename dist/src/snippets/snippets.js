/**
 * a mapping of triggers to environments where they should not run
 */
export const EXCLUSIONS = {
    "([A-Za-z])(\\d)": { openSymbol: "\\pu{", closeSymbol: "}" },
    "->": { openSymbol: "\\ce{", closeSymbol: "}" }
};
/**
 * in visual snippets, if the replacement is a string, this is the magic substring to indicate the selection.
 */
export const VISUAL_SNIPPET_MAGIC_SELECTION_PLACEHOLDER = "${VISUAL}";
/**
 * a snippet instance contains all the information necessary to run a snippet.
 * snippet data specific to a certain type of snippet is in its `data` property.
 */
export class Snippet {
    type;
    data;
    options;
    priority;
    description;
    excludedEnvironments;
    constructor(type, trigger, replacement, options, priority, description, excludedEnvironments) {
        this.type = type;
        // @ts-ignore
        this.data = { trigger, replacement };
        this.options = options;
        this.priority = priority;
        this.description = description;
        this.excludedEnvironments = excludedEnvironments ?? [];
    }
    // we need to explicitly type the return value here so the derived classes,
    // have the getter typed properly for the particular <T> the derived class extends
    get trigger() { return this.data.trigger; }
    get replacement() { return this.data.replacement; }
    toString() {
        return serializeSnippetLike({
            type: this.type,
            trigger: this.trigger,
            replacement: this.replacement,
            options: this.options,
            priority: this.priority,
            description: this.description,
            excludedEnvironments: this.excludedEnvironments,
        });
    }
}
export class VisualSnippet extends Snippet {
    constructor({ trigger, replacement, options, priority, description, excludedEnvironments }) {
        super("visual", trigger, replacement, options, priority, description, excludedEnvironments);
    }
    process(effectiveLine, range, sel) {
        const hasSelection = !!sel;
        // visual snippets only run when there is a selection
        if (!hasSelection) {
            return null;
        }
        // check whether the trigger text was typed
        if (!(effectiveLine.endsWith(this.trigger))) {
            return null;
        }
        const triggerPos = range.from;
        let replacement;
        if (typeof this.replacement === "string") {
            replacement = this.replacement.replace(VISUAL_SNIPPET_MAGIC_SELECTION_PLACEHOLDER, sel);
        }
        else {
            replacement = this.replacement(sel);
            // sanity check - if this.replacement was a function,
            // we have no way to validate beforehand that it really does return a string
            if (typeof replacement !== "string") {
                return null;
            }
        }
        return { triggerPos, replacement };
    }
}
export class RegexSnippet extends Snippet {
    constructor({ trigger, replacement, options, priority, description, excludedEnvironments }) {
        super("regex", trigger, replacement, options, priority, description, excludedEnvironments);
    }
    process(effectiveLine, range, sel) {
        const hasSelection = !!sel;
        // non-visual snippets only run when there is no selection
        if (hasSelection) {
            return null;
        }
        const result = this.trigger.exec(effectiveLine);
        if (result === null) {
            return null;
        }
        const triggerPos = result.index;
        let replacement;
        if (typeof this.replacement === "string") {
            // Compute the replacement string
            // result.length - 1 = the number of capturing groups
            const nCaptureGroups = result.length - 1;
            replacement = Array.from({ length: nCaptureGroups })
                .map((_, i) => i + 1)
                .reduce((replacement, i) => replacement.replaceAll(`[[${i - 1}]]`, result[i]), this.replacement);
        }
        else {
            replacement = this.replacement(result);
            // sanity check - if this.replacement was a function,
            // we have no way to validate beforehand that it really does return a string
            if (typeof replacement !== "string") {
                return null;
            }
        }
        return { triggerPos, replacement };
    }
}
export class StringSnippet extends Snippet {
    constructor({ trigger, replacement, options, priority, description, excludedEnvironments: excludeIn }) {
        super("string", trigger, replacement, options, priority, description, excludeIn);
    }
    process(effectiveLine, range, sel) {
        const hasSelection = !!sel;
        // non-visual snippets only run when there is no selection
        if (hasSelection) {
            return null;
        }
        // Check whether the trigger text was typed
        if (!(effectiveLine.endsWith(this.trigger))) {
            return null;
        }
        const triggerPos = effectiveLine.length - this.trigger.length;
        const replacement = typeof this.replacement === "string"
            ? this.replacement
            : this.replacement(this.trigger);
        // sanity check - if replacement was a function,
        // we have no way to validate beforehand that it really does return a string
        if (typeof replacement !== "string") {
            return null;
        }
        return { triggerPos, replacement };
    }
}
/**
 * replacer function for serializing snippets
 * @param k
 * @param v
 * @returns
 */
function replacer(k, v) {
    if (typeof v === "function") {
        return "[[Function]]";
    }
    if (v instanceof RegExp) {
        return `[[RegExp]]: ${v.toString()}`;
    }
    return v;
}
/**
 * serialize a snippet-like object.
 */
export function serializeSnippetLike(snippetLike) {
    return JSON.stringify(snippetLike, replacer, 2);
}
//# sourceMappingURL=data:application/json;base64,