import { StateEffect } from "@codemirror/state";
import { invertedEffects, undo, redo } from "@codemirror/commands";
import { removeAllTabstops } from "./tabstops_state_field";
// Effects that mark the beginning and end of transactions to insert snippets
export const startSnippet = StateEffect.define();
export const endSnippet = StateEffect.define();
export const undidStartSnippet = StateEffect.define();
export const undidEndSnippet = StateEffect.define();
// Enables undoing and redoing snippets, taking care of the tabstops
export const snippetInvertedEffects = invertedEffects.of(tr => {
    const effects = [];
    for (const effect of tr.effects) {
        if (effect.is(startSnippet)) {
            effects.push(undidStartSnippet.of(null));
        }
        else if (effect.is(undidStartSnippet)) {
            effects.push(startSnippet.of(null));
        }
        else if (effect.is(endSnippet)) {
            effects.push(undidEndSnippet.of(null));
        }
        else if (effect.is(undidEndSnippet)) {
            effects.push(endSnippet.of(null));
        }
    }
    return effects;
});
export const handleUndoRedo = (update) => {
    const undoTr = update.transactions.find(tr => tr.isUserEvent("undo"));
    const redoTr = update.transactions.find(tr => tr.isUserEvent("redo"));
    for (const tr of update.transactions) {
        for (const effect of tr.effects) {
            if (effect.is(startSnippet)) {
                if (redoTr) {
                    // Redo the tabstop expansion and selection
                    redo(update.view);
                }
            }
            else if (effect.is(undidEndSnippet)) {
                if (undoTr) {
                    // Undo the tabstop expansion and selection
                    undo(update.view);
                }
            }
        }
    }
    if (undoTr) {
        removeAllTabstops(update.view);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zbmlwcGV0cy9jb2RlbWlycm9yL2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTNELDZFQUE2RTtBQUM3RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHcEQsb0VBQW9FO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDN0QsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBRW5CLEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQzthQUNJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQzthQUNJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7YUFDSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDO0lBQ0YsQ0FBQztJQUdELE9BQU8sT0FBTyxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBR3RFLEtBQUssTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RDLEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWpDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2dCQUM3QixJQUFJLE1BQU0sRUFBRSxDQUFDO29CQUNaLDJDQUEyQztvQkFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkIsQ0FBQztZQUNGLENBQUM7aUJBQ0ksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUM7Z0JBQ3JDLElBQUksTUFBTSxFQUFFLENBQUM7b0JBQ1osMkNBQTJDO29CQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQixDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7SUFDRixDQUFDO0lBRUQsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNaLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0FBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld1VwZGF0ZSB9IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XG5pbXBvcnQgeyBTdGF0ZUVmZmVjdCB9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xuaW1wb3J0IHsgaW52ZXJ0ZWRFZmZlY3RzLCB1bmRvLCByZWRvIH0gZnJvbSBcIkBjb2RlbWlycm9yL2NvbW1hbmRzXCI7XG5pbXBvcnQgeyByZW1vdmVBbGxUYWJzdG9wcyB9IGZyb20gXCIuL3RhYnN0b3BzX3N0YXRlX2ZpZWxkXCI7XG5cbi8vIEVmZmVjdHMgdGhhdCBtYXJrIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0cmFuc2FjdGlvbnMgdG8gaW5zZXJ0IHNuaXBwZXRzXG5leHBvcnQgY29uc3Qgc3RhcnRTbmlwcGV0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5leHBvcnQgY29uc3QgZW5kU25pcHBldCA9IFN0YXRlRWZmZWN0LmRlZmluZSgpO1xuZXhwb3J0IGNvbnN0IHVuZGlkU3RhcnRTbmlwcGV0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5leHBvcnQgY29uc3QgdW5kaWRFbmRTbmlwcGV0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5cblxuLy8gRW5hYmxlcyB1bmRvaW5nIGFuZCByZWRvaW5nIHNuaXBwZXRzLCB0YWtpbmcgY2FyZSBvZiB0aGUgdGFic3RvcHNcbmV4cG9ydCBjb25zdCBzbmlwcGV0SW52ZXJ0ZWRFZmZlY3RzID0gaW52ZXJ0ZWRFZmZlY3RzLm9mKHRyID0+IHtcblx0Y29uc3QgZWZmZWN0cyA9IFtdO1xuXG5cdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcblx0XHRpZiAoZWZmZWN0LmlzKHN0YXJ0U25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZFN0YXJ0U25pcHBldC5vZihudWxsKSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVmZmVjdC5pcyh1bmRpZFN0YXJ0U25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaChzdGFydFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlZmZlY3QuaXMoZW5kU25pcHBldCkpIHtcblx0XHRcdGVmZmVjdHMucHVzaCh1bmRpZEVuZFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlZmZlY3QuaXModW5kaWRFbmRTbmlwcGV0KSkge1xuXHRcdFx0ZWZmZWN0cy5wdXNoKGVuZFNuaXBwZXQub2YobnVsbCkpO1xuXHRcdH1cblx0fVxuXG5cblx0cmV0dXJuIGVmZmVjdHM7XG59KTtcblxuXG5leHBvcnQgY29uc3QgaGFuZGxlVW5kb1JlZG8gPSAodXBkYXRlOiBWaWV3VXBkYXRlKSA9PiB7XG5cdGNvbnN0IHVuZG9UciA9IHVwZGF0ZS50cmFuc2FjdGlvbnMuZmluZCh0ciA9PiB0ci5pc1VzZXJFdmVudChcInVuZG9cIikpO1xuXHRjb25zdCByZWRvVHIgPSB1cGRhdGUudHJhbnNhY3Rpb25zLmZpbmQodHIgPT4gdHIuaXNVc2VyRXZlbnQoXCJyZWRvXCIpKTtcblxuXG5cdGZvciAoY29uc3QgdHIgb2YgdXBkYXRlLnRyYW5zYWN0aW9ucykge1xuXHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcblxuXHRcdFx0aWYgKGVmZmVjdC5pcyhzdGFydFNuaXBwZXQpKSB7XG5cdFx0XHRcdGlmIChyZWRvVHIpIHtcblx0XHRcdFx0XHQvLyBSZWRvIHRoZSB0YWJzdG9wIGV4cGFuc2lvbiBhbmQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0cmVkbyh1cGRhdGUudmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGVmZmVjdC5pcyh1bmRpZEVuZFNuaXBwZXQpKSB7XG5cdFx0XHRcdGlmICh1bmRvVHIpIHtcblx0XHRcdFx0XHQvLyBVbmRvIHRoZSB0YWJzdG9wIGV4cGFuc2lvbiBhbmQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0dW5kbyh1cGRhdGUudmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAodW5kb1RyKSB7XG5cdFx0cmVtb3ZlQWxsVGFic3RvcHModXBkYXRlLnZpZXcpO1xuXHR9XG59O1xuIl19