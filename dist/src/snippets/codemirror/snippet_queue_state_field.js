import { StateEffect, StateField } from "@codemirror/state";
import { SnippetChangeSpec } from "./snippet_change_spec";
const queueSnippetEffect = StateEffect.define();
const clearSnippetQueueEffect = StateEffect.define();
export const snippetQueueStateField = StateField.define({
    create() {
        return [];
    },
    update(oldState, transaction) {
        let snippetQueue = oldState;
        for (const effect of transaction.effects) {
            if (effect.is(queueSnippetEffect)) {
                snippetQueue.push(effect.value);
            }
            else if (effect.is(clearSnippetQueueEffect)) {
                snippetQueue = [];
            }
        }
        return snippetQueue;
    },
});
export function queueSnippet(view, from, to, insert, keyPressed) {
    const snippet = new SnippetChangeSpec(from, to, insert, keyPressed);
    view.dispatch({
        effects: [queueSnippetEffect.of(snippet)],
    });
}
export function clearSnippetQueue(view) {
    view.dispatch({
        effects: [clearSnippetQueueEffect.of(null)],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25pcHBldF9xdWV1ZV9zdGF0ZV9maWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zbmlwcGV0cy9jb2RlbWlycm9yL3NuaXBwZXRfcXVldWVfc3RhdGVfZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQXFCLENBQUM7QUFDbkUsTUFBTSx1QkFBdUIsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBc0I7SUFFNUUsTUFBTTtRQUNMLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVztRQUMzQixJQUFJLFlBQVksR0FBRyxRQUFRLENBQUM7UUFFNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDMUMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQztnQkFDbkMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsQ0FBQztpQkFDSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDO2dCQUM3QyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ25CLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDckIsQ0FBQztDQUNELENBQUMsQ0FBQztBQUdILE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBZ0IsRUFBRSxJQUFZLEVBQUUsRUFBVSxFQUFFLE1BQWMsRUFBRSxVQUFtQjtJQUMzRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXBFLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDYixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFnQjtJQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2IsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgU3RhdGVFZmZlY3QsIFN0YXRlRmllbGQgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuaW1wb3J0IHsgU25pcHBldENoYW5nZVNwZWMgfSBmcm9tIFwiLi9zbmlwcGV0X2NoYW5nZV9zcGVjXCI7XHJcblxyXG5jb25zdCBxdWV1ZVNuaXBwZXRFZmZlY3QgPSBTdGF0ZUVmZmVjdC5kZWZpbmU8U25pcHBldENoYW5nZVNwZWM+KCk7XHJcbmNvbnN0IGNsZWFyU25pcHBldFF1ZXVlRWZmZWN0ID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XHJcblxyXG5leHBvcnQgY29uc3Qgc25pcHBldFF1ZXVlU3RhdGVGaWVsZCA9IFN0YXRlRmllbGQuZGVmaW5lPFNuaXBwZXRDaGFuZ2VTcGVjW10+KHtcclxuXHJcblx0Y3JlYXRlKCkge1xyXG5cdFx0cmV0dXJuIFtdO1xyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZShvbGRTdGF0ZSwgdHJhbnNhY3Rpb24pIHtcclxuXHRcdGxldCBzbmlwcGV0UXVldWUgPSBvbGRTdGF0ZTtcclxuXHJcblx0XHRmb3IgKGNvbnN0IGVmZmVjdCBvZiB0cmFuc2FjdGlvbi5lZmZlY3RzKSB7XHJcblx0XHRcdGlmIChlZmZlY3QuaXMocXVldWVTbmlwcGV0RWZmZWN0KSkge1xyXG5cdFx0XHRcdHNuaXBwZXRRdWV1ZS5wdXNoKGVmZmVjdC52YWx1ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoZWZmZWN0LmlzKGNsZWFyU25pcHBldFF1ZXVlRWZmZWN0KSkge1xyXG5cdFx0XHRcdHNuaXBwZXRRdWV1ZSA9IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHNuaXBwZXRRdWV1ZTtcclxuXHR9LFxyXG59KTtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcXVldWVTbmlwcGV0KHZpZXc6IEVkaXRvclZpZXcsIGZyb206IG51bWJlciwgdG86IG51bWJlciwgaW5zZXJ0OiBzdHJpbmcsIGtleVByZXNzZWQ/OiBzdHJpbmcpIHtcclxuXHRjb25zdCBzbmlwcGV0ID0gbmV3IFNuaXBwZXRDaGFuZ2VTcGVjKGZyb20sIHRvLCBpbnNlcnQsIGtleVByZXNzZWQpO1xyXG5cclxuXHR2aWV3LmRpc3BhdGNoKHtcclxuXHRcdGVmZmVjdHM6IFtxdWV1ZVNuaXBwZXRFZmZlY3Qub2Yoc25pcHBldCldLFxyXG5cdH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTbmlwcGV0UXVldWUodmlldzogRWRpdG9yVmlldykge1xyXG5cdHZpZXcuZGlzcGF0Y2goe1xyXG5cdFx0ZWZmZWN0czogW2NsZWFyU25pcHBldFF1ZXVlRWZmZWN0Lm9mKG51bGwpXSxcclxuXHR9KTtcclxufSJdfQ==