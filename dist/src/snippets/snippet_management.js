import { ChangeSet } from "@codemirror/state";
import { startSnippet } from "src/codemirror/history";
import { isolateHistory } from "@codemirror/commands";
import { tabstopSpecsToTabstopGroups } from "./tabstop";
import { addTabstops, getTabstopGroupsFromView, getNextTabstopColor, tabstopsStateField } from "src/codemirror/tabstops_state_field";
import { clearSnippetQueue, snippetQueueStateField } from "src/codemirror/snippet_queue_state_field";
import { resetCursorBlink } from "src/editor utilities/editor_utils";
export function expandSnippets(view) {
    const snippetsToExpand = view.state.field(snippetQueueStateField);
    if (snippetsToExpand.length === 0)
        return false;
    const originalDocLength = view.state.doc.length;
    handleUndoKeypresses(view, snippetsToExpand);
    const tabstopsToAdd = computeTabstops(view, snippetsToExpand, originalDocLength);
    // Insert any tabstops
    if (tabstopsToAdd.length === 0) {
        clearSnippetQueue(view);
        return true;
    }
    markTabstops(view, tabstopsToAdd);
    expandTabstops(view, tabstopsToAdd);
    clearSnippetQueue(view);
    return true;
}
function handleUndoKeypresses(view, snippets) {
    const originalDoc = view.state.doc;
    const originalDocLength = originalDoc.length;
    const keyPresses = [];
    for (const snippet of snippets) {
        if (snippet.keyPressed && (snippet.keyPressed.length === 1)) {
            // Use prevChar so that cursors are placed at the end of the added text
            const prevChar = view.state.doc.sliceString(snippet.to - 1, snippet.to);
            const from = snippet.to === 0 ? 0 : snippet.to - 1;
            keyPresses.push({ from: from, to: snippet.to, insert: prevChar + snippet.keyPressed });
        }
    }
    // Insert the keypresses
    // Use isolateHistory to allow users to undo the triggering of a snippet,
    // but keep the text inserted by the trigger key
    view.dispatch({
        changes: keyPresses,
        annotations: isolateHistory.of("full")
    });
    // Undo the keypresses, and insert the replacements
    const undoKeyPresses = ChangeSet.of(keyPresses, originalDocLength).invert(originalDoc);
    const changesAsChangeSet = ChangeSet.of(snippets, originalDocLength);
    const combinedChanges = undoKeyPresses.compose(changesAsChangeSet);
    // Mark the transaction as the beginning of a snippet (for undo/history purposes)
    view.dispatch({
        changes: combinedChanges,
        effects: startSnippet.of(null)
    });
}
function computeTabstops(view, snippets, originalDocLength) {
    // Find the positions of the cursors in the new document
    const changeSet = ChangeSet.of(snippets, originalDocLength);
    const oldPositions = snippets.map(change => change.from);
    const newPositions = oldPositions.map(pos => changeSet.mapPos(pos));
    const tabstopsToAdd = [];
    for (let i = 0; i < snippets.length; i++) {
        tabstopsToAdd.push(...snippets[i].getTabstops(view, newPositions[i]));
    }
    return tabstopsToAdd;
}
function markTabstops(view, tabstops) {
    const color = getNextTabstopColor(view);
    const tabstopGroups = tabstopSpecsToTabstopGroups(tabstops, color);
    addTabstops(view, tabstopGroups);
}
function expandTabstops(view, tabstops) {
    // Insert the replacements
    const changes = tabstops.map((tabstop) => {
        return { from: tabstop.from, to: tabstop.to, insert: tabstop.replacement };
    });
    view.dispatch({
        changes: changes
    });
    // Select the first tabstop
    const firstGrp = getTabstopGroupsFromView(view)[0];
    firstGrp.select(view, false, true); // "true" here marks the transaction as the end of the snippet (for undo/history purposes)
}
// Returns true if the transaction was dispatched
export function setSelectionToNextTabstop(view) {
    console.log('view.state.field', view.state);
    const tabstopGroups = view.state.field(tabstopsStateField);
    console.log('tabstopGroups', tabstopGroups);
    function aux(nextGrpIndex) {
        const nextGrp = tabstopGroups[nextGrpIndex];
        if (!nextGrp)
            return false;
        const currSel = view.state.selection;
        // If the current selection lies within the next tabstop(s), move the cursor
        // to the endpoint(s) of the next tabstop(s)
        let nextGrpSel = nextGrp.toEditorSelection();
        if (nextGrp.containsSelection(currSel)) {
            nextGrpSel = nextGrp.toEditorSelection(true);
        }
        if (currSel.eq(nextGrpSel))
            return aux(nextGrpIndex + 1);
        view.dispatch({
            selection: nextGrpSel,
        });
        resetCursorBlink();
        return true;
    }
    return aux(1);
}
//# sourceMappingURL=data:application/json;base64,