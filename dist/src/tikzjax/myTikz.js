import { FormatTikzjax } from "./interpret/tokenizeTikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
        const min = this.tikzjax.getMin();
        const max = this.tikzjax.getMax();
        this.svg = this.createSVGElement('svg', {
            width: fromPt(min.cartesianX + max.cartesianX),
            height: 2 //fromPt(min.cartesianY+max.cartesianY+0.2),
            //preserveAspectRatio: "none",
        });
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUk1RCxNQUFNLE9BQU8sT0FBTztJQUNSLE1BQU0sQ0FBUztJQUNmLE9BQU8sQ0FBZ0I7SUFDdkIsVUFBVSxDQUFNO0lBQ2hCLEdBQUcsQ0FBZ0I7SUFDM0IsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLFlBQVksTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXhDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtRQUV2RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBQ0QsR0FBRztRQUNDLE1BQU0sQ0FBQyxHQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFBLHlEQUF5RDtJQUVsRCxpQkFBaUI7UUFDckIsTUFBTSxHQUFHLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxNQUFNLEdBQUcsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRTtZQUNwQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUM1QyxNQUFNLEVBQUUsQ0FBQyxDQUFBLDRDQUE0QztZQUNyRCw4QkFBOEI7U0FDakMsQ0FBa0IsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTSxLQUFtQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO0lBRTFDLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxVQUFrQztRQUM1RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVFLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDcEQsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBRUo7QUFFRCxNQUFNLFlBQVk7SUFDZCxLQUFLLENBQUs7SUFDVixZQUFZLENBQU07UUFDZCxNQUFNLElBQUksR0FBQztZQUNQLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1lBQ25DLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1NBQ3RDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUlELENBQUMsQ0FBQyxJQUFpQjtRQUNmLElBQUksTUFBTSxHQUEyQixFQUFFLENBQUM7UUFFeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDdEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBR0QsU0FBUyxPQUFPO0lBQ1osTUFBTSxDQUFDLEdBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUMsV0FBVyxFQUFFO1lBQzlDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUM7U0FDOUQsRUFBQyxDQUFBO0FBQ04sQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsS0FBSyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLElBQUksQ0FBQztBQUNuQixDQUFDO0FBQ0QsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhcnRlc2lhblRvUG9sYXIsIGZpbmRJbnRlcnNlY3Rpb25Qb2ludCwgZmluZFNsb3BlLCBwb2xhclRvQ2FydGVzaWFuLCB0b051bWJlciB9IGZyb20gXCJzcmMvbWF0aFBhcnNlci9tYXRoVXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IEF4aXMsIENvb3JkaW5hdGUsIERyYXcsIFRpa3pqYXggfSBmcm9tIFwiLi90aWt6amF4XCI7XHJcbmltcG9ydCB7IEZvcm1hdFRpa3pqYXggfSBmcm9tIFwiLi9pbnRlcnByZXQvdG9rZW5pemVUaWt6amF4XCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUaWt6U3ZnIHtcclxuICAgIHByaXZhdGUgc291cmNlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRpa3pqYXg6IEZvcm1hdFRpa3pqYXg7XHJcbiAgICBwcml2YXRlIFNWR3Rpa3pqYXg6IGFueTtcclxuICAgIHByaXZhdGUgc3ZnOiBTVkdTVkdFbGVtZW50O1xyXG4gICAgZGVidWdJbmZvID0gXCJcIjtcclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy50aWt6amF4ID0gbmV3IEZvcm1hdFRpa3pqYXgodGhpcy5zb3VyY2UpO1xyXG4gICAgICAgIHRoaXMuZGVidWdJbmZvICs9dGhpcy50aWt6amF4LmRlYnVnSW5mbztcclxuXHJcbiAgICAgICAgdGhpcy5TVkd0aWt6amF4PW5ldyBUaWt6amF4VG9zdmcodGhpcy50aWt6amF4KVxyXG4gICAgICAgIHRoaXMuZGVidWdJbmZvICs9SlNPTi5zdHJpbmdpZnkodGhpcy5TVkd0aWt6amF4LG51bGwsMSlcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTVkdlbnZpcm9ubWVudCgpO1xyXG4gICAgICAgIHRoaXMuYWRkKClcclxuICAgIH1cclxuICAgIGFkZCgpe1xyXG4gICAgICAgIGNvbnN0IGE9e3gxOiAnMCcsIHkxOicwJywgeDI6ZnJvbVB0KDEpLCB5Mjpmcm9tUHQoMSksc3Ryb2tlOiBcIndoaXRlXCIsJ3N0cm9rZS13aWR0aCc6IGZyb21QdCgwLjQpfVxyXG4gICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnbGluZScsYSkpXHJcbiAgICB9Ly8zOC44NyAwLjUzICAxcHQ9MzguODcgMC40cHQ9MC41MyAvLyAycHQ9NzUuNTggMXB0PTM3Ljc5XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTVkdlbnZpcm9ubWVudCgpIHtcclxuICAgICAgICBjb25zdCBtaW49dGhpcy50aWt6amF4LmdldE1pbigpO1xyXG4gICAgICAgIGNvbnN0IG1heD10aGlzLnRpa3pqYXguZ2V0TWF4KCk7XHJcbiAgICAgICAgdGhpcy5zdmcgPSB0aGlzLmNyZWF0ZVNWR0VsZW1lbnQoJ3N2ZycsIHtcclxuICAgICAgICAgICAgd2lkdGg6IGZyb21QdChtaW4uY2FydGVzaWFuWCttYXguY2FydGVzaWFuWCksXHJcbiAgICAgICAgICAgIGhlaWdodDogMi8vZnJvbVB0KG1pbi5jYXJ0ZXNpYW5ZK21heC5jYXJ0ZXNpYW5ZKzAuMiksXHJcbiAgICAgICAgICAgIC8vcHJlc2VydmVBc3BlY3RSYXRpbzogXCJub25lXCIsXHJcbiAgICAgICAgfSkgYXMgU1ZHU1ZHRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdmcoKTogU1ZHU1ZHRWxlbWVudCB7cmV0dXJuIHRoaXMuc3ZnO31cclxuXHJcbiAgICBjcmVhdGVTVkdFbGVtZW50KHRhZzogc3RyaW5nLCBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogU1ZHRWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHRhZyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCBudW1iZXJzIHRvIHN0cmluZ3MgYmVmb3JlIHNldHRpbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFN0cmluZyh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuICAgIFxyXG59XHJcblxyXG5jbGFzcyBUaWt6amF4VG9zdmcge1xyXG4gICAgc3ZnRWw6IGFueVxyXG4gICAgY29uc3RydWN0b3IodDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgYXhlcz1bXHJcbiAgICAgICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6MH1hcyBBeGlzLFxyXG4gICAgICAgICAgICB7Y2FydGVzaWFuWDogMSxjYXJ0ZXNpYW5ZOjB9YXMgQXhpc1xyXG4gICAgICAgIF1cclxuICAgICAgICB0aGlzLnN2Z0VsPXRoaXMuYyhheGVzKVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgYyhheGVzOiBBcnJheTxBeGlzPik6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4ge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICAgIFxyXG4gICAgICAgIGF4ZXMuZm9yRWFjaCgoYXhpcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmVzdWx0Wyd4JyArIGluZGV4XSA9IGF4aXMuY2FydGVzaWFuWDtcclxuICAgICAgICAgICAgcmVzdWx0Wyd5JyArIGluZGV4XSA9IGF4aXMuY2FydGVzaWFuWTtcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjb252ZXJ0KCl7XHJcbiAgICBjb25zdCBhPXttb2RlOiAnZHJhdycsZm9ybWF0dGluZzogJycsY29vcmRpbmF0ZXM6IFtcclxuICAgICAgICB7Y2FydGVzaWFuWDogMCxjYXJ0ZXNpYW5ZOiAwfSx7Y2FydGVzaWFuWDogMSxjYXJ0ZXNpYW5ZOiAwfVxyXG4gICAgXX1cclxufVxyXG5cclxuZnVuY3Rpb24gZnJvbVB0KHB0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHB0KjM3Ljc5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwdFRvUHgocHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gcHQqMS4zMztcclxufVxyXG5mdW5jdGlvbiBweFRvUHQocHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gcHQqMC43NTtcclxufSJdfQ==