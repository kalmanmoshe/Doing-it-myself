import { FormatTikzjax } from "./interpret/tokenizeTikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUk1RCxNQUFNLE9BQU8sT0FBTztJQUNSLE1BQU0sQ0FBUztJQUNmLE9BQU8sQ0FBZ0I7SUFDdkIsVUFBVSxDQUFNO0lBQ2hCLEdBQUcsQ0FBZ0I7SUFDM0IsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLFlBQVksTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXhDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtRQUV2RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBQ0QsR0FBRztRQUNDLE1BQU0sQ0FBQyxHQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFBLHlEQUF5RDtJQUVsRCxpQkFBaUI7SUFRekIsQ0FBQztJQUVELE1BQU0sS0FBbUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztJQUUxQyxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsVUFBa0M7UUFDNUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1RSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ3BELHVEQUF1RDtZQUN2RCxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBRUQsTUFBTSxZQUFZO0lBQ2QsS0FBSyxDQUFLO0lBQ1YsWUFBWSxDQUFNO1FBQ2QsTUFBTSxJQUFJLEdBQUM7WUFDUCxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtZQUNuQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtTQUN0QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFJRCxDQUFDLENBQUMsSUFBaUI7UUFDZixJQUFJLE1BQU0sR0FBMkIsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUdELFNBQVMsT0FBTztJQUNaLE1BQU0sQ0FBQyxHQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxVQUFVLEVBQUUsRUFBRSxFQUFDLFdBQVcsRUFBRTtZQUM5QyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDO1NBQzlELEVBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLEtBQUssQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXJ0ZXNpYW5Ub1BvbGFyLCBmaW5kSW50ZXJzZWN0aW9uUG9pbnQsIGZpbmRTbG9wZSwgcG9sYXJUb0NhcnRlc2lhbiwgdG9OdW1iZXIgfSBmcm9tIFwic3JjL21hdGhQYXJzZXIvbWF0aFV0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBBeGlzLCBDb29yZGluYXRlLCBEcmF3LCBUaWt6amF4IH0gZnJvbSBcIi4vdGlrempheFwiO1xyXG5pbXBvcnQgeyBGb3JtYXRUaWt6amF4IH0gZnJvbSBcIi4vaW50ZXJwcmV0L3Rva2VuaXplVGlrempheFwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVGlrelN2ZyB7XHJcbiAgICBwcml2YXRlIHNvdXJjZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0aWt6amF4OiBGb3JtYXRUaWt6amF4O1xyXG4gICAgcHJpdmF0ZSBTVkd0aWt6amF4OiBhbnk7XHJcbiAgICBwcml2YXRlIHN2ZzogU1ZHU1ZHRWxlbWVudDtcclxuICAgIGRlYnVnSW5mbyA9IFwiXCI7XHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMudGlrempheCA9IG5ldyBGb3JtYXRUaWt6amF4KHRoaXMuc291cmNlKTtcclxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPXRoaXMudGlrempheC5kZWJ1Z0luZm87XHJcblxyXG4gICAgICAgIHRoaXMuU1ZHdGlrempheD1uZXcgVGlrempheFRvc3ZnKHRoaXMudGlrempheClcclxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPUpTT04uc3RyaW5naWZ5KHRoaXMuU1ZHdGlrempheCxudWxsLDEpXHJcblxyXG4gICAgICAgIHRoaXMuc2V0U1ZHZW52aXJvbm1lbnQoKTtcclxuICAgICAgICB0aGlzLmFkZCgpXHJcbiAgICB9XHJcbiAgICBhZGQoKXtcclxuICAgICAgICBjb25zdCBhPXt4MTogJzAnLCB5MTonMCcsIHgyOmZyb21QdCgxKSwgeTI6ZnJvbVB0KDEpLHN0cm9rZTogXCJ3aGl0ZVwiLCdzdHJva2Utd2lkdGgnOiBmcm9tUHQoMC40KX1cclxuICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVNWR0VsZW1lbnQoJ2xpbmUnLGEpKVxyXG4gICAgfS8vMzguODcgMC41MyAgMXB0PTM4Ljg3IDAuNHB0PTAuNTMgLy8gMnB0PTc1LjU4IDFwdD0zNy43OVxyXG5cclxuICAgIHByaXZhdGUgc2V0U1ZHZW52aXJvbm1lbnQoKSB7LypcclxuICAgICAgICBjb25zdCBtaW49dGhpcy50aWt6amF4LmdldE1pbigpO1xyXG4gICAgICAgIGNvbnN0IG1heD10aGlzLnRpa3pqYXguZ2V0TWF4KCk7XHJcbiAgICAgICAgdGhpcy5zdmcgPSB0aGlzLmNyZWF0ZVNWR0VsZW1lbnQoJ3N2ZycsIHtcclxuICAgICAgICAgICAgd2lkdGg6IGZyb21QdChtaW4uY2FydGVzaWFuWCttYXguY2FydGVzaWFuWCksXHJcbiAgICAgICAgICAgIGhlaWdodDogMi8vZnJvbVB0KG1pbi5jYXJ0ZXNpYW5ZK21heC5jYXJ0ZXNpYW5ZKzAuMiksXHJcbiAgICAgICAgICAgIC8vcHJlc2VydmVBc3BlY3RSYXRpbzogXCJub25lXCIsXHJcbiAgICAgICAgfSkgYXMgU1ZHU1ZHRWxlbWVudDsqL1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN2ZygpOiBTVkdTVkdFbGVtZW50IHtyZXR1cm4gdGhpcy5zdmc7fVxyXG5cclxuICAgIGNyZWF0ZVNWR0VsZW1lbnQodGFnOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBTVkdFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdGFnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5ncyBiZWZvcmUgc2V0dGluZyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgU3RyaW5nKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmNsYXNzIFRpa3pqYXhUb3N2ZyB7XHJcbiAgICBzdmdFbDogYW55XHJcbiAgICBjb25zdHJ1Y3Rvcih0OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBheGVzPVtcclxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTowfWFzIEF4aXMsXHJcbiAgICAgICAgICAgIHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6MH1hcyBBeGlzXHJcbiAgICAgICAgXVxyXG4gICAgICAgIHRoaXMuc3ZnRWw9dGhpcy5jKGF4ZXMpXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBjKGF4ZXM6IEFycmF5PEF4aXM+KTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG4gICAgXHJcbiAgICAgICAgYXhlcy5mb3JFYWNoKChheGlzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHRbJ3gnICsgaW5kZXhdID0gYXhpcy5jYXJ0ZXNpYW5YO1xyXG4gICAgICAgICAgICByZXN1bHRbJ3knICsgaW5kZXhdID0gYXhpcy5jYXJ0ZXNpYW5ZO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnQoKXtcclxuICAgIGNvbnN0IGE9e21vZGU6ICdkcmF3Jyxmb3JtYXR0aW5nOiAnJyxjb29yZGluYXRlczogW1xyXG4gICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6IDB9LHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6IDB9XHJcbiAgICBdfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmcm9tUHQocHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gcHQqMzcuNzk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHB0VG9QeChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCoxLjMzO1xyXG59XHJcbmZ1bmN0aW9uIHB4VG9QdChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCowLjc1O1xyXG59Il19