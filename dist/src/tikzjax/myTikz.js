import { FormatTikzjax } from "./interpret/tokenizeTikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUk1RCxNQUFNLE9BQU8sT0FBTztJQUNSLE1BQU0sQ0FBUztJQUNmLE9BQU8sQ0FBZ0I7SUFDdkIsVUFBVSxDQUFNO0lBQ2hCLEdBQUcsQ0FBZ0I7SUFDM0IsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLFlBQVksTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXhDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtRQUV2RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBQ0QsR0FBRztRQUNDLE1BQU0sQ0FBQyxHQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFBLHlEQUF5RDtJQUVsRCxpQkFBaUI7SUFRekIsQ0FBQztJQUVELE1BQU0sS0FBbUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztJQUUxQyxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsVUFBa0M7UUFDNUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1RSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ3BELHVEQUF1RDtZQUN2RCxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBRUQsTUFBTSxZQUFZO0lBQ2QsS0FBSyxDQUFLO0lBQ1YsWUFBWSxDQUFNO1FBQ2QsTUFBTSxJQUFJLEdBQUM7WUFDUCxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtZQUNuQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtTQUN0QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFJRCxDQUFDLENBQUMsSUFBaUI7UUFDZixJQUFJLE1BQU0sR0FBMkIsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUdELFNBQVMsT0FBTztJQUNaLE1BQU0sQ0FBQyxHQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxVQUFVLEVBQUUsRUFBRSxFQUFDLFdBQVcsRUFBRTtZQUM5QyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDO1NBQzlELEVBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLEtBQUssQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXJ0ZXNpYW5Ub1BvbGFyLCBmaW5kSW50ZXJzZWN0aW9uUG9pbnQsIGZpbmRTbG9wZSwgcG9sYXJUb0NhcnRlc2lhbiwgdG9OdW1iZXIgfSBmcm9tIFwic3JjL21hdGhQYXJzZXIvbWF0aFV0aWxpdGllc1wiO1xuaW1wb3J0IHsgQXhpcywgQ29vcmRpbmF0ZSwgRHJhdywgVGlrempheCB9IGZyb20gXCIuL3Rpa3pqYXhcIjtcbmltcG9ydCB7IEZvcm1hdFRpa3pqYXggfSBmcm9tIFwiLi9pbnRlcnByZXQvdG9rZW5pemVUaWt6amF4XCI7XG5cblxuXG5leHBvcnQgY2xhc3MgVGlrelN2ZyB7XG4gICAgcHJpdmF0ZSBzb3VyY2U6IHN0cmluZztcbiAgICBwcml2YXRlIHRpa3pqYXg6IEZvcm1hdFRpa3pqYXg7XG4gICAgcHJpdmF0ZSBTVkd0aWt6amF4OiBhbnk7XG4gICAgcHJpdmF0ZSBzdmc6IFNWR1NWR0VsZW1lbnQ7XG4gICAgZGVidWdJbmZvID0gXCJcIjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy50aWt6amF4ID0gbmV3IEZvcm1hdFRpa3pqYXgodGhpcy5zb3VyY2UpO1xuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPXRoaXMudGlrempheC5kZWJ1Z0luZm87XG5cbiAgICAgICAgdGhpcy5TVkd0aWt6amF4PW5ldyBUaWt6amF4VG9zdmcodGhpcy50aWt6amF4KVxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPUpTT04uc3RyaW5naWZ5KHRoaXMuU1ZHdGlrempheCxudWxsLDEpXG5cbiAgICAgICAgdGhpcy5zZXRTVkdlbnZpcm9ubWVudCgpO1xuICAgICAgICB0aGlzLmFkZCgpXG4gICAgfVxuICAgIGFkZCgpe1xuICAgICAgICBjb25zdCBhPXt4MTogJzAnLCB5MTonMCcsIHgyOmZyb21QdCgxKSwgeTI6ZnJvbVB0KDEpLHN0cm9rZTogXCJ3aGl0ZVwiLCdzdHJva2Utd2lkdGgnOiBmcm9tUHQoMC40KX1cbiAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVTVkdFbGVtZW50KCdsaW5lJyxhKSlcbiAgICB9Ly8zOC44NyAwLjUzICAxcHQ9MzguODcgMC40cHQ9MC41MyAvLyAycHQ9NzUuNTggMXB0PTM3Ljc5XG5cbiAgICBwcml2YXRlIHNldFNWR2Vudmlyb25tZW50KCkgey8qXG4gICAgICAgIGNvbnN0IG1pbj10aGlzLnRpa3pqYXguZ2V0TWluKCk7XG4gICAgICAgIGNvbnN0IG1heD10aGlzLnRpa3pqYXguZ2V0TWF4KCk7XG4gICAgICAgIHRoaXMuc3ZnID0gdGhpcy5jcmVhdGVTVkdFbGVtZW50KCdzdmcnLCB7XG4gICAgICAgICAgICB3aWR0aDogZnJvbVB0KG1pbi5jYXJ0ZXNpYW5YK21heC5jYXJ0ZXNpYW5YKSxcbiAgICAgICAgICAgIGhlaWdodDogMi8vZnJvbVB0KG1pbi5jYXJ0ZXNpYW5ZK21heC5jYXJ0ZXNpYW5ZKzAuMiksXG4gICAgICAgICAgICAvL3ByZXNlcnZlQXNwZWN0UmF0aW86IFwibm9uZVwiLFxuICAgICAgICB9KSBhcyBTVkdTVkdFbGVtZW50OyovXG4gICAgfVxuXG4gICAgZ2V0U3ZnKCk6IFNWR1NWR0VsZW1lbnQge3JldHVybiB0aGlzLnN2Zzt9XG5cbiAgICBjcmVhdGVTVkdFbGVtZW50KHRhZzogc3RyaW5nLCBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogU1ZHRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB0YWcpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBudW1iZXJzIHRvIHN0cmluZ3MgYmVmb3JlIHNldHRpbmcgYXR0cmlidXRlc1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgXG59XG5cbmNsYXNzIFRpa3pqYXhUb3N2ZyB7XG4gICAgc3ZnRWw6IGFueVxuICAgIGNvbnN0cnVjdG9yKHQ6IGFueSkge1xuICAgICAgICBjb25zdCBheGVzPVtcbiAgICAgICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6MH1hcyBBeGlzLFxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTowfWFzIEF4aXNcbiAgICAgICAgXVxuICAgICAgICB0aGlzLnN2Z0VsPXRoaXMuYyhheGVzKVxuICAgIH1cblxuXG5cbiAgICBjKGF4ZXM6IEFycmF5PEF4aXM+KTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBcbiAgICAgICAgYXhlcy5mb3JFYWNoKChheGlzLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0Wyd4JyArIGluZGV4XSA9IGF4aXMuY2FydGVzaWFuWDtcbiAgICAgICAgICAgIHJlc3VsdFsneScgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblk7XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0KCl7XG4gICAgY29uc3QgYT17bW9kZTogJ2RyYXcnLGZvcm1hdHRpbmc6ICcnLGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6IDB9LHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6IDB9XG4gICAgXX1cbn1cblxuZnVuY3Rpb24gZnJvbVB0KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCozNy43OTtcbn1cblxuZnVuY3Rpb24gcHRUb1B4KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCoxLjMzO1xufVxuZnVuY3Rpb24gcHhUb1B0KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCowLjc1O1xufSJdfQ==