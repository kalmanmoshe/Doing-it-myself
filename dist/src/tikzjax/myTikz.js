import { FormatTikzjax } from "./interpret/tokenizeTikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
        const min = this.tikzjax.getMin();
        const max = this.tikzjax.getMax();
        this.svg = this.createSVGElement('svg', {
            width: fromPt(min.cartesianX + max.cartesianX),
            height: 2 //fromPt(min.cartesianY+max.cartesianY+0.2),
            //preserveAspectRatio: "none",
        });
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUk1RCxNQUFNLE9BQU8sT0FBTztJQUNSLE1BQU0sQ0FBUztJQUNmLE9BQU8sQ0FBZ0I7SUFDdkIsVUFBVSxDQUFNO0lBQ2hCLEdBQUcsQ0FBZ0I7SUFDM0IsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLFlBQVksTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXhDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtRQUV2RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBQ0QsR0FBRztRQUNDLE1BQU0sQ0FBQyxHQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFBLHlEQUF5RDtJQUVsRCxpQkFBaUI7UUFDckIsTUFBTSxHQUFHLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxNQUFNLEdBQUcsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRTtZQUNwQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUM1QyxNQUFNLEVBQUUsQ0FBQyxDQUFBLDRDQUE0QztZQUNyRCw4QkFBOEI7U0FDakMsQ0FBa0IsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTSxLQUFtQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO0lBRTFDLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxVQUFrQztRQUM1RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVFLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDcEQsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBRUo7QUFFRCxNQUFNLFlBQVk7SUFDZCxLQUFLLENBQUs7SUFDVixZQUFZLENBQU07UUFDZCxNQUFNLElBQUksR0FBQztZQUNQLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1lBQ25DLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1NBQ3RDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUlELENBQUMsQ0FBQyxJQUFpQjtRQUNmLElBQUksTUFBTSxHQUEyQixFQUFFLENBQUM7UUFFeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDdEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBR0QsU0FBUyxPQUFPO0lBQ1osTUFBTSxDQUFDLEdBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUMsV0FBVyxFQUFFO1lBQzlDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUM7U0FDOUQsRUFBQyxDQUFBO0FBQ04sQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsS0FBSyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLElBQUksQ0FBQztBQUNuQixDQUFDO0FBQ0QsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhcnRlc2lhblRvUG9sYXIsIGZpbmRJbnRlcnNlY3Rpb25Qb2ludCwgZmluZFNsb3BlLCBwb2xhclRvQ2FydGVzaWFuLCB0b051bWJlciB9IGZyb20gXCJzcmMvbWF0aFV0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBBeGlzLCBDb29yZGluYXRlLCBEcmF3LCBUaWt6amF4IH0gZnJvbSBcIi4vdGlrempheFwiO1xyXG5pbXBvcnQgeyBGb3JtYXRUaWt6amF4IH0gZnJvbSBcIi4vaW50ZXJwcmV0L3Rva2VuaXplVGlrempheFwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVGlrelN2ZyB7XHJcbiAgICBwcml2YXRlIHNvdXJjZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0aWt6amF4OiBGb3JtYXRUaWt6amF4O1xyXG4gICAgcHJpdmF0ZSBTVkd0aWt6amF4OiBhbnk7XHJcbiAgICBwcml2YXRlIHN2ZzogU1ZHU1ZHRWxlbWVudDtcclxuICAgIGRlYnVnSW5mbyA9IFwiXCI7XHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMudGlrempheCA9IG5ldyBGb3JtYXRUaWt6amF4KHRoaXMuc291cmNlKTtcclxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPXRoaXMudGlrempheC5kZWJ1Z0luZm87XHJcblxyXG4gICAgICAgIHRoaXMuU1ZHdGlrempheD1uZXcgVGlrempheFRvc3ZnKHRoaXMudGlrempheClcclxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPUpTT04uc3RyaW5naWZ5KHRoaXMuU1ZHdGlrempheCxudWxsLDEpXHJcblxyXG4gICAgICAgIHRoaXMuc2V0U1ZHZW52aXJvbm1lbnQoKTtcclxuICAgICAgICB0aGlzLmFkZCgpXHJcbiAgICB9XHJcbiAgICBhZGQoKXtcclxuICAgICAgICBjb25zdCBhPXt4MTogJzAnLCB5MTonMCcsIHgyOmZyb21QdCgxKSwgeTI6ZnJvbVB0KDEpLHN0cm9rZTogXCJ3aGl0ZVwiLCdzdHJva2Utd2lkdGgnOiBmcm9tUHQoMC40KX1cclxuICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVNWR0VsZW1lbnQoJ2xpbmUnLGEpKVxyXG4gICAgfS8vMzguODcgMC41MyAgMXB0PTM4Ljg3IDAuNHB0PTAuNTMgLy8gMnB0PTc1LjU4IDFwdD0zNy43OVxyXG5cclxuICAgIHByaXZhdGUgc2V0U1ZHZW52aXJvbm1lbnQoKSB7XHJcbiAgICAgICAgY29uc3QgbWluPXRoaXMudGlrempheC5nZXRNaW4oKTtcclxuICAgICAgICBjb25zdCBtYXg9dGhpcy50aWt6amF4LmdldE1heCgpO1xyXG4gICAgICAgIHRoaXMuc3ZnID0gdGhpcy5jcmVhdGVTVkdFbGVtZW50KCdzdmcnLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiBmcm9tUHQobWluLmNhcnRlc2lhblgrbWF4LmNhcnRlc2lhblgpLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDIvL2Zyb21QdChtaW4uY2FydGVzaWFuWSttYXguY2FydGVzaWFuWSswLjIpLFxyXG4gICAgICAgICAgICAvL3ByZXNlcnZlQXNwZWN0UmF0aW86IFwibm9uZVwiLFxyXG4gICAgICAgIH0pIGFzIFNWR1NWR0VsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3ZnKCk6IFNWR1NWR0VsZW1lbnQge3JldHVybiB0aGlzLnN2Zzt9XHJcblxyXG4gICAgY3JlYXRlU1ZHRWxlbWVudCh0YWc6IHN0cmluZywgYXR0cmlidXRlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFNWR0VsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB0YWcpO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIGJlZm9yZSBzZXR0aW5nIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuY2xhc3MgVGlrempheFRvc3ZnIHtcclxuICAgIHN2Z0VsOiBhbnlcclxuICAgIGNvbnN0cnVjdG9yKHQ6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGF4ZXM9W1xyXG4gICAgICAgICAgICB7Y2FydGVzaWFuWDogMCxjYXJ0ZXNpYW5ZOjB9YXMgQXhpcyxcclxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTowfWFzIEF4aXNcclxuICAgICAgICBdXHJcbiAgICAgICAgdGhpcy5zdmdFbD10aGlzLmMoYXhlcylcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGMoYXhlczogQXJyYXk8QXhpcz4pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XHJcbiAgICBcclxuICAgICAgICBheGVzLmZvckVhY2goKGF4aXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdFsneCcgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblg7XHJcbiAgICAgICAgICAgIHJlc3VsdFsneScgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY29udmVydCgpe1xyXG4gICAgY29uc3QgYT17bW9kZTogJ2RyYXcnLGZvcm1hdHRpbmc6ICcnLGNvb3JkaW5hdGVzOiBbXHJcbiAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTogMH0se2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTogMH1cclxuICAgIF19XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb21QdChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCozNy43OTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHRUb1B4KHB0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHB0KjEuMzM7XHJcbn1cclxuZnVuY3Rpb24gcHhUb1B0KHB0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHB0KjAuNzU7XHJcbn0iXX0=