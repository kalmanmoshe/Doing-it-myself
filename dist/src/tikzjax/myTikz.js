import { FormatTikzjax } from "./tikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
        const min = this.tikzjax.getMin();
        const max = this.tikzjax.getMax();
        this.svg = this.createSVGElement('svg', {
            width: fromPt(min.cartesianX + max.cartesianX),
            height: 2 //fromPt(min.cartesianY+max.cartesianY+0.2),
            //preserveAspectRatio: "none",
        });
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBMEIsYUFBYSxFQUFXLE1BQU0sV0FBVyxDQUFDO0FBSTNFLE1BQU0sT0FBTyxPQUFPO0lBQ1IsTUFBTSxDQUFTO0lBQ2YsT0FBTyxDQUFnQjtJQUN2QixVQUFVLENBQU07SUFDaEIsR0FBRyxDQUFnQjtJQUMzQixTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ2YsWUFBWSxNQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFeEMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFDRCxHQUFHO1FBQ0MsTUFBTSxDQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFBO1FBQ2pHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUEseURBQXlEO0lBRWxELGlCQUFpQjtRQUNyQixNQUFNLEdBQUcsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO1lBQ3BDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzVDLE1BQU0sRUFBRSxDQUFDLENBQUEsNENBQTRDO1lBQ3JELDhCQUE4QjtTQUNqQyxDQUFrQixDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLEtBQW1CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7SUFFMUMsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLFVBQWtDO1FBQzVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUUsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbkQsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBRUQsTUFBTSxZQUFZO0lBQ2QsS0FBSyxDQUFLO0lBQ1YsWUFBWSxDQUFNO1FBQ2QsTUFBTSxJQUFJLEdBQUM7WUFDUCxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtZQUNuQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtTQUN0QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFJRCxDQUFDLENBQUMsSUFBaUI7UUFDZixJQUFJLE1BQU0sR0FBMkIsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUdELFNBQVMsT0FBTztJQUNaLE1BQU0sQ0FBQyxHQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxVQUFVLEVBQUUsRUFBRSxFQUFDLFdBQVcsRUFBRTtZQUM5QyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDO1NBQzlELEVBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLEtBQUssQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXJ0ZXNpYW5Ub1BvbGFyLCBmaW5kSW50ZXJzZWN0aW9uUG9pbnQsIGZpbmRTbG9wZSwgcG9sYXJUb0NhcnRlc2lhbiwgdG9OdW1iZXIgfSBmcm9tIFwic3JjL21hdGhVdGlsaXRpZXNcIjtcbmltcG9ydCB7IEF4aXMsIENvb3JkaW5hdGUsIERyYXcsIEZvcm1hdFRpa3pqYXgsIFRpa3pqYXggfSBmcm9tIFwiLi90aWt6amF4XCI7XG5cblxuXG5leHBvcnQgY2xhc3MgVGlrelN2ZyB7XG4gICAgcHJpdmF0ZSBzb3VyY2U6IHN0cmluZztcbiAgICBwcml2YXRlIHRpa3pqYXg6IEZvcm1hdFRpa3pqYXg7XG4gICAgcHJpdmF0ZSBTVkd0aWt6amF4OiBhbnk7XG4gICAgcHJpdmF0ZSBzdmc6IFNWR1NWR0VsZW1lbnQ7XG4gICAgZGVidWdJbmZvID0gXCJcIjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy50aWt6amF4ID0gbmV3IEZvcm1hdFRpa3pqYXgodGhpcy5zb3VyY2UpO1xuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPXRoaXMudGlrempheC5kZWJ1Z0luZm87XG5cbiAgICAgICAgdGhpcy5TVkd0aWt6amF4PW5ldyBUaWt6amF4VG9zdmcodGhpcy50aWt6amF4KVxuICAgICAgICB0aGlzLmRlYnVnSW5mbyArPUpTT04uc3RyaW5naWZ5KHRoaXMuU1ZHdGlrempheCxudWxsLDEpXG5cbiAgICAgICAgdGhpcy5zZXRTVkdlbnZpcm9ubWVudCgpO1xuICAgICAgICB0aGlzLmFkZCgpXG4gICAgfVxuICAgIGFkZCgpe1xuICAgICAgICBjb25zdCBhPXt4MTogJzAnLCB5MTonMCcsIHgyOmZyb21QdCgxKSwgeTI6ZnJvbVB0KDEpLHN0cm9rZTogXCJ3aGl0ZVwiLCdzdHJva2Utd2lkdGgnOiBmcm9tUHQoMC40KX1cbiAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVTVkdFbGVtZW50KCdsaW5lJyxhKSlcbiAgICB9Ly8zOC44NyAwLjUzICAxcHQ9MzguODcgMC40cHQ9MC41MyAvLyAycHQ9NzUuNTggMXB0PTM3Ljc5XG5cbiAgICBwcml2YXRlIHNldFNWR2Vudmlyb25tZW50KCkge1xuICAgICAgICBjb25zdCBtaW49dGhpcy50aWt6amF4LmdldE1pbigpO1xuICAgICAgICBjb25zdCBtYXg9dGhpcy50aWt6amF4LmdldE1heCgpO1xuICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnc3ZnJywge1xuICAgICAgICAgICAgd2lkdGg6IGZyb21QdChtaW4uY2FydGVzaWFuWCttYXguY2FydGVzaWFuWCksXG4gICAgICAgICAgICBoZWlnaHQ6IDIvL2Zyb21QdChtaW4uY2FydGVzaWFuWSttYXguY2FydGVzaWFuWSswLjIpLFxuICAgICAgICAgICAgLy9wcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcIm5vbmVcIixcbiAgICAgICAgfSkgYXMgU1ZHU1ZHRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXRTdmcoKTogU1ZHU1ZHRWxlbWVudCB7cmV0dXJuIHRoaXMuc3ZnO31cblxuICAgIGNyZWF0ZVNWR0VsZW1lbnQodGFnOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBTVkdFbGVtZW50IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHRhZyk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5ncyBiZWZvcmUgc2V0dGluZyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFN0cmluZyh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBcbn1cblxuY2xhc3MgVGlrempheFRvc3ZnIHtcbiAgICBzdmdFbDogYW55XG4gICAgY29uc3RydWN0b3IodDogYW55KSB7XG4gICAgICAgIGNvbnN0IGF4ZXM9W1xuICAgICAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTowfWFzIEF4aXMsXG4gICAgICAgICAgICB7Y2FydGVzaWFuWDogMSxjYXJ0ZXNpYW5ZOjB9YXMgQXhpc1xuICAgICAgICBdXG4gICAgICAgIHRoaXMuc3ZnRWw9dGhpcy5jKGF4ZXMpXG4gICAgfVxuXG5cblxuICAgIGMoYXhlczogQXJyYXk8QXhpcz4pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICAgIFxuICAgICAgICBheGVzLmZvckVhY2goKGF4aXMsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXN1bHRbJ3gnICsgaW5kZXhdID0gYXhpcy5jYXJ0ZXNpYW5YO1xuICAgICAgICAgICAgcmVzdWx0Wyd5JyArIGluZGV4XSA9IGF4aXMuY2FydGVzaWFuWTtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbnZlcnQoKXtcbiAgICBjb25zdCBhPXttb2RlOiAnZHJhdycsZm9ybWF0dGluZzogJycsY29vcmRpbmF0ZXM6IFtcbiAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTogMH0se2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTogMH1cbiAgICBdfVxufVxuXG5mdW5jdGlvbiBmcm9tUHQocHQ6IG51bWJlcil7XG4gICAgcmV0dXJuIHB0KjM3Ljc5O1xufVxuXG5mdW5jdGlvbiBwdFRvUHgocHQ6IG51bWJlcil7XG4gICAgcmV0dXJuIHB0KjEuMzM7XG59XG5mdW5jdGlvbiBweFRvUHQocHQ6IG51bWJlcil7XG4gICAgcmV0dXJuIHB0KjAuNzU7XG59Il19