import { FormatTikzjax } from "./tikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
        const min = this.tikzjax.getMin();
        const max = this.tikzjax.getMax();
        this.svg = this.createSVGElement('svg', {
            width: fromPt(min.cartesianX + max.cartesianX),
            height: 2 //fromPt(min.cartesianY+max.cartesianY+0.2),
            //preserveAspectRatio: "none",
        });
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBMEIsYUFBYSxFQUFXLE1BQU0sV0FBVyxDQUFDO0FBSTNFLE1BQU0sT0FBTyxPQUFPO0lBQ1IsTUFBTSxDQUFTO0lBQ2YsT0FBTyxDQUFnQjtJQUN2QixVQUFVLENBQU07SUFDaEIsR0FBRyxDQUFnQjtJQUMzQixTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ2YsWUFBWSxNQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFeEMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFDRCxHQUFHO1FBQ0MsTUFBTSxDQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFBO1FBQ2pHLElBQUksQ0FBQyxHQUFHLENB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aW5kU2xvcGUsIHBvbGFyVG9DYXJ0ZXNpYW4sIHRvTnVtYmVyIH0gZnJvbSBcInNyYy9tYXRoVXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBBeGlzLCBDb29yZGluYXRlLCBEcmF3LCBGb3JtYXRUaWt6amF4LCBUaWt6amF4IH0gZnJvbSBcIi4vdGlrempheFwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIFRpa3pTdmcge1xuICAgIHByaXZhdGUgc291cmNlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSB0aWt6amF4OiBGb3JtYXRUaWt6amF4O1xuICAgIHByaXZhdGUgU1ZHdGlrempheDogYW55O1xuICAgIHByaXZhdGUgc3ZnOiBTVkdTVkdFbGVtZW50O1xuICAgIGRlYnVnSW5mbyA9IFwiXCI7XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMudGlrempheCA9IG5ldyBGb3JtYXRUaWt6amF4KHRoaXMuc291cmNlKTtcbiAgICAgICAgdGhpcy5kZWJ1Z0luZm8gKz10aGlzLnRpa3pqYXguZGVidWdJbmZvO1xuXG4gICAgICAgIHRoaXMuU1ZHdGlrempheD1uZXcgVGlrempheFRvc3ZnKHRoaXMudGlrempheClcbiAgICAgICAgdGhpcy5kZWJ1Z0luZm8gKz1KU09OLnN0cmluZ2lmeSh0aGlzLlNWR3Rpa3pqYXgsbnVsbCwxKVxuXG4gICAgICAgIHRoaXMuc2V0U1ZHZW52aXJvbm1lbnQoKTtcbiAgICAgICAgdGhpcy5hZGQoKVxuICAgIH1cbiAgICBhZGQoKXtcbiAgICAgICAgY29uc3QgYT17eDE6ICcwJywgeTE6JzAnLCB4Mjpmcm9tUHQoMSksIHkyOmZyb21QdCgxKSxzdHJva2U6IFwid2hpdGVcIiwnc3Ryb2tlLXdpZHRoJzogZnJvbVB0KDAuNCl9XG4gICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnbGluZScsYSkpXG4gICAgfS8vMzguODcgMC41MyAgMXB0PTM4Ljg3IDAuNHB0PTAuNTMgLy8gMnB0PTc1LjU4IDFwdD0zNy43OVxuXG4gICAgcHJpdmF0ZSBzZXRTVkdlbnZpcm9ubWVudCgpIHtcbiAgICAgICAgY29uc3QgbWluPXRoaXMudGlrempheC5nZXRNaW4oKTtcbiAgICAgICAgY29uc3QgbWF4PXRoaXMudGlrempheC5nZXRNYXgoKTtcbiAgICAgICAgdGhpcy5zdmcgPSB0aGlzLmNyZWF0ZVNWR0VsZW1lbnQoJ3N2ZycsIHtcbiAgICAgICAgICAgIHdpZHRoOiBmcm9tUHQobWluLmNhcnRlc2lhblgrbWF4LmNhcnRlc2lhblgpLFxuICAgICAgICAgICAgaGVpZ2h0OiAyLy9mcm9tUHQobWluLmNhcnRlc2lhblkrbWF4LmNhcnRlc2lhblkrMC4yKSxcbiAgICAgICAgICAgIC8vcHJlc2VydmVBc3BlY3RSYXRpbzogXCJub25lXCIsXG4gICAgICAgIH0pIGFzIFNWR1NWR0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0U3ZnKCk6IFNWR1NWR0VsZW1lbnQge3JldHVybiB0aGlzLnN2Zzt9XG5cbiAgICBjcmVhdGVTVkdFbGVtZW50KHRhZzogc3RyaW5nLCBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogU1ZHRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB0YWcpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBudW1iZXJzIHRvIHN0cmluZ3MgYmVmb3JlIHNldHRpbmcgYXR0cmlidXRlc1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgXG59XG5cbmNsYXNzIFRpa3pqYXhUb3N2ZyB7XG4gICAgc3ZnRWw6IGFueVxuICAgIGNvbnN0cnVjdG9yKHQ6IGFueSkge1xuICAgICAgICBjb25zdCBheGVzPVtcbiAgICAgICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6MH1hcyBBeGlzLFxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTowfWFzIEF4aXNcbiAgICAgICAgXVxuICAgICAgICB0aGlzLnN2Z0VsPXRoaXMuYyhheGVzKVxuICAgIH1cblxuXG5cbiAgICBjKGF4ZXM6IEFycmF5PEF4aXM+KTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBcbiAgICAgICAgYXhlcy5mb3JFYWNoKChheGlzLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0Wyd4JyArIGluZGV4XSA9IGF4aXMuY2FydGVzaWFuWDtcbiAgICAgICAgICAgIHJlc3VsdFsneScgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblk7XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0KCl7XG4gICAgY29uc3QgYT17bW9kZTogJ2RyYXcnLGZvcm1hdHRpbmc6ICcnLGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6IDB9LHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6IDB9XG4gICAgXX1cbn1cblxuZnVuY3Rpb24gZnJvbVB0KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCozNy43OTtcbn1cblxuZnVuY3Rpb24gcHRUb1B4KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCoxLjMzO1xufVxuZnVuY3Rpb24gcHhUb1B0KHB0OiBudW1iZXIpe1xuICAgIHJldHVybiBwdCowLjc1O1xufSJdfQ==