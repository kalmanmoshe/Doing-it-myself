import { FormatTikzjax } from "./tikzjax";
export class TikzSvg {
    source;
    tikzjax;
    SVGtikzjax;
    svg;
    debugInfo = "";
    constructor(source) {
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
        const min = this.tikzjax.getMin();
        const max = this.tikzjax.getMax();
        this.svg = this.createSVGElement('svg', {
            width: fromPt(min.cartesianX + max.cartesianX),
            height: 2 //fromPt(min.cartesianY+max.cartesianY+0.2),
            //preserveAspectRatio: "none",
        });
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    svgEl;
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBMEIsYUFBYSxFQUFXLE1BQU0sV0FBVyxDQUFDO0FBSTNFLE1BQU0sT0FBTyxPQUFPO0lBQ1IsTUFBTSxDQUFTO0lBQ2YsT0FBTyxDQUFnQjtJQUN2QixVQUFVLENBQU07SUFDaEIsR0FBRyxDQUFnQjtJQUMzQixTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ2YsWUFBWSxNQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFeEMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFDRCxHQUFHO1FBQ0MsTUFBTSxDQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFBO1FBQ2pHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUEseURBQXlEO0lBRWxELGlCQUFpQjtRQUNyQixNQUFNLEdBQUcsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO1lBQ3BDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzVDLE1BQU0sRUFBRSxDQUFDLENBQUEsNENBQTRDO1lBQ3JELDhCQUE4QjtTQUNqQyxDQUFrQixDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLEtBQW1CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7SUFFMUMsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLFVBQWtDO1FBQzVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUUsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbkQsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBRUQsTUFBTSxZQUFZO0lBQ2QsS0FBSyxDQUFLO0lBQ1YsWUFBWSxDQUFNO1FBQ2QsTUFBTSxJQUFJLEdBQUM7WUFDUCxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtZQUNuQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBUTtTQUN0QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFJRCxDQUFDLENBQUMsSUFBaUI7UUFDZixJQUFJLE1BQU0sR0FBMkIsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUdELFNBQVMsT0FBTztJQUNaLE1BQU0sQ0FBQyxHQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxVQUFVLEVBQUUsRUFBRSxFQUFDLFdBQVcsRUFBRTtZQUM5QyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDO1NBQzlELEVBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLEtBQUssQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXJ0ZXNpYW5Ub1BvbGFyLCBmaW5kSW50ZXJzZWN0aW9uUG9pbnQsIGZpbmRTbG9wZSwgcG9sYXJUb0NhcnRlc2lhbiwgdG9OdW1iZXIgfSBmcm9tIFwic3JjL21hdGhVdGlsaXRpZXNcIjtcclxuaW1wb3J0IHsgQXhpcywgQ29vcmRpbmF0ZSwgRHJhdywgRm9ybWF0VGlrempheCwgVGlrempheCB9IGZyb20gXCIuL3Rpa3pqYXhcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRpa3pTdmcge1xyXG4gICAgcHJpdmF0ZSBzb3VyY2U6IHN0cmluZztcclxuICAgIHByaXZhdGUgdGlrempheDogRm9ybWF0VGlrempheDtcclxuICAgIHByaXZhdGUgU1ZHdGlrempheDogYW55O1xyXG4gICAgcHJpdmF0ZSBzdmc6IFNWR1NWR0VsZW1lbnQ7XHJcbiAgICBkZWJ1Z0luZm8gPSBcIlwiO1xyXG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICB0aGlzLnRpa3pqYXggPSBuZXcgRm9ybWF0VGlrempheCh0aGlzLnNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z0luZm8gKz10aGlzLnRpa3pqYXguZGVidWdJbmZvO1xyXG5cclxuICAgICAgICB0aGlzLlNWR3Rpa3pqYXg9bmV3IFRpa3pqYXhUb3N2Zyh0aGlzLnRpa3pqYXgpXHJcbiAgICAgICAgdGhpcy5kZWJ1Z0luZm8gKz1KU09OLnN0cmluZ2lmeSh0aGlzLlNWR3Rpa3pqYXgsbnVsbCwxKVxyXG5cclxuICAgICAgICB0aGlzLnNldFNWR2Vudmlyb25tZW50KCk7XHJcbiAgICAgICAgdGhpcy5hZGQoKVxyXG4gICAgfVxyXG4gICAgYWRkKCl7XHJcbiAgICAgICAgY29uc3QgYT17eDE6ICcwJywgeTE6JzAnLCB4Mjpmcm9tUHQoMSksIHkyOmZyb21QdCgxKSxzdHJva2U6IFwid2hpdGVcIiwnc3Ryb2tlLXdpZHRoJzogZnJvbVB0KDAuNCl9XHJcbiAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVTVkdFbGVtZW50KCdsaW5lJyxhKSlcclxuICAgIH0vLzM4Ljg3IDAuNTMgIDFwdD0zOC44NyAwLjRwdD0wLjUzIC8vIDJwdD03NS41OCAxcHQ9MzcuNzlcclxuXHJcbiAgICBwcml2YXRlIHNldFNWR2Vudmlyb25tZW50KCkge1xyXG4gICAgICAgIGNvbnN0IG1pbj10aGlzLnRpa3pqYXguZ2V0TWluKCk7XHJcbiAgICAgICAgY29uc3QgbWF4PXRoaXMudGlrempheC5nZXRNYXgoKTtcclxuICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnc3ZnJywge1xyXG4gICAgICAgICAgICB3aWR0aDogZnJvbVB0KG1pbi5jYXJ0ZXNpYW5YK21heC5jYXJ0ZXNpYW5YKSxcclxuICAgICAgICAgICAgaGVpZ2h0OiAyLy9mcm9tUHQobWluLmNhcnRlc2lhblkrbWF4LmNhcnRlc2lhblkrMC4yKSxcclxuICAgICAgICAgICAgLy9wcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcIm5vbmVcIixcclxuICAgICAgICB9KSBhcyBTVkdTVkdFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN2ZygpOiBTVkdTVkdFbGVtZW50IHtyZXR1cm4gdGhpcy5zdmc7fVxyXG5cclxuICAgIGNyZWF0ZVNWR0VsZW1lbnQodGFnOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBTVkdFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdGFnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5ncyBiZWZvcmUgc2V0dGluZyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgU3RyaW5nKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmNsYXNzIFRpa3pqYXhUb3N2ZyB7XHJcbiAgICBzdmdFbDogYW55XHJcbiAgICBjb25zdHJ1Y3Rvcih0OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBheGVzPVtcclxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTowfWFzIEF4aXMsXHJcbiAgICAgICAgICAgIHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6MH1hcyBBeGlzXHJcbiAgICAgICAgXVxyXG4gICAgICAgIHRoaXMuc3ZnRWw9dGhpcy5jKGF4ZXMpXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBjKGF4ZXM6IEFycmF5PEF4aXM+KTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG4gICAgXHJcbiAgICAgICAgYXhlcy5mb3JFYWNoKChheGlzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHRbJ3gnICsgaW5kZXhdID0gYXhpcy5jYXJ0ZXNpYW5YO1xyXG4gICAgICAgICAgICByZXN1bHRbJ3knICsgaW5kZXhdID0gYXhpcy5jYXJ0ZXNpYW5ZO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnQoKXtcclxuICAgIGNvbnN0IGE9e21vZGU6ICdkcmF3Jyxmb3JtYXR0aW5nOiAnJyxjb29yZGluYXRlczogW1xyXG4gICAgICAgIHtjYXJ0ZXNpYW5YOiAwLGNhcnRlc2lhblk6IDB9LHtjYXJ0ZXNpYW5YOiAxLGNhcnRlc2lhblk6IDB9XHJcbiAgICBdfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmcm9tUHQocHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gcHQqMzcuNzk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHB0VG9QeChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCoxLjMzO1xyXG59XHJcbmZ1bmN0aW9uIHB4VG9QdChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCowLjc1O1xyXG59Il19