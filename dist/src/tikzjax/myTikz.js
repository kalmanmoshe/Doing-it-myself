import { FormatTikzjax } from "./interpret/tokenizeTikzjax";
export class TikzSvg {
    constructor(source) {
        this.debugInfo = "";
        this.source = source;
        this.tikzjax = new FormatTikzjax(this.source);
        this.debugInfo += this.tikzjax.debugInfo;
        this.SVGtikzjax = new TikzjaxTosvg(this.tikzjax);
        this.debugInfo += JSON.stringify(this.SVGtikzjax, null, 1);
        this.setSVGenvironment();
        this.add();
    }
    add() {
        const a = { x1: '0', y1: '0', x2: fromPt(1), y2: fromPt(1), stroke: "white", 'stroke-width': fromPt(0.4) };
        this.svg.appendChild(this.createSVGElement('line', a));
    } //38.87 0.53  1pt=38.87 0.4pt=0.53 // 2pt=75.58 1pt=37.79
    setSVGenvironment() {
    }
    getSvg() { return this.svg; }
    createSVGElement(tag, attributes) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
        for (const [key, value] of Object.entries(attributes)) {
            // Convert numbers to strings before setting attributes
            element.setAttribute(key, String(value));
        }
        return element;
    }
}
class TikzjaxTosvg {
    constructor(t) {
        const axes = [
            { cartesianX: 0, cartesianY: 0 },
            { cartesianX: 1, cartesianY: 0 }
        ];
        this.svgEl = this.c(axes);
    }
    c(axes) {
        let result = {};
        axes.forEach((axis, index) => {
            result['x' + index] = axis.cartesianX;
            result['y' + index] = axis.cartesianY;
        });
        return result;
    }
}
function convert() {
    const a = { mode: 'draw', formatting: '', coordinates: [
            { cartesianX: 0, cartesianY: 0 }, { cartesianX: 1, cartesianY: 0 }
        ] };
}
function fromPt(pt) {
    return pt * 37.79;
}
function ptToPx(pt) {
    return pt * 1.33;
}
function pxToPt(pt) {
    return pt * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlUaWt6LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvbXlUaWt6LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUk1RCxNQUFNLE9BQU8sT0FBTztJQU1oQixZQUFZLE1BQWM7UUFEMUIsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVYLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFeEMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFDRCxHQUFHO1FBQ0MsTUFBTSxDQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFBO1FBQ2pHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUEseURBQXlEO0lBRWxELGlCQUFpQjtJQVF6QixDQUFDO0lBRUQsTUFBTSxLQUFtQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO0lBRTFDLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxVQUFrQztRQUM1RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVFLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDcEQsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBRUo7QUFFRCxNQUFNLFlBQVk7SUFFZCxZQUFZLENBQU07UUFDZCxNQUFNLElBQUksR0FBQztZQUNQLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1lBQ25DLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFRO1NBQ3RDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUlELENBQUMsQ0FBQyxJQUFpQjtRQUNmLElBQUksTUFBTSxHQUEyQixFQUFFLENBQUM7UUFFeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDdEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBR0QsU0FBUyxPQUFPO0lBQ1osTUFBTSxDQUFDLEdBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUMsV0FBVyxFQUFFO1lBQzlDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUM7U0FDOUQsRUFBQyxDQUFBO0FBQ04sQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEVBQVU7SUFDdEIsT0FBTyxFQUFFLEdBQUMsS0FBSyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFVO0lBQ3RCLE9BQU8sRUFBRSxHQUFDLElBQUksQ0FBQztBQUNuQixDQUFDO0FBQ0QsU0FBUyxNQUFNLENBQUMsRUFBVTtJQUN0QixPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhcnRlc2lhblRvUG9sYXIsIGZpbmRJbnRlcnNlY3Rpb25Qb2ludCwgZmluZFNsb3BlLCBwb2xhclRvQ2FydGVzaWFuLCB0b051bWJlciB9IGZyb20gXCJzcmMvbWF0aFBhcnNlci9tYXRoVXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IEF4aXMsIENvb3JkaW5hdGUsIERyYXcsIFRpa3pqYXggfSBmcm9tIFwiLi90aWt6amF4XCI7XHJcbmltcG9ydCB7IEZvcm1hdFRpa3pqYXggfSBmcm9tIFwiLi9pbnRlcnByZXQvdG9rZW5pemVUaWt6amF4XCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUaWt6U3ZnIHtcclxuICAgIHByaXZhdGUgc291cmNlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRpa3pqYXg6IEZvcm1hdFRpa3pqYXg7XHJcbiAgICBwcml2YXRlIFNWR3Rpa3pqYXg6IGFueTtcclxuICAgIHByaXZhdGUgc3ZnOiBTVkdTVkdFbGVtZW50O1xyXG4gICAgZGVidWdJbmZvID0gXCJcIjtcclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy50aWt6amF4ID0gbmV3IEZvcm1hdFRpa3pqYXgodGhpcy5zb3VyY2UpO1xyXG4gICAgICAgIHRoaXMuZGVidWdJbmZvICs9dGhpcy50aWt6amF4LmRlYnVnSW5mbztcclxuXHJcbiAgICAgICAgdGhpcy5TVkd0aWt6amF4PW5ldyBUaWt6amF4VG9zdmcodGhpcy50aWt6amF4KVxyXG4gICAgICAgIHRoaXMuZGVidWdJbmZvICs9SlNPTi5zdHJpbmdpZnkodGhpcy5TVkd0aWt6amF4LG51bGwsMSlcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTVkdlbnZpcm9ubWVudCgpO1xyXG4gICAgICAgIHRoaXMuYWRkKClcclxuICAgIH1cclxuICAgIGFkZCgpe1xyXG4gICAgICAgIGNvbnN0IGE9e3gxOiAnMCcsIHkxOicwJywgeDI6ZnJvbVB0KDEpLCB5Mjpmcm9tUHQoMSksc3Ryb2tlOiBcIndoaXRlXCIsJ3N0cm9rZS13aWR0aCc6IGZyb21QdCgwLjQpfVxyXG4gICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnbGluZScsYSkpXHJcbiAgICB9Ly8zOC44NyAwLjUzICAxcHQ9MzguODcgMC40cHQ9MC41MyAvLyAycHQ9NzUuNTggMXB0PTM3Ljc5XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTVkdlbnZpcm9ubWVudCgpIHsvKlxyXG4gICAgICAgIGNvbnN0IG1pbj10aGlzLnRpa3pqYXguZ2V0TWluKCk7XHJcbiAgICAgICAgY29uc3QgbWF4PXRoaXMudGlrempheC5nZXRNYXgoKTtcclxuICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuY3JlYXRlU1ZHRWxlbWVudCgnc3ZnJywge1xyXG4gICAgICAgICAgICB3aWR0aDogZnJvbVB0KG1pbi5jYXJ0ZXNpYW5YK21heC5jYXJ0ZXNpYW5YKSxcclxuICAgICAgICAgICAgaGVpZ2h0OiAyLy9mcm9tUHQobWluLmNhcnRlc2lhblkrbWF4LmNhcnRlc2lhblkrMC4yKSxcclxuICAgICAgICAgICAgLy9wcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcIm5vbmVcIixcclxuICAgICAgICB9KSBhcyBTVkdTVkdFbGVtZW50OyovXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3ZnKCk6IFNWR1NWR0VsZW1lbnQge3JldHVybiB0aGlzLnN2Zzt9XHJcblxyXG4gICAgY3JlYXRlU1ZHRWxlbWVudCh0YWc6IHN0cmluZywgYXR0cmlidXRlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IFNWR0VsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB0YWcpO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIGJlZm9yZSBzZXR0aW5nIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuY2xhc3MgVGlrempheFRvc3ZnIHtcclxuICAgIHN2Z0VsOiBhbnlcclxuICAgIGNvbnN0cnVjdG9yKHQ6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGF4ZXM9W1xyXG4gICAgICAgICAgICB7Y2FydGVzaWFuWDogMCxjYXJ0ZXNpYW5ZOjB9YXMgQXhpcyxcclxuICAgICAgICAgICAge2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTowfWFzIEF4aXNcclxuICAgICAgICBdXHJcbiAgICAgICAgdGhpcy5zdmdFbD10aGlzLmMoYXhlcylcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGMoYXhlczogQXJyYXk8QXhpcz4pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XHJcbiAgICBcclxuICAgICAgICBheGVzLmZvckVhY2goKGF4aXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdFsneCcgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblg7XHJcbiAgICAgICAgICAgIHJlc3VsdFsneScgKyBpbmRleF0gPSBheGlzLmNhcnRlc2lhblk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY29udmVydCgpe1xyXG4gICAgY29uc3QgYT17bW9kZTogJ2RyYXcnLGZvcm1hdHRpbmc6ICcnLGNvb3JkaW5hdGVzOiBbXHJcbiAgICAgICAge2NhcnRlc2lhblg6IDAsY2FydGVzaWFuWTogMH0se2NhcnRlc2lhblg6IDEsY2FydGVzaWFuWTogMH1cclxuICAgIF19XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb21QdChwdDogbnVtYmVyKXtcclxuICAgIHJldHVybiBwdCozNy43OTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHRUb1B4KHB0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHB0KjEuMzM7XHJcbn1cclxuZnVuY3Rpb24gcHhUb1B0KHB0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHB0KjAuNzU7XHJcbn0iXX0=