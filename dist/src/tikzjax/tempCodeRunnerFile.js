assignFormatting(formattingArr, (Array), parentKey ?  : string // Used to pass context for nested properties
);
{
    const targetObject = parentKey
        ? this[parentKey] || {}
        : this;
    if (parentKey) {
        this[parentKey] = targetObject; // Ensure sub-scope exists
    }
    const classProperties = Object.keys(targetObject).reduce((map, prop) => {
        map[prop.toLowerCase()] = prop;
        return map;
    }, {});
    for (const { key, value } of formattingArr) {
        const normalizedKey = classProperties[key.toLowerCase()];
        if (!normalizedKey) {
            console.warn(`Property ${key} not found on the target scope`);
            continue;
        }
        if (Array.isArray(value) && value.some((item) => item.key && item.value)) {
            // Recursive call with nested scope
            this.assignFormatting(value, normalizedKey);
            continue;
        }
        if (typeof value === "object" && value !== null) {
            // Handle nested objects using `setProperty`
            for (const nestedKey of Object.keys(value)) {
                const nestedValue = value[nestedKey];
                this.setProperty(normalizedKey, nestedValue, nestedKey);
            }
        }
        else if (value !== undefined && value !== null) {
            // Assign primitive value directly using `setProperty`
            this.setProperty(normalizedKey, value);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcENvZGVSdW5uZXJGaWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvdGVtcENvZGVSdW5uZXJGaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixDQUNSLGFBQWEsRUFBRSxDQUFBLEtBQWtDLENBQUEsRUFDakQsU0FBUyxDQUFBLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsNkNBQTZDO0NBQ25FLENBQUE7QUFBQztJQUNFLE1BQU0sWUFBWSxHQUFHLFNBQVM7UUFDMUIsQ0FBQyxDQUFFLElBQTRCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRTtRQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsSUFBSSxTQUFTLEVBQUU7UUFDVixJQUE0QixDQUFDLFNBQVMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLDBCQUEwQjtLQUN0RjtJQUVELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ25FLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDLEVBQUUsRUFBNEIsQ0FBQyxDQUFDO0lBRWpDLEtBQUssTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxhQUFhLEVBQUU7UUFDeEMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0NBQWdDLENBQUMsQ0FBQztZQUM5RCxTQUFTO1NBQ1o7UUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0UsbUNBQW1DO1lBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDNUMsU0FBUztTQUNaO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUM3Qyw0Q0FBNEM7WUFDNUMsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN4QyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBaUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDL0U7U0FDSjthQUFNLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQzlDLHNEQUFzRDtZQUN0RCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUQ7S0FDSjtDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiYXNzaWduRm9ybWF0dGluZyhcclxuICAgICAgICBmb3JtYXR0aW5nQXJyOiBBcnJheTx7IGtleTogc3RyaW5nOyB2YWx1ZTogYW55IH0+LFxyXG4gICAgICAgIHBhcmVudEtleT86IHN0cmluZyAvLyBVc2VkIHRvIHBhc3MgY29udGV4dCBmb3IgbmVzdGVkIHByb3BlcnRpZXNcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldE9iamVjdCA9IHBhcmVudEtleVxyXG4gICAgICAgICAgICA/ICh0aGlzIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW3BhcmVudEtleV0gfHwge31cclxuICAgICAgICAgICAgOiB0aGlzO1xyXG4gICAgICAgIGlmIChwYXJlbnRLZXkpIHtcclxuICAgICAgICAgICAgKHRoaXMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbcGFyZW50S2V5XSA9IHRhcmdldE9iamVjdDsgLy8gRW5zdXJlIHN1Yi1zY29wZSBleGlzdHNcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBjbGFzc1Byb3BlcnRpZXMgPSBPYmplY3Qua2V5cyh0YXJnZXRPYmplY3QpLnJlZHVjZSgobWFwLCBwcm9wKSA9PiB7XHJcbiAgICAgICAgICAgIG1hcFtwcm9wLnRvTG93ZXJDYXNlKCldID0gcHJvcDtcclxuICAgICAgICAgICAgcmV0dXJuIG1hcDtcclxuICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTtcclxuICAgIFxyXG4gICAgICAgIGZvciAoY29uc3QgeyBrZXksIHZhbHVlIH0gb2YgZm9ybWF0dGluZ0Fycikge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2xhc3NQcm9wZXJ0aWVzW2tleS50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgaWYgKCFub3JtYWxpemVkS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFByb3BlcnR5ICR7a2V5fSBub3QgZm91bmQgb24gdGhlIHRhcmdldCBzY29wZWApO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuc29tZSgoaXRlbTogYW55KSA9PiBpdGVtLmtleSAmJiBpdGVtLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlIGNhbGwgd2l0aCBuZXN0ZWQgc2NvcGVcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduRm9ybWF0dGluZyh2YWx1ZSwgbm9ybWFsaXplZEtleSk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBuZXN0ZWQgb2JqZWN0cyB1c2luZyBgc2V0UHJvcGVydHlgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5lc3RlZEtleSBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXN0ZWRWYWx1ZSA9IHZhbHVlW25lc3RlZEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShub3JtYWxpemVkS2V5IGFzIGtleW9mIEZvcm1hdHRpbmcsIG5lc3RlZFZhbHVlLCBuZXN0ZWRLZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFzc2lnbiBwcmltaXRpdmUgdmFsdWUgZGlyZWN0bHkgdXNpbmcgYHNldFByb3BlcnR5YFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShub3JtYWxpemVkS2V5IGFzIGtleW9mIEZvcm1hdHRpbmcsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0iXX0=