function dissectXYaxis(match) {
    let Xnode = "", Ynode = "";
    if (match[1] && match[2]) {
        Xnode = match[1].match(/['`"]([\w\d&$]+)['`"]/);
        Ynode = match[2].match(/['`"]([\w\d&$]+)['`"]/);
        Xnode = Xnode[0].substring(1, Xnode.length);
        Ynode = Ynode[0].substring(1, Ynode.length);
    }
    return {
        type: "xyaxis",
        Xformatting: match[1]?.replace(/(->|<-|['`"].*?['`"])/g, ""),
        Yformatting: match[2]?.replace(/(->|<-|['`"].*?['`"])/g, ""),
        xDirection: match[1] && /->/.test(match[1]) ? "left" : "right",
        yDirection: match[2] && /->/.test(match[2]) ? "down" : "up",
        Xnode: Xnode,
        Ynode: Ynode,
    };
}
function dissectDraw(match, tokens) {
    if (!match || !match[2]) {
        console.error("Invalid match input, aborting function.");
        return null;
    }
    const path = match[2];
    const coordinatesArray = [];
    //[a-zA-Z0-9.\\{}>\-\\<$\s]*
    const nodeRegex = /[\s]*node[\s]*\[?([\w\d,\s.=]*)\]?[\s]*{([a-zA-Z0-9.\\{}>\-\\<$\s]*)}[\s]*/;
    const formattingRegex = /[\s]*(cycle|--cycle|--\+\+|--\+|--|circle|rectangle)[\s]*/;
    const coordinateRegex = /\s*\(([a-zA-Z0-9,:.\w\d]+)\)[\s]*/;
    let i = 0, j = 0;
    while (i < path.length && j < 20) {
        j++;
        //console.log(coordinatesArray)
        const coordinateMatch = path.slice(i).match(coordinateRegex);
        if (coordinateMatch?.index === 0) {
            coordinatesArray.push({ type: "coordinate", value: coordinateMatch[1] });
            i += coordinateMatch[0].length;
        }
        const formattingMatch = path.slice(i).match(formattingRegex);
        if (formattingMatch?.index === 0) {
            i += formattingMatch[0].length;
            coordinatesArray.push({ type: "formatting", value: formattingMatch[0] });
        }
        const nodeMatch = path.slice(i).match(nodeRegex);
        if (nodeMatch?.index === 0) {
            coordinatesArray.push({ type: "node", formatting: nodeMatch[1] || "", value: nodeMatch[2] });
            i += nodeMatch[0].length;
        }
    }
    if (j === 20) {
        return match[0];
    }
    for (let i = 0; i < coordinatesArray.length; i++) {
        if (coordinatesArray[i].type === "coordinate") {
            let previousFormatting = undefined;
            if (i > 0 && coordinatesArray[i - 1].type === "formatting") {
                previousFormatting = coordinatesArray[i - 1].value;
            }
            else if (i > 1 && coordinatesArray[i - 1].type === "node" && coordinatesArray[i - 2].type === "formatting") {
                previousFormatting = coordinatesArray[i - 2].value;
            }
            coordinatesArray.splice(i, 1, parseCoordinates(coordinatesArray[i].value, tokens, previousFormatting, coordinatesArray));
        }
    }
    return {
        type: "draw",
        formatting: match[1],
        coordinates: coordinatesArray,
    };
}
function parseCoordinates(coordinate, tokens, formatting, coordinatesArray) {
    let xValue = null, yValue = null, name;
    const parseNumber = (value) => {
        const numberValue = parseFloat(value);
        return isNaN(numberValue) ? value : numberValue;
    };
    const findOriginalValue = (value) => {
        return tokens.find((token) => (token.type === "coordinate" || token.type === "node") && token.coordinateName === value);
    };
    const doubleMatchRegex = /\$\(([\w\d\s-,.:$+]+)\)\+\(([\w\d\s-,.:$+]+)\)\$/;
    const match = coordinate.match(doubleMatchRegex);
    if (match) {
        //onsole.log(parseCoordinates(match[1],tokens),parseCoordinates(match[2],tokens))
        const coordinate1 = parseCoordinates(match[1], tokens), coordinate2 = parseCoordinates(match[2], tokens);
        [xValue, yValue] = [coordinate1.X + coordinate2.X, coordinate1.Y + coordinate2.Y];
    }
    else if (coordinate.includes(",")) {
        [xValue, yValue] = coordinate.split(",").map(parseNumber);
    }
    else if (coordinate.includes(":")) {
        const [angle, length] = coordinate.split(":").map(parseFloat);
        if (!isNaN(angle) && !isNaN(length)) {
            const radians = degreesToRadians(angle);
            [xValue, yValue] = [length * Math.cos(radians), length * Math.sin(radians)].map(val => Math.abs(val) < 1e-10 ? 0 : val);
        }
        else {
            console.error("Invalid polar coordinates:", coordinate);
        }
    }
    else if (coordinate.includes("intersection")) {
        const originalCoords = coordinate
            .replace(/intersection\s?of\s?/g, "")
            .replace(/(\s*and\s?|--)/g, " ")
            .split(" ")
            .map(findOriginalValue);
        const slopes = [
            findSlope(originalCoords[0], originalCoords[1]),
            findSlope(originalCoords[2], originalCoords[3])
        ];
        ({ X: xValue, Y: yValue } = findIntersectionPoint(originalCoords[0], originalCoords[2], slopes[0], slopes[1]));
    }
    else {
        name = coordinate;
        const tokenMatch = findOriginalValue(coordinate);
        if (tokenMatch !== undefined) {
            [xValue, yValue] = [parseNumber(tokenMatch.X), parseNumber(tokenMatch.Y)];
        }
    }
    let coor = { X: 0, Y: 0 };
    if (formatting !== undefined && coordinatesArray.length > 0) {
        if (formatting === "--+") {
            coor = coordinatesArray.find((token) => token.type === "coordinate") || coor;
        }
        else if (formatting === "--++") {
            coor = coordinatesArray.findLast((token) => token.type === "coordinate") || coor;
        }
    }
    xValue += coor.X;
    yValue += coor.Y;
    return {
        type: "coordinate",
        X: xValue,
        Y: yValue,
        name: name,
        original: coordinate,
    };
}
function dissectCoordinates(match, tokens) {
    const [fullMatch, position, coordName, label, formatting] = match;
    const { X: xValue, Y: yValue } = parseCoordinates(position, tokens);
    return {
        X: xValue !== undefined ? xValue : null,
        Y: yValue !== undefined ? yValue : null,
        original: position,
        coordinateName: coordName || null,
        label: label || null,
        formatting: formatting.trim() || null,
    };
}
function findIntersectionPoint(coordinate1, coordinate2, slope1, slope2) {
    const xValue = ((slope2 * coordinate2.X) - (slope1 * coordinate1.X) + (coordinate1.Y - coordinate2.Y)) / (slope2 - slope1);
    return {
        X: xValue,
        Y: createLineFunction(coordinate1, slope1)(xValue)
    };
}
function createLineFunction(coordinate, slope) {
    return function (x) {
        return slope * (x - coordinate.X) + coordinate.Y;
    };
}
function findQuadrant(token, midPoint) {
    if (midPoint === null) {
        return null;
    }
    const xDirection = token.X > midPoint.X ? 1 : -1;
    const yDirection = token.Y > midPoint.Y ? 1 : -1;
    return yDirection === 1 ? (xDirection === 1 ? 1 : 2) : (xDirection === 1 ? 4 : 3);
}
function getExtremeXY(tokens) {
    let maxX = -Infinity;
    let maxY = -Infinity;
    let minX = Infinity;
    let minY = Infinity;
    tokens.forEach((token) => {
        if (token.type === "coordinate") {
            if (token.X > maxX)
                maxX = token.X;
            if (token.X < minX)
                minX = token.X;
            if (token.Y > maxY)
                maxY = token.Y;
            if (token.Y < minY)
                minY = token.Y;
        }
    });
    return {
        maxX, maxY, minX, minY,
    };
}
function reconstructDraw(token, tokens, midPoint) {
    let string = "", beforeToken, afterToken, slope;
    token.coordinates.forEach((coordinate, index) => {
        switch (coordinate.type) {
            case "coordinate":
                if (coordinate.name) {
                    string += `(${coordinate.name})`;
                }
                else {
                    string += `(${coordinate.X},${coordinate.Y})`;
                }
                break;
            case "node":
                afterToken = token.coordinates.slice(index).find((token) => token.type === "coordinate");
                if (afterToken === undefined && token.coordinates[token.coordinates.length - 1].value === "cycle") {
                    afterToken = token.coordinates[0];
                }
                beforeToken = token.coordinates.slice(0, index).reverse()
                    .find((token) => token.type === "coordinate");
                slope = findSlope(beforeToken, afterToken);
                string += `node [${sideNodeFormatting(coordinate.formatting, slope, beforeToken, afterToken, midPoint)}] {${coordinate.value}} `;
                break;
            case "formatting":
                string += coordinate.value;
                break;
        }
    });
    return string + ";";
}
function findSlope(coordinate1, coordinate2) {
    const deltaY = coordinate2.Y - coordinate1.Y;
    const deltaX = coordinate2.X - coordinate1.X;
    return deltaY / deltaX;
}
function sideNodeFormatting(formatting, slope, beforeToken, afterToken, midPoint) {
    if (formatting.match(/(above|below|left|right)/)) {
        return formatting;
    }
    formatting += formatting.length > 0 ? "," : "";
    const edge1 = findQuadrant(beforeToken, midPoint)?.toString() || "";
    const edge2 = findQuadrant(afterToken, midPoint)?.toString() || "";
    if (slope !== Infinity && slope !== -Infinity) {
        if (slope !== 0) {
            formatting += "sloped, ";
        }
        if (/(3|4)/.test(edge1) && /(3|4)/.test(edge2)) {
            formatting += "below ";
        }
        else if (/(1|2)/.test(edge1) && /(1|2)/.test(edge2)) {
            formatting += "above ";
        }
    }
    if (slope !== 0) {
        if (/(1|4)/.test(edge1) && /(1|4)/.test(edge2)) {
            formatting += "right";
        }
        else if (/(2|3)/.test(edge1) && /(2|3)/.test(edge2)) {
            formatting += "left";
        }
    }
    return formatting;
}
function generateFormatting(coordinate) {
    if (typeof coordinate.label !== "string") {
        return "";
    }
    const formatting = coordinate.formatting?.split(",") || [];
    if (formatting.some((value) => /(above|below|left|right)/.test(value))) {
        return coordinate.formatting;
    }
    if (formatting.length > 0 && !formatting[formatting.length - 1].endsWith(",")) {
        formatting.push(",");
    }
    switch (coordinate.quadrant) {
        case 1:
            formatting.push("above right, ");
            break;
        case 2:
            formatting.push("above left, ");
            break;
        case 3:
            formatting.push("below left, ");
            break;
        case 4:
            formatting.push("below right, ");
            break;
    }
    return formatting.join("");
}
function calculateCircle(point1, point2, point3) {
    const x1 = point1.X, y1 = point1.Y;
    const x2 = point2.X, y2 = point2.Y;
    const x3 = point3.X, y3 = point3.Y;
    // Calculate the determinants needed for solving the system
    const A = x1 * (y2 - y3) - y1 * (x2 - x3) + (x2 * y3 - y2 * x3);
    const B = (x1 ** 2 + y1 ** 2) * (y3 - y2) + (x2 ** 2 + y2 ** 2) * (y1 - y3) + (x3 ** 2 + y3 ** 2) * (y2 - y1);
    const C = (x1 ** 2 + y1 ** 2) * (x2 - x3) + (x2 ** 2 + y2 ** 2) * (x3 - x1) + (x3 ** 2 + y3 ** 2) * (x1 - x2);
    const D = (x1 ** 2 + y1 ** 2) * (x3 * y2 - x2 * y3) + (x2 ** 2 + y2 ** 2) * (x1 * y3 - x3 * y1) + (x3 ** 2 + y3 ** 2) * (x2 * y1 - x1 * y2);
    if (A === 0) {
        return null; // The points are collinear, no unique circle
    }
    // Calculate the center (h, k) of the circle
    const h = -B / (2 * A);
    const k = -C / (2 * A);
    // Calculate the radius of the circle
    const r = Math.sqrt((B ** 2 + C ** 2 - 4 * A * D) / (4 * A ** 2));
    return {
        center: { X: h, Y: k },
        radius: r,
        equation: `(x - ${h.toFixed(2)})^2 + (y - ${k.toFixed(2)})^2 = ${r.toFixed(2)}^2`
    };
}
//# sourceMappingURL=data:application/json;base64,