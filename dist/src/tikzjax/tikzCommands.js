import { arrToRegexString, regExp } from "src/tikzjax/tikzjax";
import { escapeForRegex } from "src/utils/symbols";
export function getAllTikzReferences() {
    return [...tikzCommands, ...Brackets, ...units]
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function searchTizkCommands(query) {
    return [...tikzCommands, ...Brackets, ...units]
        .find(item => Object.values(item).flat().some((value) => typeof value === 'string' && value === query));
}
export function searchTizkForOgLatex(query) {
    return [...tikzCommands, ...Brackets, ...units]
        .find(item => item.name === query);
}
//Remember name syntax for commas exc
const tikzCommands = [
    /* Comparison */
    {
        type: 'Syntax',
        name: 'Equals',
        references: ['='],
    },
    {
        type: 'Command',
        name: 'newCommand',
        references: ['\\newcommand'],
    },
    {
        type: 'Path',
        name: 'Draw',
        references: ['\\draw'],
    },
    {
        type: 'Node',
        name: 'Coordinate',
        references: ['\\coordinate'],
    },
    {
        type: 'Formatting',
        name: 'LineWidth',
        references: ['line width'],
    },
    {
        type: 'Formatting',
        name: 'Label',
        references: ['label'],
    },
    {
        type: 'Formatting',
        name: 'Large',
        references: ['\\Large'],
    },
    {
        type: 'Unit',
        name: 'Point',
        references: ['pt'],
    },
    {
        type: 'Unit',
        name: 'Centimeter',
        references: ['cm'],
    },
    {
        type: 'Syntax',
        name: 'Comma',
        references: [','],
    },
    {
        type: 'Syntax',
        name: 'Hashtag',
        references: ['#'],
    },
    {
        type: 'Syntax',
        name: 'Colon',
        references: [':'],
    },
    {
        type: 'Syntax',
        name: 'Semicolon',
        references: [';'],
    },
    {
        type: 'Syntax',
        name: 'Dash',
        references: ['-'],
    },
    {
        type: 'Syntax',
        name: 'Plus',
        references: ['+'],
    },
    {
        type: 'PathConnector',
        name: 'ReferenceLastAxis',
        latex: '--++',
        references: ['--++'],
    },
    {
        type: 'PathConnector',
        name: 'ReferenceFirstAxis',
        latex: '--+',
        references: ['--+'],
    },
    {
        type: 'PathConnector',
        name: 'AxisConnecter',
        latex: '--',
        references: ['--'],
    },
    {
        type: 'Formatting',
        name: 'opacity',
        references: ['opacity'],
    },
    {
        type: 'Formatting',
        name: 'Color',
        value: 'red',
        references: ['red'],
    },
];
const units = [
    {
        references: ['pt', 'cm', ',', ';', '-'],
    },
];
const symbolTranslator = [
    {
        type: 'greek-letter',
        name: 'Pi',
        latex: '\\pi',
        unicode: '\u03C0',
        text: 'π'
    },
    {
        type: 'greek-letter',
        name: 'Alpha',
        latex: '\\alpha',
        unicode: '\u03B1',
        text: 'α'
    },
    {
        name: 'Infinity',
        latex: '\\infty',
        unicode: '\u221E',
        text: '∞'
    },
];
const Brackets = [
    {
        type: 'Bracket',
        name: "Parentheses_open",
        references: ["("],
        Unicode: "\u0028"
    },
    {
        type: 'Bracket',
        name: "Parentheses_close",
        references: [")"],
        Unicode: "\u0029"
    },
    {
        type: 'Bracket',
        name: "Curly_brackets_open",
        references: ["{"],
        Unicode: "\u007B"
    },
    {
        type: 'Bracket',
        name: "Curly_brackets_close",
        references: ["}"],
        Unicode: "\u007D"
    },
    {
        type: 'Bracket',
        name: "Square_brackets_open",
        references: ["["],
        Unicode: "\u005B"
    },
    {
        type: 'Bracket',
        name: "Square_brackets_close",
        references: ["]"],
        Unicode: "\u005D"
    },
    {
        type: 'Bracket',
        name: "Angle Brackets-open",
        references: ["<"],
        Unicode: "\u003C"
    },
    {
        type: 'Bracket',
        name: "Angle Brackets-close",
        references: [">"],
        Unicode: "\u003E"
    },
    {
        name: "Double Angle Brackets-open",
        references: ["《"],
        Unicode: "\u300A"
    },
    {
        name: "Double Angle Brackets-close",
        references: ["》"],
        Unicode: "\u300B"
    },
    {
        name: "Single Angle Brackets-open",
        references: ["〈"],
        Unicode: "\u3008"
    },
    {
        name: "Single Angle Brackets-close",
        references: ["〉"],
        Unicode: "\u3009"
    },
    {
        name: "White Square Brackets-open",
        references: ["〖"],
        Unicode: "\u301A"
    },
    {
        name: "White Square Brackets-close",
        references: ["〗"],
        Unicode: "\u301B"
    },
    {
        name: "Tortoise Shell Brackets-open",
        references: ["〔"],
        Unicode: "\u3014"
    },
    {
        name: "Tortoise Shell Brackets-close",
        references: ["〕"],
        Unicode: "\u3015"
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlrekNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvdGlrekNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxPQUFPLENBQUMsR0FBRyxZQUFZLEVBQUMsR0FBRyxRQUFRLEVBQUMsR0FBRyxLQUFLLENBQUM7U0FDeEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7U0FDMUMsSUFBSSxFQUFFO1NBQ04sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsS0FBSztJQUNwQyxPQUFPLENBQUMsR0FBRyxZQUFZLEVBQUMsR0FBRyxRQUFRLEVBQUMsR0FBRyxLQUFLLENBQUM7U0FDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ1QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN0QyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUcsS0FBSyxLQUFLLEtBQUssQ0FDOUMsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUNELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFLO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFlBQVksRUFBQyxHQUFHLFFBQVEsRUFBQyxHQUFHLEtBQUssQ0FBQztTQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDVCxJQUFJLENBQUMsSUFBSSxLQUFHLEtBQUssQ0FDcEIsQ0FBQztBQUNOLENBQUM7QUFHRCxxQ0FBcUM7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RDtRQUNJLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO0tBQ3BCO0lBQ0Q7UUFDSSxJQUFJLEVBQUUsK0JBQStCO1FBQ3JDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtLQUNwQjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcnJUb1JlZ2V4U3RyaW5nLCByZWdFeHAgfSBmcm9tIFwic3JjL3Rpa3pqYXgvdGlrempheFwiO1xuaW1wb3J0IHsgZXNjYXBlRm9yUmVnZXggfSBmcm9tIFwic3JjL3V0aWxzL3N5bWJvbHNcIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsVGlrelJlZmVyZW5jZXMoKSB7XG4gICAgcmV0dXJuIFsuLi50aWt6Q29tbWFuZHMsLi4uQnJhY2tldHMsLi4udW5pdHNdXG4gICAgICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IucmVmZXJlbmNlcyB8fCBbXSkgXG4gICAgICAgIC5mbGF0KClcbiAgICAgICAgLm1hcChlc2NhcGVGb3JSZWdleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hUaXprQ29tbWFuZHMocXVlcnkpe1xuICAgIHJldHVybiBbLi4udGlrekNvbW1hbmRzLC4uLkJyYWNrZXRzLC4uLnVuaXRzXVxuICAgIC5maW5kKGl0ZW0gPT5cbiAgICAgICAgT2JqZWN0LnZhbHVlcyhpdGVtKS5mbGF0KCkuc29tZSgodmFsdWUpID0+XG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmdmFsdWUgPT09IHF1ZXJ5LFxuICAgICAgICApXG4gICAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hUaXprRm9yT2dMYXRleChxdWVyeSl7XG4gICAgcmV0dXJuIFsuLi50aWt6Q29tbWFuZHMsLi4uQnJhY2tldHMsLi4udW5pdHNdXG4gICAgLmZpbmQoaXRlbSA9PlxuICAgICAgICBpdGVtLm5hbWU9PT1xdWVyeVxuICAgICk7XG59XG5cblxuLy9SZW1lbWJlciBuYW1lIHN5bnRheCBmb3IgY29tbWFzIGV4Y1xuXG5cbmNvbnN0IHRpa3pDb21tYW5kcyA9IFtcbiAgICAvKiBDb21wYXJpc29uICovXG4gICAge1xuICAgICAgICB0eXBlOiAnU3ludGF4JyxcbiAgICAgICAgbmFtZTogJ0VxdWFscycsIFxuICAgICAgICByZWZlcmVuY2VzOiBbJz0nXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0NvbW1hbmQnLFxuICAgICAgICBuYW1lOiAnbmV3Q29tbWFuZCcsIFxuICAgICAgICByZWZlcmVuY2VzOiBbJ1xcXFxuZXdjb21tYW5kJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdQYXRoJyxcbiAgICAgICAgbmFtZTogJ0RyYXcnLCBcbiAgICAgICAgcmVmZXJlbmNlczogWydcXFxcZHJhdyddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnTm9kZScsXG4gICAgICAgIG5hbWU6ICdDb29yZGluYXRlJywgXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXGNvb3JkaW5hdGUnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0Zvcm1hdHRpbmcnLFxuICAgICAgICBuYW1lOiAnTGluZVdpZHRoJywgXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnbGluZSB3aWR0aCddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnRm9ybWF0dGluZycsXG4gICAgICAgIG5hbWU6ICdMYWJlbCcsIFxuICAgICAgICByZWZlcmVuY2VzOiBbJ2xhYmVsJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdGb3JtYXR0aW5nJyxcbiAgICAgICAgbmFtZTogJ0xhcmdlJywgXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXExhcmdlJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdVbml0JyxcbiAgICAgICAgbmFtZTogJ1BvaW50JyxcbiAgICAgICAgcmVmZXJlbmNlczogWydwdCddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnVW5pdCcsXG4gICAgICAgIG5hbWU6ICdDZW50aW1ldGVyJyxcbiAgICAgICAgcmVmZXJlbmNlczogWydjbSddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnU3ludGF4JyxcbiAgICAgICAgbmFtZTogJ0NvbW1hJyxcbiAgICAgICAgcmVmZXJlbmNlczogWycsJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdTeW50YXgnLFxuICAgICAgICBuYW1lOiAnSGFzaHRhZycsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnIyddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnU3ludGF4JyxcbiAgICAgICAgbmFtZTogJ0NvbG9uJyxcbiAgICAgICAgcmVmZXJlbmNlczogWyc6J10sXG4gICAgfSxcbiAgICBcbiAgICB7XG4gICAgICAgIHR5cGU6ICdTeW50YXgnLFxuICAgICAgICBuYW1lOiAnU2VtaWNvbG9uJyxcbiAgICAgICAgcmVmZXJlbmNlczogWyc7J10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdTeW50YXgnLFxuICAgICAgICBuYW1lOiAnRGFzaCcsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnLSddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnU3ludGF4JyxcbiAgICAgICAgbmFtZTogJ1BsdXMnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJysnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ1BhdGhDb25uZWN0b3InLFxuICAgICAgICBuYW1lOiAnUmVmZXJlbmNlTGFzdEF4aXMnLFxuICAgICAgICBsYXRleDogJy0tKysnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJy0tKysnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ1BhdGhDb25uZWN0b3InLFxuICAgICAgICBuYW1lOiAnUmVmZXJlbmNlRmlyc3RBeGlzJyxcbiAgICAgICAgbGF0ZXg6ICctLSsnLFxuICAgICAgICByZWZlcmVuY2VzOiBbJy0tKyddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnUGF0aENvbm5lY3RvcicsXG4gICAgICAgIG5hbWU6ICdBeGlzQ29ubmVjdGVyJyxcbiAgICAgICAgbGF0ZXg6ICctLScsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnLS0nXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0Zvcm1hdHRpbmcnLFxuICAgICAgICBuYW1lOiAnb3BhY2l0eScsXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnb3BhY2l0eSddLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnRm9ybWF0dGluZycsXG4gICAgICAgIG5hbWU6ICdDb2xvcicsXG4gICAgICAgIHZhbHVlOiAncmVkJyxcbiAgICAgICAgcmVmZXJlbmNlczogWydyZWQnXSxcbiAgICB9LFxuXTtcblxuY29uc3QgdW5pdHM9W1xuICAgIHtcbiAgICAgICAgcmVmZXJlbmNlczogWydwdCcsJ2NtJywnLCcsJzsnLCctJ10sXG4gICAgfSxcbl1cblxuY29uc3Qgc3ltYm9sVHJhbnNsYXRvciA9IFtcbiAgICB7IFxuICAgICAgICB0eXBlOiAnZ3JlZWstbGV0dGVyJyxcbiAgICAgICAgbmFtZTogJ1BpJywgXG4gICAgICAgIGxhdGV4OiAnXFxcXHBpJywgXG4gICAgICAgIHVuaWNvZGU6ICdcXHUwM0MwJywgXG4gICAgICAgIHRleHQ6ICfPgCcgXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdncmVlay1sZXR0ZXInLFxuICAgICAgICBuYW1lOiAnQWxwaGEnLCBcbiAgICAgICAgbGF0ZXg6ICdcXFxcYWxwaGEnLCBcbiAgICAgICAgdW5pY29kZTogJ1xcdTAzQjEnLCBcbiAgICAgICAgdGV4dDogJ86xJyBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXG4gICAgICAgIG5hbWU6ICdJbmZpbml0eScsIFxuICAgICAgICBsYXRleDogJ1xcXFxpbmZ0eScsIFxuICAgICAgICB1bmljb2RlOiAnXFx1MjIxRScsIFxuICAgICAgICB0ZXh0OiAn4oieJ1xuICAgIH0sXG4gICAgXG5dO1xuXG5jb25zdCBCcmFja2V0cyA9IFtcbiAgICB7XG4gICAgICAgIHR5cGU6ICdCcmFja2V0JyxcbiAgICAgICAgbmFtZTogXCJQYXJlbnRoZXNlc19vcGVuXCIsXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIihcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MDAyOFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdCcmFja2V0JyxcbiAgICAgICAgbmFtZTogXCJQYXJlbnRoZXNlc19jbG9zZVwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCIpXCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTAwMjlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnQnJhY2tldCcsXG4gICAgICAgIG5hbWU6IFwiQ3VybHlfYnJhY2tldHNfb3BlblwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCJ7XCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTAwN0JcIlxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnQnJhY2tldCcsXG4gICAgICAgIG5hbWU6IFwiQ3VybHlfYnJhY2tldHNfY2xvc2VcIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wifVwiXSxcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDdEXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxuICAgICAgICBuYW1lOiBcIlNxdWFyZV9icmFja2V0c19vcGVuXCIsXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIltcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MDA1QlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdCcmFja2V0JyxcbiAgICAgICAgbmFtZTogXCJTcXVhcmVfYnJhY2tldHNfY2xvc2VcIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wiXVwiXSxcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDVEXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxuICAgICAgICBuYW1lOiBcIkFuZ2xlIEJyYWNrZXRzLW9wZW5cIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wiPFwiXSxcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDNDXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxuICAgICAgICBuYW1lOiBcIkFuZ2xlIEJyYWNrZXRzLWNsb3NlXCIsXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIj5cIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MDAzRVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRG91YmxlIEFuZ2xlIEJyYWNrZXRzLW9wZW5cIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CKXCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMEFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRvdWJsZSBBbmdsZSBCcmFja2V0cy1jbG9zZVwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgItcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAwQlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2luZ2xlIEFuZ2xlIEJyYWNrZXRzLW9wZW5cIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CIXCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMDhcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlNpbmdsZSBBbmdsZSBCcmFja2V0cy1jbG9zZVwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgIlcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAwOVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2hpdGUgU3F1YXJlIEJyYWNrZXRzLW9wZW5cIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CWXCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMUFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldoaXRlIFNxdWFyZSBCcmFja2V0cy1jbG9zZVwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgJdcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAxQlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVG9ydG9pc2UgU2hlbGwgQnJhY2tldHMtb3BlblwiLFxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgJRcIl0sXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAxNFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVG9ydG9pc2UgU2hlbGwgQnJhY2tldHMtY2xvc2VcIixcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CVXCJdLFxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMTVcIlxuICAgIH1cbl07XG4iXX0=