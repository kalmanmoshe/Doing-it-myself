import { arrToRegexString, regExp } from "src/tikzjax/tikzjax";
import { escapeForRegex } from "src/utils/symbols";
export function getAllTikzReferences() {
    return [...tikzCommands, ...Brackets, ...units]
        .map(operator => operator.references || [])
        .flat()
        .map(escapeForRegex);
}
export function searchTizkCommands(query) {
    return [...tikzCommands, ...Brackets, ...units]
        .find(item => Object.values(item).flat().some((value) => typeof value === 'string' && value === query));
}
export function searchTizkForOgLatex(query) {
    return [...tikzCommands, ...Brackets, ...units]
        .find(item => item.name === query);
}
//Remember name syntax for commas exc
const tikzCommands = [
    /* Comparison */
    {
        type: 'Syntax',
        name: 'Equals',
        references: ['='],
    },
    {
        type: 'Command',
        name: 'newCommand',
        references: ['\\newcommand'],
    },
    {
        type: 'Path',
        name: 'Draw',
        references: ['\\draw'],
    },
    {
        type: 'Node',
        name: 'Coordinate',
        references: ['\\coordinate'],
    },
    {
        type: 'Formatting',
        name: 'LineWidth',
        references: ['line width'],
    },
    {
        type: 'Formatting',
        name: 'Label',
        references: ['label'],
    },
    {
        type: 'Formatting',
        name: 'Large',
        references: ['\\Large'],
    },
    {
        type: 'Unit',
        name: 'Point',
        references: ['pt'],
    },
    {
        type: 'Unit',
        name: 'Centimeter',
        references: ['cm'],
    },
    {
        type: 'Syntax',
        name: 'Comma',
        references: [','],
    },
    {
        type: 'Syntax',
        name: 'Hashtag',
        references: ['#'],
    },
    {
        type: 'Syntax',
        name: 'Colon',
        references: [':'],
    },
    {
        type: 'Syntax',
        name: 'Semicolon',
        references: [';'],
    },
    {
        type: 'Syntax',
        name: 'Dash',
        references: ['-'],
    },
    {
        type: 'Syntax',
        name: 'Plus',
        references: ['+'],
    },
    {
        type: 'PathConnector',
        name: 'ReferenceLastAxis',
        latex: '--++',
        references: ['--++'],
    },
    {
        type: 'PathConnector',
        name: 'ReferenceFirstAxis',
        latex: '--+',
        references: ['--+'],
    },
    {
        type: 'PathConnector',
        name: 'AxisConnecter',
        latex: '--',
        references: ['--'],
    },
    {
        type: 'Formatting',
        name: 'opacity',
        references: ['opacity'],
    },
    {
        type: 'Formatting',
        name: 'Color',
        value: 'red',
        references: ['red'],
    },
];
const units = [
    {
        references: ['pt', 'cm', ',', ';', '-'],
    },
];
const symbolTranslator = [
    {
        type: 'greek-letter',
        name: 'Pi',
        latex: '\\pi',
        unicode: '\u03C0',
        text: 'π'
    },
    {
        type: 'greek-letter',
        name: 'Alpha',
        latex: '\\alpha',
        unicode: '\u03B1',
        text: 'α'
    },
    {
        name: 'Infinity',
        latex: '\\infty',
        unicode: '\u221E',
        text: '∞'
    },
];
const Brackets = [
    {
        type: 'Bracket',
        name: "Parentheses_open",
        references: ["("],
        Unicode: "\u0028"
    },
    {
        type: 'Bracket',
        name: "Parentheses_close",
        references: [")"],
        Unicode: "\u0029"
    },
    {
        type: 'Bracket',
        name: "Curly_brackets_open",
        references: ["{"],
        Unicode: "\u007B"
    },
    {
        type: 'Bracket',
        name: "Curly_brackets_close",
        references: ["}"],
        Unicode: "\u007D"
    },
    {
        type: 'Bracket',
        name: "Square_brackets_open",
        references: ["["],
        Unicode: "\u005B"
    },
    {
        type: 'Bracket',
        name: "Square_brackets_close",
        references: ["]"],
        Unicode: "\u005D"
    },
    {
        type: 'Bracket',
        name: "Angle Brackets-open",
        references: ["<"],
        Unicode: "\u003C"
    },
    {
        type: 'Bracket',
        name: "Angle Brackets-close",
        references: [">"],
        Unicode: "\u003E"
    },
    {
        name: "Double Angle Brackets-open",
        references: ["《"],
        Unicode: "\u300A"
    },
    {
        name: "Double Angle Brackets-close",
        references: ["》"],
        Unicode: "\u300B"
    },
    {
        name: "Single Angle Brackets-open",
        references: ["〈"],
        Unicode: "\u3008"
    },
    {
        name: "Single Angle Brackets-close",
        references: ["〉"],
        Unicode: "\u3009"
    },
    {
        name: "White Square Brackets-open",
        references: ["〖"],
        Unicode: "\u301A"
    },
    {
        name: "White Square Brackets-close",
        references: ["〗"],
        Unicode: "\u301B"
    },
    {
        name: "Tortoise Shell Brackets-open",
        references: ["〔"],
        Unicode: "\u3014"
    },
    {
        name: "Tortoise Shell Brackets-close",
        references: ["〕"],
        Unicode: "\u3015"
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlrekNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rpa3pqYXgvdGlrekNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxPQUFPLENBQUMsR0FBRyxZQUFZLEVBQUMsR0FBRyxRQUFRLEVBQUMsR0FBRyxLQUFLLENBQUM7U0FDeEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7U0FDMUMsSUFBSSxFQUFFO1NBQ04sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsS0FBSztJQUNwQyxPQUFPLENBQUMsR0FBRyxZQUFZLEVBQUMsR0FBRyxRQUFRLEVBQUMsR0FBRyxLQUFLLENBQUM7U0FDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ1QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN0QyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUcsS0FBSyxLQUFLLEtBQUssQ0FDOUMsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUNELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFLO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFlBQVksRUFBQyxHQUFHLFFBQVEsRUFBQyxHQUFHLEtBQUssQ0FBQztTQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDVCxJQUFJLENBQUMsSUFBSSxLQUFHLEtBQUssQ0FDcEIsQ0FBQztBQUNOLENBQUM7QUFHRCxxQ0FBcUM7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RDtRQUNJLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO0tBQ3BCO0lBQ0Q7UUFDSSxJQUFJLEVBQUUsK0JBQStCO1FBQ3JDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtLQUNwQjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcnJUb1JlZ2V4U3RyaW5nLCByZWdFeHAgfSBmcm9tIFwic3JjL3Rpa3pqYXgvdGlrempheFwiO1xyXG5pbXBvcnQgeyBlc2NhcGVGb3JSZWdleCB9IGZyb20gXCJzcmMvdXRpbHMvc3ltYm9sc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxUaWt6UmVmZXJlbmNlcygpIHtcclxuICAgIHJldHVybiBbLi4udGlrekNvbW1hbmRzLC4uLkJyYWNrZXRzLC4uLnVuaXRzXVxyXG4gICAgICAgIC5tYXAob3BlcmF0b3IgPT4gb3BlcmF0b3IucmVmZXJlbmNlcyB8fCBbXSkgXHJcbiAgICAgICAgLmZsYXQoKVxyXG4gICAgICAgIC5tYXAoZXNjYXBlRm9yUmVnZXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoVGl6a0NvbW1hbmRzKHF1ZXJ5KXtcclxuICAgIHJldHVybiBbLi4udGlrekNvbW1hbmRzLC4uLkJyYWNrZXRzLC4uLnVuaXRzXVxyXG4gICAgLmZpbmQoaXRlbSA9PlxyXG4gICAgICAgIE9iamVjdC52YWx1ZXMoaXRlbSkuZmxhdCgpLnNvbWUoKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmdmFsdWUgPT09IHF1ZXJ5LFxyXG4gICAgICAgIClcclxuICAgICk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaFRpemtGb3JPZ0xhdGV4KHF1ZXJ5KXtcclxuICAgIHJldHVybiBbLi4udGlrekNvbW1hbmRzLC4uLkJyYWNrZXRzLC4uLnVuaXRzXVxyXG4gICAgLmZpbmQoaXRlbSA9PlxyXG4gICAgICAgIGl0ZW0ubmFtZT09PXF1ZXJ5XHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuLy9SZW1lbWJlciBuYW1lIHN5bnRheCBmb3IgY29tbWFzIGV4Y1xyXG5cclxuXHJcbmNvbnN0IHRpa3pDb21tYW5kcyA9IFtcclxuICAgIC8qIENvbXBhcmlzb24gKi9cclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnU3ludGF4JyxcclxuICAgICAgICBuYW1lOiAnRXF1YWxzJywgXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc9J10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdDb21tYW5kJyxcclxuICAgICAgICBuYW1lOiAnbmV3Q29tbWFuZCcsIFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnXFxcXG5ld2NvbW1hbmQnXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ1BhdGgnLFxyXG4gICAgICAgIG5hbWU6ICdEcmF3JywgXHJcbiAgICAgICAgcmVmZXJlbmNlczogWydcXFxcZHJhdyddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnTm9kZScsXHJcbiAgICAgICAgbmFtZTogJ0Nvb3JkaW5hdGUnLCBcclxuICAgICAgICByZWZlcmVuY2VzOiBbJ1xcXFxjb29yZGluYXRlJ10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdGb3JtYXR0aW5nJyxcclxuICAgICAgICBuYW1lOiAnTGluZVdpZHRoJywgXHJcbiAgICAgICAgcmVmZXJlbmNlczogWydsaW5lIHdpZHRoJ10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdGb3JtYXR0aW5nJyxcclxuICAgICAgICBuYW1lOiAnTGFiZWwnLCBcclxuICAgICAgICByZWZlcmVuY2VzOiBbJ2xhYmVsJ10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdGb3JtYXR0aW5nJyxcclxuICAgICAgICBuYW1lOiAnTGFyZ2UnLCBcclxuICAgICAgICByZWZlcmVuY2VzOiBbJ1xcXFxMYXJnZSddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnVW5pdCcsXHJcbiAgICAgICAgbmFtZTogJ1BvaW50JyxcclxuICAgICAgICByZWZlcmVuY2VzOiBbJ3B0J10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdVbml0JyxcclxuICAgICAgICBuYW1lOiAnQ2VudGltZXRlcicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWydjbSddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnU3ludGF4JyxcclxuICAgICAgICBuYW1lOiAnQ29tbWEnLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnLCddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnU3ludGF4JyxcclxuICAgICAgICBuYW1lOiAnSGFzaHRhZycsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWycjJ10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdTeW50YXgnLFxyXG4gICAgICAgIG5hbWU6ICdDb2xvbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc6J10sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ1N5bnRheCcsXHJcbiAgICAgICAgbmFtZTogJ1NlbWljb2xvbicsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyc7J10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdTeW50YXgnLFxyXG4gICAgICAgIG5hbWU6ICdEYXNoJyxcclxuICAgICAgICByZWZlcmVuY2VzOiBbJy0nXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ1N5bnRheCcsXHJcbiAgICAgICAgbmFtZTogJ1BsdXMnLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnKyddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnUGF0aENvbm5lY3RvcicsXHJcbiAgICAgICAgbmFtZTogJ1JlZmVyZW5jZUxhc3RBeGlzJyxcclxuICAgICAgICBsYXRleDogJy0tKysnLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnLS0rKyddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnUGF0aENvbm5lY3RvcicsXHJcbiAgICAgICAgbmFtZTogJ1JlZmVyZW5jZUZpcnN0QXhpcycsXHJcbiAgICAgICAgbGF0ZXg6ICctLSsnLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnLS0rJ10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdQYXRoQ29ubmVjdG9yJyxcclxuICAgICAgICBuYW1lOiAnQXhpc0Nvbm5lY3RlcicsXHJcbiAgICAgICAgbGF0ZXg6ICctLScsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWyctLSddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnRm9ybWF0dGluZycsXHJcbiAgICAgICAgbmFtZTogJ29wYWNpdHknLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFsnb3BhY2l0eSddLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnRm9ybWF0dGluZycsXHJcbiAgICAgICAgbmFtZTogJ0NvbG9yJyxcclxuICAgICAgICB2YWx1ZTogJ3JlZCcsXHJcbiAgICAgICAgcmVmZXJlbmNlczogWydyZWQnXSxcclxuICAgIH0sXHJcbl07XHJcblxyXG5jb25zdCB1bml0cz1bXHJcbiAgICB7XHJcbiAgICAgICAgcmVmZXJlbmNlczogWydwdCcsJ2NtJywnLCcsJzsnLCctJ10sXHJcbiAgICB9LFxyXG5dXHJcblxyXG5jb25zdCBzeW1ib2xUcmFuc2xhdG9yID0gW1xyXG4gICAgeyBcclxuICAgICAgICB0eXBlOiAnZ3JlZWstbGV0dGVyJyxcclxuICAgICAgICBuYW1lOiAnUGknLCBcclxuICAgICAgICBsYXRleDogJ1xcXFxwaScsIFxyXG4gICAgICAgIHVuaWNvZGU6ICdcXHUwM0MwJywgXHJcbiAgICAgICAgdGV4dDogJ8+AJyBcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ2dyZWVrLWxldHRlcicsXHJcbiAgICAgICAgbmFtZTogJ0FscGhhJywgXHJcbiAgICAgICAgbGF0ZXg6ICdcXFxcYWxwaGEnLCBcclxuICAgICAgICB1bmljb2RlOiAnXFx1MDNCMScsIFxyXG4gICAgICAgIHRleHQ6ICfOsScgXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5hbWU6ICdJbmZpbml0eScsIFxyXG4gICAgICAgIGxhdGV4OiAnXFxcXGluZnR5JywgXHJcbiAgICAgICAgdW5pY29kZTogJ1xcdTIyMUUnLCBcclxuICAgICAgICB0ZXh0OiAn4oieJ1xyXG4gICAgfSxcclxuICAgIFxyXG5dO1xyXG5cclxuY29uc3QgQnJhY2tldHMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxyXG4gICAgICAgIG5hbWU6IFwiUGFyZW50aGVzZXNfb3BlblwiLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIihcIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDI4XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxyXG4gICAgICAgIG5hbWU6IFwiUGFyZW50aGVzZXNfY2xvc2VcIixcclxuICAgICAgICByZWZlcmVuY2VzOiBbXCIpXCJdLFxyXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MDAyOVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdCcmFja2V0JyxcclxuICAgICAgICBuYW1lOiBcIkN1cmx5X2JyYWNrZXRzX29wZW5cIixcclxuICAgICAgICByZWZlcmVuY2VzOiBbXCJ7XCJdLFxyXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MDA3QlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdCcmFja2V0JyxcclxuICAgICAgICBuYW1lOiBcIkN1cmx5X2JyYWNrZXRzX2Nsb3NlXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wifVwiXSxcclxuICAgICAgICBVbmljb2RlOiBcIlxcdTAwN0RcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnQnJhY2tldCcsXHJcbiAgICAgICAgbmFtZTogXCJTcXVhcmVfYnJhY2tldHNfb3BlblwiLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIltcIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDVCXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ0JyYWNrZXQnLFxyXG4gICAgICAgIG5hbWU6IFwiU3F1YXJlX2JyYWNrZXRzX2Nsb3NlXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wiXVwiXSxcclxuICAgICAgICBVbmljb2RlOiBcIlxcdTAwNURcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnQnJhY2tldCcsXHJcbiAgICAgICAgbmFtZTogXCJBbmdsZSBCcmFja2V0cy1vcGVuXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wiPFwiXSxcclxuICAgICAgICBVbmljb2RlOiBcIlxcdTAwM0NcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnQnJhY2tldCcsXHJcbiAgICAgICAgbmFtZTogXCJBbmdsZSBCcmFja2V0cy1jbG9zZVwiLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIj5cIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUwMDNFXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJEb3VibGUgQW5nbGUgQnJhY2tldHMtb3BlblwiLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIuOAilwiXSxcclxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMEFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkRvdWJsZSBBbmdsZSBCcmFja2V0cy1jbG9zZVwiLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IFtcIuOAi1wiXSxcclxuICAgICAgICBVbmljb2RlOiBcIlxcdTMwMEJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIlNpbmdsZSBBbmdsZSBCcmFja2V0cy1vcGVuXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CIXCJdLFxyXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAwOFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiU2luZ2xlIEFuZ2xlIEJyYWNrZXRzLWNsb3NlXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CJXCJdLFxyXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAwOVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiV2hpdGUgU3F1YXJlIEJyYWNrZXRzLW9wZW5cIixcclxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgJZcIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUzMDFBXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJXaGl0ZSBTcXVhcmUgQnJhY2tldHMtY2xvc2VcIixcclxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgJdcIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUzMDFCXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJUb3J0b2lzZSBTaGVsbCBCcmFja2V0cy1vcGVuXCIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogW1wi44CUXCJdLFxyXG4gICAgICAgIFVuaWNvZGU6IFwiXFx1MzAxNFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiVG9ydG9pc2UgU2hlbGwgQnJhY2tldHMtY2xvc2VcIixcclxuICAgICAgICByZWZlcmVuY2VzOiBbXCLjgJVcIl0sXHJcbiAgICAgICAgVW5pY29kZTogXCJcXHUzMDE1XCJcclxuICAgIH1cclxuXTtcclxuIl19