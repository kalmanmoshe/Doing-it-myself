/**
 * Returns an array of built-in mathjs symbols including functions, constants, and physical constants
 * Also includes a prefix to indicate the type of symbol
 * @returns {string[]} Array of mathjs built-in symbols
 */
export function getMathJsSymbols() {
    const mathjsBuiltInSymbols = [
        'f|abs()',
        'f|acos()',
        'f|acosh()',
        'f|acot()',
        'f|acoth()',
        'f|acsc()',
        'f|acsch()',
        'f|add()',
        'f|and()',
        'f|apply()',
        'f|arg()',
        'f|asec()', 'f|asech()',
        'f|asin()', 'f|asinh()',
        'f|atan()',
        'f|atan2()',
        'f|atanh()', 'p|atm', 'p|atomicMass',
        'p|avogadro',
        'f|bellNumbers()', 'f|bin()', 'f|bitAnd()', 'f|bitNot()',
        'f|bitOr()',
        'f|bitXor()', 'p|bohrMagneton', 'p|bohrRadius', 'p|boltzmann',
        'f|catalan()',
        'f|cbrt()', 'f|ceil()', 'p|classicalElectronRadius', 'f|clone()',
        'f|column()',
        'f|combinations()', 'f|combinationsWithRep()', 'f|compare()', 'f|compareNatural()',
        'f|compareText()', 'f|compile()', 'f|composition()', 'f|concat()', 'p|conductanceQuantum',
        'f|conj()',
        'f|cos()', 'f|cosh()', 'f|cot()', 'f|coth()',
        'p|coulomb',
        'f|count()', 'f|cross()', 'f|csc()', 'f|csch()',
        'f|ctranspose()', 'f|cube()', 'f|cumsum()', 'f|deepEqual()', 'f|derivative()',
        'f|det()', 'p|deuteronMass', 'f|diag()', 'f|diff()', 'f|distance()',
        'f|divide()', 'f|dot()', 'f|dotDivide()', 'f|dotMultiply()', 'f|dotPow()',
        'c|e', 'p|efimovFactor', 'f|eigs()', 'p|electricConstant', 'p|electronMass',
        'p|elementaryCharge', 'f|equal()', 'f|equalText()', 'f|erf()', 'f|evaluate()',
        'f|exp()', 'f|expm()', 'f|expm1()', 'f|factorial()', 'p|faraday',
        'p|fermiCoupling', 'f|fft()', 'f|filter()', 'p|fineStructure', 'p|firstRadiation',
        'f|fix()', 'f|flatten()', 'f|floor()', 'f|forEach()', 'f|format()',
        'f|gamma()', 'p|gasConstant', 'f|gcd()', 'f|getMatrixDataType()', 'p|gravitationConstant',
        'p|gravity', 'p|hartreeEnergy', 'f|hasNumericValue()', 'f|help()', 'f|hex()',
        'f|hypot()', 'c|i', 'f|identity()', 'f|ifft()', 'f|im()',
        'c|Infinity', 'f|intersect()', 'f|inv()', 'p|inverseConductanceQuantum', 'f|invmod()',
        'f|isInteger()', 'f|isNaN()', 'f|isNegative()', 'f|isNumeric()', 'f|isPositive()',
        'f|isPrime()', 'f|isZero()', 'f|kldivergence()', 'p|klitzing', 'f|kron()',
        'f|larger()', 'f|largerEq()', 'f|lcm()', 'f|leafCount()', 'f|leftShift()',
        'f|lgamma()', 'c|LN10', 'c|LN2', 'f|log()', 'f|log10()',
        'c|LOG10E', 'f|log1p()', 'f|log2()', 'c|LOG2E', 'p|loschmidt',
        'f|lsolve()', 'f|lsolveAll()', 'f|lup()', 'f|lusolve()', 'f|lyap()',
        'f|mad()', 'p|magneticConstant', 'p|magneticFluxQuantum', 'f|map()', 'f|matrixFromColumns()',
        'f|matrixFromFunction()', 'f|matrixFromRows()', 'f|max()', 'f|mean()', 'f|median()',
        'f|min()', 'f|mod()', 'f|mode()', 'p|molarMass', 'p|molarMassC12',
        'p|molarPlanckConstant', 'p|molarVolume', 'f|multinomial()', 'f|multiply()', 'c|NaN',
        'p|neutronMass', 'f|norm()', 'f|not()', 'f|nthRoot()', 'f|nthRoots()',
        'p|nuclearMagneton', 'c|null', 'f|numeric()', 'f|oct()', 'f|ones()',
        'f|or()', 'f|parser()', 'f|partitionSelect()', 'f|permutations()', 'c|phi',
        'c|pi', 'f|pickRandom()', 'f|pinv()', 'p|planckCharge', 'p|planckConstant',
        'p|planckLength', 'p|planckMass', 'p|planckTemperature', 'p|planckTime', 'f|polynomialRoot()',
        'f|pow()', 'f|print()', 'f|prod()', 'p|protonMass', 'f|qr()',
        'f|quantileSeq()', 'p|quantumOfCirculation', 'f|random()', 'f|randomInt()', 'f|range()',
        'f|rationalize()', 'f|re()', 'p|reducedPlanckConstant', 'f|reshape()', 'f|resize()',
        'f|resolve()', 'f|rightArithShift()', 'f|rightLogShift()', 'f|rotate()', 'f|rotationMatrix()',
        'f|round()', 'f|row()', 'p|rydberg', 'p|sackurTetrode', 'f|schur()',
        'f|sec()', 'f|sech()', 'p|secondRadiation', 'f|setCartesian()', 'f|setDifference()',
        'f|setDistinct()', 'f|setIntersect()', 'f|setIsSubset()', 'f|setMultiplicity()', 'f|setPowerset()',
        'f|setSize()', 'f|setSymDifference()', 'f|setUnion()', 'f|sign()', 'f|simplify()',
        'f|simplifyConstant()', 'f|simplifyCore()', 'f|sin()', 'f|sinh()', 'f|size()',
        'f|slu()', 'f|smaller()', 'f|smallerEq()', 'f|sort()', 'p|speedOfLight',
        'f|sqrt()', 'c|SQRT1_2', 'c|SQRT2', 'f|sqrtm()', 'f|square()',
        'f|squeeze()', 'f|std()', 'p|stefanBoltzmann', 'f|stirlingS2()', 'f|subset()',
        'f|subtract()', 'f|sum()', 'f|sylvester()', 'f|symbolicEqual()', 'f|tan()',
        'f|tanh()', 'c|tau', 'p|thomsonCrossSection', 'f|to()', 'f|trace()',
        'f|transpose()', 'f|typeOf()', 'f|unaryMinus()', 'f|unaryPlus()', 'f|unequal()',
        'f|usolve()', 'f|usolveAll()', 'p|vacuumImpedance', 'f|variance()', 'p|weakMixingAngle',
        'p|wienDisplacement', 'f|xgcd()', 'f|xor()', 'f|zeros()',
    ];
    return mathjsBuiltInSymbols;
}
//# sourceMappingURL=data:application/json;base64,