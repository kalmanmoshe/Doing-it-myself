import { getTikzSuggestions, } from "./utilities";
import { setCursor } from "./editor utilities/editor_utils";
import { expandSnippets } from "./snippets/snippet_management";
import { queueSnippet } from "./snippets/codemirror/snippet_queue_state_field";
class SuggestorTrigger {
    text;
    codeBlockText;
    constructor(ctx, view) {
        this.text = this.getCurrentLineText(ctx.pos, view);
        const source = this.getCodeBlockText(ctx, view);
        if (!source)
            return;
        //const tokens=new BasicTikzTokens(source)
        //console.log(tokens)
    }
    setTrigger(trigger) {
    }
    getCurrentLineText(pos, view) {
        const line = view.state.doc.lineAt(pos);
        //const cursorOffsetInLine = (pos+2) - line.from;I don't know why I had this here
        const textUpToCursor = line.text.slice(0, pos - line.from).trim();
        const words = textUpToCursor.split(/([\s,\[\](){};]|--\+\+|--\+|--)+/);
        const word = words[words.length - 1] || '';
        console.log(word);
        /* Checks that need to be made
        1. In what command are we in if any.
        2. Are we inputting a Variable a coordinate or formatting.
        3. if Formatting Are we starting to type a command or are we inputting a value to a command
        */
        return words[words.length - 1] || "";
    }
    getCodeBlockText(ctx, view) {
        const doc = view.state.doc;
        const { number } = doc.lineAt(ctx.pos);
        const beforeLine = findLine(view.state, number, -1, '```');
        const afterLine = findLine(view.state, number, 1, '```');
        ;
        if (!beforeLine || !afterLine)
            return null;
        const betweenText = doc.sliceString(beforeLine.to, afterLine.from).trim();
        const relativePos = ctx.pos - beforeLine.to;
        return betweenText;
    }
}
const findLine = (state, lineNumber, dir, startsWith) => {
    const { doc } = state;
    for (let i = lineNumber + dir; i > 0 && i <= doc.lines; i += dir) {
        const line = doc.line(i).text.trim();
        if (line.startsWith(startsWith))
            return doc.line(i);
    }
    return null;
};
class Suggestor {
    trigger;
    selectionIndex;
    context;
    suggestions = [];
    containerEl;
    setContext(context) { this.context = context; }
    isSuggesterDeployed() { return !!document.body.querySelector(".suggestion-dropdown"); }
    open(context, view) {
        // If the suggestor is already deployed, close it
        this.close();
        this.context = context;
        this.createContainerEl(view);
        this.updatePositionFromView(view);
        document.body.appendChild(this.containerEl);
        console.log("Suggestor deployed", this.containerEl);
    }
    updatePositionFromView(view) {
        const coords = view.coordsAtPos(view.state.selection.main.head);
        if (!coords)
            return false;
        this.updatePosition(coords.left, coords.bottom);
        return true;
    }
    close() {
        document.body.querySelectorAll(".suggestion-item").forEach(node => node.remove());
        document.body.querySelector(".suggestion-dropdown")?.remove();
    }
    createContainerEl(view) {
        const suggestions = ["1", "12", "123"]; /*this.getSuggestions(view)*/
        if (suggestions.length < 1)
            return;
        this.containerEl = document.createElement("div");
        this.containerEl.addClass("suggestion-dropdown");
        suggestions.forEach((suggestion) => {
            this.renderSuggestion(suggestion);
        });
    }
    renderSuggestion(suggestion) {
        this.containerEl.appendChild(Object.assign(document.createElement("div"), {
            className: "suggestion-item",
            innerText: suggestion
        }));
    }
    updatePosition(left, top) {
        if (!this.containerEl)
            return false;
        Object.assign(this.containerEl.style, {
            position: "absolute",
            left: `${left}px`,
            top: `${top}px`,
        });
        return true;
    }
    getAlldropdownItems() { return document.body.querySelectorAll(".suggestion-item"); }
    dropdownifAnyDeployed() { return document.body.querySelector(".suggestion-dropdown"); }
    handleDropdownNavigation(event, view) {
        const dropdown = this.dropdownifAnyDeployed();
        if (!dropdown || this.selectionIndex === undefined)
            return;
        const items = this.getAlldropdownItems();
        if (items.length === 0)
            return;
    }
    getSuggestions(view) {
        this.trigger = new SuggestorTrigger(this.context, view);
        const allSuggestions = getTikzSuggestions().map(s => s.trigger || s.replacement);
        const filteredSuggestions = allSuggestions.filter((suggestion) => suggestion.toLowerCase().startsWith(this.trigger.text.toLowerCase()));
        const sortedSuggestions = filteredSuggestions.sort((a, b) => {
            const lowerLastWord = this.trigger.text.toLowerCase();
            const aLower = a.toLowerCase();
            const bLower = b.toLowerCase();
            const aExactMatch = aLower === lowerLastWord ? -1 : 0;
            const bExactMatch = bLower === lowerLastWord ? -1 : 0;
            if (aExactMatch !== bExactMatch)
                return aExactMatch - bExactMatch;
            if (a.length !== b.length)
                return a.length - b.length;
            return aLower.localeCompare(bLower);
        });
        return sortedSuggestions;
    }
    updateSelection(items) {
        items.forEach((item, index) => {
            if (index === this.selectionIndex) {
                item.classList.add("selected");
                item.scrollIntoView({ block: "nearest" });
            }
            else {
                item.classList.remove("selected");
            }
        });
    }
    selectDropdownItem(item, view) {
        this.close();
        if (!this.context)
            return;
        const selectedText = item.textContent || "";
        const pos = this.context.pos;
        queueSnippet(view, pos - this.trigger.text.length, pos, selectedText);
        const success = expandSnippets(view);
        view.focus();
        setCursor(view, calculateNewCursorPosition(this.trigger.text, selectedText, pos));
        console.log(`Selected: ${selectedText}`);
        return success;
    }
}
function calculateNewCursorPosition(triggerText, selectedText, originalPos) {
    const lengthDifference = selectedText.length - triggerText.length;
    return originalPos + lengthDifference;
}
export const suggestor = new Suggestor();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VnZ2VzdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N1Z2dlc3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEdBQUksTUFBTSxhQUFhLENBQUM7QUFPbkQsT0FBTyxFQUFnQixTQUFTLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRS9FLE1BQU0sZ0JBQWdCO0lBQ3JCLElBQUksQ0FBUTtJQUNaLGFBQWEsQ0FBUztJQUN0QixZQUFZLEdBQVksRUFBRSxJQUFnQjtRQUN6QyxJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2hELE1BQU0sTUFBTSxHQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLENBQUE7UUFDNUMsSUFBRyxDQUFDLE1BQU07WUFBQyxPQUFNO1FBQ2pCLDBDQUEwQztRQUMxQyxxQkFBcUI7SUFDdEIsQ0FBQztJQUNELFVBQVUsQ0FBQyxPQUFlO0lBRTFCLENBQUM7SUFDRCxrQkFBa0IsQ0FBQyxHQUFXLEVBQUUsSUFBZ0I7UUFDL0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLGlGQUFpRjtRQUNqRixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqRSxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7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QUcsQ0FBQyxDQUFDLENBQUE7UUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztDQUVEO0FBR0QsU0FBUywwQkFBMEIsQ0FBQyxXQUFtQixFQUFFLFlBQW9CLEVBQUUsV0FBbUI7SUFDOUYsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDbEUsT0FBTyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VGlrelN1Z2dlc3Rpb25zLCAgfSBmcm9tIFwiLi91dGlsaXRpZXNcIjtcbmltcG9ydCB7IEVkaXRvclZpZXcsIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IHN5bnRheFRyZWUgfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGFuZ3VhZ2VcIjtcbmltcG9ydCB7IEVkaXRvclN0YXRlfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcbmltcG9ydCB7IFN5bnRheE5vZGUsIFRyZWVDdXJzb3IgfSBmcm9tIFwiQGxlemVyL2NvbW1vblwiO1xuaW1wb3J0IE1vc2hlIGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi91dGlscy9jb250ZXh0XCI7XG5pbXBvcnQgeyByZXBsYWNlUmFuZ2UsIHNldEN1cnNvciB9IGZyb20gXCIuL2VkaXRvciB1dGlsaXRpZXMvZWRpdG9yX3V0aWxzXCI7XG5pbXBvcnQgeyBleHBhbmRTbmlwcGV0cyB9IGZyb20gXCIuL3NuaXBwZXRzL3NuaXBwZXRfbWFuYWdlbWVudFwiO1xuaW1wb3J0IHsgcXVldWVTbmlwcGV0IH0gZnJvbSBcIi4vc25pcHBldHMvY29kZW1pcnJvci9zbmlwcGV0X3F1ZXVlX3N0YXRlX2ZpZWxkXCI7XG5cbmNsYXNzIFN1Z2dlc3RvclRyaWdnZXJ7XG5cdHRleHQ6IHN0cmluZ1xuXHRjb2RlQmxvY2tUZXh0OiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKGN0eDogQ29udGV4dCwgdmlldzogRWRpdG9yVmlldyl7XG5cdFx0dGhpcy50ZXh0PXRoaXMuZ2V0Q3VycmVudExpbmVUZXh0KGN0eC5wb3MsIHZpZXcpXG5cdFx0Y29uc3Qgc291cmNlPXRoaXMuZ2V0Q29kZUJsb2NrVGV4dChjdHgsdmlldylcblx0XHRpZighc291cmNlKXJldHVyblxuXHRcdC8vY29uc3QgdG9rZW5zPW5ldyBCYXNpY1Rpa3pUb2tlbnMoc291cmNlKVxuXHRcdC8vY29uc29sZS5sb2codG9rZW5zKVxuXHR9XG5cdHNldFRyaWdnZXIodHJpZ2dlcjogc3RyaW5nKXtcblxuXHR9XG5cdGdldEN1cnJlbnRMaW5lVGV4dChwb3M6IG51bWJlciwgdmlldzogRWRpdG9yVmlldyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpO1xuXHRcdC8vY29uc3QgY3Vyc29yT2Zmc2V0SW5MaW5lID0gKHBvcysyKSAtIGxpbmUuZnJvbTtJIGRvbid0IGtub3cgd2h5IEkgaGFkIHRoaXMgaGVyZVxuXHRcdGNvbnN0IHRleHRVcFRvQ3Vyc29yID0gbGluZS50ZXh0LnNsaWNlKDAsIHBvcy0gbGluZS5mcm9tKS50cmltKCk7XG5cdFx0Y29uc3Qgd29yZHMgPSB0ZXh0VXBUb0N1cnNvci5zcGxpdCgvKFtcXHMsXFxbXFxdKCl7fTtdfC0tXFwrXFwrfC0tXFwrfC0tKSsvKTtcblx0XHRjb25zdCB3b3JkPXdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdfHwnJztcblx0XHRjb25zb2xlLmxvZyh3b3JkKVxuXHRcdC8qIENoZWNrcyB0aGF0IG5lZWQgdG8gYmUgbWFkZVxuXHRcdDEuIEluIHdoYXQgY29tbWFuZCBhcmUgd2UgaW4gaWYgYW55LlxuXHRcdDIuIEFyZSB3ZSBpbnB1dHRpbmcgYSBWYXJpYWJsZSBhIGNvb3JkaW5hdGUgb3IgZm9ybWF0dGluZy5cblx0XHQzLiBpZiBGb3JtYXR0aW5nIEFyZSB3ZSBzdGFydGluZyB0byB0eXBlIGEgY29tbWFuZCBvciBhcmUgd2UgaW5wdXR0aW5nIGEgdmFsdWUgdG8gYSBjb21tYW5kXG5cdFx0Ki9cblx0XHRyZXR1cm4gd29yZHNbd29yZHMubGVuZ3RoIC0gMV0gfHwgXCJcIjtcblx0fVxuXHRnZXRDb2RlQmxvY2tUZXh0KGN0eDogQ29udGV4dCx2aWV3OiBFZGl0b3JWaWV3KXtcblx0XHRjb25zdCBkb2MgPSB2aWV3LnN0YXRlLmRvYztcblx0XHRjb25zdCB7IG51bWJlciB9ID0gZG9jLmxpbmVBdChjdHgucG9zKTtcblxuXHRcdGNvbnN0IGJlZm9yZUxpbmUgPSBmaW5kTGluZSh2aWV3LnN0YXRlLG51bWJlciwtMSwnYGBgJyk7XG5cdFx0Y29uc3QgYWZ0ZXJMaW5lID0gIGZpbmRMaW5lKHZpZXcuc3RhdGUsbnVtYmVyLDEsJ2BgYCcpOztcblx0XHRpZiAoIWJlZm9yZUxpbmUgfHwgIWFmdGVyTGluZSkgcmV0dXJuIG51bGw7XG5cdFx0Y29uc3QgYmV0d2VlblRleHQgPSBkb2Muc2xpY2VTdHJpbmcoYmVmb3JlTGluZS50bywgYWZ0ZXJMaW5lLmZyb20pLnRyaW0oKTtcblx0XHRjb25zdCByZWxhdGl2ZVBvcyA9IGN0eC5wb3MgLSBiZWZvcmVMaW5lLnRvO1xuXHRcdHJldHVybiBiZXR3ZWVuVGV4dFxuXHR9XG59XG5cbmNvbnN0IGZpbmRMaW5lID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgbGluZU51bWJlcjogbnVtYmVyLGRpcjogbnVtYmVyLCBzdGFydHNXaXRoOiBzdHJpbmcpID0+IHtcblx0Y29uc3Qge2RvY309c3RhdGVcblx0Zm9yIChsZXQgaSA9IGxpbmVOdW1iZXIgKyBkaXI7IGkgPiAwICYmIGkgPD0gZG9jLmxpbmVzOyBpICs9IGRpcikge1xuXHRjb25zdCBsaW5lID0gZG9jLmxpbmUoaSkudGV4dC50cmltKCk7XG5cdGlmIChsaW5lLnN0YXJ0c1dpdGgoc3RhcnRzV2l0aCkpIHJldHVybiBkb2MubGluZShpKTtcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn07XG5cbmNsYXNzIFN1Z2dlc3RvciB7XG5cdHByaXZhdGUgdHJpZ2dlcjogU3VnZ2VzdG9yVHJpZ2dlcjtcblx0c2VsZWN0aW9uSW5kZXg6IG51bWJlcjtcblx0cHJpdmF0ZSBjb250ZXh0OiBDb250ZXh0O1xuXHRwcml2YXRlIHN1Z2dlc3Rpb25zID0gW107XG5cdHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xuXHRzZXRDb250ZXh0KGNvbnRleHQ6IENvbnRleHQpe3RoaXMuY29udGV4dD1jb250ZXh0O31cblx0aXNTdWdnZXN0ZXJEZXBsb3llZCgpOiBib29sZWFuIHtyZXR1cm4gISFkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIuc3VnZ2VzdGlvbi1kcm9wZG93blwiKTt9XG5cdG9wZW4oY29udGV4dDogQ29udGV4dCx2aWV3OiBFZGl0b3JWaWV3KXtcblx0XHQvLyBJZiB0aGUgc3VnZ2VzdG9yIGlzIGFscmVhZHkgZGVwbG95ZWQsIGNsb3NlIGl0XG5cdFx0dGhpcy5jbG9zZSgpO1xuXHRcdHRoaXMuY29udGV4dD1jb250ZXh0O1xuXHRcdHRoaXMuY3JlYXRlQ29udGFpbmVyRWwodmlldyk7XG5cdFx0dGhpcy51cGRhdGVQb3NpdGlvbkZyb21WaWV3KHZpZXcpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXJFbCk7XG5cdFx0Y29uc29sZS5sb2coXCJTdWdnZXN0b3IgZGVwbG95ZWRcIix0aGlzLmNvbnRhaW5lckVsKTtcblx0fVxuXHRcblx0dXBkYXRlUG9zaXRpb25Gcm9tVmlldyh2aWV3OiBFZGl0b3JWaWV3KTogYm9vbGVhbntcblx0XHRjb25zdCBjb29yZHM9dmlldy5jb29yZHNBdFBvcyh2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQpXG5cdFx0aWYgKCFjb29yZHMpIHJldHVybiBmYWxzZTtcblx0XHR0aGlzLnVwZGF0ZVBvc2l0aW9uKGNvb3Jkcy5sZWZ0LGNvb3Jkcy5ib3R0b20pXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdGNsb3NlKCl7XG5cdFx0ZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiLnN1Z2dlc3Rpb24taXRlbVwiKS5mb3JFYWNoKG5vZGUgPT4gbm9kZS5yZW1vdmUoKSk7XG5cdFx0ZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLnN1Z2dlc3Rpb24tZHJvcGRvd25cIik/LnJlbW92ZSgpO1xuXHR9XG5cdGNyZWF0ZUNvbnRhaW5lckVsKHZpZXc6IEVkaXRvclZpZXcpe1xuXHRcdGNvbnN0IHN1Z2dlc3Rpb25zPVtcIjFcIixcIjEyXCIsXCIxMjNcIl0vKnRoaXMuZ2V0U3VnZ2VzdGlvbnModmlldykqL1xuXHRcdGlmKHN1Z2dlc3Rpb25zLmxlbmd0aDwxKXJldHVybjtcblx0XHR0aGlzLmNvbnRhaW5lckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwic3VnZ2VzdGlvbi1kcm9wZG93blwiKVxuXG5cdFx0c3VnZ2VzdGlvbnMuZm9yRWFjaCgoc3VnZ2VzdGlvbikgPT4ge1xuXHRcdFx0dGhpcy5yZW5kZXJTdWdnZXN0aW9uKHN1Z2dlc3Rpb24pO1xuXHRcdH0pO1xuXHR9XG5cblx0cmVuZGVyU3VnZ2VzdGlvbihzdWdnZXN0aW9uOiBzdHJpbmcpe1xuXHRcdHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoXG5cdFx0XHRPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIHtcblx0XHRcdFx0Y2xhc3NOYW1lOiBcInN1Z2dlc3Rpb24taXRlbVwiLFxuXHRcdFx0XHRpbm5lclRleHQ6IHN1Z2dlc3Rpb25cblx0XHRcdH0pXG5cdFx0KTtcblx0fVxuXG5cdHVwZGF0ZVBvc2l0aW9uKGxlZnQ6IG51bWJlcix0b3A6IG51bWJlcil7XG5cdFx0aWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm4gZmFsc2U7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLmNvbnRhaW5lckVsLnN0eWxlLHtcblx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRsZWZ0OiBgJHtsZWZ0fXB4YCxcblx0XHRcdHRvcDogYCR7dG9wfXB4YCxcblx0XHR9KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGdldEFsbGRyb3Bkb3duSXRlbXMoKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiLnN1Z2dlc3Rpb24taXRlbVwiKX1cblx0cHJpdmF0ZSBkcm9wZG93bmlmQW55RGVwbG95ZWQoKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLnN1Z2dlc3Rpb24tZHJvcGRvd25cIil9XG5cblx0cHJpdmF0ZSBoYW5kbGVEcm9wZG93bk5hdmlnYXRpb24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsdmlldzpFZGl0b3JWaWV3KSB7XG5cdFx0Y29uc3QgZHJvcGRvd24gPSB0aGlzLmRyb3Bkb3duaWZBbnlEZXBsb3llZCgpO1xuXHRcdGlmICghZHJvcGRvd24gfHwgdGhpcy5zZWxlY3Rpb25JbmRleCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cdFxuXHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRBbGxkcm9wZG93bkl0ZW1zKCk7XG5cblx0XHRpZiAoaXRlbXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cdFx0XG5cdH1cblxuXHRwcml2YXRlIGdldFN1Z2dlc3Rpb25zKHZpZXc6IEVkaXRvclZpZXcpIHtcblx0XHR0aGlzLnRyaWdnZXI9bmV3IFN1Z2dlc3RvclRyaWdnZXIodGhpcy5jb250ZXh0LCB2aWV3KVxuXHRcdGNvbnN0IGFsbFN1Z2dlc3Rpb25zID0gZ2V0VGlrelN1Z2dlc3Rpb25zKCkubWFwKHMgPT4gcy50cmlnZ2VyfHxzLnJlcGxhY2VtZW50KTtcblx0XG5cdFx0Y29uc3QgZmlsdGVyZWRTdWdnZXN0aW9ucyA9IGFsbFN1Z2dlc3Rpb25zLmZpbHRlcigoc3VnZ2VzdGlvbikgPT5cblx0XHRcdHN1Z2dlc3Rpb24udG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHRoaXMudHJpZ2dlci50ZXh0LnRvTG93ZXJDYXNlKCkpXG5cdFx0KTtcblx0XG5cdFx0Y29uc3Qgc29ydGVkU3VnZ2VzdGlvbnMgPSBmaWx0ZXJlZFN1Z2dlc3Rpb25zLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdGNvbnN0IGxvd2VyTGFzdFdvcmQgPSB0aGlzLnRyaWdnZXIudGV4dC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0Y29uc3QgYUxvd2VyID0gYS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0Y29uc3QgYkxvd2VyID0gYi50b0xvd2VyQ2FzZSgpO1xuXHRcblxuXHRcdFx0Y29uc3QgYUV4YWN0TWF0Y2ggPSBhTG93ZXIgPT09IGxvd2VyTGFzdFdvcmQgPyAtMSA6IDA7XG5cdFx0XHRjb25zdCBiRXhhY3RNYXRjaCA9IGJMb3dlciA9PT0gbG93ZXJMYXN0V29yZCA/IC0xIDogMDtcblx0XHRcdGlmIChhRXhhY3RNYXRjaCAhPT0gYkV4YWN0TWF0Y2gpIHJldHVybiBhRXhhY3RNYXRjaCAtIGJFeGFjdE1hdGNoO1xuXHRcblx0XHRcdGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuXHRcblx0XHRcdHJldHVybiBhTG93ZXIubG9jYWxlQ29tcGFyZShiTG93ZXIpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzb3J0ZWRTdWdnZXN0aW9ucztcblx0fVxuXG5cdHVwZGF0ZVNlbGVjdGlvbihpdGVtczogTm9kZUxpc3RPZjxFbGVtZW50Pikge1xuXHRcdGl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG5cdFx0XHRpZiAoaW5kZXggPT09IHRoaXMuc2VsZWN0aW9uSW5kZXgpIHtcblx0XHRcdFx0aXRlbS5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG5cdFx0XHRcdGl0ZW0uc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogXCJuZWFyZXN0XCIgfSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHNlbGVjdERyb3Bkb3duSXRlbShpdGVtOiBFbGVtZW50LHZpZXc6IEVkaXRvclZpZXcpIHtcblx0XHR0aGlzLmNsb3NlKClcblx0XHRpZighdGhpcy5jb250ZXh0KXJldHVybiA7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRUZXh0ID0gaXRlbS50ZXh0Q29udGVudCB8fCBcIlwiO1xuXHRcdGNvbnN0IHBvcz10aGlzLmNvbnRleHQucG9zO1xuXHRcdHF1ZXVlU25pcHBldCh2aWV3LHBvcy10aGlzLnRyaWdnZXIudGV4dC5sZW5ndGgscG9zLHNlbGVjdGVkVGV4dClcblx0XHRjb25zdCBzdWNjZXNzID0gZXhwYW5kU25pcHBldHModmlldyk7XG5cdFx0dmlldy5mb2N1cygpO1xuXHRcdHNldEN1cnNvcih2aWV3LGNhbGN1bGF0ZU5ld0N1cnNvclBvc2l0aW9uKHRoaXMudHJpZ2dlci50ZXh0LHNlbGVjdGVkVGV4dCxwb3MpKVxuXHRcdGNvbnNvbGUubG9nKGBTZWxlY3RlZDogJHtzZWxlY3RlZFRleHR9YCk7XG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XG5cdH1cblx0XG59XG5cblxuZnVuY3Rpb24gY2FsY3VsYXRlTmV3Q3Vyc29yUG9zaXRpb24odHJpZ2dlclRleHQ6IHN0cmluZywgc2VsZWN0ZWRUZXh0OiBzdHJpbmcsIG9yaWdpbmFsUG9zOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGxlbmd0aERpZmZlcmVuY2UgPSBzZWxlY3RlZFRleHQubGVuZ3RoIC0gdHJpZ2dlclRleHQubGVuZ3RoO1xuICAgIHJldHVybiBvcmlnaW5hbFBvcyArIGxlbmd0aERpZmZlcmVuY2U7XG59XG5cbmV4cG9ydCBjb25zdCBzdWdnZXN0b3IgPSBuZXcgU3VnZ2VzdG9yKCk7Il19