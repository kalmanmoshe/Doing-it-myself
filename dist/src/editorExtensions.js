import { ViewPlugin, } from "@codemirror/view";
import { Context } from "./utils/context";
import { isComposing, replaceRange, setCursor } from "./editor utilities/editor_utils";
import { keyboardAutoReplaceHebrewToEnglishTriggers } from "./utils/staticData";
import { Suggestor } from "./suggestor";
import { RtlForc } from "./editorDecorations";
import { setSelectionToNextTabstop } from "./snippets/snippet_management";
import { tabstopsStateField } from "./codemirror/tabstops_state_field";
import { snippetQueueStateField } from "./codemirror/snippet_queue_state_field";
import { snippetInvertedEffects } from "./codemirror/history";
import { runSnippets } from "./features/run_snippets";
export class EditorExtensions {
    shouldListenForTransaction = false;
    activeEditorView = null;
    suggestionActive = false;
    suggestor = new Suggestor();
    isSuggesterDeployed() {
        return !!document.body.querySelector(".suggestion-dropdown");
    }
    setEditorExtensions(app) {
        while (app.editorExtensions.length)
            app.editorExtensions.pop(); // Clear existing extensions
        this.monitor(app);
        this.snippetExtensions(app);
        const flatExtensions = app.editorExtensions.flat();
        app.registerEditorExtension(flatExtensions);
    }
    monitor(app) {
    }
    snippetExtensions(app) {
        app.editorExtensions.push([
            tabstopsStateField.extension,
            snippetQueueStateField.extension,
            snippetInvertedEffects,
        ]);
    }
    registerDecorations(app) {
        app.registerEditorExtension(ViewPlugin.fromClass(RtlForc, {
            decorations: (v) => v.decorations,
        }));
    }
    onClick = (event, view) => {
        const suggestionItems = document.body.querySelectorAll(".suggestion-item");
        // Check if the click is on a suggestion item
        const clickedSuggestion = Array.from(suggestionItems).find((item) => item.contains(event.target));
        if (clickedSuggestion) {
            this.suggestor.selectDropdownItem(clickedSuggestion, view);
        }
    };
    onTransaction = (view) => {
        const ctx = Context.fromView(view);
        if (ctx.codeblockLanguage === "tikz") {
            this.suggestor.deploySuggestor(ctx, view);
        }
    };
    onKeydown = (event, view) => {
        let key = event.key;
        const ctx = Context.fromView(view);
        if (!(event.ctrlKey || event.metaKey) && (ctx.mode.inMath() && (!ctx.inTextEnvironment() || ctx.codeblockLanguage.match(/(tikz)/)))) {
            const trigger = keyboardAutoReplaceHebrewToEnglishTriggers.find((trigger2) => trigger2.key === event.key && trigger2.code === event.code);
            if (trigger) {
                event.preventDefault();
                key = trigger.replacement;
                replaceRange(view, view.state.selection.main.from, view.state.selection.main.to, key);
                setCursor(view, view.state.selection.main.from + key.length);
            }
        }
        if (this.suggestor.isSuggesterDeployed) {
            handleDropdownNavigation(event, view, this.suggestor);
        }
        const success = handleKeydown(key, event.shiftKey, event.ctrlKey || event.metaKey, isComposing(view, event), view, ctx);
        if (success)
            event.preventDefault();
    };
    decorat() {
    }
}
const handleDropdownNavigation = (event, view, suggestor) => {
    const items = suggestor.getAlldropdownItems();
    if (event.key === "ArrowDown") {
        suggestor.selectionIndex = (suggestor.selectionIndex + 1) % items.length;
        suggestor.updateSelection(items);
        event.preventDefault();
    }
    else if (event.key === "ArrowUp") {
        suggestor.selectionIndex = (suggestor.selectionIndex - 1 + items.length) % items.length;
        suggestor.updateSelection(items);
        event.preventDefault();
    }
    else if (event.key === "Enter") {
        const selectedItem = items[suggestor.selectionIndex];
        suggestor.selectDropdownItem(selectedItem, view);
        event.preventDefault();
    } /*else if (event.key === "Escape") {
        dropdown.remove();
        event.preventDefault();
    }*/
};
const handleKeydown = (key, shiftKey, ctrlKey, isIME, view, ctx) => {
    const settings = { autoDelete$: false,
        snippetsEnabled: false,
        suppressSnippetTriggerOnIME: false,
        autofractionEnabled: false,
        matrixShortcutsEnabled: false,
        taboutEnabled: false,
    };
    //getLatexSuiteConfig(view);
    let success = false;
    if (settings.autoDelete$ && key === "Backspace" && ctx.mode.inMath()) { /*
      const charAtPos = getCharacterAtPos(view, ctx.pos);
      const charAtPrevPos = getCharacterAtPos(view, ctx.pos - 1);
      if (charAtPos === "$" && charAtPrevPos === "$") {
        //replaceRange(view, ctx.pos - 1, ctx.pos + 1, "");
        //removeAllTabstops(view);
        return true;
      }*/
    }
    if (settings.snippetsEnabled) {
        if (settings.suppressSnippetTriggerOnIME && isIME)
            return;
        if (!ctrlKey) {
            try {
                success = runSnippets(view, ctx, key);
                if (success)
                    return true;
            }
            catch (e) {
                //clearSnippetQueue(view);
                console.error(e);
            }
        }
    }
    if (key === "Tab") {
        //Finally found it.
        success = setSelectionToNextTabstop(view);
        if (success)
            return true;
    }
    if (settings.autofractionEnabled && ctx.mode.strictlyInMath()) {
        if (key === "/") {
            //success = runAutoFraction(view, ctx);
            if (success)
                return true;
        }
    }
    if (settings.matrixShortcutsEnabled && ctx.mode.blockMath) {
        if (["Tab", "Enter"].contains(key)) {
            //success = runMatrixShortcuts(view, ctx, key, shiftKey);
            if (success)
                return true;
        }
    }
    if (settings.taboutEnabled) {
        if (key === "Tab" /* || shouldTaboutByCloseBracket(view, key)*/) {
            //success = tabout(view, ctx);
            if (success)
                return true;
        }
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,