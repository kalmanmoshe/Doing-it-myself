import { MarkdownRenderer, Modal, Notice, Component, renderMath } from "obsidian";
export class InfoModal extends Modal {
    mathInfo;
    solutionInfo;
    constructor(app, mathInfo) {
        super(app);
        this.mathInfo = mathInfo.mathInfo;
        this.solutionInfo = mathInfo.solutionInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("info-modal-style");
        contentEl.createEl("h2", { text: "Result Details", cls: "info-modal-title" });
        // Add content and button for copying details
        this.populateContent(contentEl);
    }
    populateContent(contentEl) {
        const columnContainer = contentEl.createEl("div", { cls: "info-modal-main-container" });
        this.mathInfo.forEach((line, index) => {
            const lineContainer = columnContainer.createEl("div", { cls: "info-modal-line-container" });
            const leftLine = lineContainer.createEl("div", { cls: "info-modal-left-line" });
            leftLine.appendChild(renderMath(line, true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${line}\\end{aligned}}$`, leftLine, "", new Component());
            const rightLine = lineContainer.createEl("div", { cls: "info-modal-right-line" });
            rightLine.appendChild(renderMath(this.solutionInfo[index], true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${this.solutionInfo[index] || ""}\\end{aligned}}$`, rightLine, "", new Component());
        });
        const actionButton = contentEl.createEl("button", { text: "Copy Details", cls: "info-modal-Copy-button" });
        actionButton.addEventListener("click", () => {
            navigator.clipboard.writeText(this.mathInfo.join("\n"));
            new Notice("Details copied to clipboard!");
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}
export class DebugModal extends Modal {
    debugInfo;
    constructor(app, debugInfo) {
        super(app);
        this.debugInfo = debugInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("custom-modal-style");
        contentEl.createEl("h2", { text: "Debug Information", cls: "debug-Modal-title" });
        const debugContent = contentEl.createEl("div", { cls: "debug-info-container" });
        MarkdownRenderer.renderMarkdown(`\`\`\`js\n${this.debugInfo}\n\`\`\``, debugContent, "", new Component());
    }
    onClose() {
        this.contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzcGx5TW9kYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rlc3BseU1vZGFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXdCLGdCQUFnQixFQUFrQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBMEIsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR2hLLE1BQU0sT0FBTyxTQUFVLFNBQVEsS0FBSztJQUNoQyxRQUFRLENBQVc7SUFDbkIsWUFBWSxDQUFXO0lBRXZCLFlBQVksR0FBUSxFQUFFLFFBQWtCO1FBQ3RDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN2QyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBRTlFLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxlQUFlLENBQUMsU0FBc0I7UUFFNUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3BDLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBQztZQUU1RixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7WUFDaEYsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDNUMsZ0hBQWdIO1lBRWhILE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztZQUNsRixTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakUsMklBQTJJO1FBQzdJLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRSx3QkFBd0IsRUFBRSxDQUFDLENBQUM7UUFFM0csWUFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDMUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4RCxJQUFJLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQUdELE1BQU0sT0FBTyxVQUFXLFNBQVEsS0FBSztJQUNqQyxTQUFTLENBQVM7SUFFbEIsWUFBWSxHQUFRLEVBQUUsU0FBaUI7UUFDckMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN6QyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBRWxGLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztRQUNoRixnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsYUFBYSxJQUFJLENBQUMsU0FBUyxVQUFVLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiwgTWFya2Rvd25WaWV3LCBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIFNldHRpbmcsIE1vZGFsLCBOb3RpY2UsIENvbXBvbmVudCwgRWRpdG9yLCBFZGl0b3JQb3NpdGlvbiwgcmVuZGVyTWF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgTWF0aEluZm8gfSBmcm9tIFwiLi9tYXRoUGFyc2VyL21hdGhFbmdpbmUuanNcIjtcbiAgXG5leHBvcnQgY2xhc3MgSW5mb01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIG1hdGhJbmZvOiBzdHJpbmdbXTtcbiAgICBzb2x1dGlvbkluZm86IHN0cmluZ1tdO1xuICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWF0aEluZm86IE1hdGhJbmZvKSB7XG4gICAgICBzdXBlcihhcHApO1xuICAgICAgdGhpcy5tYXRoSW5mbyA9IG1hdGhJbmZvLm1hdGhJbmZvO1xuICAgICAgdGhpcy5zb2x1dGlvbkluZm8gPSBtYXRoSW5mby5zb2x1dGlvbkluZm87XG4gICAgfVxuICBcbiAgICBvbk9wZW4oKSB7XG4gICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgIGNvbnRlbnRFbC5hZGRDbGFzcyhcImluZm8tbW9kYWwtc3R5bGVcIik7XG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiUmVzdWx0IERldGFpbHNcIiwgY2xzOiBcImluZm8tbW9kYWwtdGl0bGVcIiB9KTtcbiAgXG4gICAgICAvLyBBZGQgY29udGVudCBhbmQgYnV0dG9uIGZvciBjb3B5aW5nIGRldGFpbHNcbiAgICAgIHRoaXMucG9wdWxhdGVDb250ZW50KGNvbnRlbnRFbCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgcG9wdWxhdGVDb250ZW50KGNvbnRlbnRFbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgIFxuICAgICAgY29uc3QgY29sdW1uQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImluZm8tbW9kYWwtbWFpbi1jb250YWluZXJcIiB9KTtcbiAgICAgIFxuICAgICAgdGhpcy5tYXRoSW5mby5mb3JFYWNoKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBsaW5lQ29udGFpbmVyID0gY29sdW1uQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImluZm8tbW9kYWwtbGluZS1jb250YWluZXJcIiB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxlZnRMaW5lID0gbGluZUNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLWxlZnQtbGluZVwiIH0pO1xuICAgICAgICBsZWZ0TGluZS5hcHBlbmRDaGlsZChyZW5kZXJNYXRoKGxpbmUsdHJ1ZSkpO1xuICAgICAgICAvL01hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oYCRcXHtcXFxcYmVnaW57YWxpZ25lZH0mJHtsaW5lfVxcXFxlbmR7YWxpZ25lZH19JGAsIGxlZnRMaW5lLCBcIlwiLCBuZXcgQ29tcG9uZW50KCkpO1xuICBcbiAgICAgICAgY29uc3QgcmlnaHRMaW5lID0gbGluZUNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLXJpZ2h0LWxpbmVcIiB9KTtcbiAgICAgICAgcmlnaHRMaW5lLmFwcGVuZENoaWxkKHJlbmRlck1hdGgodGhpcy5zb2x1dGlvbkluZm9baW5kZXhdLHRydWUpKTtcbiAgICAgICAgLy9NYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKGAkXFx7XFxcXGJlZ2lue2FsaWduZWR9JiR7dGhpcy5zb2x1dGlvbkluZm9baW5kZXhdIHx8IFwiXCJ9XFxcXGVuZHthbGlnbmVkfX0kYCwgcmlnaHRMaW5lLCBcIlwiLCBuZXcgQ29tcG9uZW50KCkpO1xuICAgICAgfSk7XG4gIFxuICAgICAgY29uc3QgYWN0aW9uQnV0dG9uID0gY29udGVudEVsLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJDb3B5IERldGFpbHNcIiwgY2xzOiBcImluZm8tbW9kYWwtQ29weS1idXR0b25cIiB9KTtcbiAgICAgIFxuICAgICAgYWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRoaXMubWF0aEluZm8uam9pbihcIlxcblwiKSk7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJEZXRhaWxzIGNvcGllZCB0byBjbGlwYm9hcmQhXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICBcbiAgICBvbkNsb3NlKCkge1xuICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIERlYnVnTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgZGVidWdJbmZvOiBzdHJpbmc7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBkZWJ1Z0luZm86IHN0cmluZykge1xuICAgICAgc3VwZXIoYXBwKTtcbiAgICAgIHRoaXMuZGVidWdJbmZvID0gZGVidWdJbmZvO1xuICAgIH1cbiAgXG4gICAgb25PcGVuKCkge1xuICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICBjb250ZW50RWwuYWRkQ2xhc3MoXCJjdXN0b20tbW9kYWwtc3R5bGVcIik7XG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiRGVidWcgSW5mb3JtYXRpb25cIiwgY2xzOiBcImRlYnVnLU1vZGFsLXRpdGxlXCIgfSk7XG4gIFxuICAgICAgY29uc3QgZGVidWdDb250ZW50ID0gY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImRlYnVnLWluZm8tY29udGFpbmVyXCIgfSk7XG4gICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKGBcXGBcXGBcXGBqc1xcbiR7dGhpcy5kZWJ1Z0luZm99XFxuXFxgXFxgXFxgYCwgZGVidWdDb250ZW50LCBcIlwiLCBuZXcgQ29tcG9uZW50KCkpO1xuICAgIH1cbiAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxuICB9Il19