import { MarkdownRenderer, Modal, Notice, Component, renderMath } from "obsidian";
export class InfoModal extends Modal {
    mathInfo;
    solutionInfo;
    constructor(app, mathInfo) {
        super(app);
        this.mathInfo = mathInfo.mathInfo;
        this.solutionInfo = mathInfo.solutionInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("info-modal-style");
        contentEl.createEl("h2", { text: "Result Details", cls: "info-modal-title" });
        // Add content and button for copying details
        this.populateContent(contentEl);
    }
    populateContent(contentEl) {
        const columnContainer = contentEl.createEl("div", { cls: "info-modal-main-container" });
        this.mathInfo.forEach((line, index) => {
            const lineContainer = columnContainer.createEl("div", { cls: "info-modal-line-container" });
            const leftLine = lineContainer.createEl("div", { cls: "info-modal-left-line" });
            leftLine.appendChild(renderMath(line, true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${line}\\end{aligned}}$`, leftLine, "", new Component());
            const rightLine = lineContainer.createEl("div", { cls: "info-modal-right-line" });
            rightLine.appendChild(renderMath(this.solutionInfo[index], true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${this.solutionInfo[index] || ""}\\end{aligned}}$`, rightLine, "", new Component());
        });
        const buttonContainer = contentEl.createEl("div", { cls: "info-modal-Copy-button-container" });
        const actionButton = buttonContainer.createEl("button", { text: "Copy Details", cls: "info-modal-Copy-button" });
        actionButton.addEventListener("click", () => {
            navigator.clipboard.writeText(this.mathInfo.join("\n"));
            new Notice("Details copied to clipboard!");
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}
export class DebugModal extends Modal {
    debugInfo;
    constructor(app, debugInfo) {
        super(app);
        this.debugInfo = debugInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("custom-modal-style");
        contentEl.createEl("h2", { text: "Debug Information", cls: "debug-Modal-title" });
        const debugContent = contentEl.createEl("div", { cls: "debug-info-container" });
        MarkdownRenderer.renderMarkdown(`\`\`\`js\n${this.debugInfo}\n\`\`\``, debugContent, "", new Component());
    }
    onClose() {
        this.contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzcGx5TW9kYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rlc3BseU1vZGFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXdCLGdCQUFnQixFQUFrQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBMEIsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR2hLLE1BQU0sT0FBTyxTQUFVLFNBQVEsS0FBSztJQUNoQyxRQUFRLENBQVc7SUFDbkIsWUFBWSxDQUFXO0lBRXZCLFlBQVksR0FBUSxFQUFFLFFBQWtCO1FBQ3RDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN2QyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBRTlFLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxlQUFlLENBQUMsU0FBc0I7UUFFNUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3BDLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBQztZQUU1RixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7WUFDaEYsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDNUMsZ0hBQWdIO1lBRWhILE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztZQUNsRixTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakUsMklBQTJJO1FBQzdJLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsa0NBQWtDLEVBQUUsQ0FBQyxDQUFDO1FBQy9GLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO1FBRWpILFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFHRCxNQUFNLE9BQU8sVUFBVyxTQUFRLEtBQUs7SUFDakMsU0FBUyxDQUFTO0lBRWxCLFlBQVksR0FBUSxFQUFFLFNBQWlCO1FBQ3JDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDekMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUVsRixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFDaEYsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGFBQWEsSUFBSSxDQUFDLFNBQVMsVUFBVSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duVmlldywgTWFya2Rvd25SZW5kZXJlciwgUGx1Z2luU2V0dGluZ1RhYiwgQXBwLCBTZXR0aW5nLCBNb2RhbCwgTm90aWNlLCBDb21wb25lbnQsIEVkaXRvciwgRWRpdG9yUG9zaXRpb24sIHJlbmRlck1hdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IE1hdGhJbmZvIH0gZnJvbSBcIi4vbWF0aEVuZ2luZS5qc1wiO1xuICBcbmV4cG9ydCBjbGFzcyBJbmZvTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgbWF0aEluZm86IHN0cmluZ1tdO1xuICAgIHNvbHV0aW9uSW5mbzogc3RyaW5nW107XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYXRoSW5mbzogTWF0aEluZm8pIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLm1hdGhJbmZvID0gbWF0aEluZm8ubWF0aEluZm87XG4gICAgICB0aGlzLnNvbHV0aW9uSW5mbyA9IG1hdGhJbmZvLnNvbHV0aW9uSW5mbztcbiAgICB9XG4gIFxuICAgIG9uT3BlbigpIHtcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgY29udGVudEVsLmFkZENsYXNzKFwiaW5mby1tb2RhbC1zdHlsZVwiKTtcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJSZXN1bHQgRGV0YWlsc1wiLCBjbHM6IFwiaW5mby1tb2RhbC10aXRsZVwiIH0pO1xuICBcbiAgICAgIC8vIEFkZCBjb250ZW50IGFuZCBidXR0b24gZm9yIGNvcHlpbmcgZGV0YWlsc1xuICAgICAgdGhpcy5wb3B1bGF0ZUNvbnRlbnQoY29udGVudEVsKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBwb3B1bGF0ZUNvbnRlbnQoY29udGVudEVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgXG4gICAgICBjb25zdCBjb2x1bW5Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1tYWluLWNvbnRhaW5lclwiIH0pO1xuICAgICAgXG4gICAgICB0aGlzLm1hdGhJbmZvLmZvckVhY2goKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpbmVDb250YWluZXIgPSBjb2x1bW5Db250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1saW5lLWNvbnRhaW5lclwiIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbGVmdExpbmUgPSBsaW5lQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImluZm8tbW9kYWwtbGVmdC1saW5lXCIgfSk7XG4gICAgICAgIGxlZnRMaW5lLmFwcGVuZENoaWxkKHJlbmRlck1hdGgobGluZSx0cnVlKSk7XG4gICAgICAgIC8vTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihgJFxce1xcXFxiZWdpbnthbGlnbmVkfSYke2xpbmV9XFxcXGVuZHthbGlnbmVkfX0kYCwgbGVmdExpbmUsIFwiXCIsIG5ldyBDb21wb25lbnQoKSk7XG4gIFxuICAgICAgICBjb25zdCByaWdodExpbmUgPSBsaW5lQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImluZm8tbW9kYWwtcmlnaHQtbGluZVwiIH0pO1xuICAgICAgICByaWdodExpbmUuYXBwZW5kQ2hpbGQocmVuZGVyTWF0aCh0aGlzLnNvbHV0aW9uSW5mb1tpbmRleF0sdHJ1ZSkpO1xuICAgICAgICAvL01hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oYCRcXHtcXFxcYmVnaW57YWxpZ25lZH0mJHt0aGlzLnNvbHV0aW9uSW5mb1tpbmRleF0gfHwgXCJcIn1cXFxcZW5ke2FsaWduZWR9fSRgLCByaWdodExpbmUsIFwiXCIsIG5ldyBDb21wb25lbnQoKSk7XG4gICAgICB9KTtcbiAgXG4gICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1Db3B5LWJ1dHRvbi1jb250YWluZXJcIiB9KTtcbiAgICAgIGNvbnN0IGFjdGlvbkJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiQ29weSBEZXRhaWxzXCIsIGNsczogXCJpbmZvLW1vZGFsLUNvcHktYnV0dG9uXCIgfSk7XG4gICAgICBcbiAgICAgIGFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0aGlzLm1hdGhJbmZvLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICBuZXcgTm90aWNlKFwiRGV0YWlscyBjb3BpZWQgdG8gY2xpcGJvYXJkIVwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBEZWJ1Z01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGRlYnVnSW5mbzogc3RyaW5nO1xuICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZGVidWdJbmZvOiBzdHJpbmcpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLmRlYnVnSW5mbyA9IGRlYnVnSW5mbztcbiAgICB9XG4gIFxuICAgIG9uT3BlbigpIHtcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgY29udGVudEVsLmFkZENsYXNzKFwiY3VzdG9tLW1vZGFsLXN0eWxlXCIpO1xuICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIkRlYnVnIEluZm9ybWF0aW9uXCIsIGNsczogXCJkZWJ1Zy1Nb2RhbC10aXRsZVwiIH0pO1xuICBcbiAgICAgIGNvbnN0IGRlYnVnQ29udGVudCA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJkZWJ1Zy1pbmZvLWNvbnRhaW5lclwiIH0pO1xuICAgICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihgXFxgXFxgXFxganNcXG4ke3RoaXMuZGVidWdJbmZvfVxcblxcYFxcYFxcYGAsIGRlYnVnQ29udGVudCwgXCJcIiwgbmV3IENvbXBvbmVudCgpKTtcbiAgICB9XG4gIFxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cbiAgfSJdfQ==