import { MarkdownRenderer, Modal, Notice, Component } from "obsidian";
export class InfoModal extends Modal {
    mathInfo;
    solutionInfo;
    constructor(app, mathInfo) {
        super(app);
        this.mathInfo = mathInfo.mathInfo;
        this.solutionInfo = mathInfo.solutionInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("info-modal-style");
        contentEl.createEl("h2", { text: "Result Details", cls: "info-modal-title" });
        // Add content and button for copying details
        this.populateContent(contentEl);
    }
    populateContent(contentEl) {
        const columnContainer = contentEl.createEl("div", { cls: "info-modal-main-container" });
        this.mathInfo.forEach((line, index) => {
            const lineContainer = columnContainer.createEl("div", { cls: "info-modal-line-container" });
            const leftLine = lineContainer.createEl("div", { cls: "info-modal-left-line" });
            MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${line}\\end{aligned}}$`, leftLine, "", new Component());
            const rightLine = lineContainer.createEl("div", { cls: "info-modal-right-line" });
            MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${this.solutionInfo[index] || ""}\\end{aligned}}$`, rightLine, "", new Component());
        });
        const buttonContainer = contentEl.createEl("div", { cls: "info-modal-Copy-button-container" });
        const actionButton = buttonContainer.createEl("button", { text: "Copy Details", cls: "info-modal-Copy-button" });
        actionButton.addEventListener("click", () => {
            navigator.clipboard.writeText(this.mathInfo.join("\n"));
            new Notice("Details copied to clipboard!");
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}
export class DebugModal extends Modal {
    debugInfo;
    constructor(app, debugInfo) {
        super(app);
        this.debugInfo = debugInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("custom-modal-style");
        contentEl.createEl("h2", { text: "Debug Information", cls: "debug-Modal-title" });
        const debugContent = contentEl.createEl("div", { cls: "debug-info-container" });
        MarkdownRenderer.renderMarkdown(`\`\`\`js\n${this.debugInfo}\n\`\`\``, debugContent, "", new Component());
    }
    onClose() {
        this.contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzcGx5TW9kYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rlc3BseU1vZGFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXdCLGdCQUFnQixFQUFrQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBMEIsTUFBTSxVQUFVLENBQUM7QUFHcEosTUFBTSxPQUFPLFNBQVUsU0FBUSxLQUFLO0lBQ2hDLFFBQVEsQ0FBVztJQUNuQixZQUFZLENBQVc7SUFFdkIsWUFBWSxHQUFRLEVBQUUsUUFBa0I7UUFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUM1QyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFFOUUsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVPLGVBQWUsQ0FBQyxTQUFzQjtRQUU1QyxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLENBQUM7UUFFeEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDcEMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1lBRTVGLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztZQUNoRixnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLElBQUksa0JBQWtCLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFFOUcsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1lBQ2xGLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzNJLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsa0NBQWtDLEVBQUUsQ0FBQyxDQUFDO1FBQy9GLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO1FBRWpILFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFHRCxNQUFNLE9BQU8sVUFBVyxTQUFRLEtBQUs7SUFDakMsU0FBUyxDQUFTO0lBRWxCLFlBQVksR0FBUSxFQUFFLFNBQWlCO1FBQ3JDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDekMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUVsRixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFDaEYsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGFBQWEsSUFBSSxDQUFDLFNBQVMsVUFBVSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duVmlldywgTWFya2Rvd25SZW5kZXJlciwgUGx1Z2luU2V0dGluZ1RhYiwgQXBwLCBTZXR0aW5nLCBNb2RhbCwgTm90aWNlLCBDb21wb25lbnQsIEVkaXRvciwgRWRpdG9yUG9zaXRpb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IE1hdGhJbmZvIH0gZnJvbSBcIi4vbWF0aEVuZ2luZS5qc1wiO1xuICBcbmV4cG9ydCBjbGFzcyBJbmZvTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgbWF0aEluZm86IHN0cmluZ1tdO1xuICAgIHNvbHV0aW9uSW5mbzogc3RyaW5nW107XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYXRoSW5mbzogTWF0aEluZm8pIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLm1hdGhJbmZvID0gbWF0aEluZm8ubWF0aEluZm87XG4gICAgICB0aGlzLnNvbHV0aW9uSW5mbyA9IG1hdGhJbmZvLnNvbHV0aW9uSW5mbztcbiAgICB9XG4gIFxuICAgIG9uT3BlbigpIHtcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgY29udGVudEVsLmFkZENsYXNzKFwiaW5mby1tb2RhbC1zdHlsZVwiKTtcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJSZXN1bHQgRGV0YWlsc1wiLCBjbHM6IFwiaW5mby1tb2RhbC10aXRsZVwiIH0pO1xuICBcbiAgICAgIC8vIEFkZCBjb250ZW50IGFuZCBidXR0b24gZm9yIGNvcHlpbmcgZGV0YWlsc1xuICAgICAgdGhpcy5wb3B1bGF0ZUNvbnRlbnQoY29udGVudEVsKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBwb3B1bGF0ZUNvbnRlbnQoY29udGVudEVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgXG4gICAgICBjb25zdCBjb2x1bW5Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1tYWluLWNvbnRhaW5lclwiIH0pO1xuICAgICAgXG4gICAgICB0aGlzLm1hdGhJbmZvLmZvckVhY2goKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpbmVDb250YWluZXIgPSBjb2x1bW5Db250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1saW5lLWNvbnRhaW5lclwiIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbGVmdExpbmUgPSBsaW5lQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImluZm8tbW9kYWwtbGVmdC1saW5lXCIgfSk7XG4gICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oYCRcXHtcXFxcYmVnaW57YWxpZ25lZH0mJHtsaW5lfVxcXFxlbmR7YWxpZ25lZH19JGAsIGxlZnRMaW5lLCBcIlwiLCBuZXcgQ29tcG9uZW50KCkpO1xuICBcbiAgICAgICAgY29uc3QgcmlnaHRMaW5lID0gbGluZUNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLXJpZ2h0LWxpbmVcIiB9KTtcbiAgICAgICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihgJFxce1xcXFxiZWdpbnthbGlnbmVkfSYke3RoaXMuc29sdXRpb25JbmZvW2luZGV4XSB8fCBcIlwifVxcXFxlbmR7YWxpZ25lZH19JGAsIHJpZ2h0TGluZSwgXCJcIiwgbmV3IENvbXBvbmVudCgpKTtcbiAgICAgIH0pO1xuICBcbiAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLUNvcHktYnV0dG9uLWNvbnRhaW5lclwiIH0pO1xuICAgICAgY29uc3QgYWN0aW9uQnV0dG9uID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJDb3B5IERldGFpbHNcIiwgY2xzOiBcImluZm8tbW9kYWwtQ29weS1idXR0b25cIiB9KTtcbiAgICAgIFxuICAgICAgYWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRoaXMubWF0aEluZm8uam9pbihcIlxcblwiKSk7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJEZXRhaWxzIGNvcGllZCB0byBjbGlwYm9hcmQhXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICBcbiAgICBvbkNsb3NlKCkge1xuICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIERlYnVnTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgZGVidWdJbmZvOiBzdHJpbmc7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBkZWJ1Z0luZm86IHN0cmluZykge1xuICAgICAgc3VwZXIoYXBwKTtcbiAgICAgIHRoaXMuZGVidWdJbmZvID0gZGVidWdJbmZvO1xuICAgIH1cbiAgXG4gICAgb25PcGVuKCkge1xuICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICBjb250ZW50RWwuYWRkQ2xhc3MoXCJjdXN0b20tbW9kYWwtc3R5bGVcIik7XG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiRGVidWcgSW5mb3JtYXRpb25cIiwgY2xzOiBcImRlYnVnLU1vZGFsLXRpdGxlXCIgfSk7XG4gIFxuICAgICAgY29uc3QgZGVidWdDb250ZW50ID0gY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImRlYnVnLWluZm8tY29udGFpbmVyXCIgfSk7XG4gICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKGBcXGBcXGBcXGBqc1xcbiR7dGhpcy5kZWJ1Z0luZm99XFxuXFxgXFxgXFxgYCwgZGVidWdDb250ZW50LCBcIlwiLCBuZXcgQ29tcG9uZW50KCkpO1xuICAgIH1cbiAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxuICB9Il19