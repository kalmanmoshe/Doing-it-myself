import { MarkdownRenderer, Modal, Notice, Component, renderMath } from "obsidian";
export class InfoModal extends Modal {
    constructor(app, mathInfo) {
        super(app);
        this.mathInfo = mathInfo.mathInfo;
        this.solutionInfo = mathInfo.solutionInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("info-modal-style");
        contentEl.createEl("h2", { text: "Result Details", cls: "info-modal-title" });
        // Add content and button for copying details
        this.populateContent(contentEl);
    }
    populateContent(contentEl) {
        const columnContainer = contentEl.createEl("div", { cls: "info-modal-main-container" });
        this.mathInfo.forEach((line, index) => {
            const lineContainer = columnContainer.createEl("div", { cls: "info-modal-line-container" });
            const leftLine = lineContainer.createEl("div", { cls: "info-modal-left-line" });
            leftLine.appendChild(renderMath(line, true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${line}\\end{aligned}}$`, leftLine, "", new Component());
            const rightLine = lineContainer.createEl("div", { cls: "info-modal-right-line" });
            rightLine.appendChild(renderMath(this.solutionInfo[index], true));
            //MarkdownRenderer.renderMarkdown(`$\{\\begin{aligned}&${this.solutionInfo[index] || ""}\\end{aligned}}$`, rightLine, "", new Component());
        });
        const actionButton = contentEl.createEl("button", { text: "Copy Details", cls: "info-modal-Copy-button" });
        actionButton.addEventListener("click", () => {
            navigator.clipboard.writeText(this.mathInfo.join("\n"));
            new Notice("Details copied to clipboard!");
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}
export class DebugModal extends Modal {
    constructor(app, debugInfo) {
        super(app);
        this.debugInfo = debugInfo;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.addClass("custom-modal-style");
        contentEl.createEl("h2", { text: "Debug Information", cls: "debug-Modal-title" });
        const debugContent = contentEl.createEl("div", { cls: "debug-info-container" });
        MarkdownRenderer.renderMarkdown(`\`\`\`js\n${this.debugInfo}\n\`\`\``, debugContent, "", new Component());
    }
    onClose() {
        this.contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzcGx5TW9kYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rlc3BseU1vZGFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXdCLGdCQUFnQixFQUFrQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBMEIsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR2hLLE1BQU0sT0FBTyxTQUFVLFNBQVEsS0FBSztJQUloQyxZQUFZLEdBQVEsRUFBRSxRQUFrQjtRQUN0QyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQzVDLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDdkMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUU5RSw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU8sZUFBZSxDQUFDLFNBQXNCO1FBRTVDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNwQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLENBQUM7WUFFNUYsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO1lBQ2hGLFFBQVEsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVDLGdIQUFnSDtZQUVoSCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxDQUFDLENBQUM7WUFDbEYsU0FBUyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLDJJQUEySTtRQUM3SSxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO1FBRTNHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFHRCxNQUFNLE9BQU8sVUFBVyxTQUFRLEtBQUs7SUFHakMsWUFBWSxHQUFRLEVBQUUsU0FBaUI7UUFDckMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN6QyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBRWxGLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztRQUNoRixnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsYUFBYSxJQUFJLENBQUMsU0FBUyxVQUFVLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiwgTWFya2Rvd25WaWV3LCBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIFNldHRpbmcsIE1vZGFsLCBOb3RpY2UsIENvbXBvbmVudCwgRWRpdG9yLCBFZGl0b3JQb3NpdGlvbiwgcmVuZGVyTWF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgTWF0aEluZm8gfSBmcm9tIFwiLi9tYXRoUGFyc2VyL21hdGhFbmdpbmUuanNcIjtcblxuZXhwb3J0IGNsYXNzIEluZm9Nb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBtYXRoSW5mbzogc3RyaW5nW107XG4gICAgc29sdXRpb25JbmZvOiBzdHJpbmdbXTtcbiAgXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG1hdGhJbmZvOiBNYXRoSW5mbykge1xuICAgICAgc3VwZXIoYXBwKTtcbiAgICAgIHRoaXMubWF0aEluZm8gPSBtYXRoSW5mby5tYXRoSW5mbztcbiAgICAgIHRoaXMuc29sdXRpb25JbmZvID0gbWF0aEluZm8uc29sdXRpb25JbmZvO1xuICAgIH1cbiAgXG4gICAgb25PcGVuKCkge1xuICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICBjb250ZW50RWwuYWRkQ2xhc3MoXCJpbmZvLW1vZGFsLXN0eWxlXCIpO1xuICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIlJlc3VsdCBEZXRhaWxzXCIsIGNsczogXCJpbmZvLW1vZGFsLXRpdGxlXCIgfSk7XG4gIFxuICAgICAgLy8gQWRkIGNvbnRlbnQgYW5kIGJ1dHRvbiBmb3IgY29weWluZyBkZXRhaWxzXG4gICAgICB0aGlzLnBvcHVsYXRlQ29udGVudChjb250ZW50RWwpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHBvcHVsYXRlQ29udGVudChjb250ZW50RWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbHVtbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLW1haW4tY29udGFpbmVyXCIgfSk7XG4gICAgICBcbiAgICAgIHRoaXMubWF0aEluZm8uZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbGluZUNvbnRhaW5lciA9IGNvbHVtbkNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJpbmZvLW1vZGFsLWxpbmUtY29udGFpbmVyXCIgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsZWZ0TGluZSA9IGxpbmVDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1sZWZ0LWxpbmVcIiB9KTtcbiAgICAgICAgbGVmdExpbmUuYXBwZW5kQ2hpbGQocmVuZGVyTWF0aChsaW5lLHRydWUpKTtcbiAgICAgICAgLy9NYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKGAkXFx7XFxcXGJlZ2lue2FsaWduZWR9JiR7bGluZX1cXFxcZW5ke2FsaWduZWR9fSRgLCBsZWZ0TGluZSwgXCJcIiwgbmV3IENvbXBvbmVudCgpKTtcbiAgXG4gICAgICAgIGNvbnN0IHJpZ2h0TGluZSA9IGxpbmVDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiaW5mby1tb2RhbC1yaWdodC1saW5lXCIgfSk7XG4gICAgICAgIHJpZ2h0TGluZS5hcHBlbmRDaGlsZChyZW5kZXJNYXRoKHRoaXMuc29sdXRpb25JbmZvW2luZGV4XSx0cnVlKSk7XG4gICAgICAgIC8vTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihgJFxce1xcXFxiZWdpbnthbGlnbmVkfSYke3RoaXMuc29sdXRpb25JbmZvW2luZGV4XSB8fCBcIlwifVxcXFxlbmR7YWxpZ25lZH19JGAsIHJpZ2h0TGluZSwgXCJcIiwgbmV3IENvbXBvbmVudCgpKTtcbiAgICAgIH0pO1xuICBcbiAgICAgIGNvbnN0IGFjdGlvbkJ1dHRvbiA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiQ29weSBEZXRhaWxzXCIsIGNsczogXCJpbmZvLW1vZGFsLUNvcHktYnV0dG9uXCIgfSk7XG4gICAgICBcbiAgICAgIGFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0aGlzLm1hdGhJbmZvLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICBuZXcgTm90aWNlKFwiRGV0YWlscyBjb3BpZWQgdG8gY2xpcGJvYXJkIVwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBEZWJ1Z01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGRlYnVnSW5mbzogc3RyaW5nO1xuICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZGVidWdJbmZvOiBzdHJpbmcpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLmRlYnVnSW5mbyA9IGRlYnVnSW5mbztcbiAgICB9XG4gIFxuICAgIG9uT3BlbigpIHtcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgY29udGVudEVsLmFkZENsYXNzKFwiY3VzdG9tLW1vZGFsLXN0eWxlXCIpO1xuICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIkRlYnVnIEluZm9ybWF0aW9uXCIsIGNsczogXCJkZWJ1Zy1Nb2RhbC10aXRsZVwiIH0pO1xuICBcbiAgICAgIGNvbnN0IGRlYnVnQ29udGVudCA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJkZWJ1Zy1pbmZvLWNvbnRhaW5lclwiIH0pO1xuICAgICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihgXFxgXFxgXFxganNcXG4ke3RoaXMuZGVidWdJbmZvfVxcblxcYFxcYFxcYGAsIGRlYnVnQ29udGVudCwgXCJcIiwgbmV3IENvbXBvbmVudCgpKTtcbiAgICB9XG4gIFxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cbiAgfSJdfQ==