import { findMatchingBracket } from "src/utils/editor_utils";
import { queueSnippet } from "src/snippets/codemirror/snippet_queue_state_field";
import { expandSnippets } from "src/snippets/snippet_management";
import { Context } from "src/utils/context";
import { getLatexSuiteConfig } from "src/snippets/codemirror/config";
export const autoEnlargeBrackets = (view) => {
    const settings = getLatexSuiteConfig(view);
    if (!settings.autoEnlargeBrackets)
        return;
    // The Context needs to be regenerated since changes to the document may have happened before autoEnlargeBrackets was triggered
    const ctx = Context.fromView(view);
    const result = ctx.getBounds();
    if (!result)
        return false;
    const { start, end } = result;
    const text = view.state.doc.toString();
    const left = "\\left";
    const right = "\\right";
    for (let i = start; i < end; i++) {
        const brackets = { "(": ")", "[": "]", "\\{": "\\}", "\\langle": "\\rangle", "\\lvert": "\\rvert", "\\lVert": "\\rVert", "\\lceil": "\\rceil", "\\lfloor": "\\rfloor" };
        const openBrackets = Object.keys(brackets);
        let found = false;
        let open = "";
        for (const openBracket of openBrackets) {
            if (text.slice(i, i + openBracket.length) === openBracket) {
                found = true;
                open = openBracket;
                break;
            }
        }
        if (!found)
            continue;
        const bracketSize = open.length;
        const close = brackets[open];
        const j = findMatchingBracket(text, i, open, close, false, end);
        if (j === -1)
            continue;
        // If \left and \right already inserted, ignore
        if ((text.slice(i - left.length, i) === left) && (text.slice(j - right.length, j) === right))
            continue;
        // Check whether the brackets contain sum, int or frac
        const bracketContents = text.slice(i + 1, j);
        const containsTrigger = settings.autoEnlargeBracketsTriggers.some(word => bracketContents.contains("\\" + word));
        if (!containsTrigger) {
            i = j;
            continue;
        }
        // Enlarge the brackets
        queueSnippet(view, i, i + bracketSize, left + open + " ");
        queueSnippet(view, j, j + bracketSize, " " + right + close);
    }
    expandSnippets(view);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b19lbmxhcmdlX2JyYWNrZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZlYXR1cmVzL2F1dG9fZW5sYXJnZV9icmFja2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDakYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUdyRSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRTtJQUN2RCxNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQjtRQUFFLE9BQU87SUFFMUMsK0hBQStIO0lBQy9ILE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9CLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDMUIsTUFBTSxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUMsR0FBRyxNQUFNLENBQUM7SUFFNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDO0lBQ3RCLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQztJQUd4QixLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFbEMsTUFBTSxRQUFRLEdBQTRCLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUM7UUFDL0wsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWQsS0FBSyxNQUFNLFdBQVcsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxFQUFFLENBQUM7Z0JBQzNELEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLFdBQVcsQ0FBQztnQkFDbkIsTUFBTTtZQUNQLENBQUM7UUFDRixDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUs7WUFBRSxTQUFTO1FBQ3JCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDaEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRzdCLE1BQU0sQ0FBQyxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUUsU0FBUztRQUd2QiwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQztZQUFFLFNBQVM7UUFHbkcsc0RBQXNEO1FBQ3RELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVqSCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNOLFNBQVM7UUFDVixDQUFDO1FBRUQsdUJBQXVCO1FBQ3ZCLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBQyxXQUFXLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4RCxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgZmluZE1hdGNoaW5nQnJhY2tldCB9IGZyb20gXCJzcmMvdXRpbHMvZWRpdG9yX3V0aWxzXCI7XHJcbmltcG9ydCB7IHF1ZXVlU25pcHBldCB9IGZyb20gXCJzcmMvc25pcHBldHMvY29kZW1pcnJvci9zbmlwcGV0X3F1ZXVlX3N0YXRlX2ZpZWxkXCI7XHJcbmltcG9ydCB7IGV4cGFuZFNuaXBwZXRzIH0gZnJvbSBcInNyYy9zbmlwcGV0cy9zbmlwcGV0X21hbmFnZW1lbnRcIjtcclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJzcmMvdXRpbHMvY29udGV4dFwiO1xyXG5pbXBvcnQgeyBnZXRMYXRleFN1aXRlQ29uZmlnIH0gZnJvbSBcInNyYy9zbmlwcGV0cy9jb2RlbWlycm9yL2NvbmZpZ1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBhdXRvRW5sYXJnZUJyYWNrZXRzID0gKHZpZXc6IEVkaXRvclZpZXcpID0+IHtcclxuXHRjb25zdCBzZXR0aW5ncyA9IGdldExhdGV4U3VpdGVDb25maWcodmlldyk7XHJcblx0aWYgKCFzZXR0aW5ncy5hdXRvRW5sYXJnZUJyYWNrZXRzKSByZXR1cm47XHJcblxyXG5cdC8vIFRoZSBDb250ZXh0IG5lZWRzIHRvIGJlIHJlZ2VuZXJhdGVkIHNpbmNlIGNoYW5nZXMgdG8gdGhlIGRvY3VtZW50IG1heSBoYXZlIGhhcHBlbmVkIGJlZm9yZSBhdXRvRW5sYXJnZUJyYWNrZXRzIHdhcyB0cmlnZ2VyZWRcclxuXHRjb25zdCBjdHggPSBDb250ZXh0LmZyb21WaWV3KHZpZXcpO1xyXG5cdGNvbnN0IHJlc3VsdCA9IGN0eC5nZXRCb3VuZHMoKTtcclxuXHRpZiAoIXJlc3VsdCkgcmV0dXJuIGZhbHNlO1xyXG5cdGNvbnN0IHtzdGFydCwgZW5kfSA9IHJlc3VsdDtcclxuXHJcblx0Y29uc3QgdGV4dCA9IHZpZXcuc3RhdGUuZG9jLnRvU3RyaW5nKCk7XHJcblx0Y29uc3QgbGVmdCA9IFwiXFxcXGxlZnRcIjtcclxuXHRjb25zdCByaWdodCA9IFwiXFxcXHJpZ2h0XCI7XHJcblxyXG5cclxuXHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xyXG5cclxuXHRcdGNvbnN0IGJyYWNrZXRzOntbb3Blbjogc3RyaW5nXTogc3RyaW5nfSA9IHtcIihcIjogXCIpXCIsIFwiW1wiOiBcIl1cIiwgXCJcXFxce1wiOiBcIlxcXFx9XCIsIFwiXFxcXGxhbmdsZVwiOiBcIlxcXFxyYW5nbGVcIiwgXCJcXFxcbHZlcnRcIjogXCJcXFxccnZlcnRcIiwgXCJcXFxcbFZlcnRcIjogXCJcXFxcclZlcnRcIiwgXCJcXFxcbGNlaWxcIjogXCJcXFxccmNlaWxcIiwgXCJcXFxcbGZsb29yXCI6IFwiXFxcXHJmbG9vclwifTtcclxuXHRcdGNvbnN0IG9wZW5CcmFja2V0cyA9IE9iamVjdC5rZXlzKGJyYWNrZXRzKTtcclxuXHRcdGxldCBmb3VuZCA9IGZhbHNlO1xyXG5cdFx0bGV0IG9wZW4gPSBcIlwiO1xyXG5cclxuXHRcdGZvciAoY29uc3Qgb3BlbkJyYWNrZXQgb2Ygb3BlbkJyYWNrZXRzKSB7XHJcblx0XHRcdGlmICh0ZXh0LnNsaWNlKGksIGkgKyBvcGVuQnJhY2tldC5sZW5ndGgpID09PSBvcGVuQnJhY2tldCkge1xyXG5cdFx0XHRcdGZvdW5kID0gdHJ1ZTtcclxuXHRcdFx0XHRvcGVuID0gb3BlbkJyYWNrZXQ7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWZvdW5kKSBjb250aW51ZTtcclxuXHRcdGNvbnN0IGJyYWNrZXRTaXplID0gb3Blbi5sZW5ndGg7XHJcblx0XHRjb25zdCBjbG9zZSA9IGJyYWNrZXRzW29wZW5dO1xyXG5cclxuXHJcblx0XHRjb25zdCBqID0gZmluZE1hdGNoaW5nQnJhY2tldCh0ZXh0LCBpLCBvcGVuLCBjbG9zZSwgZmFsc2UsIGVuZCk7XHJcblx0XHRpZiAoaiA9PT0gLTEpIGNvbnRpbnVlO1xyXG5cclxuXHJcblx0XHQvLyBJZiBcXGxlZnQgYW5kIFxccmlnaHQgYWxyZWFkeSBpbnNlcnRlZCwgaWdub3JlXHJcblx0XHRpZiAoKHRleHQuc2xpY2UoaS1sZWZ0Lmxlbmd0aCwgaSkgPT09IGxlZnQpICYmICh0ZXh0LnNsaWNlKGotcmlnaHQubGVuZ3RoLCBqKSA9PT0gcmlnaHQpKSBjb250aW51ZTtcclxuXHJcblxyXG5cdFx0Ly8gQ2hlY2sgd2hldGhlciB0aGUgYnJhY2tldHMgY29udGFpbiBzdW0sIGludCBvciBmcmFjXHJcblx0XHRjb25zdCBicmFja2V0Q29udGVudHMgPSB0ZXh0LnNsaWNlKGkrMSwgaik7XHJcblx0XHRjb25zdCBjb250YWluc1RyaWdnZXIgPSBzZXR0aW5ncy5hdXRvRW5sYXJnZUJyYWNrZXRzVHJpZ2dlcnMuc29tZSh3b3JkID0+IGJyYWNrZXRDb250ZW50cy5jb250YWlucyhcIlxcXFxcIiArIHdvcmQpKTtcclxuXHJcblx0XHRpZiAoIWNvbnRhaW5zVHJpZ2dlcikge1xyXG5cdFx0XHRpID0gajtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRW5sYXJnZSB0aGUgYnJhY2tldHNcclxuXHRcdHF1ZXVlU25pcHBldCh2aWV3LCBpLCBpK2JyYWNrZXRTaXplLCBsZWZ0ICsgb3BlbiArIFwiIFwiKTtcclxuXHRcdHF1ZXVlU25pcHBldCh2aWV3LCBqLCBqK2JyYWNrZXRTaXplLCBcIiBcIiArIHJpZ2h0ICsgY2xvc2UpO1xyXG5cdH1cclxuXHJcblx0ZXhwYW5kU25pcHBldHModmlldyk7XHJcbn1cclxuIl19