import { replaceRange, setCursor, getCharacterAtPos } from "src/utils/editor_utils";
export const tabout = (view, ctx, dir) => {
    if (!ctx.mode.inMath())
        return false;
    const result = ctx.getBounds();
    if (!result)
        return false;
    const { start, end } = result;
    const pos = view.state.selection.main.to;
    const d = view.state.doc;
    const text = d.toString();
    // Move to the next closing bracket: }, ), ], >, |, or \\rangle
    const chars = [
        ["{", "(", "[", "<"],
        [],
        ["}", ")", "]", ">"]
    ];
    const searchEnd = dir === 1 ? end + 1 : start - 1;
    const modifier = dir === 1 ? 0 : -1;
    for (let i = pos + modifier; i !== searchEnd; i += dir) {
        const targetChars = chars[dir + 1].concat(["\\rangle", "|", "$"]);
        const match = targetChars.find(s => text.startsWith(s, i));
        if (match !== undefined) {
            setCursor(view, i + match.length + modifier);
            return true;
        }
    }
    const textBtwnCursorAndEnd = d.sliceString(pos, end);
    const atEnd = textBtwnCursorAndEnd.trim().length === 0;
    if (!atEnd)
        return false;
    // Check whether we're in inline math or a block eqn
    if (ctx.mode.inlineMath || ctx.mode.codeMath) {
        setCursor(view, end + 1);
    }
    else {
        // First, locate the $$ symbol
        const dollarLine = d.lineAt(end + 2);
        // If there's no line after the equation, create one
        if (dollarLine.number === d.lines) {
            replaceRange(view, dollarLine.to, dollarLine.to, "\n");
        }
        // Finally, move outside the $$ symbol
        setCursor(view, dollarLine.to + 1);
        // Trim whitespace at beginning / end of equation
        const line = d.lineAt(pos);
        replaceRange(view, line.from, line.to, line.text.trim());
    }
    return true;
};
export const shouldTaboutByCloseBracket = (view, keyPressed) => {
    const sel = view.state.selection.main;
    if (!sel.empty)
        return;
    const pos = sel.from;
    const c = getCharacterAtPos(view, pos);
    const brackets = [")", "]", "}"];
    if ((c === keyPressed) && brackets.contains(c)) {
        return true;
    }
    else {
        return false;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFib3V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZlYXR1cmVzL3RhYm91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS3BGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQWdCLEVBQUUsR0FBWSxFQUFDLEdBQVMsRUFBVSxFQUFFO0lBQ3ZFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXhDLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzFCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDekMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDekIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLCtEQUErRDtJQUMvRCxNQUFNLEtBQUssR0FBRztRQUNiLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ3BCLEVBQUU7UUFDRixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztLQUNwQixDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQztJQUM5QyxNQUFNLFFBQVEsR0FB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Q0FBQztRQUNoRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7U0FDSSxDQUFDO1FBQ0wsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XG5pbXBvcnQgeyByZXBsYWNlUmFuZ2UsIHNldEN1cnNvciwgZ2V0Q2hhcmFjdGVyQXRQb3MgfSBmcm9tIFwic3JjL3V0aWxzL2VkaXRvcl91dGlsc1wiO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJzcmMvdXRpbHMvY29udGV4dFwiO1xuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tIFwiYXNzZXJ0XCI7XG5cblxuZXhwb3J0IGNvbnN0IHRhYm91dCA9ICh2aWV3OiBFZGl0b3JWaWV3LCBjdHg6IENvbnRleHQsZGlyOiAxfC0xKTpib29sZWFuID0+IHtcbiAgICBpZiAoIWN0eC5tb2RlLmluTWF0aCgpKSByZXR1cm4gZmFsc2U7XG5cblx0Y29uc3QgcmVzdWx0ID0gY3R4LmdldEJvdW5kcygpO1xuXHRpZiAoIXJlc3VsdCkgcmV0dXJuIGZhbHNlO1xuXHRjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IHJlc3VsdDtcblx0XG5cdGNvbnN0IHBvcyA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4udG87XG5cdGNvbnN0IGQgPSB2aWV3LnN0YXRlLmRvYztcblx0Y29uc3QgdGV4dCA9IGQudG9TdHJpbmcoKTtcblx0Ly8gTW92ZSB0byB0aGUgbmV4dCBjbG9zaW5nIGJyYWNrZXQ6IH0sICksIF0sID4sIHwsIG9yIFxcXFxyYW5nbGVcblx0Y29uc3QgY2hhcnMgPSBbXG5cdFx0W1wie1wiLCBcIihcIiwgXCJbXCIsIFwiPFwiXSxcblx0XHRbXSxcblx0XHRbXCJ9XCIsIFwiKVwiLCBcIl1cIiwgXCI+XCJdXG5cdF07XG5cdFxuXHRjb25zdCBzZWFyY2hFbmQgPSBkaXIgPT09IDEgPyBlbmQrMSA6IHN0YXJ0LTE7XG5cdGNvbnN0IG1vZGlmaWVyID0gZGlyID09PSAxID8gMCA6IC0xO1xuXHRmb3IgKGxldCBpID0gcG9zK21vZGlmaWVyOyBpICE9PSBzZWFyY2hFbmQ7IGkgKz0gZGlyKSB7XG5cdFx0Y29uc3QgdGFyZ2V0Q2hhcnMgPSBjaGFyc1tkaXIgKyAxXS5jb25jYXQoW1wiXFxcXHJhbmdsZVwiLCBcInxcIiwgXCIkXCJdKTtcblx0XHRjb25zdCBtYXRjaCA9IHRhcmdldENoYXJzLmZpbmQocyA9PiB0ZXh0LnN0YXJ0c1dpdGgocywgaSkpO1xuXHRcdGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRzZXRDdXJzb3IodmlldywgaSArIG1hdGNoLmxlbmd0aCttb2RpZmllcik7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXG5cdGNvbnN0IHRleHRCdHduQ3Vyc29yQW5kRW5kID0gZC5zbGljZVN0cmluZyhwb3MsIGVuZCk7XG5cdGNvbnN0IGF0RW5kID0gdGV4dEJ0d25DdXJzb3JBbmRFbmQudHJpbSgpLmxlbmd0aCA9PT0gMDtcblxuXHRpZiAoIWF0RW5kKSByZXR1cm4gZmFsc2U7XG5cblxuXHQvLyBDaGVjayB3aGV0aGVyIHdlJ3JlIGluIGlubGluZSBtYXRoIG9yIGEgYmxvY2sgZXFuXG5cdGlmIChjdHgubW9kZS5pbmxpbmVNYXRoIHx8IGN0eC5tb2RlLmNvZGVNYXRoKSB7XG5cdFx0c2V0Q3Vyc29yKHZpZXcsIGVuZCArIDEpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEZpcnN0LCBsb2NhdGUgdGhlICQkIHN5bWJvbFxuXHRcdGNvbnN0IGRvbGxhckxpbmUgPSBkLmxpbmVBdChlbmQrMik7XG5cblx0XHQvLyBJZiB0aGVyZSdzIG5vIGxpbmUgYWZ0ZXIgdGhlIGVxdWF0aW9uLCBjcmVhdGUgb25lXG5cblx0XHRpZiAoZG9sbGFyTGluZS5udW1iZXIgPT09IGQubGluZXMpIHtcblx0XHRcdHJlcGxhY2VSYW5nZSh2aWV3LCBkb2xsYXJMaW5lLnRvLCBkb2xsYXJMaW5lLnRvLCBcIlxcblwiKTtcblx0XHR9XG5cblx0XHQvLyBGaW5hbGx5LCBtb3ZlIG91dHNpZGUgdGhlICQkIHN5bWJvbFxuXHRcdHNldEN1cnNvcih2aWV3LCBkb2xsYXJMaW5lLnRvICsgMSk7XG5cblxuXHRcdC8vIFRyaW0gd2hpdGVzcGFjZSBhdCBiZWdpbm5pbmcgLyBlbmQgb2YgZXF1YXRpb25cblx0XHRjb25zdCBsaW5lID0gZC5saW5lQXQocG9zKTtcblx0XHRyZXBsYWNlUmFuZ2UodmlldywgbGluZS5mcm9tLCBsaW5lLnRvLCBsaW5lLnRleHQudHJpbSgpKTtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cblxuZXhwb3J0IGNvbnN0IHNob3VsZFRhYm91dEJ5Q2xvc2VCcmFja2V0ID0gKHZpZXc6IEVkaXRvclZpZXcsIGtleVByZXNzZWQ6IHN0cmluZykgPT4ge1xuXHRjb25zdCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluO1xuXHRpZiAoIXNlbC5lbXB0eSkgcmV0dXJuO1xuXHRjb25zdCBwb3MgPSBzZWwuZnJvbTtcblxuXHRjb25zdCBjID0gZ2V0Q2hhcmFjdGVyQXRQb3ModmlldywgcG9zKTtcblx0Y29uc3QgYnJhY2tldHMgPSBbXCIpXCIsIFwiXVwiLCBcIn1cIl07XG5cblx0aWYgKChjID09PSBrZXlQcmVzc2VkKSAmJiBicmFja2V0cy5jb250YWlucyhjKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSJdfQ==