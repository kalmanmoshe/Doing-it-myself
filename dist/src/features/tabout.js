import { replaceRange, setCursor, getCharacterAtPos } from "src/utils/editor_utils";
export const tabout = (view, ctx) => {
    if (!ctx.mode.inMath())
        return false;
    const result = ctx.getBounds();
    if (!result)
        return false;
    const end = result.end;
    const pos = view.state.selection.main.to;
    const d = view.state.doc;
    const text = d.toString();
    // Move to the next closing bracket: }, ), ], >, |, or \\rangle
    const rangle = "\\rangle";
    for (let i = pos; i < end; i++) {
        if (["}", ")", "]", ">", "|", "$"].contains(text.charAt(i))) {
            setCursor(view, i + 1);
            return true;
        }
        else if (text.slice(i, i + rangle.length) === rangle) {
            setCursor(view, i + rangle.length);
            return true;
        }
    }
    // If cursor at end of line/equation, move to next line/outside $$ symbols
    // Check whether we're at end of equation
    // Accounting for whitespace, using trim
    const textBtwnCursorAndEnd = d.sliceString(pos, end);
    const atEnd = textBtwnCursorAndEnd.trim().length === 0;
    if (!atEnd)
        return false;
    // Check whether we're in inline math or a block eqn
    if (ctx.mode.inlineMath || ctx.mode.codeMath) {
        setCursor(view, end + 1);
    }
    else {
        // First, locate the $$ symbol
        const dollarLine = d.lineAt(end + 2);
        // If there's no line after the equation, create one
        if (dollarLine.number === d.lines) {
            replaceRange(view, dollarLine.to, dollarLine.to, "\n");
        }
        // Finally, move outside the $$ symbol
        setCursor(view, dollarLine.to + 1);
        // Trim whitespace at beginning / end of equation
        const line = d.lineAt(pos);
        replaceRange(view, line.from, line.to, line.text.trim());
    }
    return true;
};
export const shouldTaboutByCloseBracket = (view, keyPressed) => {
    const sel = view.state.selection.main;
    if (!sel.empty)
        return;
    const pos = sel.from;
    const c = getCharacterAtPos(view, pos);
    const brackets = [")", "]", "}"];
    if ((c === keyPressed) && brackets.contains(c)) {
        return true;
    }
    else {
        return false;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFib3V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZlYXR1cmVzL3RhYm91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSXBGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQWdCLEVBQUUsR0FBWSxFQUFVLEVBQUU7SUFDN0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFeEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9CLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDMUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUV2QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUUxQiwrREFBK0Q7SUFDL0QsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDN0QsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7WUFFckIsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO2FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ3RELFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVuQyxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBR0QsMEVBQTBFO0lBRTFFLHlDQUF5QztJQUN6Qyx3Q0FBd0M7SUFDeEMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRCxNQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBRXZELElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFHekIsb0RBQW9EO0lBQ3BELElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO1NBQ0ksQ0FBQztRQUNMLDhCQUE4QjtRQUM5QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQyxvREFBb0Q7UUFFcEQsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQyxZQUFZLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBRUQsc0NBQXNDO1FBQ3RDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUduQyxpREFBaUQ7UUFDakQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUQsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQyxDQUFBO0FBR0QsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxJQUFnQixFQUFFLFVBQWtCLEVBQUUsRUFBRTtJQUNsRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1FBQUUsT0FBTztJQUN2QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBRXJCLE1BQU0sQ0FBQyxHQUFHLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFakMsSUFBSSxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO1NBQ0ksQ0FBQztRQUNMLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztBQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuaW1wb3J0IHsgcmVwbGFjZVJhbmdlLCBzZXRDdXJzb3IsIGdldENoYXJhY3RlckF0UG9zIH0gZnJvbSBcInNyYy91dGlscy9lZGl0b3JfdXRpbHNcIjtcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwic3JjL3V0aWxzL2NvbnRleHRcIjtcblxuXG5leHBvcnQgY29uc3QgdGFib3V0ID0gKHZpZXc6IEVkaXRvclZpZXcsIGN0eDogQ29udGV4dCk6Ym9vbGVhbiA9PiB7XG4gICAgaWYgKCFjdHgubW9kZS5pbk1hdGgoKSkgcmV0dXJuIGZhbHNlO1xuXG5cdGNvbnN0IHJlc3VsdCA9IGN0eC5nZXRCb3VuZHMoKTtcblx0aWYgKCFyZXN1bHQpIHJldHVybiBmYWxzZTtcblx0Y29uc3QgZW5kID0gcmVzdWx0LmVuZDtcblxuXHRjb25zdCBwb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLnRvO1xuXHRjb25zdCBkID0gdmlldy5zdGF0ZS5kb2M7XG5cdGNvbnN0IHRleHQgPSBkLnRvU3RyaW5nKCk7XG5cblx0Ly8gTW92ZSB0byB0aGUgbmV4dCBjbG9zaW5nIGJyYWNrZXQ6IH0sICksIF0sID4sIHwsIG9yIFxcXFxyYW5nbGVcblx0Y29uc3QgcmFuZ2xlID0gXCJcXFxccmFuZ2xlXCI7XG5cblx0Zm9yIChsZXQgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG5cdFx0aWYgKFtcIn1cIiwgXCIpXCIsIFwiXVwiLCBcIj5cIiwgXCJ8XCIsIFwiJFwiXS5jb250YWlucyh0ZXh0LmNoYXJBdChpKSkpIHtcblx0XHRcdHNldEN1cnNvcih2aWV3LCBpKzEpO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodGV4dC5zbGljZShpLCBpICsgcmFuZ2xlLmxlbmd0aCkgPT09IHJhbmdsZSkge1xuXHRcdFx0c2V0Q3Vyc29yKHZpZXcsIGkgKyByYW5nbGUubGVuZ3RoKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblxuXHQvLyBJZiBjdXJzb3IgYXQgZW5kIG9mIGxpbmUvZXF1YXRpb24sIG1vdmUgdG8gbmV4dCBsaW5lL291dHNpZGUgJCQgc3ltYm9sc1xuXG5cdC8vIENoZWNrIHdoZXRoZXIgd2UncmUgYXQgZW5kIG9mIGVxdWF0aW9uXG5cdC8vIEFjY291bnRpbmcgZm9yIHdoaXRlc3BhY2UsIHVzaW5nIHRyaW1cblx0Y29uc3QgdGV4dEJ0d25DdXJzb3JBbmRFbmQgPSBkLnNsaWNlU3RyaW5nKHBvcywgZW5kKTtcblx0Y29uc3QgYXRFbmQgPSB0ZXh0QnR3bkN1cnNvckFuZEVuZC50cmltKCkubGVuZ3RoID09PSAwO1xuXG5cdGlmICghYXRFbmQpIHJldHVybiBmYWxzZTtcblxuXG5cdC8vIENoZWNrIHdoZXRoZXIgd2UncmUgaW4gaW5saW5lIG1hdGggb3IgYSBibG9jayBlcW5cblx0aWYgKGN0eC5tb2RlLmlubGluZU1hdGggfHwgY3R4Lm1vZGUuY29kZU1hdGgpIHtcblx0XHRzZXRDdXJzb3IodmlldywgZW5kICsgMSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gRmlyc3QsIGxvY2F0ZSB0aGUgJCQgc3ltYm9sXG5cdFx0Y29uc3QgZG9sbGFyTGluZSA9IGQubGluZUF0KGVuZCsyKTtcblxuXHRcdC8vIElmIHRoZXJlJ3Mgbm8gbGluZSBhZnRlciB0aGUgZXF1YXRpb24sIGNyZWF0ZSBvbmVcblxuXHRcdGlmIChkb2xsYXJMaW5lLm51bWJlciA9PT0gZC5saW5lcykge1xuXHRcdFx0cmVwbGFjZVJhbmdlKHZpZXcsIGRvbGxhckxpbmUudG8sIGRvbGxhckxpbmUudG8sIFwiXFxuXCIpO1xuXHRcdH1cblxuXHRcdC8vIEZpbmFsbHksIG1vdmUgb3V0c2lkZSB0aGUgJCQgc3ltYm9sXG5cdFx0c2V0Q3Vyc29yKHZpZXcsIGRvbGxhckxpbmUudG8gKyAxKTtcblxuXG5cdFx0Ly8gVHJpbSB3aGl0ZXNwYWNlIGF0IGJlZ2lubmluZyAvIGVuZCBvZiBlcXVhdGlvblxuXHRcdGNvbnN0IGxpbmUgPSBkLmxpbmVBdChwb3MpO1xuXHRcdHJlcGxhY2VSYW5nZSh2aWV3LCBsaW5lLmZyb20sIGxpbmUudG8sIGxpbmUudGV4dC50cmltKCkpO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuXG5leHBvcnQgY29uc3Qgc2hvdWxkVGFib3V0QnlDbG9zZUJyYWNrZXQgPSAodmlldzogRWRpdG9yVmlldywga2V5UHJlc3NlZDogc3RyaW5nKSA9PiB7XG5cdGNvbnN0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW47XG5cdGlmICghc2VsLmVtcHR5KSByZXR1cm47XG5cdGNvbnN0IHBvcyA9IHNlbC5mcm9tO1xuXG5cdGNvbnN0IGMgPSBnZXRDaGFyYWN0ZXJBdFBvcyh2aWV3LCBwb3MpO1xuXHRjb25zdCBicmFja2V0cyA9IFtcIilcIiwgXCJdXCIsIFwifVwiXTtcblxuXHRpZiAoKGMgPT09IGtleVByZXNzZWQpICYmIGJyYWNrZXRzLmNvbnRhaW5zKGMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0ZWxzZSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59Il19