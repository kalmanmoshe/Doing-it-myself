import { setCursor } from "src/utils/editor_utils";
import { getLatexSuiteConfig } from "src/snippets/codemirror/config";
export const runMatrixShortcuts = (view, ctx, key, shiftKey) => {
    const settings = getLatexSuiteConfig(view);
    // Check whether we are inside a matrix / align / case environment
    let isInsideAnEnv = false;
    for (const envName of settings.matrixShortcutsEnvNames) {
        const env = { openSymbol: "\\begin{" + envName + "}", closeSymbol: "\\end{" + envName + "}" };
        isInsideAnEnv = ctx.isWithinEnvironment(ctx.pos, env);
        if (isInsideAnEnv)
            break;
    }
    if (!isInsideAnEnv)
        return false;
    if (key === "Tab") {
        view.dispatch(view.state.replaceSelection(" & "));
        return true;
    }
    else if (key === "Enter") {
        if (shiftKey) {
            // Move cursor to end of next line
            const d = view.state.doc;
            const nextLineNo = d.lineAt(ctx.pos).number + 1;
            const nextLine = d.line(nextLineNo);
            setCursor(view, nextLine.to);
        }
        else {
            view.dispatch(view.state.replaceSelection(" \\\\\n"));
        }
        return true;
    }
    else {
        return false;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4X3Nob3J0Y3V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mZWF0dXJlcy9tYXRyaXhfc2hvcnRjdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUlyRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLElBQWdCLEVBQUUsR0FBWSxFQUFFLEdBQVcsRUFBRSxRQUFpQixFQUFVLEVBQUU7SUFDNUcsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0Msa0VBQWtFO0lBQ2xFLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztJQUUxQixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ3hELE1BQU0sR0FBRyxHQUFHLEVBQUMsVUFBVSxFQUFFLFVBQVUsR0FBRyxPQUFPLEdBQUcsR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLEdBQUcsT0FBTyxHQUFHLEdBQUcsRUFBQyxDQUFDO1FBRTVGLGFBQWEsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0RCxJQUFJLGFBQWE7WUFBRSxNQUFNO0lBQzFCLENBQUM7SUFFRCxJQUFJLENBQUMsYUFBYTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBR2pDLElBQUksR0FBRyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUNJLElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxrQ0FBa0M7WUFDbEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFFekIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUM7YUFDSSxDQUFDO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUNJLENBQUM7UUFDTCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFFRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgc2V0Q3Vyc29yIH0gZnJvbSBcInNyYy91dGlscy9lZGl0b3JfdXRpbHNcIjtcclxuaW1wb3J0IHsgZ2V0TGF0ZXhTdWl0ZUNvbmZpZyB9IGZyb20gXCJzcmMvc25pcHBldHMvY29kZW1pcnJvci9jb25maWdcIjtcclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJzcmMvdXRpbHMvY29udGV4dFwiO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBydW5NYXRyaXhTaG9ydGN1dHMgPSAodmlldzogRWRpdG9yVmlldywgY3R4OiBDb250ZXh0LCBrZXk6IHN0cmluZywgc2hpZnRLZXk6IGJvb2xlYW4pOmJvb2xlYW4gPT4ge1xyXG5cdGNvbnN0IHNldHRpbmdzID0gZ2V0TGF0ZXhTdWl0ZUNvbmZpZyh2aWV3KTtcclxuXHJcblx0Ly8gQ2hlY2sgd2hldGhlciB3ZSBhcmUgaW5zaWRlIGEgbWF0cml4IC8gYWxpZ24gLyBjYXNlIGVudmlyb25tZW50XHJcblx0bGV0IGlzSW5zaWRlQW5FbnYgPSBmYWxzZTtcclxuXHJcblx0Zm9yIChjb25zdCBlbnZOYW1lIG9mIHNldHRpbmdzLm1hdHJpeFNob3J0Y3V0c0Vudk5hbWVzKSB7XHJcblx0XHRjb25zdCBlbnYgPSB7b3BlblN5bWJvbDogXCJcXFxcYmVnaW57XCIgKyBlbnZOYW1lICsgXCJ9XCIsIGNsb3NlU3ltYm9sOiBcIlxcXFxlbmR7XCIgKyBlbnZOYW1lICsgXCJ9XCJ9O1xyXG5cclxuXHRcdGlzSW5zaWRlQW5FbnYgPSBjdHguaXNXaXRoaW5FbnZpcm9ubWVudChjdHgucG9zLCBlbnYpO1xyXG5cdFx0aWYgKGlzSW5zaWRlQW5FbnYpIGJyZWFrO1xyXG5cdH1cclxuXHJcblx0aWYgKCFpc0luc2lkZUFuRW52KSByZXR1cm4gZmFsc2U7XHJcblxyXG5cclxuXHRpZiAoa2V5ID09PSBcIlRhYlwiKSB7XHJcblx0XHR2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUucmVwbGFjZVNlbGVjdGlvbihcIiAmIFwiKSk7XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdGVsc2UgaWYgKGtleSA9PT0gXCJFbnRlclwiKSB7XHJcblx0XHRpZiAoc2hpZnRLZXkpIHtcclxuXHRcdFx0Ly8gTW92ZSBjdXJzb3IgdG8gZW5kIG9mIG5leHQgbGluZVxyXG5cdFx0XHRjb25zdCBkID0gdmlldy5zdGF0ZS5kb2M7XHJcblxyXG5cdFx0XHRjb25zdCBuZXh0TGluZU5vID0gZC5saW5lQXQoY3R4LnBvcykubnVtYmVyICsgMTtcclxuXHRcdFx0Y29uc3QgbmV4dExpbmUgPSBkLmxpbmUobmV4dExpbmVObyk7XHJcblxyXG5cdFx0XHRzZXRDdXJzb3IodmlldywgbmV4dExpbmUudG8pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS5yZXBsYWNlU2VsZWN0aW9uKFwiIFxcXFxcXFxcXFxuXCIpKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxufVxyXG4iXX0=