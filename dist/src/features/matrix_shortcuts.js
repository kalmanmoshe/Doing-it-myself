import { setCursor } from "src/utils/editor_utils";
import { getLatexSuiteConfig } from "src/snippets/codemirror/config";
export const runMatrixShortcuts = (view, ctx, key, shiftKey) => {
    const settings = getLatexSuiteConfig(view);
    // Check whether we are inside a matrix / align / case environment
    let isInsideAnEnv = false;
    for (const envName of settings.matrixShortcutsEnvNames) {
        const env = { openSymbol: "\\begin{" + envName + "}", closeSymbol: "\\end{" + envName + "}" };
        isInsideAnEnv = ctx.isWithinEnvironment(ctx.pos, env);
        if (isInsideAnEnv)
            break;
    }
    if (!isInsideAnEnv)
        return false;
    if (key === "Tab") {
        view.dispatch(view.state.replaceSelection(" & "));
        return true;
    }
    else if (key === "Enter") {
        if (shiftKey) {
            // Move cursor to end of next line
            const d = view.state.doc;
            const nextLineNo = d.lineAt(ctx.pos).number + 1;
            const nextLine = d.line(nextLineNo);
            setCursor(view, nextLine.to);
        }
        else {
            view.dispatch(view.state.replaceSelection(" \\\\\n"));
        }
        return true;
    }
    else {
        return false;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4X3Nob3J0Y3V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mZWF0dXJlcy9tYXRyaXhfc2hvcnRjdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUlyRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLElBQWdCLEVBQUUsR0FBWSxFQUFFLEdBQVcsRUFBRSxRQUFpQixFQUFVLEVBQUU7SUFDNUcsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0Msa0VBQWtFO0lBQ2xFLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztJQUUxQixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ3hELE1BQU0sR0FBRyxHQUFHLEVBQUMsVUFBVSxFQUFFLFVBQVUsR0FBRyxPQUFPLEdBQUcsR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLEdBQUcsT0FBTyxHQUFHLEdBQUcsRUFBQyxDQUFDO1FBRTVGLGFBQWEsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0RCxJQUFJLGFBQWE7WUFBRSxNQUFNO0lBQzFCLENBQUM7SUFFRCxJQUFJLENBQUMsYUFBYTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBR2pDLElBQUksR0FBRyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUNJLElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxrQ0FBa0M7WUFDbEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFFekIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUM7YUFDSSxDQUFDO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUNJLENBQUM7UUFDTCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFFRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IHNldEN1cnNvciB9IGZyb20gXCJzcmMvdXRpbHMvZWRpdG9yX3V0aWxzXCI7XG5pbXBvcnQgeyBnZXRMYXRleFN1aXRlQ29uZmlnIH0gZnJvbSBcInNyYy9zbmlwcGV0cy9jb2RlbWlycm9yL2NvbmZpZ1wiO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJzcmMvdXRpbHMvY29udGV4dFwiO1xuXG5cbmV4cG9ydCBjb25zdCBydW5NYXRyaXhTaG9ydGN1dHMgPSAodmlldzogRWRpdG9yVmlldywgY3R4OiBDb250ZXh0LCBrZXk6IHN0cmluZywgc2hpZnRLZXk6IGJvb2xlYW4pOmJvb2xlYW4gPT4ge1xuXHRjb25zdCBzZXR0aW5ncyA9IGdldExhdGV4U3VpdGVDb25maWcodmlldyk7XG5cblx0Ly8gQ2hlY2sgd2hldGhlciB3ZSBhcmUgaW5zaWRlIGEgbWF0cml4IC8gYWxpZ24gLyBjYXNlIGVudmlyb25tZW50XG5cdGxldCBpc0luc2lkZUFuRW52ID0gZmFsc2U7XG5cblx0Zm9yIChjb25zdCBlbnZOYW1lIG9mIHNldHRpbmdzLm1hdHJpeFNob3J0Y3V0c0Vudk5hbWVzKSB7XG5cdFx0Y29uc3QgZW52ID0ge29wZW5TeW1ib2w6IFwiXFxcXGJlZ2lue1wiICsgZW52TmFtZSArIFwifVwiLCBjbG9zZVN5bWJvbDogXCJcXFxcZW5ke1wiICsgZW52TmFtZSArIFwifVwifTtcblxuXHRcdGlzSW5zaWRlQW5FbnYgPSBjdHguaXNXaXRoaW5FbnZpcm9ubWVudChjdHgucG9zLCBlbnYpO1xuXHRcdGlmIChpc0luc2lkZUFuRW52KSBicmVhaztcblx0fVxuXG5cdGlmICghaXNJbnNpZGVBbkVudikgcmV0dXJuIGZhbHNlO1xuXG5cblx0aWYgKGtleSA9PT0gXCJUYWJcIikge1xuXHRcdHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS5yZXBsYWNlU2VsZWN0aW9uKFwiICYgXCIpKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGVsc2UgaWYgKGtleSA9PT0gXCJFbnRlclwiKSB7XG5cdFx0aWYgKHNoaWZ0S2V5KSB7XG5cdFx0XHQvLyBNb3ZlIGN1cnNvciB0byBlbmQgb2YgbmV4dCBsaW5lXG5cdFx0XHRjb25zdCBkID0gdmlldy5zdGF0ZS5kb2M7XG5cblx0XHRcdGNvbnN0IG5leHRMaW5lTm8gPSBkLmxpbmVBdChjdHgucG9zKS5udW1iZXIgKyAxO1xuXHRcdFx0Y29uc3QgbmV4dExpbmUgPSBkLmxpbmUobmV4dExpbmVObyk7XG5cblx0XHRcdHNldEN1cnNvcih2aWV3LCBuZXh0TGluZS50byk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnJlcGxhY2VTZWxlY3Rpb24oXCIgXFxcXFxcXFxcXG5cIikpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG59XG4iXX0=