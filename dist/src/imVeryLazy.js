import { Position, Token } from "./mathEngine";
export function expandExpression(tokens, position) {
    if (position.checkFrac(tokens)) {
        goodByFraction(tokens, position);
        return;
    }
    let left = tokens.tokens.slice(position.left.breakChar, position.index).filter(item => /(number|variable|powerVariable)/.test(item.type));
    let right = tokens.tokens.slice(position.index, position.right.breakChar).filter(item => /(number|variable|powerVariable)/.test(item.type));
    const isLeftMultiStep = position.left.multiStep === undefined;
    if (position.operator === "-" && isLeftMultiStep) {
        left = new Token(-1);
    }
    let replacementCell = [];
    for (let i = 0; i < left.length; i++) {
        for (let j = 0; j < right.length; j++) {
            replacementCell.push(left[i]);
            replacementCell.push(new Token("*"));
            replacementCell.push(right[j]);
        }
    }
    const is = position.operator === "-" && isLeftMultiStep;
    const start = is ? position.index : position.left.breakChar;
    const length = position.right.breakChar - (is ? position.index : position.left.breakChar);
    tokens.insertTokens(start, length, replacementCell);
    tokens.IDparentheses();
}
export const curlyBracketsRegex = new RegExp("(frac|sqrt|\\^|\\/|binom)");
function goodByFraction(tokens, position) {
    let replacementTokens = [];
    /*We rely on the denominator to already possess parentheses
    We rely on the fact. that both the nominator and the denominator both have parentheses and closing them
    All calculations are according to that.
    */
    let denominator = position.right.tokens; //tokens.tokens.slice(position.transition, position.right.breakChar);
    if (!denominator.length)
        denominator = [{ "type": "paren", "value": "(", "id": 0, "index": 0 },
            denominator, { "type": "paren", "value": ")", "id": 0, "index": 0 }];
    for (let i = 0; i < tokens.tokens.length; i++) {
        // Had to change i = position.right.breakChar -->to--> i = position.right.breakChar-1;
        if (i >= position.index && i < position.right.breakChar) {
            replacementTokens.push(...tokens.tokens.slice(position.index + 1, position.transition));
            i = position.right.breakChar - 1;
            continue;
        }
        if (/(=)/.test(tokens.tokens[i].value)) {
            replacementTokens.push(tokens.tokens[i]);
            continue;
        }
        let replacement = tokens.tokens.slice(i, i + 1);
        let whereAmI = i;
        let rest = [];
        if (tokens.tokens[i].value === "frac") {
            whereAmI = new Position(tokens, i);
            replacementTokens.push(...tokens.tokens.slice(whereAmI.index, whereAmI.index + 2));
            //nominator
            rest = tokens.tokens.slice(whereAmI.transition - 1, whereAmI.right.breakChar);
            // denominator
            replacement = tokens.tokens.slice(i + 2, whereAmI.transition - 1);
        }
        else {
            whereAmI = i + tokens.tokens.slice(i).findIndex(token => /(=|frac)/.test(token.value));
            whereAmI = whereAmI < i ? tokens.tokens.length : whereAmI;
            replacement = tokens.tokens.slice(i, whereAmI);
        }
        replacementTokens.push(...denominator, { "type": "operator", "value": "*" }, { "type": "paren", "value": "(", "id": 0, "index": 0 }, ...replacement, { "type": "paren", "value": ")", "id": 0, "index": 0 }, ...rest);
        i = typeof whereAmI === "object" ? whereAmI.right.breakChar - 1 : whereAmI - 1;
    }
    tokens.tokens = replacementTokens;
    tokens.IDparentheses();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1WZXJ5TGF6eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbVZlcnlMYXp5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRS9DLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsUUFBUTtJQUM3QyxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQztRQUFBLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFBQSxPQUFPO0lBQUEsQ0FBQztJQUN6RSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUksTUFBTSxlQUFlLEdBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUcsU0FBUyxDQUFDO0lBRTFELElBQUksUUFBUSxDQUFDLFFBQVEsS0FBRyxHQUFHLElBQUUsZUFBZSxFQUFDLENBQUM7UUFDMUMsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFeEIsQ0FBQztJQUNELElBQUksZUFBZSxHQUFHLEVBQUUsQ0FB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QUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsV0FBVyxFQUNkLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFDLEVBQ2xDLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBQyxFQUNwRCxHQUFHLFdBQVcsRUFDZCxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsRUFDcEQsR0FBRyxJQUFJLENBQ1YsQ0FBQztRQUNGLENBQUMsR0FBRyxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sR0FBQyxpQkFBaUIsQ0FBQztJQUNoQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvc2l0aW9uLCBUb2tlbiB9IGZyb20gXCIuL21hdGhFbmdpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZEV4cHJlc3Npb24odG9rZW5zLCBwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbi5jaGVja0ZyYWModG9rZW5zKSl7Z29vZEJ5RnJhY3Rpb24odG9rZW5zLCBwb3NpdGlvbik7cmV0dXJuO31cbiAgICBsZXQgbGVmdCA9IHRva2Vucy50b2tlbnMuc2xpY2UocG9zaXRpb24ubGVmdC5icmVha0NoYXIsIHBvc2l0aW9uLmluZGV4KS5maWx0ZXIoaXRlbSA9PiAvKG51bWJlcnx2YXJpYWJsZXxwb3dlclZhcmlhYmxlKS8udGVzdChpdGVtLnR5cGUpKTtcbiAgICBsZXQgcmlnaHQgPSB0b2tlbnMudG9rZW5zLnNsaWNlKHBvc2l0aW9uLmluZGV4LCBwb3NpdGlvbi5yaWdodC5icmVha0NoYXIpLmZpbHRlcihpdGVtID0+IC8obnVtYmVyfHZhcmlhYmxlfHBvd2VyVmFyaWFibGUpLy50ZXN0KGl0ZW0udHlwZSkpO1xuICAgIGNvbnN0IGlzTGVmdE11bHRpU3RlcD1wb3NpdGlvbi5sZWZ0Lm11bHRpU3RlcD09PXVuZGVmaW5lZDtcblxuICAgIGlmIChwb3NpdGlvbi5vcGVyYXRvcj09PVwiLVwiJiZpc0xlZnRNdWx0aVN0ZXApe1xuICAgICAgICBsZWZ0ID0gbmV3IFRva2VuKC0xKVxuICAgICAgICBcbiAgICB9XG4gICAgbGV0IHJlcGxhY2VtZW50Q2VsbCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJpZ2h0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICByZXBsYWNlbWVudENlbGwucHVzaChsZWZ0W2ldKTtcbiAgICAgICAgICAgIHJlcGxhY2VtZW50Q2VsbC5wdXNoKG5ldyBUb2tlbihcIipcIikpO1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRDZWxsLnB1c2gocmlnaHRbal0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXM9cG9zaXRpb24ub3BlcmF0b3I9PT1cIi1cIiYmaXNMZWZ0TXVsdGlTdGVwO1xuICAgIGNvbnN0IHN0YXJ0PWlzP3Bvc2l0aW9uLmluZGV4OnBvc2l0aW9uLmxlZnQuYnJlYWtDaGFyXG4gICAgY29uc3QgbGVuZ3RoPXBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhci0oaXM/cG9zaXRpb24uaW5kZXg6cG9zaXRpb24ubGVmdC5icmVha0NoYXIpXG4gICAgdG9rZW5zLmluc2VydFRva2VucyhzdGFydCwgbGVuZ3RoLCByZXBsYWNlbWVudENlbGwpO1xuICAgIHRva2Vucy5JRHBhcmVudGhlc2VzKCk7XG59XG5cbmV4cG9ydCBjb25zdCBjdXJseUJyYWNrZXRzUmVnZXggPSBuZXcgUmVnRXhwKFwiKGZyYWN8c3FydHxcXFxcXnxcXFxcL3xiaW5vbSlcIilcblxuXG5cbmZ1bmN0aW9uIGdvb2RCeUZyYWN0aW9uKHRva2VucywgcG9zaXRpb24pIHtcbiAgICBsZXQgcmVwbGFjZW1lbnRUb2tlbnMgPSBbXTtcbiAgICAvKldlIHJlbHkgb24gdGhlIGRlbm9taW5hdG9yIHRvIGFscmVhZHkgcG9zc2VzcyBwYXJlbnRoZXNlc1xuICAgIFdlIHJlbHkgb24gdGhlIGZhY3QuIHRoYXQgYm90aCB0aGUgbm9taW5hdG9yIGFuZCB0aGUgZGVub21pbmF0b3IgYm90aCBoYXZlIHBhcmVudGhlc2VzIGFuZCBjbG9zaW5nIHRoZW0gXG4gICAgQWxsIGNhbGN1bGF0aW9ucyBhcmUgYWNjb3JkaW5nIHRvIHRoYXQuXG4gICAgKi9cbiAgICBsZXQgZGVub21pbmF0b3IgPSBwb3NpdGlvbi5yaWdodC50b2tlbnMvL3Rva2Vucy50b2tlbnMuc2xpY2UocG9zaXRpb24udHJhbnNpdGlvbiwgcG9zaXRpb24ucmlnaHQuYnJlYWtDaGFyKTtcbiAgICBpZiAoIWRlbm9taW5hdG9yLmxlbmd0aClcbiAgICAgICAgZGVub21pbmF0b3I9W3tcInR5cGVcIjogXCJwYXJlblwiLCBcInZhbHVlXCI6IFwiKFwiLCBcImlkXCI6IDAsIFwiaW5kZXhcIjogMH1cbiAgICAsZGVub21pbmF0b3Ise1widHlwZVwiOiBcInBhcmVuXCIsIFwidmFsdWVcIjogXCIpXCIsIFwiaWRcIjogMCwgXCJpbmRleFwiOiAwfV1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy50b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gSGFkIHRvIGNoYW5nZSBpID0gcG9zaXRpb24ucmlnaHQuYnJlYWtDaGFyIC0tPnRvLS0+IGkgPSBwb3NpdGlvbi5yaWdodC5icmVha0NoYXItMTtcbiAgICAgICAgaWYgKGkgPj0gcG9zaXRpb24uaW5kZXggJiYgaSA8IHBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhcikge1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRUb2tlbnMucHVzaCguLi50b2tlbnMudG9rZW5zLnNsaWNlKHBvc2l0aW9uLmluZGV4KzEscG9zaXRpb24udHJhbnNpdGlvbikpXG4gICAgICAgICAgICBpID0gcG9zaXRpb24ucmlnaHQuYnJlYWtDaGFyLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvKD0pLy50ZXN0KHRva2Vucy50b2tlbnNbaV0udmFsdWUpKSB7XG4gICAgICAgICAgICByZXBsYWNlbWVudFRva2Vucy5wdXNoKHRva2Vucy50b2tlbnNbaV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCByZXBsYWNlbWVudCA9IHRva2Vucy50b2tlbnMuc2xpY2UoaSxpKzEpXG4gICAgICAgIGxldCB3aGVyZUFtSSA9IGk7XG4gICAgICAgIGxldCByZXN0PVtdO1xuICAgICAgICBpZiAodG9rZW5zLnRva2Vuc1tpXS52YWx1ZSA9PT0gXCJmcmFjXCIpIHtcbiAgICAgICAgICAgIHdoZXJlQW1JID0gbmV3IFBvc2l0aW9uKHRva2VucywgaSk7XG4gICAgICAgICAgICByZXBsYWNlbWVudFRva2Vucy5wdXNoKC4uLnRva2Vucy50b2tlbnMuc2xpY2Uod2hlcmVBbUkuaW5kZXgsd2hlcmVBbUkuaW5kZXgrMikpXG4gICAgICAgICAgICAvL25vbWluYXRvclxuICAgICAgICAgICAgcmVzdD10b2tlbnMudG9rZW5zLnNsaWNlKHdoZXJlQW1JLnRyYW5zaXRpb24tMSx3aGVyZUFtSS5yaWdodC5icmVha0NoYXIpXG4gICAgICAgICAgICAvLyBkZW5vbWluYXRvclxuICAgICAgICAgICAgcmVwbGFjZW1lbnQgPSB0b2tlbnMudG9rZW5zLnNsaWNlKGkgKyAyLCB3aGVyZUFtSS50cmFuc2l0aW9uLTEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB3aGVyZUFtST1pK3Rva2Vucy50b2tlbnMuc2xpY2UoaSkuZmluZEluZGV4KHRva2VuID0+IC8oPXxmcmFjKS8udGVzdCh0b2tlbi52YWx1ZSkpXG4gICAgICAgICAgICB3aGVyZUFtST13aGVyZUFtSTxpP3Rva2Vucy50b2tlbnMubGVuZ3RoOndoZXJlQW1JO1xuICAgICAgICAgICAgcmVwbGFjZW1lbnQgPSB0b2tlbnMudG9rZW5zLnNsaWNlKGksd2hlcmVBbUkpO1xuICAgICAgICB9XG4gICAgICAgIHJlcGxhY2VtZW50VG9rZW5zLnB1c2goXG4gICAgICAgICAgICAuLi5kZW5vbWluYXRvcixcbiAgICAgICAgICAgIHtcInR5cGVcIjogXCJvcGVyYXRvclwiLCBcInZhbHVlXCI6IFwiKlwifSxcbiAgICAgICAgICAgIHtcInR5cGVcIjogXCJwYXJlblwiLCBcInZhbHVlXCI6IFwiKFwiLCBcImlkXCI6IDAsIFwiaW5kZXhcIjogMH0sXG4gICAgICAgICAgICAuLi5yZXBsYWNlbWVudCxcbiAgICAgICAgICAgIHtcInR5cGVcIjogXCJwYXJlblwiLCBcInZhbHVlXCI6IFwiKVwiLCBcImlkXCI6IDAsIFwiaW5kZXhcIjogMH0sXG4gICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICk7XG4gICAgICAgIGkgPSB0eXBlb2Ygd2hlcmVBbUkgPT09IFwib2JqZWN0XCIgPyB3aGVyZUFtSS5yaWdodC5icmVha0NoYXItMSA6IHdoZXJlQW1JLTE7XG4gICAgfVxuICAgIHRva2Vucy50b2tlbnM9cmVwbGFjZW1lbnRUb2tlbnM7XG4gICAgdG9rZW5zLklEcGFyZW50aGVzZXMoKTtcbn0iXX0=