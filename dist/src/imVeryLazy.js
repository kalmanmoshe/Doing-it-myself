import { Position } from "./mathEngine";
export function expandExpression(tokens, position) {
    if (position.checkFrac()) {
        goodByFraction(tokens, position);
        return;
    }
    let left = tokens.tokens.slice(position.left.breakChar, position.index).filter(item => /(number|variable|powerVariable)/.test(item.type));
    let right = tokens.tokens.slice(position.index, position.right.breakChar).filter(item => /(number|variable|powerVariable)/.test(item.type));
    const isLeft = position.left.multiStep === undefined;
    if (position.operator === "-" && isLeft) {
        left = [{ "type": "number", "value": -1, "index": 0 }];
    }
    let replacementCell = [];
    for (let i = 0; i < left.length; i++) {
        for (let j = 0; j < right.length; j++) {
            replacementCell.push(left[i]);
            replacementCell.push({ "type": "operator", "value": "*", "index": 0 });
            replacementCell.push(right[j]);
        }
    }
    const is = position.operator === "-" && isLeft;
    const start = is ? position.index : position.left.breakChar;
    const length = position.right.breakChar - (is ? position.index : position.left.breakChar);
    tokens.insertTokens(start, length + (isLeft ? 0 : 1), replacementCell);
    tokens.reIDparentheses();
}
export const curlyBracketsRegex = new RegExp("(frac|sqrt|\\^|\\/|binom)");
function goodByFraction(tokens, position) {
    let replacementTokens = [];
    let denominator = tokens.tokens.slice(position.transition, position.right.breakChar);
    for (let i = 0; i < tokens.tokens.length; i++) {
        // Skip tokens if we have already processed this section
        if (i >= position.index && i < position.right.breakChar) {
            replacementTokens.push(...tokens.tokens.slice(position.index + 1, position.transition));
            i = position.right.breakChar - 1;
            continue;
        }
        if (/(=)/.test(tokens.tokens[i].value)) {
            replacementTokens.push(tokens.tokens[i]);
            continue;
        }
        let replacement = tokens.tokens.slice(i, i + 1);
        let whereAmI = i;
        let rest = [];
        if (tokens.tokens[i].value === "frac") {
            whereAmI = new Position(tokens, i);
            replacementTokens.push(...tokens.tokens.slice(whereAmI.index, whereAmI.index + 2));
            rest = tokens.tokens.slice(whereAmI.transition - 1, whereAmI.right.breakChar);
            replacement = tokens.tokens.slice(i + 2, whereAmI.transition - 1);
        }
        else {
            whereAmI = i + tokens.tokens.slice(i).findIndex(token => /(=|frac)/.test(token.value));
            whereAmI = whereAmI < i ? tokens.tokens.length : whereAmI;
            replacement = tokens.tokens.slice(i, whereAmI);
        }
        replacementTokens.push(...denominator, { "type": "operator", "value": "*" }, { "type": "paren", "value": "(", "id": 0, "index": 0 }, ...replacement, { "type": "paren", "value": ")", "id": 0, "index": 0 }, ...rest);
        i = typeof whereAmI === "object" ? whereAmI.right.breakChar - 1 : whereAmI - 1;
    }
    tokens.tokens = replacementTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1WZXJ5TGF6eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbVZlcnlMYXp5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFeEMsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRO0lBQzdDLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFDO1FBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUFBLE9BQU87S0FBQztJQUNuRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUksTUFBTSxNQUFNLEdBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUcsU0FBUyxDQUFDO0lBQ2pELElBQUksUUFBUSxDQUFDLFFBQVEsS0FBRyxHQUFHLElBQUUsTUFBTSxFQUFDO1FBQ2hDLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7S0FFekQ7SUFDRCxJQUFJLGVBQWUsR0FB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RSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBQyxFQUNwRCxHQUFHLFdBQVcsRUFDZCxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsRUFDcEQsR0FBRyxJQUFJLENBQ1YsQ0FBQztRQUNGLENBQUMsR0FBRyxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQztLQUM5RTtJQUNELE1BQU0sQ0FBQyxNQUFNLEdBQUMsaUJBQWlCLENBQUM7QUFDcEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSBcIi4vbWF0aEVuZ2luZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kRXhwcmVzc2lvbih0b2tlbnMsIHBvc2l0aW9uKSB7XG4gICAgaWYgKHBvc2l0aW9uLmNoZWNrRnJhYygpKXtnb29kQnlGcmFjdGlvbih0b2tlbnMsIHBvc2l0aW9uKTtyZXR1cm47fVxuICAgIGxldCBsZWZ0ID0gdG9rZW5zLnRva2Vucy5zbGljZShwb3NpdGlvbi5sZWZ0LmJyZWFrQ2hhciwgcG9zaXRpb24uaW5kZXgpLmZpbHRlcihpdGVtID0+IC8obnVtYmVyfHZhcmlhYmxlfHBvd2VyVmFyaWFibGUpLy50ZXN0KGl0ZW0udHlwZSkpO1xuICAgIGxldCByaWdodCA9IHRva2Vucy50b2tlbnMuc2xpY2UocG9zaXRpb24uaW5kZXgsIHBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhcikuZmlsdGVyKGl0ZW0gPT4gLyhudW1iZXJ8dmFyaWFibGV8cG93ZXJWYXJpYWJsZSkvLnRlc3QoaXRlbS50eXBlKSk7XG4gICAgY29uc3QgaXNMZWZ0PXBvc2l0aW9uLmxlZnQubXVsdGlTdGVwPT09dW5kZWZpbmVkO1xuICAgIGlmIChwb3NpdGlvbi5vcGVyYXRvcj09PVwiLVwiJiZpc0xlZnQpe1xuICAgICAgICBsZWZ0ID0gW3sgXCJ0eXBlXCI6IFwibnVtYmVyXCIsIFwidmFsdWVcIjogLTEsIFwiaW5kZXhcIjogMCB9XVxuICAgICAgICBcbiAgICB9XG4gICAgbGV0IHJlcGxhY2VtZW50Q2VsbCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJpZ2h0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICByZXBsYWNlbWVudENlbGwucHVzaChsZWZ0W2ldKTtcbiAgICAgICAgICAgIHJlcGxhY2VtZW50Q2VsbC5wdXNoKHsgXCJ0eXBlXCI6IFwib3BlcmF0b3JcIiwgXCJ2YWx1ZVwiOiBcIipcIiwgXCJpbmRleFwiOiAwIH0pO1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRDZWxsLnB1c2gocmlnaHRbal0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXM9cG9zaXRpb24ub3BlcmF0b3I9PT1cIi1cIiYmaXNMZWZ0O1xuICAgIGNvbnN0IHN0YXJ0PWlzP3Bvc2l0aW9uLmluZGV4OnBvc2l0aW9uLmxlZnQuYnJlYWtDaGFyXG4gICAgY29uc3QgbGVuZ3RoPXBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhci0oaXM/cG9zaXRpb24uaW5kZXg6cG9zaXRpb24ubGVmdC5icmVha0NoYXIpXG4gICAgdG9rZW5zLmluc2VydFRva2VucyhzdGFydCwgbGVuZ3RoKyhpc0xlZnQ/MDoxKSwgcmVwbGFjZW1lbnRDZWxsKTtcbiAgICB0b2tlbnMucmVJRHBhcmVudGhlc2VzKCk7XG59XG5cbmV4cG9ydCBjb25zdCBjdXJseUJyYWNrZXRzUmVnZXggPSBuZXcgUmVnRXhwKFwiKGZyYWN8c3FydHxcXFxcXnxcXFxcL3xiaW5vbSlcIilcblxuXG5cbmZ1bmN0aW9uIGdvb2RCeUZyYWN0aW9uKHRva2VucywgcG9zaXRpb24pIHtcbiAgICBsZXQgcmVwbGFjZW1lbnRUb2tlbnMgPSBbXTtcbiAgICBsZXQgZGVub21pbmF0b3IgPSB0b2tlbnMudG9rZW5zLnNsaWNlKHBvc2l0aW9uLnRyYW5zaXRpb24sIHBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhcik7XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMudG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgLy8gU2tpcCB0b2tlbnMgaWYgd2UgaGF2ZSBhbHJlYWR5IHByb2Nlc3NlZCB0aGlzIHNlY3Rpb25cbiAgICAgICAgaWYgKGkgPj0gcG9zaXRpb24uaW5kZXggJiYgaSA8IHBvc2l0aW9uLnJpZ2h0LmJyZWFrQ2hhcikge1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRUb2tlbnMucHVzaCguLi50b2tlbnMudG9rZW5zLnNsaWNlKHBvc2l0aW9uLmluZGV4KzEscG9zaXRpb24udHJhbnNpdGlvbikpXG4gICAgICAgICAgICBpID0gcG9zaXRpb24ucmlnaHQuYnJlYWtDaGFyLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoLyg9KS8udGVzdCh0b2tlbnMudG9rZW5zW2ldLnZhbHVlKSkge1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRUb2tlbnMucHVzaCh0b2tlbnMudG9rZW5zW2ldKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgcmVwbGFjZW1lbnQgPSB0b2tlbnMudG9rZW5zLnNsaWNlKGksaSsxKVxuICAgICAgICBsZXQgd2hlcmVBbUkgPSBpO1xuICAgICAgICBsZXQgcmVzdD1bXTtcbiAgICAgICAgaWYgKHRva2Vucy50b2tlbnNbaV0udmFsdWUgPT09IFwiZnJhY1wiKSB7XG4gICAgICAgICAgICB3aGVyZUFtSSA9IG5ldyBQb3NpdGlvbih0b2tlbnMsIGkpO1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRUb2tlbnMucHVzaCguLi50b2tlbnMudG9rZW5zLnNsaWNlKHdoZXJlQW1JLmluZGV4LHdoZXJlQW1JLmluZGV4KzIpKVxuICAgICAgICAgICAgcmVzdD10b2tlbnMudG9rZW5zLnNsaWNlKHdoZXJlQW1JLnRyYW5zaXRpb24tMSx3aGVyZUFtSS5yaWdodC5icmVha0NoYXIpXG4gICAgICAgICAgICByZXBsYWNlbWVudCA9IHRva2Vucy50b2tlbnMuc2xpY2UoaSArIDIsIHdoZXJlQW1JLnRyYW5zaXRpb24tMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHdoZXJlQW1JPWkrdG9rZW5zLnRva2Vucy5zbGljZShpKS5maW5kSW5kZXgodG9rZW4gPT4gLyg9fGZyYWMpLy50ZXN0KHRva2VuLnZhbHVlKSlcbiAgICAgICAgICAgIHdoZXJlQW1JPXdoZXJlQW1JPGk/dG9rZW5zLnRva2Vucy5sZW5ndGg6d2hlcmVBbUk7XG4gICAgICAgICAgICByZXBsYWNlbWVudCA9IHRva2Vucy50b2tlbnMuc2xpY2UoaSx3aGVyZUFtSSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwbGFjZW1lbnRUb2tlbnMucHVzaChcbiAgICAgICAgICAgIC4uLmRlbm9taW5hdG9yLFxuICAgICAgICAgICAge1widHlwZVwiOiBcIm9wZXJhdG9yXCIsIFwidmFsdWVcIjogXCIqXCJ9LFxuICAgICAgICAgICAge1widHlwZVwiOiBcInBhcmVuXCIsIFwidmFsdWVcIjogXCIoXCIsIFwiaWRcIjogMCwgXCJpbmRleFwiOiAwfSxcbiAgICAgICAgICAgIC4uLnJlcGxhY2VtZW50LFxuICAgICAgICAgICAge1widHlwZVwiOiBcInBhcmVuXCIsIFwidmFsdWVcIjogXCIpXCIsIFwiaWRcIjogMCwgXCJpbmRleFwiOiAwfSxcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgKTtcbiAgICAgICAgaSA9IHR5cGVvZiB3aGVyZUFtSSA9PT0gXCJvYmplY3RcIiA/IHdoZXJlQW1JLnJpZ2h0LmJyZWFrQ2hhci0xIDogd2hlcmVBbUktMTtcbiAgICB9XG4gICAgdG9rZW5zLnRva2Vucz1yZXBsYWNlbWVudFRva2Vucztcbn0iXX0=